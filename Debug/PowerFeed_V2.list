
PowerFeed_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08008770  08008770  00018770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089ec  080089ec  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080089ec  080089ec  000189ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089f4  080089f4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089f4  080089f4  000189f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089f8  080089f8  000189f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080089fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000764  20000080  08008a7c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  08008a7c  000207e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100f3  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025fe  00000000  00000000  000301a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  000327a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc0  00000000  00000000  00033868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018eac  00000000  00000000  00034828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f8c  00000000  00000000  0004d6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c218  00000000  00000000  00060660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc878  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c68  00000000  00000000  000fc8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008758 	.word	0x08008758

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08008758 	.word	0x08008758

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__gedf2>:
 800085c:	f04f 3cff 	mov.w	ip, #4294967295
 8000860:	e006      	b.n	8000870 <__cmpdf2+0x4>
 8000862:	bf00      	nop

08000864 <__ledf2>:
 8000864:	f04f 0c01 	mov.w	ip, #1
 8000868:	e002      	b.n	8000870 <__cmpdf2+0x4>
 800086a:	bf00      	nop

0800086c <__cmpdf2>:
 800086c:	f04f 0c01 	mov.w	ip, #1
 8000870:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000874:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000878:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800087c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000880:	bf18      	it	ne
 8000882:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000886:	d01b      	beq.n	80008c0 <__cmpdf2+0x54>
 8000888:	b001      	add	sp, #4
 800088a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800088e:	bf0c      	ite	eq
 8000890:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000894:	ea91 0f03 	teqne	r1, r3
 8000898:	bf02      	ittt	eq
 800089a:	ea90 0f02 	teqeq	r0, r2
 800089e:	2000      	moveq	r0, #0
 80008a0:	4770      	bxeq	lr
 80008a2:	f110 0f00 	cmn.w	r0, #0
 80008a6:	ea91 0f03 	teq	r1, r3
 80008aa:	bf58      	it	pl
 80008ac:	4299      	cmppl	r1, r3
 80008ae:	bf08      	it	eq
 80008b0:	4290      	cmpeq	r0, r2
 80008b2:	bf2c      	ite	cs
 80008b4:	17d8      	asrcs	r0, r3, #31
 80008b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ba:	f040 0001 	orr.w	r0, r0, #1
 80008be:	4770      	bx	lr
 80008c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d102      	bne.n	80008d0 <__cmpdf2+0x64>
 80008ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ce:	d107      	bne.n	80008e0 <__cmpdf2+0x74>
 80008d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d1d6      	bne.n	8000888 <__cmpdf2+0x1c>
 80008da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008de:	d0d3      	beq.n	8000888 <__cmpdf2+0x1c>
 80008e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdrcmple>:
 80008e8:	4684      	mov	ip, r0
 80008ea:	4610      	mov	r0, r2
 80008ec:	4662      	mov	r2, ip
 80008ee:	468c      	mov	ip, r1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4663      	mov	r3, ip
 80008f4:	e000      	b.n	80008f8 <__aeabi_cdcmpeq>
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdcmpeq>:
 80008f8:	b501      	push	{r0, lr}
 80008fa:	f7ff ffb7 	bl	800086c <__cmpdf2>
 80008fe:	2800      	cmp	r0, #0
 8000900:	bf48      	it	mi
 8000902:	f110 0f00 	cmnmi.w	r0, #0
 8000906:	bd01      	pop	{r0, pc}

08000908 <__aeabi_dcmpeq>:
 8000908:	f84d ed08 	str.w	lr, [sp, #-8]!
 800090c:	f7ff fff4 	bl	80008f8 <__aeabi_cdcmpeq>
 8000910:	bf0c      	ite	eq
 8000912:	2001      	moveq	r0, #1
 8000914:	2000      	movne	r0, #0
 8000916:	f85d fb08 	ldr.w	pc, [sp], #8
 800091a:	bf00      	nop

0800091c <__aeabi_dcmplt>:
 800091c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000920:	f7ff ffea 	bl	80008f8 <__aeabi_cdcmpeq>
 8000924:	bf34      	ite	cc
 8000926:	2001      	movcc	r0, #1
 8000928:	2000      	movcs	r0, #0
 800092a:	f85d fb08 	ldr.w	pc, [sp], #8
 800092e:	bf00      	nop

08000930 <__aeabi_dcmple>:
 8000930:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000934:	f7ff ffe0 	bl	80008f8 <__aeabi_cdcmpeq>
 8000938:	bf94      	ite	ls
 800093a:	2001      	movls	r0, #1
 800093c:	2000      	movhi	r0, #0
 800093e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000942:	bf00      	nop

08000944 <__aeabi_dcmpge>:
 8000944:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000948:	f7ff ffce 	bl	80008e8 <__aeabi_cdrcmple>
 800094c:	bf94      	ite	ls
 800094e:	2001      	movls	r0, #1
 8000950:	2000      	movhi	r0, #0
 8000952:	f85d fb08 	ldr.w	pc, [sp], #8
 8000956:	bf00      	nop

08000958 <__aeabi_dcmpgt>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff ffc4 	bl	80008e8 <__aeabi_cdrcmple>
 8000960:	bf34      	ite	cc
 8000962:	2001      	movcc	r0, #1
 8000964:	2000      	movcs	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b974 	b.w	8000d4c <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	468e      	mov	lr, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14d      	bne.n	8000b26 <__udivmoddi4+0xaa>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4694      	mov	ip, r2
 8000a8e:	d969      	bls.n	8000b64 <__udivmoddi4+0xe8>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b152      	cbz	r2, 8000aac <__udivmoddi4+0x30>
 8000a96:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9a:	f1c2 0120 	rsb	r1, r2, #32
 8000a9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000aa2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aaa:	4094      	lsls	r4, r2
 8000aac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab0:	0c21      	lsrs	r1, r4, #16
 8000ab2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ab6:	fa1f f78c 	uxth.w	r7, ip
 8000aba:	fb08 e316 	mls	r3, r8, r6, lr
 8000abe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ac2:	fb06 f107 	mul.w	r1, r6, r7
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x64>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ad2:	f080 811f 	bcs.w	8000d14 <__udivmoddi4+0x298>
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	f240 811c 	bls.w	8000d14 <__udivmoddi4+0x298>
 8000adc:	3e02      	subs	r6, #2
 8000ade:	4463      	add	r3, ip
 8000ae0:	1a5b      	subs	r3, r3, r1
 8000ae2:	b2a4      	uxth	r4, r4
 8000ae4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af0:	fb00 f707 	mul.w	r7, r0, r7
 8000af4:	42a7      	cmp	r7, r4
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x92>
 8000af8:	eb1c 0404 	adds.w	r4, ip, r4
 8000afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b00:	f080 810a 	bcs.w	8000d18 <__udivmoddi4+0x29c>
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	f240 8107 	bls.w	8000d18 <__udivmoddi4+0x29c>
 8000b0a:	4464      	add	r4, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b12:	1be4      	subs	r4, r4, r7
 8000b14:	2600      	movs	r6, #0
 8000b16:	b11d      	cbz	r5, 8000b20 <__udivmoddi4+0xa4>
 8000b18:	40d4      	lsrs	r4, r2
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0xc2>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	f000 80ef 	beq.w	8000d0e <__udivmoddi4+0x292>
 8000b30:	2600      	movs	r6, #0
 8000b32:	e9c5 0100 	strd	r0, r1, [r5]
 8000b36:	4630      	mov	r0, r6
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	fab3 f683 	clz	r6, r3
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d14a      	bne.n	8000bdc <__udivmoddi4+0x160>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xd4>
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	f200 80f9 	bhi.w	8000d42 <__udivmoddi4+0x2c6>
 8000b50:	1a84      	subs	r4, r0, r2
 8000b52:	eb61 0303 	sbc.w	r3, r1, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	469e      	mov	lr, r3
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d0e0      	beq.n	8000b20 <__udivmoddi4+0xa4>
 8000b5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b62:	e7dd      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000b64:	b902      	cbnz	r2, 8000b68 <__udivmoddi4+0xec>
 8000b66:	deff      	udf	#255	; 0xff
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	f040 8092 	bne.w	8000c96 <__udivmoddi4+0x21a>
 8000b72:	eba1 010c 	sub.w	r1, r1, ip
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2601      	movs	r6, #1
 8000b80:	0c20      	lsrs	r0, r4, #16
 8000b82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b86:	fb07 1113 	mls	r1, r7, r3, r1
 8000b8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b8e:	fb0e f003 	mul.w	r0, lr, r3
 8000b92:	4288      	cmp	r0, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x12c>
 8000b96:	eb1c 0101 	adds.w	r1, ip, r1
 8000b9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x12a>
 8000ba0:	4288      	cmp	r0, r1
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2c0>
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	1a09      	subs	r1, r1, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x156>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x154>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2ca>
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bda:	e79c      	b.n	8000b16 <__udivmoddi4+0x9a>
 8000bdc:	f1c6 0720 	rsb	r7, r6, #32
 8000be0:	40b3      	lsls	r3, r6
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa20 f407 	lsr.w	r4, r0, r7
 8000bee:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf2:	431c      	orrs	r4, r3
 8000bf4:	40f9      	lsrs	r1, r7
 8000bf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000bfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c02:	0c20      	lsrs	r0, r4, #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fb09 1118 	mls	r1, r9, r8, r1
 8000c0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c10:	fb08 f00e 	mul.w	r0, r8, lr
 8000c14:	4288      	cmp	r0, r1
 8000c16:	fa02 f206 	lsl.w	r2, r2, r6
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b8>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2bc>
 8000c28:	4288      	cmp	r0, r1
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2bc>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4461      	add	r1, ip
 8000c34:	1a09      	subs	r1, r1, r0
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c48:	458e      	cmp	lr, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1e2>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2b4>
 8000c56:	458e      	cmp	lr, r1
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2b4>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c62:	fba0 9402 	umull	r9, r4, r0, r2
 8000c66:	eba1 010e 	sub.w	r1, r1, lr
 8000c6a:	42a1      	cmp	r1, r4
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46a6      	mov	lr, r4
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x2a4>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x2a0>
 8000c74:	b15d      	cbz	r5, 8000c8e <__udivmoddi4+0x212>
 8000c76:	ebb3 0208 	subs.w	r2, r3, r8
 8000c7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c82:	fa22 f306 	lsr.w	r3, r2, r6
 8000c86:	40f1      	lsrs	r1, r6
 8000c88:	431f      	orrs	r7, r3
 8000c8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c8e:	2600      	movs	r6, #0
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	f1c2 0320 	rsb	r3, r2, #32
 8000c9a:	40d8      	lsrs	r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	4301      	orrs	r1, r0
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb8:	0c0b      	lsrs	r3, r1, #16
 8000cba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x260>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd4:	429e      	cmp	r6, r3
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	b289      	uxth	r1, r1
 8000ce0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ce4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cec:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x28a>
 8000cf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000d02:	3e02      	subs	r6, #2
 8000d04:	4461      	add	r1, ip
 8000d06:	1ac9      	subs	r1, r1, r3
 8000d08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0x104>
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e705      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e3      	b.n	8000ae0 <__udivmoddi4+0x64>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6f8      	b.n	8000b0e <__udivmoddi4+0x92>
 8000d1c:	454b      	cmp	r3, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f8>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f8>
 8000d2c:	4646      	mov	r6, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x28a>
 8000d30:	4620      	mov	r0, r4
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1e2>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x260>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b8>
 8000d3c:	3b02      	subs	r3, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x12c>
 8000d42:	4630      	mov	r0, r6
 8000d44:	e709      	b.n	8000b5a <__udivmoddi4+0xde>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x156>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <LiquidCrystal_I2C>:
}
*/



void LiquidCrystal_I2C(uint8_t lcd_addr, uint8_t lcd_cols, uint8_t lcd_rows) {
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	71bb      	strb	r3, [r7, #6]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	717b      	strb	r3, [r7, #5]
	_addr = lcd_addr;
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <LiquidCrystal_I2C+0x3c>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	7013      	strb	r3, [r2, #0]
	_cols = lcd_cols;
 8000d68:	4a09      	ldr	r2, [pc, #36]	; (8000d90 <LiquidCrystal_I2C+0x40>)
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	7013      	strb	r3, [r2, #0]
	_rows = lcd_rows;
 8000d6e:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <LiquidCrystal_I2C+0x44>)
 8000d70:	797b      	ldrb	r3, [r7, #5]
 8000d72:	7013      	strb	r3, [r2, #0]
	_charsize = LCD_5x8DOTS;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <LiquidCrystal_I2C+0x48>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
	_backlightval = LCD_BACKLIGHT;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <LiquidCrystal_I2C+0x4c>)
 8000d7c:	2208      	movs	r2, #8
 8000d7e:	701a      	strb	r2, [r3, #0]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	2000009c 	.word	0x2000009c
 8000d90:	200000a0 	.word	0x200000a0
 8000d94:	200000a1 	.word	0x200000a1
 8000d98:	200000a2 	.word	0x200000a2
 8000d9c:	200000a3 	.word	0x200000a3

08000da0 <lcdBegin>:

void lcdBegin(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000da4:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <lcdBegin+0xd0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]

	if (_rows > 1) {
 8000daa:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <lcdBegin+0xd4>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d906      	bls.n	8000dc0 <lcdBegin+0x20>
		_displayfunction |= LCD_2LINE;
 8000db2:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <lcdBegin+0xd0>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	f043 0308 	orr.w	r3, r3, #8
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <lcdBegin+0xd0>)
 8000dbe:	701a      	strb	r2, [r3, #0]
	}

	setRowOffsets(0x00, 0x40, 0x00 + _cols, 0x40 + _cols);
 8000dc0:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <lcdBegin+0xd8>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <lcdBegin+0xd8>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	3340      	adds	r3, #64	; 0x40
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f000 f900 	bl	8000fd4 <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((_charsize != 0) && (_rows == 1)) {
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <lcdBegin+0xdc>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d00a      	beq.n	8000df2 <lcdBegin+0x52>
 8000ddc:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <lcdBegin+0xd4>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d106      	bne.n	8000df2 <lcdBegin+0x52>
		_displayfunction |= LCD_5x10DOTS;
 8000de4:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <lcdBegin+0xd0>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <lcdBegin+0xd0>)
 8000df0:	701a      	strb	r2, [r3, #0]
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	HAL_Delay(50);
 8000df2:	2032      	movs	r0, #50	; 0x32
 8000df4:	f003 fae6 	bl	80043c4 <HAL_Delay>

	// Now we pull both RS and R/W low to begin commands
	write8bits(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <lcdBegin+0xe0>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f959 	bl	80010b4 <write8bits>
	HAL_Delay(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f003 fade 	bl	80043c4 <HAL_Delay>
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	write4bits(0x03 << 4);
 8000e08:	2030      	movs	r0, #48	; 0x30
 8000e0a:	f000 f941 	bl	8001090 <write4bits>
	HAL_Delay(5); // wait min 4.1ms
 8000e0e:	2005      	movs	r0, #5
 8000e10:	f003 fad8 	bl	80043c4 <HAL_Delay>

	// second try
	write4bits(0x03 << 4);
 8000e14:	2030      	movs	r0, #48	; 0x30
 8000e16:	f000 f93b 	bl	8001090 <write4bits>
	HAL_Delay(5); // wait min 4.1ms
 8000e1a:	2005      	movs	r0, #5
 8000e1c:	f003 fad2 	bl	80043c4 <HAL_Delay>

	// third go!
	write4bits(0x03 << 4);
 8000e20:	2030      	movs	r0, #48	; 0x30
 8000e22:	f000 f935 	bl	8001090 <write4bits>
	HAL_Delay(5);
 8000e26:	2005      	movs	r0, #5
 8000e28:	f003 facc 	bl	80043c4 <HAL_Delay>

	// finally, set to 4-bit interface
	write4bits(0x02 << 4);
 8000e2c:	2020      	movs	r0, #32
 8000e2e:	f000 f92f 	bl	8001090 <write4bits>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <lcdBegin+0xd0>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	f043 0320 	orr.w	r3, r3, #32
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f8bb 	bl	8000fb8 <command>

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <lcdBegin+0xe4>)
 8000e44:	2204      	movs	r2, #4
 8000e46:	701a      	strb	r2, [r3, #0]
	lcdDisplay();
 8000e48:	f000 f834 	bl	8000eb4 <lcdDisplay>

	// clear it off
	lcdClear();
 8000e4c:	f000 f81e 	bl	8000e8c <lcdClear>

	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <lcdBegin+0xe8>)
 8000e52:	2202      	movs	r2, #2
 8000e54:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <lcdBegin+0xe8>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 f8a9 	bl	8000fb8 <command>

	lcdHome();
 8000e66:	f000 f81b 	bl	8000ea0 <lcdHome>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000009d 	.word	0x2000009d
 8000e74:	200000a1 	.word	0x200000a1
 8000e78:	200000a0 	.word	0x200000a0
 8000e7c:	200000a2 	.word	0x200000a2
 8000e80:	200000a3 	.word	0x200000a3
 8000e84:	2000009e 	.word	0x2000009e
 8000e88:	2000009f 	.word	0x2000009f

08000e8c <lcdClear>:

/********** high level commands, for the user! */
void lcdClear(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 8000e90:	2001      	movs	r0, #1
 8000e92:	f000 f891 	bl	8000fb8 <command>
	HAL_Delay(2);  // this command takes a long time!
 8000e96:	2002      	movs	r0, #2
 8000e98:	f003 fa94 	bl	80043c4 <HAL_Delay>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <lcdHome>:

void lcdHome(void) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	command(LCD_RETURNHOME);  // set cursor position to zero
 8000ea4:	2002      	movs	r0, #2
 8000ea6:	f000 f887 	bl	8000fb8 <command>
	HAL_Delay(2);  // this command takes a long time!
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f003 fa8a 	bl	80043c4 <HAL_Delay>
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <lcdDisplay>:
// Turn the display on/off (quickly)
void lcdNoDisplay(void) {
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void lcdDisplay(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <lcdDisplay+0x28>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <lcdDisplay+0x28>)
 8000ec4:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <lcdDisplay+0x28>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	f043 0308 	orr.w	r3, r3, #8
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f871 	bl	8000fb8 <command>
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000009e 	.word	0x2000009e

08000ee0 <lcdSetCursor>:
	for (int i = 0; i < 8; i++) {
		lcdWrite(charmap[i]);
	}
}

void lcdSetCursor(uint8_t col, uint8_t row) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460a      	mov	r2, r1
 8000eea:	71fb      	strb	r3, [r7, #7]
 8000eec:	4613      	mov	r3, r2
 8000eee:	71bb      	strb	r3, [r7, #6]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 8000ef4:	79bb      	ldrb	r3, [r7, #6]
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d803      	bhi.n	8000f04 <lcdSetCursor+0x24>
		row = max_lines - 1;    // we count rows starting w/0
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	3b01      	subs	r3, #1
 8000f02:	71bb      	strb	r3, [r7, #6]
	}
	if ( row >= _rows ) {
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <lcdSetCursor+0x5c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	79ba      	ldrb	r2, [r7, #6]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d303      	bcc.n	8000f16 <lcdSetCursor+0x36>
		row = _rows - 1;   		// we count rows starting w/0
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <lcdSetCursor+0x5c>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	71bb      	strb	r3, [r7, #6]
	}

	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <lcdSetCursor+0x60>)
 8000f1a:	5cd2      	ldrb	r2, [r2, r3]
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f843 	bl	8000fb8 <command>
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200000a1 	.word	0x200000a1
 8000f40:	200000a4 	.word	0x200000a4

08000f44 <lcdPrint>:

// This will print character string to the LCD
size_t lcdPrint(const char str[]) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	if (str == NULL) return 0;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <lcdPrint+0x12>
 8000f52:	2300      	movs	r3, #0
 8000f54:	e01d      	b.n	8000f92 <lcdPrint+0x4e>

	const uint8_t *buffer = (const uint8_t *)str;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	617b      	str	r3, [r7, #20]
	size_t size = strlen(str);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff f940 	bl	80001e0 <strlen>
 8000f60:	6138      	str	r0, [r7, #16]
	size_t n = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]

	while (size--) {
 8000f66:	e00c      	b.n	8000f82 <lcdPrint+0x3e>
	if (lcdWrite(*buffer++)) n++;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	617a      	str	r2, [r7, #20]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 f812 	bl	8000f9a <lcdWrite>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d008      	beq.n	8000f8e <lcdPrint+0x4a>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	60fb      	str	r3, [r7, #12]
	while (size--) {
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1e5a      	subs	r2, r3, #1
 8000f86:	613a      	str	r2, [r7, #16]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1ed      	bne.n	8000f68 <lcdPrint+0x24>
 8000f8c:	e000      	b.n	8000f90 <lcdPrint+0x4c>
	else break;
 8000f8e:	bf00      	nop
	}
	return n;
 8000f90:	68fb      	ldr	r3, [r7, #12]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <lcdWrite>:

/*********** mid level commands, for sending data/cmds */
size_t lcdWrite(uint8_t value) {
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	71fb      	strb	r3, [r7, #7]
	send(value, Rs);
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 f850 	bl	800104e <send>
	return 1;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <command>:

void command(uint8_t value) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	send(value, 0);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f841 	bl	800104e <send>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <setRowOffsets>:

/************ low level data pushing commands **********/
void setRowOffsets(int row0, int row1, int row2, int row3) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <setRowOffsets+0x3c>)
 8000fe8:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <setRowOffsets+0x3c>)
 8000ff0:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <setRowOffsets+0x3c>)
 8000ff8:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <setRowOffsets+0x3c>)
 8001000:	70da      	strb	r2, [r3, #3]
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200000a4 	.word	0x200000a4

08001014 <pulseEnable>:

void pulseEnable(uint8_t _data) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	write8bits(_data | En);		// En high
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f844 	bl	80010b4 <write8bits>
	HAL_Delay(1);
 800102c:	2001      	movs	r0, #1
 800102e:	f003 f9c9 	bl	80043c4 <HAL_Delay>
	//DWT_Delay_us(5);		// enable pulse must be >450ns //To Be Checked

	write8bits(_data & ~En);	// En low
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f023 0304 	bic.w	r3, r3, #4
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f83a 	bl	80010b4 <write8bits>
	HAL_Delay(1);
 8001040:	2001      	movs	r0, #1
 8001042:	f003 f9bf 	bl	80043c4 <HAL_Delay>
	//DWT_Delay_us(1);		// commands need > 37us to settle //To Be Checked
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <send>:

// write either command or data
void send(uint8_t value, uint8_t mode) {
 800104e:	b580      	push	{r7, lr}
 8001050:	b084      	sub	sp, #16
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	460a      	mov	r2, r1
 8001058:	71fb      	strb	r3, [r7, #7]
 800105a:	4613      	mov	r3, r2
 800105c:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib = value & 0xf0;
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f023 030f 	bic.w	r3, r3, #15
 8001064:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (value << 4) & 0xf0;
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	73bb      	strb	r3, [r7, #14]
	write4bits((highnib) | mode);
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	4313      	orrs	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f000 f80b 	bl	8001090 <write4bits>
	write4bits((lownib) | mode);
 800107a:	7bba      	ldrb	r2, [r7, #14]
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	4313      	orrs	r3, r2
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f804 	bl	8001090 <write4bits>
}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <write4bits>:

void write4bits(uint8_t value) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	write8bits(value);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f809 	bl	80010b4 <write8bits>
	pulseEnable(value);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ffb5 	bl	8001014 <pulseEnable>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <write8bits>:

void write8bits(uint8_t _data){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	uint8_t data_t[1];
	data_t[0] = _data | _backlightval;
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <write8bits+0x34>)
 80010c0:	781a      	ldrb	r2, [r3, #0]
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit (&hi2c1, _addr, (uint8_t *) data_t, 1, 100);
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <write8bits+0x38>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b299      	uxth	r1, r3
 80010d0:	f107 020c 	add.w	r2, r7, #12
 80010d4:	2364      	movs	r3, #100	; 0x64
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <write8bits+0x3c>)
 80010dc:	f004 faec 	bl	80056b8 <HAL_I2C_Master_Transmit>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200000a3 	.word	0x200000a3
 80010ec:	2000009c 	.word	0x2000009c
 80010f0:	200004f0 	.word	0x200004f0

080010f4 <ee_init>:
uint8_t ee_ram[_EE_USE_RAM_BYTE];
#endif

//##########################################################################################################
bool ee_init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  return ee_read(0, _EE_USE_RAM_BYTE, NULL);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 f840 	bl	8001184 <ee_read>
 8001104:	4603      	mov	r3, r0
#else
  return true;
#endif
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <ee_format>:
//##########################################################################################################
bool ee_format(bool keepRamData)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  uint32_t error;
  HAL_FLASH_Unlock();
 8001116:	f003 fd41 	bl	8004b9c <HAL_FLASH_Unlock>
#if _EE_PAGE_OR_SECTOR == PAGE
	flashErase.NbPages = 1;
  flashErase.PageAddress = _EE_ADDR_INUSE;
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
#elif _EE_PAGE_OR_SECTOR == SECTOR
  flashErase.NbSectors = 1;
 800111a:	2301      	movs	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
  //flashErase.Sector =  _EE_ADDR_INUSE;
  flashErase.Sector =  _EE_USE_FLASH_PAGE_OR_SECTOR;
 800111e:	2305      	movs	r3, #5
 8001120:	613b      	str	r3, [r7, #16]
  flashErase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
  flashErase.NbPages = 1;
  flashErase.Page = _EE_USE_FLASH_PAGE_OR_SECTOR;
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
#endif
#ifdef _EE_FLASH_BANK
  flashErase.Banks = _EE_FLASH_BANK;
 8001126:	2301      	movs	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
#endif
#ifdef _EE_VOLTAGE_RANGE
  flashErase.VoltageRange = _EE_VOLTAGE_RANGE;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
#endif
  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 800112e:	f107 021c 	add.w	r2, r7, #28
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f003 fea1 	bl	8004e80 <HAL_FLASHEx_Erase>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d115      	bne.n	8001170 <ee_format+0x64>
  {
    HAL_FLASH_Lock();
 8001144:	f003 fd4c 	bl	8004be0 <HAL_FLASH_Lock>
    if (error != 0xFFFFFFFF)
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114e:	d001      	beq.n	8001154 <ee_format+0x48>
      return false;
 8001150:	2300      	movs	r3, #0
 8001152:	e010      	b.n	8001176 <ee_format+0x6a>
    else
    {
#if (_EE_USE_RAM_BYTE > 0)
      if (keepRamData == false)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f083 0301 	eor.w	r3, r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <ee_format+0x60>
        memset(ee_ram, 0xFF, _EE_USE_RAM_BYTE);
 8001160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001164:	21ff      	movs	r1, #255	; 0xff
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <ee_format+0x74>)
 8001168:	f006 fe8e 	bl	8007e88 <memset>
#endif
      return true;
 800116c:	2301      	movs	r3, #1
 800116e:	e002      	b.n	8001176 <ee_format+0x6a>
    }
  }
  HAL_FLASH_Lock();
 8001170:	f003 fd36 	bl	8004be0 <HAL_FLASH_Lock>
  return false;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3720      	adds	r7, #32
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200000a8 	.word	0x200000a8

08001184 <ee_read>:
//##########################################################################################################
bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	4413      	add	r3, r2
 8001196:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800119a:	d901      	bls.n	80011a0 <ee_read+0x1c>
    return false;
 800119c:	2300      	movs	r3, #0
 800119e:	e02b      	b.n	80011f8 <ee_read+0x74>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	e021      	b.n	80011ea <ee_read+0x66>
  {
    if (data != NULL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00b      	beq.n	80011c4 <ee_read+0x40>
    {
      *data = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80011b2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	701a      	strb	r2, [r3, #0]
      data++;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3301      	adds	r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
    }
#if (_EE_USE_RAM_BYTE > 0)
    if (i < _EE_USE_RAM_BYTE)
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ca:	d20b      	bcs.n	80011e4 <ee_read+0x60>
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80011d2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b2d9      	uxtb	r1, r3
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <ee_read+0x80>)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	4413      	add	r3, r2
 80011e0:	460a      	mov	r2, r1
 80011e2:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	3301      	adds	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3d7      	bcc.n	80011a6 <ee_read+0x22>
#endif
  }
  return true;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	200000a8 	.word	0x200000a8

08001208 <ee_write>:
//##########################################################################################################
bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 8001208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800120c:	b0a6      	sub	sp, #152	; 0x98
 800120e:	af00      	add	r7, sp, #0
 8001210:	67f8      	str	r0, [r7, #124]	; 0x7c
 8001212:	67b9      	str	r1, [r7, #120]	; 0x78
 8001214:	677a      	str	r2, [r7, #116]	; 0x74
  if ((startVirtualAddress + len) > _EE_SIZE)
 8001216:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001218:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800121a:	4413      	add	r3, r2
 800121c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001220:	d901      	bls.n	8001226 <ee_write+0x1e>
    return false;
 8001222:	2300      	movs	r3, #0
 8001224:	e14f      	b.n	80014c6 <ee_write+0x2be>
  if (data == NULL)
 8001226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <ee_write+0x28>
    return false;
 800122c:	2300      	movs	r3, #0
 800122e:	e14a      	b.n	80014c6 <ee_write+0x2be>
  HAL_FLASH_Unlock();
 8001230:	f003 fcb4 	bl	8004b9c <HAL_FLASH_Unlock>
#ifdef FLASH_TYPEPROGRAM_BYTE
  for (uint32_t i = 0; i < len ; i++)
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800123a:	e021      	b.n	8001280 <ee_write+0x78>
  {		
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i])) != HAL_OK)
 800123c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001240:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001242:	4413      	add	r3, r2
 8001244:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8001248:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 800124c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800124e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001252:	4413      	add	r3, r2
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2200      	movs	r2, #0
 800125a:	461c      	mov	r4, r3
 800125c:	4615      	mov	r5, r2
 800125e:	4622      	mov	r2, r4
 8001260:	462b      	mov	r3, r5
 8001262:	2000      	movs	r0, #0
 8001264:	f003 fc46 	bl	8004af4 <HAL_FLASH_Program>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <ee_write+0x6e>
    {
      HAL_FLASH_Lock();
 800126e:	f003 fcb7 	bl	8004be0 <HAL_FLASH_Lock>
      return true;
 8001272:	2301      	movs	r3, #1
 8001274:	e127      	b.n	80014c6 <ee_write+0x2be>
  for (uint32_t i = 0; i < len ; i++)
 8001276:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800127a:	3301      	adds	r3, #1
 800127c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001280:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001286:	429a      	cmp	r2, r3
 8001288:	d3d8      	bcc.n	800123c <ee_write+0x34>
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_HALFWORD
  for (uint32_t i = 0; i < len ; i+=2)
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001290:	e029      	b.n	80012e6 <ee_write+0xde>
  {		
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i] | (data[i+1] << 8))) != HAL_OK)
 8001292:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001296:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001298:	4413      	add	r3, r2
 800129a:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800129e:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 80012a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80012a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012a8:	4413      	add	r3, r2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012b6:	4413      	add	r3, r2
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	4303      	orrs	r3, r0
 80012be:	17da      	asrs	r2, r3, #31
 80012c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80012c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80012c4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80012c8:	2001      	movs	r0, #1
 80012ca:	f003 fc13 	bl	8004af4 <HAL_FLASH_Program>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <ee_write+0xd4>
    {
      HAL_FLASH_Lock();
 80012d4:	f003 fc84 	bl	8004be0 <HAL_FLASH_Lock>
      return true;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0f4      	b.n	80014c6 <ee_write+0x2be>
  for (uint32_t i = 0; i < len ; i+=2)
 80012dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012e0:	3302      	adds	r3, #2
 80012e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012e6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80012ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d3d0      	bcc.n	8001292 <ee_write+0x8a>
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_DOUBLEWORD
  for (uint32_t i = 0; i < len; i += 8)
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80012f6:	e0dd      	b.n	80014b4 <ee_write+0x2ac>
  {
    uint64_t data64 = data[i];
 80012f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80012fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012fe:	4413      	add	r3, r2
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2200      	movs	r2, #0
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
 8001308:	62fa      	str	r2, [r7, #44]	; 0x2c
 800130a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800130e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 1] * 0x100;
 8001312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800131a:	4413      	add	r3, r2
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	17da      	asrs	r2, r3, #31
 8001322:	663b      	str	r3, [r7, #96]	; 0x60
 8001324:	667a      	str	r2, [r7, #100]	; 0x64
 8001326:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800132a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800132e:	4621      	mov	r1, r4
 8001330:	1851      	adds	r1, r2, r1
 8001332:	6239      	str	r1, [r7, #32]
 8001334:	4629      	mov	r1, r5
 8001336:	414b      	adcs	r3, r1
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
 800133a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800133e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 2] * 0x10000;
 8001342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001346:	1c9a      	adds	r2, r3, #2
 8001348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800134a:	4413      	add	r3, r2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	041b      	lsls	r3, r3, #16
 8001350:	17da      	asrs	r2, r3, #31
 8001352:	65bb      	str	r3, [r7, #88]	; 0x58
 8001354:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001356:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800135a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800135e:	4621      	mov	r1, r4
 8001360:	1851      	adds	r1, r2, r1
 8001362:	61b9      	str	r1, [r7, #24]
 8001364:	4629      	mov	r1, r5
 8001366:	414b      	adcs	r3, r1
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800136e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 3] * 0x1000000;
 8001372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001376:	1cda      	adds	r2, r3, #3
 8001378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	061b      	lsls	r3, r3, #24
 8001380:	17da      	asrs	r2, r3, #31
 8001382:	653b      	str	r3, [r7, #80]	; 0x50
 8001384:	657a      	str	r2, [r7, #84]	; 0x54
 8001386:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800138a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800138e:	4621      	mov	r1, r4
 8001390:	1851      	adds	r1, r2, r1
 8001392:	6139      	str	r1, [r7, #16]
 8001394:	4629      	mov	r1, r5
 8001396:	414b      	adcs	r3, r1
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800139e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 4] * 0x100000000;
 80013a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013a6:	1d1a      	adds	r2, r3, #4
 80013a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2200      	movs	r2, #0
 80013b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80013b4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80013c0:	000b      	movs	r3, r1
 80013c2:	2200      	movs	r2, #0
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80013cc:	1814      	adds	r4, r2, r0
 80013ce:	60bc      	str	r4, [r7, #8]
 80013d0:	414b      	adcs	r3, r1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013d8:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 5] * 0x10000000000;
 80013dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013e0:	1d5a      	adds	r2, r3, #5
 80013e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013e4:	4413      	add	r3, r2
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2200      	movs	r2, #0
 80013ec:	643b      	str	r3, [r7, #64]	; 0x40
 80013ee:	647a      	str	r2, [r7, #68]	; 0x44
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80013fa:	020b      	lsls	r3, r1, #8
 80013fc:	2200      	movs	r2, #0
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001406:	1814      	adds	r4, r2, r0
 8001408:	603c      	str	r4, [r7, #0]
 800140a:	414b      	adcs	r3, r1
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001412:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 6] * 0x1000000000000;
 8001416:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800141a:	1d9a      	adds	r2, r3, #6
 800141c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800141e:	4413      	add	r3, r2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2200      	movs	r2, #0
 8001426:	63bb      	str	r3, [r7, #56]	; 0x38
 8001428:	63fa      	str	r2, [r7, #60]	; 0x3c
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001434:	040b      	lsls	r3, r1, #16
 8001436:	2200      	movs	r2, #0
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001440:	eb12 0a00 	adds.w	sl, r2, r0
 8001444:	eb43 0b01 	adc.w	fp, r3, r1
 8001448:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
    data64 += data[i + 7] * 0x100000000000000;
 800144c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001450:	1dda      	adds	r2, r3, #7
 8001452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001454:	4413      	add	r3, r2
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2200      	movs	r2, #0
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
 800145e:	637a      	str	r2, [r7, #52]	; 0x34
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800146a:	060b      	lsls	r3, r1, #24
 800146c:	2200      	movs	r2, #0
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001476:	eb12 0800 	adds.w	r8, r2, r0
 800147a:	eb43 0901 	adc.w	r9, r3, r1
 800147e:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, data64) != HAL_OK)
 8001482:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001486:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001488:	4413      	add	r3, r2
 800148a:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800148e:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 8001492:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001496:	2003      	movs	r0, #3
 8001498:	f003 fb2c 	bl	8004af4 <HAL_FLASH_Program>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <ee_write+0x2a2>
    {
      HAL_FLASH_Lock();
 80014a2:	f003 fb9d 	bl	8004be0 <HAL_FLASH_Lock>
      return true;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00d      	b.n	80014c6 <ee_write+0x2be>
  for (uint32_t i = 0; i < len; i += 8)
 80014aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80014ae:	3308      	adds	r3, #8
 80014b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80014b4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80014b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014ba:	429a      	cmp	r2, r3
 80014bc:	f4ff af1c 	bcc.w	80012f8 <ee_write+0xf0>
    }
  }
#endif
  HAL_FLASH_Lock();
 80014c0:	f003 fb8e 	bl	8004be0 <HAL_FLASH_Lock>
  return true;
 80014c4:	2301      	movs	r3, #1
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3798      	adds	r7, #152	; 0x98
 80014ca:	46bd      	mov	sp, r7
 80014cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080014d0 <ee_writeToRam>:
//##########################################################################################################
bool ee_writeToRam(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
#if (_EE_USE_RAM_BYTE > 0)
  if ((startVirtualAddress + len) > _EE_USE_RAM_BYTE)
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	4413      	add	r3, r2
 80014e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e6:	d901      	bls.n	80014ec <ee_writeToRam+0x1c>
    return false;
 80014e8:	2300      	movs	r3, #0
 80014ea:	e00d      	b.n	8001508 <ee_writeToRam+0x38>
  if (data == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <ee_writeToRam+0x26>
    return false;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e008      	b.n	8001508 <ee_writeToRam+0x38>
  memcpy(&ee_ram[startVirtualAddress], data, len);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4a05      	ldr	r2, [pc, #20]	; (8001510 <ee_writeToRam+0x40>)
 80014fa:	4413      	add	r3, r2
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	f006 fcb3 	bl	8007e6c <memcpy>
  return true;
 8001506:	2301      	movs	r3, #1
#else
  return false;
#endif
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200000a8 	.word	0x200000a8

08001514 <ee_commit>:
//##########################################################################################################
bool  ee_commit(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  if (ee_format(true) == false)
 8001518:	2001      	movs	r0, #1
 800151a:	f7ff fdf7 	bl	800110c <ee_format>
 800151e:	4603      	mov	r3, r0
 8001520:	f083 0301 	eor.w	r3, r3, #1
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <ee_commit+0x1a>
    return false;
 800152a:	2300      	movs	r3, #0
 800152c:	e006      	b.n	800153c <ee_commit+0x28>
  return ee_write(0, _EE_USE_RAM_BYTE, ee_ram);
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <ee_commit+0x2c>)
 8001530:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001534:	2000      	movs	r0, #0
 8001536:	f7ff fe67 	bl	8001208 <ee_write>
 800153a:	4603      	mov	r3, r0
#else
  return false;
#endif
}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200000a8 	.word	0x200000a8
 8001544:	00000000 	.word	0x00000000

08001548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//Initialization Struct
	parameter.en_invert = 0;
 800154e:	4bb5      	ldr	r3, [pc, #724]	; (8001824 <main+0x2dc>)
 8001550:	2200      	movs	r2, #0
 8001552:	801a      	strh	r2, [r3, #0]
	parameter.dir_invert = 0;
 8001554:	4bb3      	ldr	r3, [pc, #716]	; (8001824 <main+0x2dc>)
 8001556:	2200      	movs	r2, #0
 8001558:	805a      	strh	r2, [r3, #2]
	parameter.motor_stepsrev = 0;
 800155a:	4bb2      	ldr	r3, [pc, #712]	; (8001824 <main+0x2dc>)
 800155c:	2200      	movs	r2, #0
 800155e:	809a      	strh	r2, [r3, #4]
	parameter.leadscrew_pitch = 0;
 8001560:	4bb0      	ldr	r3, [pc, #704]	; (8001824 <main+0x2dc>)
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	f8c3 2006 	str.w	r2, [r3, #6]
	parameter.max_feedrate = 0;
 800156a:	4bae      	ldr	r3, [pc, #696]	; (8001824 <main+0x2dc>)
 800156c:	2200      	movs	r2, #0
 800156e:	815a      	strh	r2, [r3, #10]
	parameter.fast_movement_feedrate = 0;
 8001570:	4bac      	ldr	r3, [pc, #688]	; (8001824 <main+0x2dc>)
 8001572:	2200      	movs	r2, #0
 8001574:	819a      	strh	r2, [r3, #12]
	parameter.acc_time = 0;
 8001576:	4bab      	ldr	r3, [pc, #684]	; (8001824 <main+0x2dc>)
 8001578:	2200      	movs	r2, #0
 800157a:	81da      	strh	r2, [r3, #14]
	parameter.acc_update_ratio = 0;
 800157c:	4ba9      	ldr	r3, [pc, #676]	; (8001824 <main+0x2dc>)
 800157e:	2200      	movs	r2, #0
 8001580:	821a      	strh	r2, [r3, #16]
	parameter.initial_feedrate = 0;
 8001582:	4ba8      	ldr	r3, [pc, #672]	; (8001824 <main+0x2dc>)
 8001584:	2200      	movs	r2, #0
 8001586:	825a      	strh	r2, [r3, #18]
	parameter.first_load = 0;
 8001588:	4ba6      	ldr	r3, [pc, #664]	; (8001824 <main+0x2dc>)
 800158a:	2200      	movs	r2, #0
 800158c:	829a      	strh	r2, [r3, #20]
	//Default values for parameters
	default_parameter.en_invert = 0;
 800158e:	4ba6      	ldr	r3, [pc, #664]	; (8001828 <main+0x2e0>)
 8001590:	2200      	movs	r2, #0
 8001592:	801a      	strh	r2, [r3, #0]
	default_parameter.dir_invert = 0;
 8001594:	4ba4      	ldr	r3, [pc, #656]	; (8001828 <main+0x2e0>)
 8001596:	2200      	movs	r2, #0
 8001598:	805a      	strh	r2, [r3, #2]
	default_parameter.motor_stepsrev = 1600;
 800159a:	4ba3      	ldr	r3, [pc, #652]	; (8001828 <main+0x2e0>)
 800159c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80015a0:	809a      	strh	r2, [r3, #4]
	default_parameter.leadscrew_pitch = 2;
 80015a2:	4ba1      	ldr	r3, [pc, #644]	; (8001828 <main+0x2e0>)
 80015a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015a8:	f8c3 2006 	str.w	r2, [r3, #6]
	default_parameter.max_feedrate = 500;
 80015ac:	4b9e      	ldr	r3, [pc, #632]	; (8001828 <main+0x2e0>)
 80015ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015b2:	815a      	strh	r2, [r3, #10]
	default_parameter.fast_movement_feedrate = 500;
 80015b4:	4b9c      	ldr	r3, [pc, #624]	; (8001828 <main+0x2e0>)
 80015b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015ba:	819a      	strh	r2, [r3, #12]
	default_parameter.acc_time = 1000;
 80015bc:	4b9a      	ldr	r3, [pc, #616]	; (8001828 <main+0x2e0>)
 80015be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015c2:	81da      	strh	r2, [r3, #14]
	default_parameter.acc_update_ratio = 50;
 80015c4:	4b98      	ldr	r3, [pc, #608]	; (8001828 <main+0x2e0>)
 80015c6:	2232      	movs	r2, #50	; 0x32
 80015c8:	821a      	strh	r2, [r3, #16]
	default_parameter.initial_feedrate = 50;
 80015ca:	4b97      	ldr	r3, [pc, #604]	; (8001828 <main+0x2e0>)
 80015cc:	2232      	movs	r2, #50	; 0x32
 80015ce:	825a      	strh	r2, [r3, #18]
	default_parameter.first_load = 0;
 80015d0:	4b95      	ldr	r3, [pc, #596]	; (8001828 <main+0x2e0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	829a      	strh	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d6:	f002 fe83 	bl	80042e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015da:	f001 f983 	bl	80028e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015de:	f001 fccf 	bl	8002f80 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015e2:	f001 fa3b 	bl	8002a5c <MX_I2C1_Init>
  MX_TIM1_Init();
 80015e6:	f001 fa67 	bl	8002ab8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80015ea:	f001 fac5 	bl	8002b78 <MX_TIM2_Init>
  MX_TIM11_Init();
 80015ee:	f001 fc8f 	bl	8002f10 <MX_TIM11_Init>
  MX_TIM10_Init();
 80015f2:	f001 fc4d 	bl	8002e90 <MX_TIM10_Init>
  MX_TIM9_Init();
 80015f6:	f001 fbf7 	bl	8002de8 <MX_TIM9_Init>
  MX_ADC1_Init();
 80015fa:	f001 f9dd 	bl	80029b8 <MX_ADC1_Init>
  MX_TIM4_Init();
 80015fe:	f001 fb2f 	bl	8002c60 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001602:	f001 fb9d 	bl	8002d40 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ee_init();
 8001606:	f7ff fd75 	bl	80010f4 <ee_init>
  LiquidCrystal_I2C(0x4E, 20, 4);	//Initialization of LCD (Select your LCD address)
 800160a:	2204      	movs	r2, #4
 800160c:	2114      	movs	r1, #20
 800160e:	204e      	movs	r0, #78	; 0x4e
 8001610:	f7ff fb9e 	bl	8000d50 <LiquidCrystal_I2C>
  lcdBegin();
 8001614:	f7ff fbc4 	bl	8000da0 <lcdBegin>
  lcdSetCursor(2,1);
 8001618:	2101      	movs	r1, #1
 800161a:	2002      	movs	r0, #2
 800161c:	f7ff fc60 	bl	8000ee0 <lcdSetCursor>
  lcdPrint("Power Feed V2.0");
 8001620:	4882      	ldr	r0, [pc, #520]	; (800182c <main+0x2e4>)
 8001622:	f7ff fc8f 	bl	8000f44 <lcdPrint>
  lcd_update = FALSE;				//LCD has been updated
 8001626:	4b82      	ldr	r3, [pc, #520]	; (8001830 <main+0x2e8>)
 8001628:	2200      	movs	r2, #0
 800162a:	801a      	strh	r2, [r3, #0]

  /* Encoder Initialization */
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 800162c:	213c      	movs	r1, #60	; 0x3c
 800162e:	4881      	ldr	r0, [pc, #516]	; (8001834 <main+0x2ec>)
 8001630:	f005 faad 	bl	8006b8e <HAL_TIM_Encoder_Start_IT>
  /* Initialization Timers */
  HAL_TIM_Base_Start_IT(&htim11);	//Timer for debouncing
 8001634:	4880      	ldr	r0, [pc, #512]	; (8001838 <main+0x2f0>)
 8001636:	f004 ffdb 	bl	80065f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);	//Timer for acceleration update
 800163a:	4880      	ldr	r0, [pc, #512]	; (800183c <main+0x2f4>)
 800163c:	f004 ffd8 	bl	80065f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);	//Timer for general 100ms counter
 8001640:	487f      	ldr	r0, [pc, #508]	; (8001840 <main+0x2f8>)
 8001642:	f004 ffd5 	bl	80065f0 <HAL_TIM_Base_Start_IT>

  //Asignation pointers for structures
  struct_ptr = &parameter;
 8001646:	4b7f      	ldr	r3, [pc, #508]	; (8001844 <main+0x2fc>)
 8001648:	4a76      	ldr	r2, [pc, #472]	; (8001824 <main+0x2dc>)
 800164a:	601a      	str	r2, [r3, #0]
  default_struct_ptr = &default_parameter;
 800164c:	4b7e      	ldr	r3, [pc, #504]	; (8001848 <main+0x300>)
 800164e:	4a76      	ldr	r2, [pc, #472]	; (8001828 <main+0x2e0>)
 8001650:	601a      	str	r2, [r3, #0]

  //Delay to show initial screen and meanwhile check if encoder is pressed long
  old_delay100ms_counter = delay100ms_counter; //Update delay counter
 8001652:	4b7e      	ldr	r3, [pc, #504]	; (800184c <main+0x304>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a7e      	ldr	r2, [pc, #504]	; (8001850 <main+0x308>)
 8001658:	6013      	str	r3, [r2, #0]
  while(old_delay100ms_counter+30 >= delay100ms_counter){
 800165a:	e00e      	b.n	800167a <main+0x132>
	  if (Encoder_Switch_Status_Read() == TRUE_HOLD){	//If encoder is hold enter in configuration
 800165c:	f002 fa0c 	bl	8003a78 <Encoder_Switch_Status_Read>
 8001660:	4603      	mov	r3, r0
 8001662:	2b03      	cmp	r3, #3
 8001664:	d106      	bne.n	8001674 <main+0x12c>
		  state = CONFIGURATION;
 8001666:	4b7b      	ldr	r3, [pc, #492]	; (8001854 <main+0x30c>)
 8001668:	2204      	movs	r2, #4
 800166a:	801a      	strh	r2, [r3, #0]
		  lcd_update=TRUE;
 800166c:	4b70      	ldr	r3, [pc, #448]	; (8001830 <main+0x2e8>)
 800166e:	2201      	movs	r2, #1
 8001670:	801a      	strh	r2, [r3, #0]
 8001672:	e002      	b.n	800167a <main+0x132>
	  }else{
		  state = INITIALIZATION;	//If not, enter into Initialization
 8001674:	4b77      	ldr	r3, [pc, #476]	; (8001854 <main+0x30c>)
 8001676:	2200      	movs	r2, #0
 8001678:	801a      	strh	r2, [r3, #0]
  while(old_delay100ms_counter+30 >= delay100ms_counter){
 800167a:	4b75      	ldr	r3, [pc, #468]	; (8001850 <main+0x308>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f103 021e 	add.w	r2, r3, #30
 8001682:	4b72      	ldr	r3, [pc, #456]	; (800184c <main+0x304>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d2e8      	bcs.n	800165c <main+0x114>
	  }
  }
  lcdClear();
 800168a:	f7ff fbff 	bl	8000e8c <lcdClear>

  //Reading parameters from flash memory, if it is first time booting enter into configuration mode
  if (!Read_Parameter_Data(struct_ptr)){	//Read values from Flash (Emulated EEprom), if return is FALSE, then show error loading and load default values
 800168e:	4b6d      	ldr	r3, [pc, #436]	; (8001844 <main+0x2fc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f002 fae5 	bl	8003c62 <Read_Parameter_Data>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d123      	bne.n	80016e6 <main+0x19e>
	  lcdSetCursor(1,1);
 800169e:	2101      	movs	r1, #1
 80016a0:	2001      	movs	r0, #1
 80016a2:	f7ff fc1d 	bl	8000ee0 <lcdSetCursor>
	  lcdPrint("ERROR LOADING DATA");
 80016a6:	486c      	ldr	r0, [pc, #432]	; (8001858 <main+0x310>)
 80016a8:	f7ff fc4c 	bl	8000f44 <lcdPrint>
	  lcdSetCursor(1,2);
 80016ac:	2102      	movs	r1, #2
 80016ae:	2001      	movs	r0, #1
 80016b0:	f7ff fc16 	bl	8000ee0 <lcdSetCursor>
	  lcdPrint("LOADING DEFAULT");
 80016b4:	4869      	ldr	r0, [pc, #420]	; (800185c <main+0x314>)
 80016b6:	f7ff fc45 	bl	8000f44 <lcdPrint>
	  *struct_ptr = *default_struct_ptr;	//Load default values
 80016ba:	4b63      	ldr	r3, [pc, #396]	; (8001848 <main+0x300>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4b61      	ldr	r3, [pc, #388]	; (8001844 <main+0x2fc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6811      	ldr	r1, [r2, #0]
 80016c4:	6855      	ldr	r5, [r2, #4]
 80016c6:	6894      	ldr	r4, [r2, #8]
 80016c8:	68d0      	ldr	r0, [r2, #12]
 80016ca:	6019      	str	r1, [r3, #0]
 80016cc:	605d      	str	r5, [r3, #4]
 80016ce:	609c      	str	r4, [r3, #8]
 80016d0:	60d8      	str	r0, [r3, #12]
 80016d2:	6911      	ldr	r1, [r2, #16]
 80016d4:	6119      	str	r1, [r3, #16]
 80016d6:	8a92      	ldrh	r2, [r2, #20]
 80016d8:	829a      	strh	r2, [r3, #20]
	  HAL_Delay(2000);
 80016da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016de:	f002 fe71 	bl	80043c4 <HAL_Delay>
	  lcdClear();
 80016e2:	f7ff fbd3 	bl	8000e8c <lcdClear>
  }
  if (parameter.first_load != 0){	//If it is first booting, load default and go to config.
 80016e6:	4b4f      	ldr	r3, [pc, #316]	; (8001824 <main+0x2dc>)
 80016e8:	8a9b      	ldrh	r3, [r3, #20]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d015      	beq.n	800171a <main+0x1d2>
	  *struct_ptr = *default_struct_ptr;	//Load default values
 80016ee:	4b56      	ldr	r3, [pc, #344]	; (8001848 <main+0x300>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4b54      	ldr	r3, [pc, #336]	; (8001844 <main+0x2fc>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6811      	ldr	r1, [r2, #0]
 80016f8:	6855      	ldr	r5, [r2, #4]
 80016fa:	6894      	ldr	r4, [r2, #8]
 80016fc:	68d0      	ldr	r0, [r2, #12]
 80016fe:	6019      	str	r1, [r3, #0]
 8001700:	605d      	str	r5, [r3, #4]
 8001702:	609c      	str	r4, [r3, #8]
 8001704:	60d8      	str	r0, [r3, #12]
 8001706:	6911      	ldr	r1, [r2, #16]
 8001708:	6119      	str	r1, [r3, #16]
 800170a:	8a92      	ldrh	r2, [r2, #20]
 800170c:	829a      	strh	r2, [r3, #20]
	  state = CONFIGURATION;		//GO to config for initial configuration
 800170e:	4b51      	ldr	r3, [pc, #324]	; (8001854 <main+0x30c>)
 8001710:	2204      	movs	r2, #4
 8001712:	801a      	strh	r2, [r3, #0]
	  lcd_update=TRUE;
 8001714:	4b46      	ldr	r3, [pc, #280]	; (8001830 <main+0x2e8>)
 8001716:	2201      	movs	r2, #1
 8001718:	801a      	strh	r2, [r3, #0]
  }

  float TIM11_period_ms_init = (float)parameter.acc_update_ratio/1000;		//Period to load into the timer, calculated from Define
 800171a:	4b42      	ldr	r3, [pc, #264]	; (8001824 <main+0x2dc>)
 800171c:	8a1b      	ldrh	r3, [r3, #16]
 800171e:	ee07 3a90 	vmov	s15, r3
 8001722:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001726:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001860 <main+0x318>
 800172a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172e:	edc7 7a01 	vstr	s15, [r7, #4]
  uint16_t TIM11_ARR_init;
  TIM11_ARR_init = ( (float) (CLK_FREQ_T2/(TIM11_preescaler+1))*TIM11_period_ms_init );	//Calculation value for ARR register to set correct period
 8001732:	edd7 7a01 	vldr	s15, [r7, #4]
 8001736:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001864 <main+0x31c>
 800173a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001742:	ee17 3a90 	vmov	r3, s15
 8001746:	807b      	strh	r3, [r7, #2]
  TIM11->ARR = TIM11_ARR_init;
 8001748:	4a47      	ldr	r2, [pc, #284]	; (8001868 <main+0x320>)
 800174a:	887b      	ldrh	r3, [r7, #2]
 800174c:	62d3      	str	r3, [r2, #44]	; 0x2c



  while (1)
  {
	  switch (state)
 800174e:	4b41      	ldr	r3, [pc, #260]	; (8001854 <main+0x30c>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	2b04      	cmp	r3, #4
 8001754:	d8fb      	bhi.n	800174e <main+0x206>
 8001756:	a201      	add	r2, pc, #4	; (adr r2, 800175c <main+0x214>)
 8001758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175c:	08001771 	.word	0x08001771
 8001760:	08001919 	.word	0x08001919
 8001764:	08001abb 	.word	0x08001abb
 8001768:	080017e9 	.word	0x080017e9
 800176c:	08001c97 	.word	0x08001c97
	  {
	  	  case INITIALIZATION:	//Initialization state
	  		  if ( Switch_Status_Read() != MID ){	//If the switch is not in MID state, report error
 8001770:	f002 f8ee 	bl	8003950 <Switch_Status_Read>
 8001774:	4603      	mov	r3, r0
 8001776:	2b02      	cmp	r3, #2
 8001778:	d00f      	beq.n	800179a <main+0x252>
	  			  lcdSetCursor(8,1);				//Print Error message
 800177a:	2101      	movs	r1, #1
 800177c:	2008      	movs	r0, #8
 800177e:	f7ff fbaf 	bl	8000ee0 <lcdSetCursor>
	  			  lcdPrint("ERROR!");
 8001782:	483a      	ldr	r0, [pc, #232]	; (800186c <main+0x324>)
 8001784:	f7ff fbde 	bl	8000f44 <lcdPrint>
	  			  lcdSetCursor(3,2);
 8001788:	2102      	movs	r1, #2
 800178a:	2003      	movs	r0, #3
 800178c:	f7ff fba8 	bl	8000ee0 <lcdSetCursor>
	  			  lcdPrint("Release Switch");
 8001790:	4837      	ldr	r0, [pc, #220]	; (8001870 <main+0x328>)
 8001792:	f7ff fbd7 	bl	8000f44 <lcdPrint>
		  		  target_feedrate = parameter.initial_feedrate;
		  		  display_feedrate = target_feedrate;
				  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
				  state = STANDBY;								//Go to standby
	  		  }
	  		  break;
 8001796:	f001 b887 	b.w	80028a8 <main+0x1360>
	  			  lcdClear();
 800179a:	f7ff fb77 	bl	8000e8c <lcdClear>
				  lcdSetCursor(0,0);
 800179e:	2100      	movs	r1, #0
 80017a0:	2000      	movs	r0, #0
 80017a2:	f7ff fb9d 	bl	8000ee0 <lcdSetCursor>
				  lcdPrint("Feed Rate:");
 80017a6:	4833      	ldr	r0, [pc, #204]	; (8001874 <main+0x32c>)
 80017a8:	f7ff fbcc 	bl	8000f44 <lcdPrint>
				  lcdSetCursor(0,1);
 80017ac:	2101      	movs	r1, #1
 80017ae:	2000      	movs	r0, #0
 80017b0:	f7ff fb96 	bl	8000ee0 <lcdSetCursor>
				  lcdPrint("Mode: STOP ");
 80017b4:	4830      	ldr	r0, [pc, #192]	; (8001878 <main+0x330>)
 80017b6:	f7ff fbc5 	bl	8000f44 <lcdPrint>
		  		  target_feedrate = parameter.initial_feedrate;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <main+0x2dc>)
 80017bc:	8a5b      	ldrh	r3, [r3, #18]
 80017be:	b21a      	sxth	r2, r3
 80017c0:	4b2e      	ldr	r3, [pc, #184]	; (800187c <main+0x334>)
 80017c2:	801a      	strh	r2, [r3, #0]
		  		  display_feedrate = target_feedrate;
 80017c4:	4b2d      	ldr	r3, [pc, #180]	; (800187c <main+0x334>)
 80017c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017ca:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <main+0x338>)
 80017cc:	801a      	strh	r2, [r3, #0]
				  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 80017ce:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <main+0x338>)
 80017d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d4:	2200      	movs	r2, #0
 80017d6:	210b      	movs	r1, #11
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 f89b 	bl	8003914 <LCD_Write_Feedrate>
				  state = STANDBY;								//Go to standby
 80017de:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <main+0x30c>)
 80017e0:	2203      	movs	r2, #3
 80017e2:	801a      	strh	r2, [r3, #0]
	  		  break;
 80017e4:	f001 b860 	b.w	80028a8 <main+0x1360>
	  	  case STANDBY:		//Standby state (Not movement, switch in the middle)
	  		Update_Feedrate(&target_feedrate);				//Update the feedrate from encoder
 80017e8:	4824      	ldr	r0, [pc, #144]	; (800187c <main+0x334>)
 80017ea:	f002 f8fb 	bl	80039e4 <Update_Feedrate>
	  		display_feedrate = target_feedrate;				//Update variable to display the feedrate
 80017ee:	4b23      	ldr	r3, [pc, #140]	; (800187c <main+0x334>)
 80017f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <main+0x338>)
 80017f6:	801a      	strh	r2, [r3, #0]
	  		LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 80017f8:	4b21      	ldr	r3, [pc, #132]	; (8001880 <main+0x338>)
 80017fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fe:	2200      	movs	r2, #0
 8001800:	210b      	movs	r1, #11
 8001802:	4618      	mov	r0, r3
 8001804:	f002 f886 	bl	8003914 <LCD_Write_Feedrate>
	  		if ( Encoder_Switch_Status_Read() ){			//Check if the encoder is pressed to change the step mode
 8001808:	f002 f936 	bl	8003a78 <Encoder_Switch_Status_Read>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d041      	beq.n	8001896 <main+0x34e>
	  			if (step_mode == STEP_NORMAL){
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <main+0x33c>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d136      	bne.n	8001888 <main+0x340>
	  				step_mode = STEP_x10;
 800181a:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <main+0x33c>)
 800181c:	2201      	movs	r2, #1
 800181e:	801a      	strh	r2, [r3, #0]
 8001820:	e039      	b.n	8001896 <main+0x34e>
 8001822:	bf00      	nop
 8001824:	20000744 	.word	0x20000744
 8001828:	2000075c 	.word	0x2000075c
 800182c:	08008770 	.word	0x08008770
 8001830:	20000790 	.word	0x20000790
 8001834:	20000544 	.word	0x20000544
 8001838:	200006f4 	.word	0x200006f4
 800183c:	200006ac 	.word	0x200006ac
 8001840:	20000664 	.word	0x20000664
 8001844:	20000774 	.word	0x20000774
 8001848:	20000778 	.word	0x20000778
 800184c:	20000784 	.word	0x20000784
 8001850:	20000788 	.word	0x20000788
 8001854:	2000073c 	.word	0x2000073c
 8001858:	08008780 	.word	0x08008780
 800185c:	08008794 	.word	0x08008794
 8001860:	447a0000 	.word	0x447a0000
 8001864:	477f2600 	.word	0x477f2600
 8001868:	40014800 	.word	0x40014800
 800186c:	080087a4 	.word	0x080087a4
 8001870:	080087ac 	.word	0x080087ac
 8001874:	080087bc 	.word	0x080087bc
 8001878:	080087c8 	.word	0x080087c8
 800187c:	20000008 	.word	0x20000008
 8001880:	2000000a 	.word	0x2000000a
 8001884:	20000742 	.word	0x20000742
	  			}else if(step_mode == STEP_x10){
 8001888:	4b98      	ldr	r3, [pc, #608]	; (8001aec <main+0x5a4>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d102      	bne.n	8001896 <main+0x34e>
	  				step_mode = STEP_NORMAL;
 8001890:	4b96      	ldr	r3, [pc, #600]	; (8001aec <main+0x5a4>)
 8001892:	2200      	movs	r2, #0
 8001894:	801a      	strh	r2, [r3, #0]
	  			}
	  		}
	  		if (lcd_update){				//Update the LCD coming from others states
 8001896:	4b96      	ldr	r3, [pc, #600]	; (8001af0 <main+0x5a8>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d009      	beq.n	80018b2 <main+0x36a>
	  			lcdSetCursor(0,1);
 800189e:	2101      	movs	r1, #1
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff fb1d 	bl	8000ee0 <lcdSetCursor>
	  			lcdPrint("Mode: STOP ");
 80018a6:	4893      	ldr	r0, [pc, #588]	; (8001af4 <main+0x5ac>)
 80018a8:	f7ff fb4c 	bl	8000f44 <lcdPrint>
	  			lcd_update = FALSE;			//Reset flag for LCD Update
 80018ac:	4b90      	ldr	r3, [pc, #576]	; (8001af0 <main+0x5a8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	801a      	strh	r2, [r3, #0]
	  		}
	  		if (previous_state != STANDBY){		//If previous status is Standby the enable motor and direction
 80018b2:	4b91      	ldr	r3, [pc, #580]	; (8001af8 <main+0x5b0>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d002      	beq.n	80018c0 <main+0x378>
	  			previous_state = STANDBY;		//Change previous state to current one
 80018ba:	4b8f      	ldr	r3, [pc, #572]	; (8001af8 <main+0x5b0>)
 80018bc:	2203      	movs	r2, #3
 80018be:	801a      	strh	r2, [r3, #0]
	  		}
	  		if ( ( Switch_Status_Read() == RIGHT ) && ( current_feedrate == 0 ) ){		//Check if the switch is on right mode
 80018c0:	f002 f846 	bl	8003950 <Switch_Status_Read>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d10f      	bne.n	80018ea <main+0x3a2>
 80018ca:	4b8c      	ldr	r3, [pc, #560]	; (8001afc <main+0x5b4>)
 80018cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10a      	bne.n	80018ea <main+0x3a2>
	  			previous_state = STANDBY;		//Setting previous state to STANDBY
 80018d4:	4b88      	ldr	r3, [pc, #544]	; (8001af8 <main+0x5b0>)
 80018d6:	2203      	movs	r2, #3
 80018d8:	801a      	strh	r2, [r3, #0]
	  			state = MOVE_RIGHT;				//Change state to RIGHT
 80018da:	4b89      	ldr	r3, [pc, #548]	; (8001b00 <main+0x5b8>)
 80018dc:	2201      	movs	r2, #1
 80018de:	801a      	strh	r2, [r3, #0]
	  			lcd_update = TRUE;				//Set flag for LCD update
 80018e0:	4b83      	ldr	r3, [pc, #524]	; (8001af0 <main+0x5a8>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	801a      	strh	r2, [r3, #0]
	  		}else if ( ( Switch_Status_Read() == LEFT ) && ( current_feedrate == 0 ) ){	//Check if the switch is on left mode
	  			previous_state = STANDBY;		//Setting previous state to STANDBY
	  			state = MOVE_LEFT;				//Change state to RIGHT
	  			lcd_update = TRUE;				//Set flag for LCD update
	  		}
	  		  break;
 80018e6:	f000 bfba 	b.w	800285e <main+0x1316>
	  		}else if ( ( Switch_Status_Read() == LEFT ) && ( current_feedrate == 0 ) ){	//Check if the switch is on left mode
 80018ea:	f002 f831 	bl	8003950 <Switch_Status_Read>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f040 87b4 	bne.w	800285e <main+0x1316>
 80018f6:	4b81      	ldr	r3, [pc, #516]	; (8001afc <main+0x5b4>)
 80018f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f040 87ae 	bne.w	800285e <main+0x1316>
	  			previous_state = STANDBY;		//Setting previous state to STANDBY
 8001902:	4b7d      	ldr	r3, [pc, #500]	; (8001af8 <main+0x5b0>)
 8001904:	2203      	movs	r2, #3
 8001906:	801a      	strh	r2, [r3, #0]
	  			state = MOVE_LEFT;				//Change state to RIGHT
 8001908:	4b7d      	ldr	r3, [pc, #500]	; (8001b00 <main+0x5b8>)
 800190a:	2202      	movs	r2, #2
 800190c:	801a      	strh	r2, [r3, #0]
	  			lcd_update = TRUE;				//Set flag for LCD update
 800190e:	4b78      	ldr	r3, [pc, #480]	; (8001af0 <main+0x5a8>)
 8001910:	2201      	movs	r2, #1
 8001912:	801a      	strh	r2, [r3, #0]
	  		  break;
 8001914:	f000 bfa3 	b.w	800285e <main+0x1316>
	  	  case MOVE_RIGHT:	//Right state, movement to the RIGHT
	  		  encoder_sw_status = Encoder_Switch_Status_Read();
 8001918:	f002 f8ae 	bl	8003a78 <Encoder_Switch_Status_Read>
 800191c:	4603      	mov	r3, r0
 800191e:	b29a      	uxth	r2, r3
 8001920:	4b78      	ldr	r3, [pc, #480]	; (8001b04 <main+0x5bc>)
 8001922:	801a      	strh	r2, [r3, #0]
	  		  aux_sw_status = Aux_Switch_Status_Read();
 8001924:	f002 f90e 	bl	8003b44 <Aux_Switch_Status_Read>
 8001928:	4603      	mov	r3, r0
 800192a:	b29a      	uxth	r2, r3
 800192c:	4b76      	ldr	r3, [pc, #472]	; (8001b08 <main+0x5c0>)
 800192e:	801a      	strh	r2, [r3, #0]
	  		  if ( encoder_sw_status == TRUE ){	//Check if the encoder is pressed to change the step mode
 8001930:	4b74      	ldr	r3, [pc, #464]	; (8001b04 <main+0x5bc>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d10e      	bne.n	8001956 <main+0x40e>
	  			  if (step_mode == STEP_NORMAL){
 8001938:	4b6c      	ldr	r3, [pc, #432]	; (8001aec <main+0x5a4>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d103      	bne.n	8001948 <main+0x400>
	  				  step_mode = STEP_x10;
 8001940:	4b6a      	ldr	r3, [pc, #424]	; (8001aec <main+0x5a4>)
 8001942:	2201      	movs	r2, #1
 8001944:	801a      	strh	r2, [r3, #0]
 8001946:	e006      	b.n	8001956 <main+0x40e>
	  			  }else if(step_mode == STEP_x10){
 8001948:	4b68      	ldr	r3, [pc, #416]	; (8001aec <main+0x5a4>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d102      	bne.n	8001956 <main+0x40e>
	  				  step_mode = STEP_NORMAL;
 8001950:	4b66      	ldr	r3, [pc, #408]	; (8001aec <main+0x5a4>)
 8001952:	2200      	movs	r2, #0
 8001954:	801a      	strh	r2, [r3, #0]
	  			  }
	  		  }
	  		  if (  aux_sw_status == TRUE_HOLD ){
 8001956:	4b6c      	ldr	r3, [pc, #432]	; (8001b08 <main+0x5c0>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d105      	bne.n	800196a <main+0x422>
		  		target_feedrate = parameter.fast_movement_feedrate;
 800195e:	4b6b      	ldr	r3, [pc, #428]	; (8001b0c <main+0x5c4>)
 8001960:	899b      	ldrh	r3, [r3, #12]
 8001962:	b21a      	sxth	r2, r3
 8001964:	4b6a      	ldr	r3, [pc, #424]	; (8001b10 <main+0x5c8>)
 8001966:	801a      	strh	r2, [r3, #0]
 8001968:	e008      	b.n	800197c <main+0x434>
	  		  }else if ( aux_sw_status == FALSE ){
 800196a:	4b67      	ldr	r3, [pc, #412]	; (8001b08 <main+0x5c0>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d104      	bne.n	800197c <main+0x434>
		  		target_feedrate = display_feedrate;
 8001972:	4b68      	ldr	r3, [pc, #416]	; (8001b14 <main+0x5cc>)
 8001974:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001978:	4b65      	ldr	r3, [pc, #404]	; (8001b10 <main+0x5c8>)
 800197a:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  sw_status = Switch_Status_Read();		//Read the switch
 800197c:	f001 ffe8 	bl	8003950 <Switch_Status_Read>
 8001980:	4603      	mov	r3, r0
 8001982:	b29a      	uxth	r2, r3
 8001984:	4b64      	ldr	r3, [pc, #400]	; (8001b18 <main+0x5d0>)
 8001986:	801a      	strh	r2, [r3, #0]
	  		  if ( sw_status == RIGHT ){			//If it is on right position, update the feedrate target comming from others modes
 8001988:	4b63      	ldr	r3, [pc, #396]	; (8001b18 <main+0x5d0>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d126      	bne.n	80019de <main+0x496>
	  			  if (target_feedrate == 0){
 8001990:	4b5f      	ldr	r3, [pc, #380]	; (8001b10 <main+0x5c8>)
 8001992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d104      	bne.n	80019a4 <main+0x45c>
	  				  target_feedrate = display_feedrate;
 800199a:	4b5e      	ldr	r3, [pc, #376]	; (8001b14 <main+0x5cc>)
 800199c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019a0:	4b5b      	ldr	r3, [pc, #364]	; (8001b10 <main+0x5c8>)
 80019a2:	801a      	strh	r2, [r3, #0]
	  			  }
	  			  if ( aux_sw_status != TRUE_HOLD ){
 80019a4:	4b58      	ldr	r3, [pc, #352]	; (8001b08 <main+0x5c0>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d054      	beq.n	8001a56 <main+0x50e>
					  Update_Feedrate(&target_feedrate);				//Update the feedrate from encoder
 80019ac:	4858      	ldr	r0, [pc, #352]	; (8001b10 <main+0x5c8>)
 80019ae:	f002 f819 	bl	80039e4 <Update_Feedrate>
					  if (display_feedrate != target_feedrate){			//Check if the feedrate changed to update LCD
 80019b2:	4b58      	ldr	r3, [pc, #352]	; (8001b14 <main+0x5cc>)
 80019b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019b8:	4b55      	ldr	r3, [pc, #340]	; (8001b10 <main+0x5c8>)
 80019ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d049      	beq.n	8001a56 <main+0x50e>
						  display_feedrate = target_feedrate;
 80019c2:	4b53      	ldr	r3, [pc, #332]	; (8001b10 <main+0x5c8>)
 80019c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019c8:	4b52      	ldr	r3, [pc, #328]	; (8001b14 <main+0x5cc>)
 80019ca:	801a      	strh	r2, [r3, #0]
						  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 80019cc:	4b51      	ldr	r3, [pc, #324]	; (8001b14 <main+0x5cc>)
 80019ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d2:	2200      	movs	r2, #0
 80019d4:	210b      	movs	r1, #11
 80019d6:	4618      	mov	r0, r3
 80019d8:	f001 ff9c 	bl	8003914 <LCD_Write_Feedrate>
 80019dc:	e03b      	b.n	8001a56 <main+0x50e>
					  }
	  			  }
	  		  }else if ( sw_status == LEFT){		//If it is on left position, change to left, set feedrate to zero
 80019de:	4b4e      	ldr	r3, [pc, #312]	; (8001b18 <main+0x5d0>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d119      	bne.n	8001a1a <main+0x4d2>
		  		target_feedrate = 0;
 80019e6:	4b4a      	ldr	r3, [pc, #296]	; (8001b10 <main+0x5c8>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	801a      	strh	r2, [r3, #0]
			  	if ( current_feedrate == 0 ){		//If motor is stopped then move to left status
 80019ec:	4b43      	ldr	r3, [pc, #268]	; (8001afc <main+0x5b4>)
 80019ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d12f      	bne.n	8001a56 <main+0x50e>
			  		state = MOVE_LEFT;				//Change state to left
 80019f6:	4b42      	ldr	r3, [pc, #264]	; (8001b00 <main+0x5b8>)
 80019f8:	2202      	movs	r2, #2
 80019fa:	801a      	strh	r2, [r3, #0]
			  		lcd_update = TRUE;				//Set flag to update display
 80019fc:	4b3c      	ldr	r3, [pc, #240]	; (8001af0 <main+0x5a8>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	801a      	strh	r2, [r3, #0]
			  		Motor_Disable(parameter.en_invert);		//Disable Motor
 8001a02:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <main+0x5c4>)
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 fe2a 	bl	8003660 <Motor_Disable>
			  		target_feedrate = display_feedrate;	//Update feedrate
 8001a0c:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <main+0x5cc>)
 8001a0e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a12:	4b3f      	ldr	r3, [pc, #252]	; (8001b10 <main+0x5c8>)
 8001a14:	801a      	strh	r2, [r3, #0]
			  		break;							//Exit this state
 8001a16:	f000 bf47 	b.w	80028a8 <main+0x1360>
			  	}
	  		  }else if ( sw_status == MID ){		//If it is on Mid position, change to STOP or STANDBY status
 8001a1a:	4b3f      	ldr	r3, [pc, #252]	; (8001b18 <main+0x5d0>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d119      	bne.n	8001a56 <main+0x50e>
	  			target_feedrate = 0;
 8001a22:	4b3b      	ldr	r3, [pc, #236]	; (8001b10 <main+0x5c8>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	801a      	strh	r2, [r3, #0]
	  			if ( current_feedrate == 0 ){
 8001a28:	4b34      	ldr	r3, [pc, #208]	; (8001afc <main+0x5b4>)
 8001a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d111      	bne.n	8001a56 <main+0x50e>
	  				state = STANDBY;				//Change state to standby
 8001a32:	4b33      	ldr	r3, [pc, #204]	; (8001b00 <main+0x5b8>)
 8001a34:	2203      	movs	r2, #3
 8001a36:	801a      	strh	r2, [r3, #0]
	  				lcd_update = TRUE;				//Set flag to update display
 8001a38:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <main+0x5a8>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	801a      	strh	r2, [r3, #0]
	  				Motor_Disable(parameter.en_invert);		//Disable Motor
 8001a3e:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <main+0x5c4>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f001 fe0c 	bl	8003660 <Motor_Disable>
	  				target_feedrate = display_feedrate;	//Update feedrate
 8001a48:	4b32      	ldr	r3, [pc, #200]	; (8001b14 <main+0x5cc>)
 8001a4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a4e:	4b30      	ldr	r3, [pc, #192]	; (8001b10 <main+0x5c8>)
 8001a50:	801a      	strh	r2, [r3, #0]
	  				break;							//Exit this state
 8001a52:	f000 bf29 	b.w	80028a8 <main+0x1360>
	  			}
	  		  }
	  		  if (lcd_update){				//Update the LCD coming from others states
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <main+0x5a8>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <main+0x52a>
	  			  lcdSetCursor(0,1);
 8001a5e:	2101      	movs	r1, #1
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff fa3d 	bl	8000ee0 <lcdSetCursor>
	  			  lcdPrint("Mode: RIGHT");
 8001a66:	482d      	ldr	r0, [pc, #180]	; (8001b1c <main+0x5d4>)
 8001a68:	f7ff fa6c 	bl	8000f44 <lcdPrint>
	  			  lcd_update = FALSE;			//Reset flag for LCD Update
 8001a6c:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <main+0x5a8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (previous_state != MOVE_RIGHT){		//If previous status is Standby the enable motor and direcction
 8001a72:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <main+0x5b0>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d00d      	beq.n	8001a96 <main+0x54e>
				  Motor_Direction(RIGHT, parameter.dir_invert);	//Set direction to right
 8001a7a:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <main+0x5c4>)
 8001a7c:	885b      	ldrh	r3, [r3, #2]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	2001      	movs	r0, #1
 8001a82:	f001 fe05 	bl	8003690 <Motor_Direction>
				  Motor_Enable(parameter.en_invert);				//Enable Motor
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <main+0x5c4>)
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f001 fdd2 	bl	8003634 <Motor_Enable>
				  previous_state = MOVE_RIGHT;			//Change previous state to current one
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <main+0x5b0>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (update_speed){					//Update speed if the flag is set
 8001a96:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <main+0x5d8>)
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 86e2 	beq.w	8002864 <main+0x131c>
	  			  current_feedrate = Motor_Feedrate_Update(&current_feedrate, &target_feedrate);
 8001aa0:	491b      	ldr	r1, [pc, #108]	; (8001b10 <main+0x5c8>)
 8001aa2:	4816      	ldr	r0, [pc, #88]	; (8001afc <main+0x5b4>)
 8001aa4:	f001 fe66 	bl	8003774 <Motor_Feedrate_Update>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <main+0x5b4>)
 8001aae:	801a      	strh	r2, [r3, #0]
				  update_speed = 0;					//Reset the update_speed flag
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <main+0x5d8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  break;
 8001ab6:	f000 bed5 	b.w	8002864 <main+0x131c>
	  	  case MOVE_LEFT:	//Left state, movement to the Left
	  		  encoder_sw_status = Encoder_Switch_Status_Read();
 8001aba:	f001 ffdd 	bl	8003a78 <Encoder_Switch_Status_Read>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <main+0x5bc>)
 8001ac4:	801a      	strh	r2, [r3, #0]
	  		  aux_sw_status = Aux_Switch_Status_Read();
 8001ac6:	f002 f83d 	bl	8003b44 <Aux_Switch_Status_Read>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <main+0x5c0>)
 8001ad0:	801a      	strh	r2, [r3, #0]
	  		  if ( encoder_sw_status == TRUE ){	//Check if the encoder is pressed to change the step mode
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <main+0x5bc>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d12b      	bne.n	8001b32 <main+0x5ea>
	  			  if (step_mode == STEP_NORMAL){
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <main+0x5a4>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d120      	bne.n	8001b24 <main+0x5dc>
	  				  step_mode = STEP_x10;
 8001ae2:	4b02      	ldr	r3, [pc, #8]	; (8001aec <main+0x5a4>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	801a      	strh	r2, [r3, #0]
 8001ae8:	e023      	b.n	8001b32 <main+0x5ea>
 8001aea:	bf00      	nop
 8001aec:	20000742 	.word	0x20000742
 8001af0:	20000790 	.word	0x20000790
 8001af4:	080087c8 	.word	0x080087c8
 8001af8:	2000073e 	.word	0x2000073e
 8001afc:	2000077c 	.word	0x2000077c
 8001b00:	2000073c 	.word	0x2000073c
 8001b04:	20000780 	.word	0x20000780
 8001b08:	20000782 	.word	0x20000782
 8001b0c:	20000744 	.word	0x20000744
 8001b10:	20000008 	.word	0x20000008
 8001b14:	2000000a 	.word	0x2000000a
 8001b18:	2000077e 	.word	0x2000077e
 8001b1c:	080087d4 	.word	0x080087d4
 8001b20:	2000078e 	.word	0x2000078e
	  			  }else if(step_mode == STEP_x10){
 8001b24:	4ba2      	ldr	r3, [pc, #648]	; (8001db0 <main+0x868>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d102      	bne.n	8001b32 <main+0x5ea>
	  				  step_mode = STEP_NORMAL;
 8001b2c:	4ba0      	ldr	r3, [pc, #640]	; (8001db0 <main+0x868>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	801a      	strh	r2, [r3, #0]
	  			  }
	  		  }
	  		  if (  aux_sw_status == TRUE_HOLD ){
 8001b32:	4ba0      	ldr	r3, [pc, #640]	; (8001db4 <main+0x86c>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d105      	bne.n	8001b46 <main+0x5fe>
	  			  target_feedrate = parameter.fast_movement_feedrate;
 8001b3a:	4b9f      	ldr	r3, [pc, #636]	; (8001db8 <main+0x870>)
 8001b3c:	899b      	ldrh	r3, [r3, #12]
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	4b9e      	ldr	r3, [pc, #632]	; (8001dbc <main+0x874>)
 8001b42:	801a      	strh	r2, [r3, #0]
 8001b44:	e008      	b.n	8001b58 <main+0x610>
	  		  }else if ( aux_sw_status == FALSE ){
 8001b46:	4b9b      	ldr	r3, [pc, #620]	; (8001db4 <main+0x86c>)
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d104      	bne.n	8001b58 <main+0x610>
	  			  target_feedrate = display_feedrate;
 8001b4e:	4b9c      	ldr	r3, [pc, #624]	; (8001dc0 <main+0x878>)
 8001b50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b54:	4b99      	ldr	r3, [pc, #612]	; (8001dbc <main+0x874>)
 8001b56:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  sw_status = Switch_Status_Read();		//Read the switch
 8001b58:	f001 fefa 	bl	8003950 <Switch_Status_Read>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	4b98      	ldr	r3, [pc, #608]	; (8001dc4 <main+0x87c>)
 8001b62:	801a      	strh	r2, [r3, #0]
	  		  if ( sw_status == LEFT ){				//If it is on left position, update the feedrate target comming from others modes
 8001b64:	4b97      	ldr	r3, [pc, #604]	; (8001dc4 <main+0x87c>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d126      	bne.n	8001bba <main+0x672>
	  			  if (target_feedrate == 0){
 8001b6c:	4b93      	ldr	r3, [pc, #588]	; (8001dbc <main+0x874>)
 8001b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d104      	bne.n	8001b80 <main+0x638>
	  				  target_feedrate = display_feedrate;
 8001b76:	4b92      	ldr	r3, [pc, #584]	; (8001dc0 <main+0x878>)
 8001b78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b7c:	4b8f      	ldr	r3, [pc, #572]	; (8001dbc <main+0x874>)
 8001b7e:	801a      	strh	r2, [r3, #0]
	  			  }
	  			  if ( aux_sw_status != TRUE_HOLD ){
 8001b80:	4b8c      	ldr	r3, [pc, #560]	; (8001db4 <main+0x86c>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d054      	beq.n	8001c32 <main+0x6ea>
					  Update_Feedrate(&target_feedrate);				//Update the feedrate from encoder
 8001b88:	488c      	ldr	r0, [pc, #560]	; (8001dbc <main+0x874>)
 8001b8a:	f001 ff2b 	bl	80039e4 <Update_Feedrate>
					  if (display_feedrate != target_feedrate){			//Check if the feedrate changed to update LCD
 8001b8e:	4b8c      	ldr	r3, [pc, #560]	; (8001dc0 <main+0x878>)
 8001b90:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b94:	4b89      	ldr	r3, [pc, #548]	; (8001dbc <main+0x874>)
 8001b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d049      	beq.n	8001c32 <main+0x6ea>
						  display_feedrate = target_feedrate;
 8001b9e:	4b87      	ldr	r3, [pc, #540]	; (8001dbc <main+0x874>)
 8001ba0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ba4:	4b86      	ldr	r3, [pc, #536]	; (8001dc0 <main+0x878>)
 8001ba6:	801a      	strh	r2, [r3, #0]
						  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 8001ba8:	4b85      	ldr	r3, [pc, #532]	; (8001dc0 <main+0x878>)
 8001baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	210b      	movs	r1, #11
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f001 feae 	bl	8003914 <LCD_Write_Feedrate>
 8001bb8:	e03b      	b.n	8001c32 <main+0x6ea>
					  }
	  			  }
	  		  }else if ( sw_status == RIGHT){		//If it is on right position, change to right, set feedrate to zero
 8001bba:	4b82      	ldr	r3, [pc, #520]	; (8001dc4 <main+0x87c>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d119      	bne.n	8001bf6 <main+0x6ae>
		  		target_feedrate = 0;
 8001bc2:	4b7e      	ldr	r3, [pc, #504]	; (8001dbc <main+0x874>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	801a      	strh	r2, [r3, #0]
		  		if ( current_feedrate == 0 ){		//If motor is stopped then move to right status
 8001bc8:	4b7f      	ldr	r3, [pc, #508]	; (8001dc8 <main+0x880>)
 8001bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d12f      	bne.n	8001c32 <main+0x6ea>
		  			state = MOVE_RIGHT;				//Change state to right
 8001bd2:	4b7e      	ldr	r3, [pc, #504]	; (8001dcc <main+0x884>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	801a      	strh	r2, [r3, #0]
		  			lcd_update = TRUE;				//Set flag to update display
 8001bd8:	4b7d      	ldr	r3, [pc, #500]	; (8001dd0 <main+0x888>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	801a      	strh	r2, [r3, #0]
		  			Motor_Disable(parameter.en_invert);		//Disable Motor
 8001bde:	4b76      	ldr	r3, [pc, #472]	; (8001db8 <main+0x870>)
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f001 fd3c 	bl	8003660 <Motor_Disable>
		  			target_feedrate = display_feedrate;	//Update feedrate
 8001be8:	4b75      	ldr	r3, [pc, #468]	; (8001dc0 <main+0x878>)
 8001bea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bee:	4b73      	ldr	r3, [pc, #460]	; (8001dbc <main+0x874>)
 8001bf0:	801a      	strh	r2, [r3, #0]
		  			break;							//Exit this state
 8001bf2:	f000 be59 	b.w	80028a8 <main+0x1360>
		  		}
	  		  }else if ( sw_status == MID ){		//If it is on Mid position, change to STOP or STANDBY status
 8001bf6:	4b73      	ldr	r3, [pc, #460]	; (8001dc4 <main+0x87c>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d119      	bne.n	8001c32 <main+0x6ea>
	  			target_feedrate = 0;
 8001bfe:	4b6f      	ldr	r3, [pc, #444]	; (8001dbc <main+0x874>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	801a      	strh	r2, [r3, #0]
	  			if ( current_feedrate == 0 ){
 8001c04:	4b70      	ldr	r3, [pc, #448]	; (8001dc8 <main+0x880>)
 8001c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d111      	bne.n	8001c32 <main+0x6ea>
	  				state = STANDBY;				//Change state to standby
 8001c0e:	4b6f      	ldr	r3, [pc, #444]	; (8001dcc <main+0x884>)
 8001c10:	2203      	movs	r2, #3
 8001c12:	801a      	strh	r2, [r3, #0]
	  				lcd_update = TRUE;				//Set flag to update display
 8001c14:	4b6e      	ldr	r3, [pc, #440]	; (8001dd0 <main+0x888>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	801a      	strh	r2, [r3, #0]
	  				Motor_Disable(parameter.en_invert);		//Disable Motor
 8001c1a:	4b67      	ldr	r3, [pc, #412]	; (8001db8 <main+0x870>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f001 fd1e 	bl	8003660 <Motor_Disable>
	  				target_feedrate = display_feedrate;	//Update feedrate
 8001c24:	4b66      	ldr	r3, [pc, #408]	; (8001dc0 <main+0x878>)
 8001c26:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c2a:	4b64      	ldr	r3, [pc, #400]	; (8001dbc <main+0x874>)
 8001c2c:	801a      	strh	r2, [r3, #0]
	  				break;							//Exit this state
 8001c2e:	f000 be3b 	b.w	80028a8 <main+0x1360>
	  			}
	  		  }
	  		  if (lcd_update){				//Update the LCD comming from others states
 8001c32:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <main+0x888>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <main+0x706>
	  			lcdSetCursor(0,1);
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7ff f94f 	bl	8000ee0 <lcdSetCursor>
	  			lcdPrint("Mode: LEFT ");
 8001c42:	4864      	ldr	r0, [pc, #400]	; (8001dd4 <main+0x88c>)
 8001c44:	f7ff f97e 	bl	8000f44 <lcdPrint>
	  			lcd_update = FALSE;			//Reset flag for LCD Update
 8001c48:	4b61      	ldr	r3, [pc, #388]	; (8001dd0 <main+0x888>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (previous_state != MOVE_LEFT){		//If previous status is Standby the enable motor and direcction
 8001c4e:	4b62      	ldr	r3, [pc, #392]	; (8001dd8 <main+0x890>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d00d      	beq.n	8001c72 <main+0x72a>
	  		  Motor_Direction(LEFT, parameter.dir_invert);	//Set direction to left
 8001c56:	4b58      	ldr	r3, [pc, #352]	; (8001db8 <main+0x870>)
 8001c58:	885b      	ldrh	r3, [r3, #2]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f001 fd17 	bl	8003690 <Motor_Direction>
	  		  Motor_Enable(parameter.en_invert);				//Enable Motor
 8001c62:	4b55      	ldr	r3, [pc, #340]	; (8001db8 <main+0x870>)
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f001 fce4 	bl	8003634 <Motor_Enable>
	  		  previous_state = MOVE_LEFT;			//Change previous state to current one
 8001c6c:	4b5a      	ldr	r3, [pc, #360]	; (8001dd8 <main+0x890>)
 8001c6e:	2202      	movs	r2, #2
 8001c70:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (update_speed){					//Update speed if the flag is set
 8001c72:	4b5a      	ldr	r3, [pc, #360]	; (8001ddc <main+0x894>)
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 85f7 	beq.w	800286a <main+0x1322>
	  			  current_feedrate = Motor_Feedrate_Update(&current_feedrate, &target_feedrate);
 8001c7c:	494f      	ldr	r1, [pc, #316]	; (8001dbc <main+0x874>)
 8001c7e:	4852      	ldr	r0, [pc, #328]	; (8001dc8 <main+0x880>)
 8001c80:	f001 fd78 	bl	8003774 <Motor_Feedrate_Update>
 8001c84:	4603      	mov	r3, r0
 8001c86:	b21a      	sxth	r2, r3
 8001c88:	4b4f      	ldr	r3, [pc, #316]	; (8001dc8 <main+0x880>)
 8001c8a:	801a      	strh	r2, [r3, #0]
				  update_speed = 0;					//Reset the update_speed flag
 8001c8c:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <main+0x894>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  break;
 8001c92:	f000 bdea 	b.w	800286a <main+0x1322>
	  	  case CONFIGURATION:	//State for Configuration Menu
	  		  switch (configuration_status)
 8001c96:	4b52      	ldr	r3, [pc, #328]	; (8001de0 <main+0x898>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	2b0a      	cmp	r3, #10
 8001c9c:	f63f ad57 	bhi.w	800174e <main+0x206>
 8001ca0:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <main+0x760>)
 8001ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca6:	bf00      	nop
 8001ca8:	08001cd5 	.word	0x08001cd5
 8001cac:	08001e01 	.word	0x08001e01
 8001cb0:	08001edd 	.word	0x08001edd
 8001cb4:	08002019 	.word	0x08002019
 8001cb8:	08002159 	.word	0x08002159
 8001cbc:	08002299 	.word	0x08002299
 8001cc0:	0800239f 	.word	0x0800239f
 8001cc4:	080024c9 	.word	0x080024c9
 8001cc8:	080025d5 	.word	0x080025d5
 8001ccc:	080026d1 	.word	0x080026d1
 8001cd0:	080027d9 	.word	0x080027d9
	  		  {
				  case 0:	//Enable PIN configuration
					  if (lcd_update){	//Check if is needed to update LCD
 8001cd4:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <main+0x888>)
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d02d      	beq.n	8001d38 <main+0x7f0>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8001cdc:	f001 fa36 	bl	800314c <Encoder_Read>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b40      	ldr	r3, [pc, #256]	; (8001de4 <main+0x89c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a3e      	ldr	r2, [pc, #248]	; (8001de4 <main+0x89c>)
 8001cea:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8001cec:	f7ff f8ce 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	f7ff f8f4 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8001cf8:	483b      	ldr	r0, [pc, #236]	; (8001de8 <main+0x8a0>)
 8001cfa:	f7ff f923 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 8001cfe:	2101      	movs	r1, #1
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff f8ed 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Enable Pin Inverted:");
 8001d06:	4839      	ldr	r0, [pc, #228]	; (8001dec <main+0x8a4>)
 8001d08:	f7ff f91c 	bl	8000f44 <lcdPrint>
						  if ( parameter.en_invert == FALSE){		//If parameter is FALSE Print not inverted
 8001d0c:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <main+0x870>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d107      	bne.n	8001d24 <main+0x7dc>
							lcdSetCursor(0, 2);
 8001d14:	2102      	movs	r1, #2
 8001d16:	2000      	movs	r0, #0
 8001d18:	f7ff f8e2 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("NON_INVERTED");
 8001d1c:	4834      	ldr	r0, [pc, #208]	; (8001df0 <main+0x8a8>)
 8001d1e:	f7ff f911 	bl	8000f44 <lcdPrint>
 8001d22:	e006      	b.n	8001d32 <main+0x7ea>
						  }else{									//If parameter is TRUE Print inverted
							lcdSetCursor(0, 2);
 8001d24:	2102      	movs	r1, #2
 8001d26:	2000      	movs	r0, #0
 8001d28:	f7ff f8da 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("INVERTED    ");
 8001d2c:	4831      	ldr	r0, [pc, #196]	; (8001df4 <main+0x8ac>)
 8001d2e:	f7ff f909 	bl	8000f44 <lcdPrint>
						  }
						lcd_update = FALSE;	//Reset LCD Update flag
 8001d32:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <main+0x888>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8001d38:	f001 fa08 	bl	800314c <Encoder_Read>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b2e      	ldr	r3, [pc, #184]	; (8001df8 <main+0x8b0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	4a2c      	ldr	r2, [pc, #176]	; (8001df8 <main+0x8b0>)
 8001d46:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8001d48:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <main+0x8b0>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <main+0x89c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d01c      	beq.n	8001d8e <main+0x846>
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8001d54:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <main+0x8b0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a22      	ldr	r2, [pc, #136]	; (8001de4 <main+0x89c>)
 8001d5a:	6013      	str	r3, [r2, #0]
						  if (!parameter.en_invert){					//Change the value
 8001d5c:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <main+0x870>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10a      	bne.n	8001d7a <main+0x832>
							lcdSetCursor(0, 2);
 8001d64:	2102      	movs	r1, #2
 8001d66:	2000      	movs	r0, #0
 8001d68:	f7ff f8ba 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("INVERTED    ");
 8001d6c:	4821      	ldr	r0, [pc, #132]	; (8001df4 <main+0x8ac>)
 8001d6e:	f7ff f8e9 	bl	8000f44 <lcdPrint>
							parameter.en_invert = TRUE;
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <main+0x870>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	801a      	strh	r2, [r3, #0]
 8001d78:	e009      	b.n	8001d8e <main+0x846>
						  }else{
							lcdSetCursor(0, 2);
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff f8af 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("NOT_INVERTED");
 8001d82:	481e      	ldr	r0, [pc, #120]	; (8001dfc <main+0x8b4>)
 8001d84:	f7ff f8de 	bl	8000f44 <lcdPrint>
							parameter.en_invert = FALSE;
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <main+0x870>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	801a      	strh	r2, [r3, #0]
						  }
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8001d8e:	f001 fe73 	bl	8003a78 <Encoder_Switch_Status_Read>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	f040 856b 	bne.w	8002870 <main+0x1328>
						configuration_status += 1;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <main+0x898>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <main+0x898>)
 8001da4:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <main+0x888>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8001dac:	f000 bd60 	b.w	8002870 <main+0x1328>
 8001db0:	20000742 	.word	0x20000742
 8001db4:	20000782 	.word	0x20000782
 8001db8:	20000744 	.word	0x20000744
 8001dbc:	20000008 	.word	0x20000008
 8001dc0:	2000000a 	.word	0x2000000a
 8001dc4:	2000077e 	.word	0x2000077e
 8001dc8:	2000077c 	.word	0x2000077c
 8001dcc:	2000073c 	.word	0x2000073c
 8001dd0:	20000790 	.word	0x20000790
 8001dd4:	080087e0 	.word	0x080087e0
 8001dd8:	2000073e 	.word	0x2000073e
 8001ddc:	2000078e 	.word	0x2000078e
 8001de0:	20000740 	.word	0x20000740
 8001de4:	20000004 	.word	0x20000004
 8001de8:	080087ec 	.word	0x080087ec
 8001dec:	080087fc 	.word	0x080087fc
 8001df0:	08008814 	.word	0x08008814
 8001df4:	08008824 	.word	0x08008824
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	08008834 	.word	0x08008834
				  case 1:	//Dir PIN configuration
					  if (lcd_update){
 8001e00:	4b79      	ldr	r3, [pc, #484]	; (8001fe8 <main+0xaa0>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d02d      	beq.n	8001e64 <main+0x91c>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8001e08:	f001 f9a0 	bl	800314c <Encoder_Read>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4b77      	ldr	r3, [pc, #476]	; (8001fec <main+0xaa4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a75      	ldr	r2, [pc, #468]	; (8001fec <main+0xaa4>)
 8001e16:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8001e18:	f7ff f838 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2003      	movs	r0, #3
 8001e20:	f7ff f85e 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8001e24:	4872      	ldr	r0, [pc, #456]	; (8001ff0 <main+0xaa8>)
 8001e26:	f7ff f88d 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff f857 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Dir Pin Inverted:");
 8001e32:	4870      	ldr	r0, [pc, #448]	; (8001ff4 <main+0xaac>)
 8001e34:	f7ff f886 	bl	8000f44 <lcdPrint>
						  if ( parameter.dir_invert == FALSE){	//If parameter is FALSE Print not inverted
 8001e38:	4b6f      	ldr	r3, [pc, #444]	; (8001ff8 <main+0xab0>)
 8001e3a:	885b      	ldrh	r3, [r3, #2]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d107      	bne.n	8001e50 <main+0x908>
							lcdSetCursor(0, 2);
 8001e40:	2102      	movs	r1, #2
 8001e42:	2000      	movs	r0, #0
 8001e44:	f7ff f84c 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("NON_INVERTED");
 8001e48:	486c      	ldr	r0, [pc, #432]	; (8001ffc <main+0xab4>)
 8001e4a:	f7ff f87b 	bl	8000f44 <lcdPrint>
 8001e4e:	e006      	b.n	8001e5e <main+0x916>
						  }else{									//If parameter is TRUE Print inverted
							lcdSetCursor(0, 2);
 8001e50:	2102      	movs	r1, #2
 8001e52:	2000      	movs	r0, #0
 8001e54:	f7ff f844 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("INVERTED    ");
 8001e58:	4869      	ldr	r0, [pc, #420]	; (8002000 <main+0xab8>)
 8001e5a:	f7ff f873 	bl	8000f44 <lcdPrint>
						  }
						lcd_update = FALSE;
 8001e5e:	4b62      	ldr	r3, [pc, #392]	; (8001fe8 <main+0xaa0>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8001e64:	f001 f972 	bl	800314c <Encoder_Read>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	4b66      	ldr	r3, [pc, #408]	; (8002004 <main+0xabc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	4a64      	ldr	r2, [pc, #400]	; (8002004 <main+0xabc>)
 8001e72:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8001e74:	4b63      	ldr	r3, [pc, #396]	; (8002004 <main+0xabc>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b5c      	ldr	r3, [pc, #368]	; (8001fec <main+0xaa4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d01c      	beq.n	8001eba <main+0x972>
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8001e80:	4b60      	ldr	r3, [pc, #384]	; (8002004 <main+0xabc>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a59      	ldr	r2, [pc, #356]	; (8001fec <main+0xaa4>)
 8001e86:	6013      	str	r3, [r2, #0]
						  if (!parameter.dir_invert){					//Change the value
 8001e88:	4b5b      	ldr	r3, [pc, #364]	; (8001ff8 <main+0xab0>)
 8001e8a:	885b      	ldrh	r3, [r3, #2]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10a      	bne.n	8001ea6 <main+0x95e>
							lcdSetCursor(0, 2);
 8001e90:	2102      	movs	r1, #2
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7ff f824 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("INVERTED    ");
 8001e98:	4859      	ldr	r0, [pc, #356]	; (8002000 <main+0xab8>)
 8001e9a:	f7ff f853 	bl	8000f44 <lcdPrint>
							parameter.dir_invert = TRUE;
 8001e9e:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <main+0xab0>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	805a      	strh	r2, [r3, #2]
 8001ea4:	e009      	b.n	8001eba <main+0x972>
						  }else{
							lcdSetCursor(0, 2);
 8001ea6:	2102      	movs	r1, #2
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7ff f819 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("NOT_INVERTED");
 8001eae:	4856      	ldr	r0, [pc, #344]	; (8002008 <main+0xac0>)
 8001eb0:	f7ff f848 	bl	8000f44 <lcdPrint>
							parameter.dir_invert = FALSE;
 8001eb4:	4b50      	ldr	r3, [pc, #320]	; (8001ff8 <main+0xab0>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	805a      	strh	r2, [r3, #2]
						  }
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8001eba:	f001 fddd 	bl	8003a78 <Encoder_Switch_Status_Read>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	f040 84d8 	bne.w	8002876 <main+0x132e>
						configuration_status += 1;
 8001ec6:	4b51      	ldr	r3, [pc, #324]	; (800200c <main+0xac4>)
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	4b4f      	ldr	r3, [pc, #316]	; (800200c <main+0xac4>)
 8001ed0:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8001ed2:	4b45      	ldr	r3, [pc, #276]	; (8001fe8 <main+0xaa0>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8001ed8:	f000 bccd 	b.w	8002876 <main+0x132e>
				  case 2:
					  if (lcd_update){
 8001edc:	4b42      	ldr	r3, [pc, #264]	; (8001fe8 <main+0xaa0>)
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d028      	beq.n	8001f36 <main+0x9ee>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8001ee4:	f001 f932 	bl	800314c <Encoder_Read>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	4b40      	ldr	r3, [pc, #256]	; (8001fec <main+0xaa4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a3e      	ldr	r2, [pc, #248]	; (8001fec <main+0xaa4>)
 8001ef2:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8001ef4:	f7fe ffca 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2003      	movs	r0, #3
 8001efc:	f7fe fff0 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8001f00:	483b      	ldr	r0, [pc, #236]	; (8001ff0 <main+0xaa8>)
 8001f02:	f7ff f81f 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 8001f06:	2101      	movs	r1, #1
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f7fe ffe9 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Motor Steps per Rev:");
 8001f0e:	4840      	ldr	r0, [pc, #256]	; (8002010 <main+0xac8>)
 8001f10:	f7ff f818 	bl	8000f44 <lcdPrint>
						  LCD_Write_Number(parameter.motor_stepsrev, 0, 2);
 8001f14:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <main+0xab0>)
 8001f16:	889b      	ldrh	r3, [r3, #4]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f001 f955 	bl	80031cc <LCD_Write_Number>
						  lcdSetCursor(8, 2);
 8001f22:	2102      	movs	r1, #2
 8001f24:	2008      	movs	r0, #8
 8001f26:	f7fe ffdb 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(pulse/rev)");
 8001f2a:	483a      	ldr	r0, [pc, #232]	; (8002014 <main+0xacc>)
 8001f2c:	f7ff f80a 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 8001f30:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <main+0xaa0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8001f36:	f001 f909 	bl	800314c <Encoder_Read>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	4b31      	ldr	r3, [pc, #196]	; (8002004 <main+0xabc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4413      	add	r3, r2
 8001f42:	4a30      	ldr	r2, [pc, #192]	; (8002004 <main+0xabc>)
 8001f44:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8001f46:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <main+0xabc>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4b28      	ldr	r3, [pc, #160]	; (8001fec <main+0xaa4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d038      	beq.n	8001fc4 <main+0xa7c>
						  parameter.motor_stepsrev = parameter.motor_stepsrev + ( 100*(current_encoder_value - old_encoder_value) );
 8001f52:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <main+0xab0>)
 8001f54:	889a      	ldrh	r2, [r3, #4]
 8001f56:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <main+0xabc>)
 8001f58:	6819      	ldr	r1, [r3, #0]
 8001f5a:	4b24      	ldr	r3, [pc, #144]	; (8001fec <main+0xaa4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	1acb      	subs	r3, r1, r3
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	4619      	mov	r1, r3
 8001f64:	0089      	lsls	r1, r1, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	4619      	mov	r1, r3
 8001f6a:	0088      	lsls	r0, r1, #2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4603      	mov	r3, r0
 8001f70:	440b      	add	r3, r1
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	4413      	add	r3, r2
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <main+0xab0>)
 8001f7c:	809a      	strh	r2, [r3, #4]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8001f7e:	4b21      	ldr	r3, [pc, #132]	; (8002004 <main+0xabc>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a1a      	ldr	r2, [pc, #104]	; (8001fec <main+0xaa4>)
 8001f84:	6013      	str	r3, [r2, #0]
						  if ( parameter.motor_stepsrev < 100 || ( parameter.motor_stepsrev >= (MAX_MOTOR_STEPREV + 20000) )){	//Limitation value of MAX_MOTOR_STEPREV
 8001f86:	4b1c      	ldr	r3, [pc, #112]	; (8001ff8 <main+0xab0>)
 8001f88:	889b      	ldrh	r3, [r3, #4]
 8001f8a:	2b63      	cmp	r3, #99	; 0x63
 8001f8c:	d905      	bls.n	8001f9a <main+0xa52>
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <main+0xab0>)
 8001f90:	889b      	ldrh	r3, [r3, #4]
 8001f92:	f648 02b7 	movw	r2, #34999	; 0x88b7
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d903      	bls.n	8001fa2 <main+0xa5a>
							  parameter.motor_stepsrev = 100;
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <main+0xab0>)
 8001f9c:	2264      	movs	r2, #100	; 0x64
 8001f9e:	809a      	strh	r2, [r3, #4]
 8001fa0:	e009      	b.n	8001fb6 <main+0xa6e>
						  }else if ( parameter.motor_stepsrev > MAX_MOTOR_STEPREV){
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <main+0xab0>)
 8001fa4:	889b      	ldrh	r3, [r3, #4]
 8001fa6:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d903      	bls.n	8001fb6 <main+0xa6e>
							  parameter.motor_stepsrev = MAX_MOTOR_STEPREV;
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <main+0xab0>)
 8001fb0:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001fb4:	809a      	strh	r2, [r3, #4]
						  }
						  LCD_Write_Number(parameter.motor_stepsrev, 0, 2);
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <main+0xab0>)
 8001fb8:	889b      	ldrh	r3, [r3, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f001 f904 	bl	80031cc <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8001fc4:	f001 fd58 	bl	8003a78 <Encoder_Switch_Status_Read>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	f040 8456 	bne.w	800287c <main+0x1334>
						configuration_status += 1;
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	; (800200c <main+0xac4>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <main+0xac4>)
 8001fda:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8001fdc:	4b02      	ldr	r3, [pc, #8]	; (8001fe8 <main+0xaa0>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8001fe2:	f000 bc4b 	b.w	800287c <main+0x1334>
 8001fe6:	bf00      	nop
 8001fe8:	20000790 	.word	0x20000790
 8001fec:	20000004 	.word	0x20000004
 8001ff0:	080087ec 	.word	0x080087ec
 8001ff4:	08008844 	.word	0x08008844
 8001ff8:	20000744 	.word	0x20000744
 8001ffc:	08008814 	.word	0x08008814
 8002000:	08008824 	.word	0x08008824
 8002004:	20000000 	.word	0x20000000
 8002008:	08008834 	.word	0x08008834
 800200c:	20000740 	.word	0x20000740
 8002010:	08008858 	.word	0x08008858
 8002014:	08008870 	.word	0x08008870
				  case 3:
					  if (lcd_update){
 8002018:	4b93      	ldr	r3, [pc, #588]	; (8002268 <main+0xd20>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d02a      	beq.n	8002076 <main+0xb2e>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8002020:	f001 f894 	bl	800314c <Encoder_Read>
 8002024:	4602      	mov	r2, r0
 8002026:	4b91      	ldr	r3, [pc, #580]	; (800226c <main+0xd24>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4413      	add	r3, r2
 800202c:	4a8f      	ldr	r2, [pc, #572]	; (800226c <main+0xd24>)
 800202e:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8002030:	f7fe ff2c 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 8002034:	2100      	movs	r1, #0
 8002036:	2003      	movs	r0, #3
 8002038:	f7fe ff52 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 800203c:	488c      	ldr	r0, [pc, #560]	; (8002270 <main+0xd28>)
 800203e:	f7fe ff81 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 8002042:	2101      	movs	r1, #1
 8002044:	2000      	movs	r0, #0
 8002046:	f7fe ff4b 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Leadscrew Pitch:");
 800204a:	488a      	ldr	r0, [pc, #552]	; (8002274 <main+0xd2c>)
 800204c:	f7fe ff7a 	bl	8000f44 <lcdPrint>
						  LCD_Write_Float_Number(parameter.leadscrew_pitch,0,2);
 8002050:	4b89      	ldr	r3, [pc, #548]	; (8002278 <main+0xd30>)
 8002052:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002056:	2102      	movs	r1, #2
 8002058:	2000      	movs	r0, #0
 800205a:	ee00 3a10 	vmov	s0, r3
 800205e:	f001 faa3 	bl	80035a8 <LCD_Write_Float_Number>
						  lcdSetCursor(10, 2);
 8002062:	2102      	movs	r1, #2
 8002064:	200a      	movs	r0, #10
 8002066:	f7fe ff3b 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(mm/rev)");
 800206a:	4884      	ldr	r0, [pc, #528]	; (800227c <main+0xd34>)
 800206c:	f7fe ff6a 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 8002070:	4b7d      	ldr	r3, [pc, #500]	; (8002268 <main+0xd20>)
 8002072:	2200      	movs	r2, #0
 8002074:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8002076:	f001 f869 	bl	800314c <Encoder_Read>
 800207a:	4602      	mov	r2, r0
 800207c:	4b80      	ldr	r3, [pc, #512]	; (8002280 <main+0xd38>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4413      	add	r3, r2
 8002082:	4a7f      	ldr	r2, [pc, #508]	; (8002280 <main+0xd38>)
 8002084:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8002086:	4b7e      	ldr	r3, [pc, #504]	; (8002280 <main+0xd38>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4b78      	ldr	r3, [pc, #480]	; (800226c <main+0xd24>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d052      	beq.n	8002138 <main+0xbf0>
						  parameter.leadscrew_pitch = parameter.leadscrew_pitch + (float)( 0.01*(current_encoder_value - old_encoder_value) );
 8002092:	4b79      	ldr	r3, [pc, #484]	; (8002278 <main+0xd30>)
 8002094:	f8d3 4006 	ldr.w	r4, [r3, #6]
 8002098:	4623      	mov	r3, r4
 800209a:	461c      	mov	r4, r3
 800209c:	4b78      	ldr	r3, [pc, #480]	; (8002280 <main+0xd38>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b72      	ldr	r3, [pc, #456]	; (800226c <main+0xd24>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fb6e 	bl	8000788 <__aeabi_i2d>
 80020ac:	a36c      	add	r3, pc, #432	; (adr r3, 8002260 <main+0xd18>)
 80020ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b2:	f7fe f8ed 	bl	8000290 <__aeabi_dmul>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4610      	mov	r0, r2
 80020bc:	4619      	mov	r1, r3
 80020be:	f7fe fc75 	bl	80009ac <__aeabi_d2f>
 80020c2:	ee07 0a90 	vmov	s15, r0
 80020c6:	ee07 4a10 	vmov	s14, r4
 80020ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ce:	4b6a      	ldr	r3, [pc, #424]	; (8002278 <main+0xd30>)
 80020d0:	ee17 2a90 	vmov	r2, s15
 80020d4:	f8c3 2006 	str.w	r2, [r3, #6]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 80020d8:	4b69      	ldr	r3, [pc, #420]	; (8002280 <main+0xd38>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a63      	ldr	r2, [pc, #396]	; (800226c <main+0xd24>)
 80020de:	6013      	str	r3, [r2, #0]
						  if ( parameter.leadscrew_pitch < 0.01){						//Limitation value of Leadscrewpitch
 80020e0:	4b65      	ldr	r3, [pc, #404]	; (8002278 <main+0xd30>)
 80020e2:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fb60 	bl	80007ac <__aeabi_f2d>
 80020ec:	a35c      	add	r3, pc, #368	; (adr r3, 8002260 <main+0xd18>)
 80020ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f2:	f7fe fc13 	bl	800091c <__aeabi_dcmplt>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d004      	beq.n	8002106 <main+0xbbe>
							  parameter.leadscrew_pitch = 0.01;
 80020fc:	4b5e      	ldr	r3, [pc, #376]	; (8002278 <main+0xd30>)
 80020fe:	4a61      	ldr	r2, [pc, #388]	; (8002284 <main+0xd3c>)
 8002100:	f8c3 2006 	str.w	r2, [r3, #6]
 8002104:	e00f      	b.n	8002126 <main+0xbde>
						  }else if ( parameter.leadscrew_pitch > MAX_LEADSCREWPITCH){
 8002106:	4b5c      	ldr	r3, [pc, #368]	; (8002278 <main+0xd30>)
 8002108:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800210c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002110:	ee07 3a10 	vmov	s14, r3
 8002114:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211c:	dd03      	ble.n	8002126 <main+0xbde>
							  parameter.leadscrew_pitch = MAX_LEADSCREWPITCH;
 800211e:	4b56      	ldr	r3, [pc, #344]	; (8002278 <main+0xd30>)
 8002120:	4a59      	ldr	r2, [pc, #356]	; (8002288 <main+0xd40>)
 8002122:	f8c3 2006 	str.w	r2, [r3, #6]
						  }
						  LCD_Write_Float_Number(parameter.leadscrew_pitch,0,2);
 8002126:	4b54      	ldr	r3, [pc, #336]	; (8002278 <main+0xd30>)
 8002128:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800212c:	2102      	movs	r1, #2
 800212e:	2000      	movs	r0, #0
 8002130:	ee00 3a10 	vmov	s0, r3
 8002134:	f001 fa38 	bl	80035a8 <LCD_Write_Float_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8002138:	f001 fc9e 	bl	8003a78 <Encoder_Switch_Status_Read>
 800213c:	4603      	mov	r3, r0
 800213e:	2b01      	cmp	r3, #1
 8002140:	f040 839f 	bne.w	8002882 <main+0x133a>
						configuration_status += 1;
 8002144:	4b51      	ldr	r3, [pc, #324]	; (800228c <main+0xd44>)
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	3301      	adds	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	4b4f      	ldr	r3, [pc, #316]	; (800228c <main+0xd44>)
 800214e:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8002150:	4b45      	ldr	r3, [pc, #276]	; (8002268 <main+0xd20>)
 8002152:	2201      	movs	r2, #1
 8002154:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8002156:	e394      	b.n	8002882 <main+0x133a>
				  case 4:
					  if (lcd_update){
 8002158:	4b43      	ldr	r3, [pc, #268]	; (8002268 <main+0xd20>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d028      	beq.n	80021b2 <main+0xc6a>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8002160:	f000 fff4 	bl	800314c <Encoder_Read>
 8002164:	4602      	mov	r2, r0
 8002166:	4b41      	ldr	r3, [pc, #260]	; (800226c <main+0xd24>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4413      	add	r3, r2
 800216c:	4a3f      	ldr	r2, [pc, #252]	; (800226c <main+0xd24>)
 800216e:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8002170:	f7fe fe8c 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 8002174:	2100      	movs	r1, #0
 8002176:	2003      	movs	r0, #3
 8002178:	f7fe feb2 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 800217c:	483c      	ldr	r0, [pc, #240]	; (8002270 <main+0xd28>)
 800217e:	f7fe fee1 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 8002182:	2101      	movs	r1, #1
 8002184:	2000      	movs	r0, #0
 8002186:	f7fe feab 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Maximum Feedrate:");
 800218a:	4841      	ldr	r0, [pc, #260]	; (8002290 <main+0xd48>)
 800218c:	f7fe feda 	bl	8000f44 <lcdPrint>
						  LCD_Write_Number(parameter.max_feedrate, 0, 2);
 8002190:	4b39      	ldr	r3, [pc, #228]	; (8002278 <main+0xd30>)
 8002192:	895b      	ldrh	r3, [r3, #10]
 8002194:	2202      	movs	r2, #2
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f001 f817 	bl	80031cc <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 800219e:	2102      	movs	r1, #2
 80021a0:	200a      	movs	r0, #10
 80021a2:	f7fe fe9d 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(mm/min)");
 80021a6:	483b      	ldr	r0, [pc, #236]	; (8002294 <main+0xd4c>)
 80021a8:	f7fe fecc 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 80021ac:	4b2e      	ldr	r3, [pc, #184]	; (8002268 <main+0xd20>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 80021b2:	f000 ffcb 	bl	800314c <Encoder_Read>
 80021b6:	4602      	mov	r2, r0
 80021b8:	4b31      	ldr	r3, [pc, #196]	; (8002280 <main+0xd38>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4413      	add	r3, r2
 80021be:	4a30      	ldr	r2, [pc, #192]	; (8002280 <main+0xd38>)
 80021c0:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 80021c2:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <main+0xd38>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4b29      	ldr	r3, [pc, #164]	; (800226c <main+0xd24>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d037      	beq.n	800223e <main+0xcf6>
						  parameter.max_feedrate = parameter.max_feedrate + ( 50*(current_encoder_value - old_encoder_value) );
 80021ce:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <main+0xd30>)
 80021d0:	895a      	ldrh	r2, [r3, #10]
 80021d2:	4b2b      	ldr	r3, [pc, #172]	; (8002280 <main+0xd38>)
 80021d4:	6819      	ldr	r1, [r3, #0]
 80021d6:	4b25      	ldr	r3, [pc, #148]	; (800226c <main+0xd24>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	1acb      	subs	r3, r1, r3
 80021dc:	b29b      	uxth	r3, r3
 80021de:	4619      	mov	r1, r3
 80021e0:	0089      	lsls	r1, r1, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	4619      	mov	r1, r3
 80021e6:	0088      	lsls	r0, r1, #2
 80021e8:	4619      	mov	r1, r3
 80021ea:	4603      	mov	r3, r0
 80021ec:	440b      	add	r3, r1
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	4b20      	ldr	r3, [pc, #128]	; (8002278 <main+0xd30>)
 80021f8:	815a      	strh	r2, [r3, #10]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 80021fa:	4b21      	ldr	r3, [pc, #132]	; (8002280 <main+0xd38>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a1b      	ldr	r2, [pc, #108]	; (800226c <main+0xd24>)
 8002200:	6013      	str	r3, [r2, #0]
						  if ( parameter.max_feedrate < 100 || ( parameter.max_feedrate >= (MAX_LIMIT_FEEDRATE + 20000) ) ){	//Limitation value of max_feedrate
 8002202:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <main+0xd30>)
 8002204:	895b      	ldrh	r3, [r3, #10]
 8002206:	2b63      	cmp	r3, #99	; 0x63
 8002208:	d905      	bls.n	8002216 <main+0xcce>
 800220a:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <main+0xd30>)
 800220c:	895b      	ldrh	r3, [r3, #10]
 800220e:	f245 02db 	movw	r2, #20699	; 0x50db
 8002212:	4293      	cmp	r3, r2
 8002214:	d903      	bls.n	800221e <main+0xcd6>
							  parameter.max_feedrate = 100;
 8002216:	4b18      	ldr	r3, [pc, #96]	; (8002278 <main+0xd30>)
 8002218:	2264      	movs	r2, #100	; 0x64
 800221a:	815a      	strh	r2, [r3, #10]
 800221c:	e008      	b.n	8002230 <main+0xce8>
						  }else if ( parameter.max_feedrate > MAX_LIMIT_FEEDRATE){
 800221e:	4b16      	ldr	r3, [pc, #88]	; (8002278 <main+0xd30>)
 8002220:	895b      	ldrh	r3, [r3, #10]
 8002222:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002226:	d903      	bls.n	8002230 <main+0xce8>
							  parameter.max_feedrate = MAX_LIMIT_FEEDRATE;
 8002228:	4b13      	ldr	r3, [pc, #76]	; (8002278 <main+0xd30>)
 800222a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800222e:	815a      	strh	r2, [r3, #10]
						  }
						  LCD_Write_Number(parameter.max_feedrate, 0, 2);
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <main+0xd30>)
 8002232:	895b      	ldrh	r3, [r3, #10]
 8002234:	2202      	movs	r2, #2
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f000 ffc7 	bl	80031cc <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 800223e:	f001 fc1b 	bl	8003a78 <Encoder_Switch_Status_Read>
 8002242:	4603      	mov	r3, r0
 8002244:	2b01      	cmp	r3, #1
 8002246:	f040 831f 	bne.w	8002888 <main+0x1340>
						configuration_status += 1;
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <main+0xd44>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	3301      	adds	r3, #1
 8002250:	b29a      	uxth	r2, r3
 8002252:	4b0e      	ldr	r3, [pc, #56]	; (800228c <main+0xd44>)
 8002254:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8002256:	4b04      	ldr	r3, [pc, #16]	; (8002268 <main+0xd20>)
 8002258:	2201      	movs	r2, #1
 800225a:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 800225c:	e314      	b.n	8002888 <main+0x1340>
 800225e:	bf00      	nop
 8002260:	47ae147b 	.word	0x47ae147b
 8002264:	3f847ae1 	.word	0x3f847ae1
 8002268:	20000790 	.word	0x20000790
 800226c:	20000004 	.word	0x20000004
 8002270:	080087ec 	.word	0x080087ec
 8002274:	0800887c 	.word	0x0800887c
 8002278:	20000744 	.word	0x20000744
 800227c:	08008890 	.word	0x08008890
 8002280:	20000000 	.word	0x20000000
 8002284:	3c23d70a 	.word	0x3c23d70a
 8002288:	41200000 	.word	0x41200000
 800228c:	20000740 	.word	0x20000740
 8002290:	0800889c 	.word	0x0800889c
 8002294:	080088b0 	.word	0x080088b0
				  case 5:
					  if (lcd_update){
 8002298:	4b82      	ldr	r3, [pc, #520]	; (80024a4 <main+0xf5c>)
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d028      	beq.n	80022f2 <main+0xdaa>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 80022a0:	f000 ff54 	bl	800314c <Encoder_Read>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b80      	ldr	r3, [pc, #512]	; (80024a8 <main+0xf60>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	4a7e      	ldr	r2, [pc, #504]	; (80024a8 <main+0xf60>)
 80022ae:	6013      	str	r3, [r2, #0]
						  lcdClear();
 80022b0:	f7fe fdec 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 80022b4:	2100      	movs	r1, #0
 80022b6:	2003      	movs	r0, #3
 80022b8:	f7fe fe12 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 80022bc:	487b      	ldr	r0, [pc, #492]	; (80024ac <main+0xf64>)
 80022be:	f7fe fe41 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 80022c2:	2101      	movs	r1, #1
 80022c4:	2000      	movs	r0, #0
 80022c6:	f7fe fe0b 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Fast Mov Feedrate:");
 80022ca:	4879      	ldr	r0, [pc, #484]	; (80024b0 <main+0xf68>)
 80022cc:	f7fe fe3a 	bl	8000f44 <lcdPrint>
						  LCD_Write_Number(parameter.fast_movement_feedrate, 0, 2);
 80022d0:	4b78      	ldr	r3, [pc, #480]	; (80024b4 <main+0xf6c>)
 80022d2:	899b      	ldrh	r3, [r3, #12]
 80022d4:	2202      	movs	r2, #2
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 ff77 	bl	80031cc <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 80022de:	2102      	movs	r1, #2
 80022e0:	200a      	movs	r0, #10
 80022e2:	f7fe fdfd 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(mm/min)");
 80022e6:	4874      	ldr	r0, [pc, #464]	; (80024b8 <main+0xf70>)
 80022e8:	f7fe fe2c 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 80022ec:	4b6d      	ldr	r3, [pc, #436]	; (80024a4 <main+0xf5c>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 80022f2:	f000 ff2b 	bl	800314c <Encoder_Read>
 80022f6:	4602      	mov	r2, r0
 80022f8:	4b70      	ldr	r3, [pc, #448]	; (80024bc <main+0xf74>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4413      	add	r3, r2
 80022fe:	4a6f      	ldr	r2, [pc, #444]	; (80024bc <main+0xf74>)
 8002300:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8002302:	4b6e      	ldr	r3, [pc, #440]	; (80024bc <main+0xf74>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4b68      	ldr	r3, [pc, #416]	; (80024a8 <main+0xf60>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d037      	beq.n	800237e <main+0xe36>
						  parameter.fast_movement_feedrate = parameter.fast_movement_feedrate + ( 50*(current_encoder_value - old_encoder_value) );
 800230e:	4b69      	ldr	r3, [pc, #420]	; (80024b4 <main+0xf6c>)
 8002310:	899a      	ldrh	r2, [r3, #12]
 8002312:	4b6a      	ldr	r3, [pc, #424]	; (80024bc <main+0xf74>)
 8002314:	6819      	ldr	r1, [r3, #0]
 8002316:	4b64      	ldr	r3, [pc, #400]	; (80024a8 <main+0xf60>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	1acb      	subs	r3, r1, r3
 800231c:	b29b      	uxth	r3, r3
 800231e:	4619      	mov	r1, r3
 8002320:	0089      	lsls	r1, r1, #2
 8002322:	440b      	add	r3, r1
 8002324:	4619      	mov	r1, r3
 8002326:	0088      	lsls	r0, r1, #2
 8002328:	4619      	mov	r1, r3
 800232a:	4603      	mov	r3, r0
 800232c:	440b      	add	r3, r1
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	b29b      	uxth	r3, r3
 8002332:	4413      	add	r3, r2
 8002334:	b29a      	uxth	r2, r3
 8002336:	4b5f      	ldr	r3, [pc, #380]	; (80024b4 <main+0xf6c>)
 8002338:	819a      	strh	r2, [r3, #12]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 800233a:	4b60      	ldr	r3, [pc, #384]	; (80024bc <main+0xf74>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a5a      	ldr	r2, [pc, #360]	; (80024a8 <main+0xf60>)
 8002340:	6013      	str	r3, [r2, #0]
						  if ( parameter.fast_movement_feedrate < 50 || ( parameter.fast_movement_feedrate >= (MAX_FAST_MOVEMENT_FEEDRATE + 20000) )){	//Limitation value of fastmovement_feedrate
 8002342:	4b5c      	ldr	r3, [pc, #368]	; (80024b4 <main+0xf6c>)
 8002344:	899b      	ldrh	r3, [r3, #12]
 8002346:	2b31      	cmp	r3, #49	; 0x31
 8002348:	d905      	bls.n	8002356 <main+0xe0e>
 800234a:	4b5a      	ldr	r3, [pc, #360]	; (80024b4 <main+0xf6c>)
 800234c:	899b      	ldrh	r3, [r3, #12]
 800234e:	f245 02db 	movw	r2, #20699	; 0x50db
 8002352:	4293      	cmp	r3, r2
 8002354:	d903      	bls.n	800235e <main+0xe16>
							  parameter.fast_movement_feedrate = 50;
 8002356:	4b57      	ldr	r3, [pc, #348]	; (80024b4 <main+0xf6c>)
 8002358:	2232      	movs	r2, #50	; 0x32
 800235a:	819a      	strh	r2, [r3, #12]
 800235c:	e008      	b.n	8002370 <main+0xe28>
						  }else if ( parameter.fast_movement_feedrate > MAX_FAST_MOVEMENT_FEEDRATE){
 800235e:	4b55      	ldr	r3, [pc, #340]	; (80024b4 <main+0xf6c>)
 8002360:	899b      	ldrh	r3, [r3, #12]
 8002362:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002366:	d903      	bls.n	8002370 <main+0xe28>
							  parameter.fast_movement_feedrate = MAX_FAST_MOVEMENT_FEEDRATE;
 8002368:	4b52      	ldr	r3, [pc, #328]	; (80024b4 <main+0xf6c>)
 800236a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800236e:	819a      	strh	r2, [r3, #12]
						  }
						  LCD_Write_Number(parameter.fast_movement_feedrate, 0, 2);
 8002370:	4b50      	ldr	r3, [pc, #320]	; (80024b4 <main+0xf6c>)
 8002372:	899b      	ldrh	r3, [r3, #12]
 8002374:	2202      	movs	r2, #2
 8002376:	2100      	movs	r1, #0
 8002378:	4618      	mov	r0, r3
 800237a:	f000 ff27 	bl	80031cc <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 800237e:	f001 fb7b 	bl	8003a78 <Encoder_Switch_Status_Read>
 8002382:	4603      	mov	r3, r0
 8002384:	2b01      	cmp	r3, #1
 8002386:	f040 8282 	bne.w	800288e <main+0x1346>
						configuration_status += 1;
 800238a:	4b4d      	ldr	r3, [pc, #308]	; (80024c0 <main+0xf78>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	3301      	adds	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	4b4b      	ldr	r3, [pc, #300]	; (80024c0 <main+0xf78>)
 8002394:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8002396:	4b43      	ldr	r3, [pc, #268]	; (80024a4 <main+0xf5c>)
 8002398:	2201      	movs	r2, #1
 800239a:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 800239c:	e277      	b.n	800288e <main+0x1346>
				  case 6:
					  if (lcd_update){
 800239e:	4b41      	ldr	r3, [pc, #260]	; (80024a4 <main+0xf5c>)
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d028      	beq.n	80023f8 <main+0xeb0>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 80023a6:	f000 fed1 	bl	800314c <Encoder_Read>
 80023aa:	4602      	mov	r2, r0
 80023ac:	4b3e      	ldr	r3, [pc, #248]	; (80024a8 <main+0xf60>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4413      	add	r3, r2
 80023b2:	4a3d      	ldr	r2, [pc, #244]	; (80024a8 <main+0xf60>)
 80023b4:	6013      	str	r3, [r2, #0]
						  lcdClear();
 80023b6:	f7fe fd69 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 80023ba:	2100      	movs	r1, #0
 80023bc:	2003      	movs	r0, #3
 80023be:	f7fe fd8f 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 80023c2:	483a      	ldr	r0, [pc, #232]	; (80024ac <main+0xf64>)
 80023c4:	f7fe fdbe 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 80023c8:	2101      	movs	r1, #1
 80023ca:	2000      	movs	r0, #0
 80023cc:	f7fe fd88 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Initial Feedrate:");
 80023d0:	483c      	ldr	r0, [pc, #240]	; (80024c4 <main+0xf7c>)
 80023d2:	f7fe fdb7 	bl	8000f44 <lcdPrint>
						  LCD_Write_Number(parameter.initial_feedrate, 0, 2);
 80023d6:	4b37      	ldr	r3, [pc, #220]	; (80024b4 <main+0xf6c>)
 80023d8:	8a5b      	ldrh	r3, [r3, #18]
 80023da:	2202      	movs	r2, #2
 80023dc:	2100      	movs	r1, #0
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fef4 	bl	80031cc <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 80023e4:	2102      	movs	r1, #2
 80023e6:	200a      	movs	r0, #10
 80023e8:	f7fe fd7a 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(mm/min)");
 80023ec:	4832      	ldr	r0, [pc, #200]	; (80024b8 <main+0xf70>)
 80023ee:	f7fe fda9 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 80023f2:	4b2c      	ldr	r3, [pc, #176]	; (80024a4 <main+0xf5c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 80023f8:	f000 fea8 	bl	800314c <Encoder_Read>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4b2f      	ldr	r3, [pc, #188]	; (80024bc <main+0xf74>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4413      	add	r3, r2
 8002404:	4a2d      	ldr	r2, [pc, #180]	; (80024bc <main+0xf74>)
 8002406:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8002408:	4b2c      	ldr	r3, [pc, #176]	; (80024bc <main+0xf74>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <main+0xf60>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d036      	beq.n	8002482 <main+0xf3a>
						  parameter.initial_feedrate = parameter.initial_feedrate + ( 10*(current_encoder_value - old_encoder_value) );
 8002414:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <main+0xf6c>)
 8002416:	8a5a      	ldrh	r2, [r3, #18]
 8002418:	4b28      	ldr	r3, [pc, #160]	; (80024bc <main+0xf74>)
 800241a:	6819      	ldr	r1, [r3, #0]
 800241c:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <main+0xf60>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	1acb      	subs	r3, r1, r3
 8002422:	b29b      	uxth	r3, r3
 8002424:	4619      	mov	r1, r3
 8002426:	0089      	lsls	r1, r1, #2
 8002428:	440b      	add	r3, r1
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	b29b      	uxth	r3, r3
 800242e:	4413      	add	r3, r2
 8002430:	b29a      	uxth	r2, r3
 8002432:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <main+0xf6c>)
 8002434:	825a      	strh	r2, [r3, #18]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8002436:	4b21      	ldr	r3, [pc, #132]	; (80024bc <main+0xf74>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <main+0xf60>)
 800243c:	6013      	str	r3, [r2, #0]
						  if ( parameter.initial_feedrate < 10 || ( parameter.initial_feedrate >= (parameter.max_feedrate + 20000) )){	//Limitation value of initial_feedrate
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <main+0xf6c>)
 8002440:	8a5b      	ldrh	r3, [r3, #18]
 8002442:	2b09      	cmp	r3, #9
 8002444:	d908      	bls.n	8002458 <main+0xf10>
 8002446:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <main+0xf6c>)
 8002448:	895b      	ldrh	r3, [r3, #10]
 800244a:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800244e:	331f      	adds	r3, #31
 8002450:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <main+0xf6c>)
 8002452:	8a52      	ldrh	r2, [r2, #18]
 8002454:	4293      	cmp	r3, r2
 8002456:	da03      	bge.n	8002460 <main+0xf18>
							  parameter.initial_feedrate = 10;
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <main+0xf6c>)
 800245a:	220a      	movs	r2, #10
 800245c:	825a      	strh	r2, [r3, #18]
 800245e:	e009      	b.n	8002474 <main+0xf2c>
						  }else if ( parameter.initial_feedrate > parameter.max_feedrate){
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <main+0xf6c>)
 8002462:	8a5a      	ldrh	r2, [r3, #18]
 8002464:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <main+0xf6c>)
 8002466:	895b      	ldrh	r3, [r3, #10]
 8002468:	429a      	cmp	r2, r3
 800246a:	d903      	bls.n	8002474 <main+0xf2c>
							  parameter.initial_feedrate = parameter.max_feedrate;
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <main+0xf6c>)
 800246e:	895a      	ldrh	r2, [r3, #10]
 8002470:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <main+0xf6c>)
 8002472:	825a      	strh	r2, [r3, #18]
						  }
						  LCD_Write_Number(parameter.initial_feedrate, 0, 2);
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <main+0xf6c>)
 8002476:	8a5b      	ldrh	r3, [r3, #18]
 8002478:	2202      	movs	r2, #2
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f000 fea5 	bl	80031cc <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8002482:	f001 faf9 	bl	8003a78 <Encoder_Switch_Status_Read>
 8002486:	4603      	mov	r3, r0
 8002488:	2b01      	cmp	r3, #1
 800248a:	f040 8203 	bne.w	8002894 <main+0x134c>
						configuration_status += 1;
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <main+0xf78>)
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	3301      	adds	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <main+0xf78>)
 8002498:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 800249a:	4b02      	ldr	r3, [pc, #8]	; (80024a4 <main+0xf5c>)
 800249c:	2201      	movs	r2, #1
 800249e:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 80024a0:	e1f8      	b.n	8002894 <main+0x134c>
 80024a2:	bf00      	nop
 80024a4:	20000790 	.word	0x20000790
 80024a8:	20000004 	.word	0x20000004
 80024ac:	080087ec 	.word	0x080087ec
 80024b0:	080088bc 	.word	0x080088bc
 80024b4:	20000744 	.word	0x20000744
 80024b8:	080088b0 	.word	0x080088b0
 80024bc:	20000000 	.word	0x20000000
 80024c0:	20000740 	.word	0x20000740
 80024c4:	080088d0 	.word	0x080088d0
				  case 7:
					  if (lcd_update){
 80024c8:	4b95      	ldr	r3, [pc, #596]	; (8002720 <main+0x11d8>)
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d028      	beq.n	8002522 <main+0xfda>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 80024d0:	f000 fe3c 	bl	800314c <Encoder_Read>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b93      	ldr	r3, [pc, #588]	; (8002724 <main+0x11dc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	4a91      	ldr	r2, [pc, #580]	; (8002724 <main+0x11dc>)
 80024de:	6013      	str	r3, [r2, #0]
						  lcdClear();
 80024e0:	f7fe fcd4 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 80024e4:	2100      	movs	r1, #0
 80024e6:	2003      	movs	r0, #3
 80024e8:	f7fe fcfa 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 80024ec:	488e      	ldr	r0, [pc, #568]	; (8002728 <main+0x11e0>)
 80024ee:	f7fe fd29 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 80024f2:	2101      	movs	r1, #1
 80024f4:	2000      	movs	r0, #0
 80024f6:	f7fe fcf3 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Acc Time:");
 80024fa:	488c      	ldr	r0, [pc, #560]	; (800272c <main+0x11e4>)
 80024fc:	f7fe fd22 	bl	8000f44 <lcdPrint>
						  LCD_Write_Number(parameter.acc_time, 0, 2);
 8002500:	4b8b      	ldr	r3, [pc, #556]	; (8002730 <main+0x11e8>)
 8002502:	89db      	ldrh	r3, [r3, #14]
 8002504:	2202      	movs	r2, #2
 8002506:	2100      	movs	r1, #0
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fe5f 	bl	80031cc <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 800250e:	2102      	movs	r1, #2
 8002510:	200a      	movs	r0, #10
 8002512:	f7fe fce5 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(ms)");
 8002516:	4887      	ldr	r0, [pc, #540]	; (8002734 <main+0x11ec>)
 8002518:	f7fe fd14 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 800251c:	4b80      	ldr	r3, [pc, #512]	; (8002720 <main+0x11d8>)
 800251e:	2200      	movs	r2, #0
 8002520:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8002522:	f000 fe13 	bl	800314c <Encoder_Read>
 8002526:	4602      	mov	r2, r0
 8002528:	4b83      	ldr	r3, [pc, #524]	; (8002738 <main+0x11f0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4413      	add	r3, r2
 800252e:	4a82      	ldr	r2, [pc, #520]	; (8002738 <main+0x11f0>)
 8002530:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8002532:	4b81      	ldr	r3, [pc, #516]	; (8002738 <main+0x11f0>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4b7b      	ldr	r3, [pc, #492]	; (8002724 <main+0x11dc>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d03a      	beq.n	80025b4 <main+0x106c>
						  parameter.acc_time = parameter.acc_time + ( 100*(current_encoder_value - old_encoder_value) );
 800253e:	4b7c      	ldr	r3, [pc, #496]	; (8002730 <main+0x11e8>)
 8002540:	89da      	ldrh	r2, [r3, #14]
 8002542:	4b7d      	ldr	r3, [pc, #500]	; (8002738 <main+0x11f0>)
 8002544:	6819      	ldr	r1, [r3, #0]
 8002546:	4b77      	ldr	r3, [pc, #476]	; (8002724 <main+0x11dc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	1acb      	subs	r3, r1, r3
 800254c:	b29b      	uxth	r3, r3
 800254e:	4619      	mov	r1, r3
 8002550:	0089      	lsls	r1, r1, #2
 8002552:	440b      	add	r3, r1
 8002554:	4619      	mov	r1, r3
 8002556:	0088      	lsls	r0, r1, #2
 8002558:	4619      	mov	r1, r3
 800255a:	4603      	mov	r3, r0
 800255c:	440b      	add	r3, r1
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	b29b      	uxth	r3, r3
 8002562:	4413      	add	r3, r2
 8002564:	b29a      	uxth	r2, r3
 8002566:	4b72      	ldr	r3, [pc, #456]	; (8002730 <main+0x11e8>)
 8002568:	81da      	strh	r2, [r3, #14]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 800256a:	4b73      	ldr	r3, [pc, #460]	; (8002738 <main+0x11f0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a6d      	ldr	r2, [pc, #436]	; (8002724 <main+0x11dc>)
 8002570:	6013      	str	r3, [r2, #0]
						  if ( ( parameter.acc_time < MIN_ACCELERATION_TIME ) || ( parameter.acc_time >= (MAX_ACCELERATION_TIME + 20000) )){	//Limitation value of MIN_ACCELERATION_TIME
 8002572:	4b6f      	ldr	r3, [pc, #444]	; (8002730 <main+0x11e8>)
 8002574:	89db      	ldrh	r3, [r3, #14]
 8002576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800257a:	d305      	bcc.n	8002588 <main+0x1040>
 800257c:	4b6c      	ldr	r3, [pc, #432]	; (8002730 <main+0x11e8>)
 800257e:	89db      	ldrh	r3, [r3, #14]
 8002580:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8002584:	4293      	cmp	r3, r2
 8002586:	d904      	bls.n	8002592 <main+0x104a>
							  parameter.acc_time = MIN_ACCELERATION_TIME;
 8002588:	4b69      	ldr	r3, [pc, #420]	; (8002730 <main+0x11e8>)
 800258a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800258e:	81da      	strh	r2, [r3, #14]
 8002590:	e009      	b.n	80025a6 <main+0x105e>
						  }else if ( parameter.acc_time > MAX_ACCELERATION_TIME){
 8002592:	4b67      	ldr	r3, [pc, #412]	; (8002730 <main+0x11e8>)
 8002594:	89db      	ldrh	r3, [r3, #14]
 8002596:	f241 3288 	movw	r2, #5000	; 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d903      	bls.n	80025a6 <main+0x105e>
							  parameter.acc_time = MAX_ACCELERATION_TIME;
 800259e:	4b64      	ldr	r3, [pc, #400]	; (8002730 <main+0x11e8>)
 80025a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a4:	81da      	strh	r2, [r3, #14]
						  }
						  LCD_Write_Number(parameter.acc_time, 0, 2);
 80025a6:	4b62      	ldr	r3, [pc, #392]	; (8002730 <main+0x11e8>)
 80025a8:	89db      	ldrh	r3, [r3, #14]
 80025aa:	2202      	movs	r2, #2
 80025ac:	2100      	movs	r1, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 fe0c 	bl	80031cc <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 80025b4:	f001 fa60 	bl	8003a78 <Encoder_Switch_Status_Read>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	f040 816d 	bne.w	800289a <main+0x1352>
						configuration_status += 1;
 80025c0:	4b5e      	ldr	r3, [pc, #376]	; (800273c <main+0x11f4>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	3301      	adds	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	4b5c      	ldr	r3, [pc, #368]	; (800273c <main+0x11f4>)
 80025ca:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 80025cc:	4b54      	ldr	r3, [pc, #336]	; (8002720 <main+0x11d8>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 80025d2:	e162      	b.n	800289a <main+0x1352>
				  case 8:
					  if (lcd_update){
 80025d4:	4b52      	ldr	r3, [pc, #328]	; (8002720 <main+0x11d8>)
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d028      	beq.n	800262e <main+0x10e6>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 80025dc:	f000 fdb6 	bl	800314c <Encoder_Read>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b50      	ldr	r3, [pc, #320]	; (8002724 <main+0x11dc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	4a4e      	ldr	r2, [pc, #312]	; (8002724 <main+0x11dc>)
 80025ea:	6013      	str	r3, [r2, #0]
						  lcdClear();
 80025ec:	f7fe fc4e 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 80025f0:	2100      	movs	r1, #0
 80025f2:	2003      	movs	r0, #3
 80025f4:	f7fe fc74 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 80025f8:	484b      	ldr	r0, [pc, #300]	; (8002728 <main+0x11e0>)
 80025fa:	f7fe fca3 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 80025fe:	2101      	movs	r1, #1
 8002600:	2000      	movs	r0, #0
 8002602:	f7fe fc6d 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Acc Update Ratio:");
 8002606:	484e      	ldr	r0, [pc, #312]	; (8002740 <main+0x11f8>)
 8002608:	f7fe fc9c 	bl	8000f44 <lcdPrint>
						  LCD_Write_Number(parameter.acc_update_ratio, 0, 2);
 800260c:	4b48      	ldr	r3, [pc, #288]	; (8002730 <main+0x11e8>)
 800260e:	8a1b      	ldrh	r3, [r3, #16]
 8002610:	2202      	movs	r2, #2
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f000 fdd9 	bl	80031cc <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 800261a:	2102      	movs	r1, #2
 800261c:	200a      	movs	r0, #10
 800261e:	f7fe fc5f 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(ms)");
 8002622:	4844      	ldr	r0, [pc, #272]	; (8002734 <main+0x11ec>)
 8002624:	f7fe fc8e 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 8002628:	4b3d      	ldr	r3, [pc, #244]	; (8002720 <main+0x11d8>)
 800262a:	2200      	movs	r2, #0
 800262c:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 800262e:	f000 fd8d 	bl	800314c <Encoder_Read>
 8002632:	4602      	mov	r2, r0
 8002634:	4b40      	ldr	r3, [pc, #256]	; (8002738 <main+0x11f0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4413      	add	r3, r2
 800263a:	4a3f      	ldr	r2, [pc, #252]	; (8002738 <main+0x11f0>)
 800263c:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 800263e:	4b3e      	ldr	r3, [pc, #248]	; (8002738 <main+0x11f0>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4b38      	ldr	r3, [pc, #224]	; (8002724 <main+0x11dc>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d032      	beq.n	80026b0 <main+0x1168>
						  parameter.acc_update_ratio = parameter.acc_update_ratio + ( 10*(current_encoder_value - old_encoder_value) );
 800264a:	4b39      	ldr	r3, [pc, #228]	; (8002730 <main+0x11e8>)
 800264c:	8a1a      	ldrh	r2, [r3, #16]
 800264e:	4b3a      	ldr	r3, [pc, #232]	; (8002738 <main+0x11f0>)
 8002650:	6819      	ldr	r1, [r3, #0]
 8002652:	4b34      	ldr	r3, [pc, #208]	; (8002724 <main+0x11dc>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	1acb      	subs	r3, r1, r3
 8002658:	b29b      	uxth	r3, r3
 800265a:	4619      	mov	r1, r3
 800265c:	0089      	lsls	r1, r1, #2
 800265e:	440b      	add	r3, r1
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	b29b      	uxth	r3, r3
 8002664:	4413      	add	r3, r2
 8002666:	b29a      	uxth	r2, r3
 8002668:	4b31      	ldr	r3, [pc, #196]	; (8002730 <main+0x11e8>)
 800266a:	821a      	strh	r2, [r3, #16]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 800266c:	4b32      	ldr	r3, [pc, #200]	; (8002738 <main+0x11f0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a2c      	ldr	r2, [pc, #176]	; (8002724 <main+0x11dc>)
 8002672:	6013      	str	r3, [r2, #0]
						  if ( ( parameter.acc_update_ratio < MIN_ACC_UPDATE_RATIO ) || ( parameter.acc_update_ratio >= (MAX_ACC_UPDATE_RATIO + 20000) )){	//Limitation value of MAX_ACC_UPDATE_RATIO
 8002674:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <main+0x11e8>)
 8002676:	8a1b      	ldrh	r3, [r3, #16]
 8002678:	2b13      	cmp	r3, #19
 800267a:	d905      	bls.n	8002688 <main+0x1140>
 800267c:	4b2c      	ldr	r3, [pc, #176]	; (8002730 <main+0x11e8>)
 800267e:	8a1b      	ldrh	r3, [r3, #16]
 8002680:	f644 724b 	movw	r2, #20299	; 0x4f4b
 8002684:	4293      	cmp	r3, r2
 8002686:	d903      	bls.n	8002690 <main+0x1148>
							  parameter.acc_update_ratio = MIN_ACC_UPDATE_RATIO;
 8002688:	4b29      	ldr	r3, [pc, #164]	; (8002730 <main+0x11e8>)
 800268a:	2214      	movs	r2, #20
 800268c:	821a      	strh	r2, [r3, #16]
 800268e:	e008      	b.n	80026a2 <main+0x115a>
						  }else if ( parameter.acc_update_ratio > MAX_ACC_UPDATE_RATIO){
 8002690:	4b27      	ldr	r3, [pc, #156]	; (8002730 <main+0x11e8>)
 8002692:	8a1b      	ldrh	r3, [r3, #16]
 8002694:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002698:	d903      	bls.n	80026a2 <main+0x115a>
							  parameter.acc_update_ratio = MAX_ACC_UPDATE_RATIO;
 800269a:	4b25      	ldr	r3, [pc, #148]	; (8002730 <main+0x11e8>)
 800269c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026a0:	821a      	strh	r2, [r3, #16]
						  }
						  LCD_Write_Number(parameter.acc_update_ratio, 0, 2);
 80026a2:	4b23      	ldr	r3, [pc, #140]	; (8002730 <main+0x11e8>)
 80026a4:	8a1b      	ldrh	r3, [r3, #16]
 80026a6:	2202      	movs	r2, #2
 80026a8:	2100      	movs	r1, #0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fd8e 	bl	80031cc <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 80026b0:	f001 f9e2 	bl	8003a78 <Encoder_Switch_Status_Read>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	f040 80f2 	bne.w	80028a0 <main+0x1358>
						configuration_status += 1;
 80026bc:	4b1f      	ldr	r3, [pc, #124]	; (800273c <main+0x11f4>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	3301      	adds	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <main+0x11f4>)
 80026c6:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 80026c8:	4b15      	ldr	r3, [pc, #84]	; (8002720 <main+0x11d8>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 80026ce:	e0e7      	b.n	80028a0 <main+0x1358>
				  case 9:
					  if (lcd_update){
 80026d0:	4b13      	ldr	r3, [pc, #76]	; (8002720 <main+0x11d8>)
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d045      	beq.n	8002764 <main+0x121c>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 80026d8:	f000 fd38 	bl	800314c <Encoder_Read>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <main+0x11dc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	4a0f      	ldr	r2, [pc, #60]	; (8002724 <main+0x11dc>)
 80026e6:	6013      	str	r3, [r2, #0]
						  lcdClear();
 80026e8:	f7fe fbd0 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 80026ec:	2100      	movs	r1, #0
 80026ee:	2003      	movs	r0, #3
 80026f0:	f7fe fbf6 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 80026f4:	480c      	ldr	r0, [pc, #48]	; (8002728 <main+0x11e0>)
 80026f6:	f7fe fc25 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 80026fa:	2101      	movs	r1, #1
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7fe fbef 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Save Configuration");
 8002702:	4810      	ldr	r0, [pc, #64]	; (8002744 <main+0x11fc>)
 8002704:	f7fe fc1e 	bl	8000f44 <lcdPrint>
						  if ( save_bool == FALSE){		//If parameter is FALSE Print exit without save
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <main+0x1200>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d11f      	bne.n	8002750 <main+0x1208>
							lcdSetCursor(0, 2);
 8002710:	2102      	movs	r1, #2
 8002712:	2000      	movs	r0, #0
 8002714:	f7fe fbe4 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("EXIT WITHOUT SAVE");
 8002718:	480c      	ldr	r0, [pc, #48]	; (800274c <main+0x1204>)
 800271a:	f7fe fc13 	bl	8000f44 <lcdPrint>
 800271e:	e01e      	b.n	800275e <main+0x1216>
 8002720:	20000790 	.word	0x20000790
 8002724:	20000004 	.word	0x20000004
 8002728:	080087ec 	.word	0x080087ec
 800272c:	080088e4 	.word	0x080088e4
 8002730:	20000744 	.word	0x20000744
 8002734:	080088f0 	.word	0x080088f0
 8002738:	20000000 	.word	0x20000000
 800273c:	20000740 	.word	0x20000740
 8002740:	080088f8 	.word	0x080088f8
 8002744:	0800890c 	.word	0x0800890c
 8002748:	2000078c 	.word	0x2000078c
 800274c:	08008920 	.word	0x08008920
						  }else{									//If parameter is TRUE Print Save Parameters
							lcdSetCursor(0, 2);
 8002750:	2102      	movs	r1, #2
 8002752:	2000      	movs	r0, #0
 8002754:	f7fe fbc4 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("SAVE PARAMETERS  ");
 8002758:	4854      	ldr	r0, [pc, #336]	; (80028ac <main+0x1364>)
 800275a:	f7fe fbf3 	bl	8000f44 <lcdPrint>
						  }
						  lcd_update = FALSE;
 800275e:	4b54      	ldr	r3, [pc, #336]	; (80028b0 <main+0x1368>)
 8002760:	2200      	movs	r2, #0
 8002762:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8002764:	f000 fcf2 	bl	800314c <Encoder_Read>
 8002768:	4602      	mov	r2, r0
 800276a:	4b52      	ldr	r3, [pc, #328]	; (80028b4 <main+0x136c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4413      	add	r3, r2
 8002770:	4a50      	ldr	r2, [pc, #320]	; (80028b4 <main+0x136c>)
 8002772:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8002774:	4b4f      	ldr	r3, [pc, #316]	; (80028b4 <main+0x136c>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b4f      	ldr	r3, [pc, #316]	; (80028b8 <main+0x1370>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d01c      	beq.n	80027ba <main+0x1272>
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8002780:	4b4c      	ldr	r3, [pc, #304]	; (80028b4 <main+0x136c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a4c      	ldr	r2, [pc, #304]	; (80028b8 <main+0x1370>)
 8002786:	6013      	str	r3, [r2, #0]
						  if (save_bool){					//Change the value
 8002788:	4b4c      	ldr	r3, [pc, #304]	; (80028bc <main+0x1374>)
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <main+0x125e>
							lcdSetCursor(0, 2);
 8002790:	2102      	movs	r1, #2
 8002792:	2000      	movs	r0, #0
 8002794:	f7fe fba4 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("EXIT WITHOUT SAVE");
 8002798:	4849      	ldr	r0, [pc, #292]	; (80028c0 <main+0x1378>)
 800279a:	f7fe fbd3 	bl	8000f44 <lcdPrint>
							save_bool = FALSE;
 800279e:	4b47      	ldr	r3, [pc, #284]	; (80028bc <main+0x1374>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	801a      	strh	r2, [r3, #0]
 80027a4:	e009      	b.n	80027ba <main+0x1272>
						  }else{
							lcdSetCursor(0, 2);
 80027a6:	2102      	movs	r1, #2
 80027a8:	2000      	movs	r0, #0
 80027aa:	f7fe fb99 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("SAVE PARAMETERS  ");
 80027ae:	483f      	ldr	r0, [pc, #252]	; (80028ac <main+0x1364>)
 80027b0:	f7fe fbc8 	bl	8000f44 <lcdPrint>
							save_bool = TRUE;
 80027b4:	4b41      	ldr	r3, [pc, #260]	; (80028bc <main+0x1374>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	801a      	strh	r2, [r3, #0]
						  }
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 80027ba:	f001 f95d 	bl	8003a78 <Encoder_Switch_Status_Read>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d170      	bne.n	80028a6 <main+0x135e>
						configuration_status += 1;
 80027c4:	4b3f      	ldr	r3, [pc, #252]	; (80028c4 <main+0x137c>)
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	3301      	adds	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	4b3d      	ldr	r3, [pc, #244]	; (80028c4 <main+0x137c>)
 80027ce:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 80027d0:	4b37      	ldr	r3, [pc, #220]	; (80028b0 <main+0x1368>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 80027d6:	e066      	b.n	80028a6 <main+0x135e>
				  case 10:
					  if (save_bool == TRUE){
 80027d8:	4b38      	ldr	r3, [pc, #224]	; (80028bc <main+0x1374>)
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d12d      	bne.n	800283c <main+0x12f4>
						  parameter.first_load = 0;		//Change byte load to 0 to avoid entering again
 80027e0:	4b39      	ldr	r3, [pc, #228]	; (80028c8 <main+0x1380>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	829a      	strh	r2, [r3, #20]
						  if (Save_Parameter_Data(struct_ptr)){		//Save data into flash memory
 80027e6:	4b39      	ldr	r3, [pc, #228]	; (80028cc <main+0x1384>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f001 fa0e 	bl	8003c0c <Save_Parameter_Data>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00d      	beq.n	8002812 <main+0x12ca>
							  lcdClear();
 80027f6:	f7fe fb49 	bl	8000e8c <lcdClear>
							  lcdSetCursor(5,1);
 80027fa:	2101      	movs	r1, #1
 80027fc:	2005      	movs	r0, #5
 80027fe:	f7fe fb6f 	bl	8000ee0 <lcdSetCursor>
							  lcdPrint("DATA SAVED");
 8002802:	4833      	ldr	r0, [pc, #204]	; (80028d0 <main+0x1388>)
 8002804:	f7fe fb9e 	bl	8000f44 <lcdPrint>
							  HAL_Delay(1500);
 8002808:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800280c:	f001 fdda 	bl	80043c4 <HAL_Delay>
 8002810:	e021      	b.n	8002856 <main+0x130e>
						  }else{									//If it fails return ERROR
							  lcdClear();
 8002812:	f7fe fb3b 	bl	8000e8c <lcdClear>
							  lcdSetCursor(0,1);
 8002816:	2101      	movs	r1, #1
 8002818:	2000      	movs	r0, #0
 800281a:	f7fe fb61 	bl	8000ee0 <lcdSetCursor>
							  lcdPrint("ERROR DEFAULT VALUES");
 800281e:	482d      	ldr	r0, [pc, #180]	; (80028d4 <main+0x138c>)
 8002820:	f7fe fb90 	bl	8000f44 <lcdPrint>
							  lcdSetCursor(7,2);
 8002824:	2102      	movs	r1, #2
 8002826:	2007      	movs	r0, #7
 8002828:	f7fe fb5a 	bl	8000ee0 <lcdSetCursor>
							  lcdPrint("LOADED");
 800282c:	482a      	ldr	r0, [pc, #168]	; (80028d8 <main+0x1390>)
 800282e:	f7fe fb89 	bl	8000f44 <lcdPrint>
							  HAL_Delay(1500);
 8002832:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002836:	f001 fdc5 	bl	80043c4 <HAL_Delay>
 800283a:	e00c      	b.n	8002856 <main+0x130e>
						  }
					  }else{
						  lcdClear();								//If selection was not to save data
 800283c:	f7fe fb26 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 1);
 8002840:	2101      	movs	r1, #1
 8002842:	2003      	movs	r0, #3
 8002844:	f7fe fb4c 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("DATA NOT SAVED");
 8002848:	4824      	ldr	r0, [pc, #144]	; (80028dc <main+0x1394>)
 800284a:	f7fe fb7b 	bl	8000f44 <lcdPrint>
						  HAL_Delay(2000);
 800284e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002852:	f001 fdb7 	bl	80043c4 <HAL_Delay>
					  }
					  state = INITIALIZATION;
 8002856:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <main+0x1398>)
 8002858:	2200      	movs	r2, #0
 800285a:	801a      	strh	r2, [r3, #0]
					  break;
 800285c:	e024      	b.n	80028a8 <main+0x1360>
	  		  break;
 800285e:	bf00      	nop
 8002860:	f7fe bf75 	b.w	800174e <main+0x206>
	  		  break;
 8002864:	bf00      	nop
 8002866:	f7fe bf72 	b.w	800174e <main+0x206>
	  		  break;
 800286a:	bf00      	nop
 800286c:	f7fe bf6f 	b.w	800174e <main+0x206>
					  break;
 8002870:	bf00      	nop
 8002872:	f7fe bf6c 	b.w	800174e <main+0x206>
					  break;
 8002876:	bf00      	nop
 8002878:	f7fe bf69 	b.w	800174e <main+0x206>
					  break;
 800287c:	bf00      	nop
 800287e:	f7fe bf66 	b.w	800174e <main+0x206>
					  break;
 8002882:	bf00      	nop
 8002884:	f7fe bf63 	b.w	800174e <main+0x206>
					  break;
 8002888:	bf00      	nop
 800288a:	f7fe bf60 	b.w	800174e <main+0x206>
					  break;
 800288e:	bf00      	nop
 8002890:	f7fe bf5d 	b.w	800174e <main+0x206>
					  break;
 8002894:	bf00      	nop
 8002896:	f7fe bf5a 	b.w	800174e <main+0x206>
					  break;
 800289a:	bf00      	nop
 800289c:	f7fe bf57 	b.w	800174e <main+0x206>
					  break;
 80028a0:	bf00      	nop
 80028a2:	f7fe bf54 	b.w	800174e <main+0x206>
					  break;
 80028a6:	bf00      	nop
	  switch (state)
 80028a8:	f7fe bf51 	b.w	800174e <main+0x206>
 80028ac:	08008934 	.word	0x08008934
 80028b0:	20000790 	.word	0x20000790
 80028b4:	20000000 	.word	0x20000000
 80028b8:	20000004 	.word	0x20000004
 80028bc:	2000078c 	.word	0x2000078c
 80028c0:	08008920 	.word	0x08008920
 80028c4:	20000740 	.word	0x20000740
 80028c8:	20000744 	.word	0x20000744
 80028cc:	20000774 	.word	0x20000774
 80028d0:	08008948 	.word	0x08008948
 80028d4:	08008954 	.word	0x08008954
 80028d8:	0800896c 	.word	0x0800896c
 80028dc:	08008974 	.word	0x08008974
 80028e0:	2000073c 	.word	0x2000073c

080028e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b094      	sub	sp, #80	; 0x50
 80028e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ea:	f107 0320 	add.w	r3, r7, #32
 80028ee:	2230      	movs	r2, #48	; 0x30
 80028f0:	2100      	movs	r1, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f005 fac8 	bl	8007e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028f8:	f107 030c 	add.w	r3, r7, #12
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002908:	2300      	movs	r3, #0
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <SystemClock_Config+0xcc>)
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	4a27      	ldr	r2, [pc, #156]	; (80029b0 <SystemClock_Config+0xcc>)
 8002912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002916:	6413      	str	r3, [r2, #64]	; 0x40
 8002918:	4b25      	ldr	r3, [pc, #148]	; (80029b0 <SystemClock_Config+0xcc>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002924:	2300      	movs	r3, #0
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <SystemClock_Config+0xd0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002930:	4a20      	ldr	r2, [pc, #128]	; (80029b4 <SystemClock_Config+0xd0>)
 8002932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <SystemClock_Config+0xd0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002940:	607b      	str	r3, [r7, #4]
 8002942:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002944:	2301      	movs	r3, #1
 8002946:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002948:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800294e:	2302      	movs	r3, #2
 8002950:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002952:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002956:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002958:	2319      	movs	r3, #25
 800295a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800295c:	23a8      	movs	r3, #168	; 0xa8
 800295e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002960:	2304      	movs	r3, #4
 8002962:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002964:	2304      	movs	r3, #4
 8002966:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002968:	f107 0320 	add.w	r3, r7, #32
 800296c:	4618      	mov	r0, r3
 800296e:	f003 f9ab 	bl	8005cc8 <HAL_RCC_OscConfig>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002978:	f001 f9ae 	bl	8003cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800297c:	230f      	movs	r3, #15
 800297e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002980:	2302      	movs	r3, #2
 8002982:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002988:	2300      	movs	r3, #0
 800298a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800298c:	2300      	movs	r3, #0
 800298e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002990:	f107 030c 	add.w	r3, r7, #12
 8002994:	2101      	movs	r1, #1
 8002996:	4618      	mov	r0, r3
 8002998:	f003 fc0e 	bl	80061b8 <HAL_RCC_ClockConfig>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80029a2:	f001 f999 	bl	8003cd8 <Error_Handler>
  }
}
 80029a6:	bf00      	nop
 80029a8:	3750      	adds	r7, #80	; 0x50
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40007000 	.word	0x40007000

080029b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029be:	463b      	mov	r3, r7
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80029ca:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <MX_ADC1_Init+0x98>)
 80029cc:	4a21      	ldr	r2, [pc, #132]	; (8002a54 <MX_ADC1_Init+0x9c>)
 80029ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80029d0:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <MX_ADC1_Init+0x98>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029d6:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <MX_ADC1_Init+0x98>)
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80029dc:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <MX_ADC1_Init+0x98>)
 80029de:	2200      	movs	r2, #0
 80029e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80029e2:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <MX_ADC1_Init+0x98>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <MX_ADC1_Init+0x98>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029f0:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <MX_ADC1_Init+0x98>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029f6:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <MX_ADC1_Init+0x98>)
 80029f8:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <MX_ADC1_Init+0xa0>)
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029fc:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <MX_ADC1_Init+0x98>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002a02:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <MX_ADC1_Init+0x98>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <MX_ADC1_Init+0x98>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a10:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <MX_ADC1_Init+0x98>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a16:	480e      	ldr	r0, [pc, #56]	; (8002a50 <MX_ADC1_Init+0x98>)
 8002a18:	f001 fcf8 	bl	800440c <HAL_ADC_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002a22:	f001 f959 	bl	8003cd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002a26:	2309      	movs	r3, #9
 8002a28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a32:	463b      	mov	r3, r7
 8002a34:	4619      	mov	r1, r3
 8002a36:	4806      	ldr	r0, [pc, #24]	; (8002a50 <MX_ADC1_Init+0x98>)
 8002a38:	f001 fd2c 	bl	8004494 <HAL_ADC_ConfigChannel>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002a42:	f001 f949 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a46:	bf00      	nop
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200004a8 	.word	0x200004a8
 8002a54:	40012000 	.word	0x40012000
 8002a58:	0f000001 	.word	0x0f000001

08002a5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a62:	4a13      	ldr	r2, [pc, #76]	; (8002ab0 <MX_I2C1_Init+0x54>)
 8002a64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a68:	4a12      	ldr	r2, [pc, #72]	; (8002ab4 <MX_I2C1_Init+0x58>)
 8002a6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a80:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a8c:	4b07      	ldr	r3, [pc, #28]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a98:	4804      	ldr	r0, [pc, #16]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a9a:	f002 fcc9 	bl	8005430 <HAL_I2C_Init>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002aa4:	f001 f918 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	200004f0 	.word	0x200004f0
 8002ab0:	40005400 	.word	0x40005400
 8002ab4:	000186a0 	.word	0x000186a0

08002ab8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08c      	sub	sp, #48	; 0x30
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002abe:	f107 030c 	add.w	r3, r7, #12
 8002ac2:	2224      	movs	r2, #36	; 0x24
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f005 f9de 	bl	8007e88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002acc:	1d3b      	adds	r3, r7, #4
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ad4:	4b26      	ldr	r3, [pc, #152]	; (8002b70 <MX_TIM1_Init+0xb8>)
 8002ad6:	4a27      	ldr	r2, [pc, #156]	; (8002b74 <MX_TIM1_Init+0xbc>)
 8002ad8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ada:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <MX_TIM1_Init+0xb8>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae0:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <MX_TIM1_Init+0xb8>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ae6:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <MX_TIM1_Init+0xb8>)
 8002ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <MX_TIM1_Init+0xb8>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002af4:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <MX_TIM1_Init+0xb8>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002afa:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <MX_TIM1_Init+0xb8>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002b00:	2301      	movs	r3, #1
 8002b02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b04:	2300      	movs	r3, #0
 8002b06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8002b10:	2302      	movs	r3, #2
 8002b12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b14:	2300      	movs	r3, #0
 8002b16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8002b20:	2302      	movs	r3, #2
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002b24:	f107 030c 	add.w	r3, r7, #12
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4811      	ldr	r0, [pc, #68]	; (8002b70 <MX_TIM1_Init+0xb8>)
 8002b2c:	f003 ff89 	bl	8006a42 <HAL_TIM_Encoder_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002b36:	f001 f8cf 	bl	8003cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b42:	1d3b      	adds	r3, r7, #4
 8002b44:	4619      	mov	r1, r3
 8002b46:	480a      	ldr	r0, [pc, #40]	; (8002b70 <MX_TIM1_Init+0xb8>)
 8002b48:	f005 f8e4 	bl	8007d14 <HAL_TIMEx_MasterConfigSynchronization>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002b52:	f001 f8c1 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->CNT = 0x7FFF;		//Initialization CNT in middle value to avoid Over/Under flow
 8002b56:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <MX_TIM1_Init+0xbc>)
 8002b58:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24
  TIM1->SR = ~(1UL << 0);	//Clear UIF flag
 8002b5e:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <MX_TIM1_Init+0xbc>)
 8002b60:	f06f 0201 	mvn.w	r2, #1
 8002b64:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM1_Init 2 */

}
 8002b66:	bf00      	nop
 8002b68:	3730      	adds	r7, #48	; 0x30
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000544 	.word	0x20000544
 8002b74:	40010000 	.word	0x40010000

08002b78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08e      	sub	sp, #56	; 0x38
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	605a      	str	r2, [r3, #4]
 8002b88:	609a      	str	r2, [r3, #8]
 8002b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b8c:	f107 0320 	add.w	r3, r7, #32
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b96:	1d3b      	adds	r3, r7, #4
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
 8002ba4:	615a      	str	r2, [r3, #20]
 8002ba6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ba8:	4b2c      	ldr	r3, [pc, #176]	; (8002c5c <MX_TIM2_Init+0xe4>)
 8002baa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002bb0:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <MX_TIM2_Init+0xe4>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb6:	4b29      	ldr	r3, [pc, #164]	; (8002c5c <MX_TIM2_Init+0xe4>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 8002bbc:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <MX_TIM2_Init+0xe4>)
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bc2:	4b26      	ldr	r3, [pc, #152]	; (8002c5c <MX_TIM2_Init+0xe4>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bc8:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <MX_TIM2_Init+0xe4>)
 8002bca:	2280      	movs	r2, #128	; 0x80
 8002bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bce:	4823      	ldr	r0, [pc, #140]	; (8002c5c <MX_TIM2_Init+0xe4>)
 8002bd0:	f003 fcbe 	bl	8006550 <HAL_TIM_Base_Init>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002bda:	f001 f87d 	bl	8003cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002be4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002be8:	4619      	mov	r1, r3
 8002bea:	481c      	ldr	r0, [pc, #112]	; (8002c5c <MX_TIM2_Init+0xe4>)
 8002bec:	f004 fae4 	bl	80071b8 <HAL_TIM_ConfigClockSource>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002bf6:	f001 f86f 	bl	8003cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002bfa:	4818      	ldr	r0, [pc, #96]	; (8002c5c <MX_TIM2_Init+0xe4>)
 8002bfc:	f003 fd5a 	bl	80066b4 <HAL_TIM_PWM_Init>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002c06:	f001 f867 	bl	8003cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c12:	f107 0320 	add.w	r3, r7, #32
 8002c16:	4619      	mov	r1, r3
 8002c18:	4810      	ldr	r0, [pc, #64]	; (8002c5c <MX_TIM2_Init+0xe4>)
 8002c1a:	f005 f87b 	bl	8007d14 <HAL_TIMEx_MasterConfigSynchronization>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002c24:	f001 f858 	bl	8003cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c28:	2360      	movs	r3, #96	; 0x60
 8002c2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002c34:	2304      	movs	r3, #4
 8002c36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c38:	1d3b      	adds	r3, r7, #4
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4807      	ldr	r0, [pc, #28]	; (8002c5c <MX_TIM2_Init+0xe4>)
 8002c40:	f004 f9f8 	bl	8007034 <HAL_TIM_PWM_ConfigChannel>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002c4a:	f001 f845 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002c4e:	4803      	ldr	r0, [pc, #12]	; (8002c5c <MX_TIM2_Init+0xe4>)
 8002c50:	f001 fa48 	bl	80040e4 <HAL_TIM_MspPostInit>

}
 8002c54:	bf00      	nop
 8002c56:	3738      	adds	r7, #56	; 0x38
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	2000058c 	.word	0x2000058c

08002c60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08a      	sub	sp, #40	; 0x28
 8002c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c66:	f107 0318 	add.w	r3, r7, #24
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	609a      	str	r2, [r3, #8]
 8002c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c74:	f107 0310 	add.w	r3, r7, #16
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c7e:	463b      	mov	r3, r7
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c8a:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <MX_TIM4_Init+0xd8>)
 8002c8c:	4a2b      	ldr	r2, [pc, #172]	; (8002d3c <MX_TIM4_Init+0xdc>)
 8002c8e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002c90:	4b29      	ldr	r3, [pc, #164]	; (8002d38 <MX_TIM4_Init+0xd8>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c96:	4b28      	ldr	r3, [pc, #160]	; (8002d38 <MX_TIM4_Init+0xd8>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002c9c:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <MX_TIM4_Init+0xd8>)
 8002c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ca2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca4:	4b24      	ldr	r3, [pc, #144]	; (8002d38 <MX_TIM4_Init+0xd8>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002caa:	4b23      	ldr	r3, [pc, #140]	; (8002d38 <MX_TIM4_Init+0xd8>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002cb0:	4821      	ldr	r0, [pc, #132]	; (8002d38 <MX_TIM4_Init+0xd8>)
 8002cb2:	f003 fc4d 	bl	8006550 <HAL_TIM_Base_Init>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002cbc:	f001 f80c 	bl	8003cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cc4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002cc6:	f107 0318 	add.w	r3, r7, #24
 8002cca:	4619      	mov	r1, r3
 8002ccc:	481a      	ldr	r0, [pc, #104]	; (8002d38 <MX_TIM4_Init+0xd8>)
 8002cce:	f004 fa73 	bl	80071b8 <HAL_TIM_ConfigClockSource>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002cd8:	f000 fffe 	bl	8003cd8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002cdc:	4816      	ldr	r0, [pc, #88]	; (8002d38 <MX_TIM4_Init+0xd8>)
 8002cde:	f003 fe57 	bl	8006990 <HAL_TIM_IC_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002ce8:	f000 fff6 	bl	8003cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cec:	2300      	movs	r3, #0
 8002cee:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cf4:	f107 0310 	add.w	r3, r7, #16
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	480f      	ldr	r0, [pc, #60]	; (8002d38 <MX_TIM4_Init+0xd8>)
 8002cfc:	f005 f80a 	bl	8007d14 <HAL_TIMEx_MasterConfigSynchronization>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8002d06:	f000 ffe7 	bl	8003cd8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002d1a:	463b      	mov	r3, r7
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4805      	ldr	r0, [pc, #20]	; (8002d38 <MX_TIM4_Init+0xd8>)
 8002d22:	f004 f8ea 	bl	8006efa <HAL_TIM_IC_ConfigChannel>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002d2c:	f000 ffd4 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d30:	bf00      	nop
 8002d32:	3728      	adds	r7, #40	; 0x28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	200005d4 	.word	0x200005d4
 8002d3c:	40000800 	.word	0x40000800

08002d40 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002d46:	f107 030c 	add.w	r3, r7, #12
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	605a      	str	r2, [r3, #4]
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	60da      	str	r2, [r3, #12]
 8002d54:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d5e:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <MX_TIM5_Init+0xa0>)
 8002d60:	4a20      	ldr	r2, [pc, #128]	; (8002de4 <MX_TIM5_Init+0xa4>)
 8002d62:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002d64:	4b1e      	ldr	r3, [pc, #120]	; (8002de0 <MX_TIM5_Init+0xa0>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6a:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <MX_TIM5_Init+0xa0>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002d70:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <MX_TIM5_Init+0xa0>)
 8002d72:	f04f 32ff 	mov.w	r2, #4294967295
 8002d76:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d78:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <MX_TIM5_Init+0xa0>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d7e:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <MX_TIM5_Init+0xa0>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002d84:	4816      	ldr	r0, [pc, #88]	; (8002de0 <MX_TIM5_Init+0xa0>)
 8002d86:	f003 fbe3 	bl	8006550 <HAL_TIM_Base_Init>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002d90:	f000 ffa2 	bl	8003cd8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002d94:	2307      	movs	r3, #7
 8002d96:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002d98:	2360      	movs	r3, #96	; 0x60
 8002d9a:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8002da4:	f107 030c 	add.w	r3, r7, #12
 8002da8:	4619      	mov	r1, r3
 8002daa:	480d      	ldr	r0, [pc, #52]	; (8002de0 <MX_TIM5_Init+0xa0>)
 8002dac:	f004 facb 	bl	8007346 <HAL_TIM_SlaveConfigSynchro>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8002db6:	f000 ff8f 	bl	8003cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002dc2:	1d3b      	adds	r3, r7, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4806      	ldr	r0, [pc, #24]	; (8002de0 <MX_TIM5_Init+0xa0>)
 8002dc8:	f004 ffa4 	bl	8007d14 <HAL_TIMEx_MasterConfigSynchronization>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8002dd2:	f000 ff81 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002dd6:	bf00      	nop
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	2000061c 	.word	0x2000061c
 8002de4:	40000c00 	.word	0x40000c00

08002de8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */
	float TIM9_period_ms = (float)TIMER9_PERIOD/1000;		//Period to load into the timer, calculated from Define
 8002dee:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <MX_TIM9_Init+0x98>)
 8002df0:	617b      	str	r3, [r7, #20]
	uint16_t TIM9_preescaler = 642;							//Preescaler, max 1 second
 8002df2:	f240 2382 	movw	r3, #642	; 0x282
 8002df6:	827b      	strh	r3, [r7, #18]
	uint16_t TIM9_ARR;
	TIM9_ARR = ( (float) (CLK_FREQ_T2/(TIM9_preescaler+1))*TIM9_period_ms );	//Calculation value for ARR register to set correct period
 8002df8:	8a7b      	ldrh	r3, [r7, #18]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	4a21      	ldr	r2, [pc, #132]	; (8002e84 <MX_TIM9_Init+0x9c>)
 8002dfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e16:	ee17 3a90 	vmov	r3, s15
 8002e1a:	823b      	strh	r3, [r7, #16]
  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e1c:	463b      	mov	r3, r7
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <MX_TIM9_Init+0xa0>)
 8002e2a:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <MX_TIM9_Init+0xa4>)
 8002e2c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = TIM9_preescaler;
 8002e2e:	8a7b      	ldrh	r3, [r7, #18]
 8002e30:	4a15      	ldr	r2, [pc, #84]	; (8002e88 <MX_TIM9_Init+0xa0>)
 8002e32:	6053      	str	r3, [r2, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e34:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <MX_TIM9_Init+0xa0>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = TIM9_ARR;
 8002e3a:	8a3b      	ldrh	r3, [r7, #16]
 8002e3c:	4a12      	ldr	r2, [pc, #72]	; (8002e88 <MX_TIM9_Init+0xa0>)
 8002e3e:	60d3      	str	r3, [r2, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <MX_TIM9_Init+0xa0>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e46:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <MX_TIM9_Init+0xa0>)
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002e4c:	480e      	ldr	r0, [pc, #56]	; (8002e88 <MX_TIM9_Init+0xa0>)
 8002e4e:	f003 fb7f 	bl	8006550 <HAL_TIM_Base_Init>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8002e58:	f000 ff3e 	bl	8003cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e60:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002e62:	463b      	mov	r3, r7
 8002e64:	4619      	mov	r1, r3
 8002e66:	4808      	ldr	r0, [pc, #32]	; (8002e88 <MX_TIM9_Init+0xa0>)
 8002e68:	f004 f9a6 	bl	80071b8 <HAL_TIM_ConfigClockSource>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_TIM9_Init+0x8e>
  {
    Error_Handler();
 8002e72:	f000 ff31 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002e76:	bf00      	nop
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	3dcccccd 	.word	0x3dcccccd
 8002e84:	0280de80 	.word	0x0280de80
 8002e88:	20000664 	.word	0x20000664
 8002e8c:	40014000 	.word	0x40014000

08002e90 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */
	float TIM10_period_ms = (float)DEBOUNCING_TIME/1000;		//Period to load into the timer, calculated from Define
 8002e96:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <MX_TIM10_Init+0x70>)
 8002e98:	607b      	str	r3, [r7, #4]
	uint16_t TIM10_preescaler = 642;							//Preescaler, max 1 second
 8002e9a:	f240 2382 	movw	r3, #642	; 0x282
 8002e9e:	807b      	strh	r3, [r7, #2]
	uint16_t TIM10_ARR;
	TIM10_ARR = ( (float) (CLK_FREQ_T2/(TIM10_preescaler+1))*TIM10_period_ms );	//Calculation value for ARR register to set correct period
 8002ea0:	887b      	ldrh	r3, [r7, #2]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	4a17      	ldr	r2, [pc, #92]	; (8002f04 <MX_TIM10_Init+0x74>)
 8002ea6:	fb92 f3f3 	sdiv	r3, r2, r3
 8002eaa:	ee07 3a90 	vmov	s15, r3
 8002eae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002eb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ebe:	ee17 3a90 	vmov	r3, s15
 8002ec2:	803b      	strh	r3, [r7, #0]
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002ec4:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <MX_TIM10_Init+0x78>)
 8002ec6:	4a11      	ldr	r2, [pc, #68]	; (8002f0c <MX_TIM10_Init+0x7c>)
 8002ec8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = TIM10_preescaler;
 8002eca:	887b      	ldrh	r3, [r7, #2]
 8002ecc:	4a0e      	ldr	r2, [pc, #56]	; (8002f08 <MX_TIM10_Init+0x78>)
 8002ece:	6053      	str	r3, [r2, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed0:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <MX_TIM10_Init+0x78>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = TIM10_ARR;
 8002ed6:	883b      	ldrh	r3, [r7, #0]
 8002ed8:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <MX_TIM10_Init+0x78>)
 8002eda:	60d3      	str	r3, [r2, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002edc:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <MX_TIM10_Init+0x78>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <MX_TIM10_Init+0x78>)
 8002ee4:	2280      	movs	r2, #128	; 0x80
 8002ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002ee8:	4807      	ldr	r0, [pc, #28]	; (8002f08 <MX_TIM10_Init+0x78>)
 8002eea:	f003 fb31 	bl	8006550 <HAL_TIM_Base_Init>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_TIM10_Init+0x68>
  {
    Error_Handler();
 8002ef4:	f000 fef0 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	3dcccccd 	.word	0x3dcccccd
 8002f04:	0280de80 	.word	0x0280de80
 8002f08:	200006ac 	.word	0x200006ac
 8002f0c:	40014400 	.word	0x40014400

08002f10 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */
  float TIM11_period_ms = (float)ACC_UPDATE_RATIO/1000;		//Period to load into the timer, calculated from Define
 8002f16:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <MX_TIM11_Init+0x60>)
 8002f18:	607b      	str	r3, [r7, #4]
  uint16_t TIM11_ARR;
  TIM11_ARR = ( (float) (CLK_FREQ_T2/(TIM11_preescaler+1))*TIM11_period_ms );	//Calculation value for ARR register to set correct period
 8002f1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f1e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002f74 <MX_TIM11_Init+0x64>
 8002f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f2a:	ee17 3a90 	vmov	r3, s15
 8002f2e:	807b      	strh	r3, [r7, #2]
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002f30:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <MX_TIM11_Init+0x68>)
 8002f32:	4a12      	ldr	r2, [pc, #72]	; (8002f7c <MX_TIM11_Init+0x6c>)
 8002f34:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = TIM11_preescaler;
 8002f36:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <MX_TIM11_Init+0x68>)
 8002f38:	f240 2282 	movw	r2, #642	; 0x282
 8002f3c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <MX_TIM11_Init+0x68>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = TIM11_ARR;
 8002f44:	887b      	ldrh	r3, [r7, #2]
 8002f46:	4a0c      	ldr	r2, [pc, #48]	; (8002f78 <MX_TIM11_Init+0x68>)
 8002f48:	60d3      	str	r3, [r2, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <MX_TIM11_Init+0x68>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <MX_TIM11_Init+0x68>)
 8002f52:	2280      	movs	r2, #128	; 0x80
 8002f54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002f56:	4808      	ldr	r0, [pc, #32]	; (8002f78 <MX_TIM11_Init+0x68>)
 8002f58:	f003 fafa 	bl	8006550 <HAL_TIM_Base_Init>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <MX_TIM11_Init+0x56>
  {
    Error_Handler();
 8002f62:	f000 feb9 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	3d4ccccd 	.word	0x3d4ccccd
 8002f74:	477f2600 	.word	0x477f2600
 8002f78:	200006f4 	.word	0x200006f4
 8002f7c:	40014800 	.word	0x40014800

08002f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	; 0x28
 8002f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f86:	f107 0314 	add.w	r3, r7, #20
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	609a      	str	r2, [r3, #8]
 8002f92:	60da      	str	r2, [r3, #12]
 8002f94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	4b3d      	ldr	r3, [pc, #244]	; (8003090 <MX_GPIO_Init+0x110>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a3c      	ldr	r2, [pc, #240]	; (8003090 <MX_GPIO_Init+0x110>)
 8002fa0:	f043 0304 	orr.w	r3, r3, #4
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	4b3a      	ldr	r3, [pc, #232]	; (8003090 <MX_GPIO_Init+0x110>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	4b36      	ldr	r3, [pc, #216]	; (8003090 <MX_GPIO_Init+0x110>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	4a35      	ldr	r2, [pc, #212]	; (8003090 <MX_GPIO_Init+0x110>)
 8002fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b33      	ldr	r3, [pc, #204]	; (8003090 <MX_GPIO_Init+0x110>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	4b2f      	ldr	r3, [pc, #188]	; (8003090 <MX_GPIO_Init+0x110>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	4a2e      	ldr	r2, [pc, #184]	; (8003090 <MX_GPIO_Init+0x110>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <MX_GPIO_Init+0x110>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	4b28      	ldr	r3, [pc, #160]	; (8003090 <MX_GPIO_Init+0x110>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	4a27      	ldr	r2, [pc, #156]	; (8003090 <MX_GPIO_Init+0x110>)
 8002ff4:	f043 0302 	orr.w	r3, r3, #2
 8002ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffa:	4b25      	ldr	r3, [pc, #148]	; (8003090 <MX_GPIO_Init+0x110>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	607b      	str	r3, [r7, #4]
 8003004:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXTRA_OUT_GPIO_Port, EXTRA_OUT_Pin, GPIO_PIN_RESET);
 8003006:	2200      	movs	r2, #0
 8003008:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800300c:	4821      	ldr	r0, [pc, #132]	; (8003094 <MX_GPIO_Init+0x114>)
 800300e:	f002 f9f5 	bl	80053fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|ENABLE_Pin, GPIO_PIN_RESET);
 8003012:	2200      	movs	r2, #0
 8003014:	210c      	movs	r1, #12
 8003016:	4820      	ldr	r0, [pc, #128]	; (8003098 <MX_GPIO_Init+0x118>)
 8003018:	f002 f9f0 	bl	80053fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXTRA_OUT_Pin */
  GPIO_InitStruct.Pin = EXTRA_OUT_Pin;
 800301c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003022:	2301      	movs	r3, #1
 8003024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302a:	2300      	movs	r3, #0
 800302c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXTRA_OUT_GPIO_Port, &GPIO_InitStruct);
 800302e:	f107 0314 	add.w	r3, r7, #20
 8003032:	4619      	mov	r1, r3
 8003034:	4817      	ldr	r0, [pc, #92]	; (8003094 <MX_GPIO_Init+0x114>)
 8003036:	f002 f845 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Pin ENABLE_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|ENABLE_Pin;
 800303a:	230c      	movs	r3, #12
 800303c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800303e:	2301      	movs	r3, #1
 8003040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003046:	2300      	movs	r3, #0
 8003048:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304a:	f107 0314 	add.w	r3, r7, #20
 800304e:	4619      	mov	r1, r3
 8003050:	4811      	ldr	r0, [pc, #68]	; (8003098 <MX_GPIO_Init+0x118>)
 8003052:	f002 f837 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENDSTOP_RIGHT_Pin ENDSTOP_LEFT_Pin EXTRA_INPUT_Pin */
  GPIO_InitStruct.Pin = ENDSTOP_RIGHT_Pin|ENDSTOP_LEFT_Pin|EXTRA_INPUT_Pin;
 8003056:	2370      	movs	r3, #112	; 0x70
 8003058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800305a:	2300      	movs	r3, #0
 800305c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003062:	f107 0314 	add.w	r3, r7, #20
 8003066:	4619      	mov	r1, r3
 8003068:	480b      	ldr	r0, [pc, #44]	; (8003098 <MX_GPIO_Init+0x118>)
 800306a:	f002 f82b 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_LEFT_Pin SW_RIGHT_Pin SEC_SW_Pin EN_SW_Pin */
  GPIO_InitStruct.Pin = SW_LEFT_Pin|SW_RIGHT_Pin|SEC_SW_Pin|EN_SW_Pin;
 800306e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003074:	2300      	movs	r3, #0
 8003076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307c:	f107 0314 	add.w	r3, r7, #20
 8003080:	4619      	mov	r1, r3
 8003082:	4806      	ldr	r0, [pc, #24]	; (800309c <MX_GPIO_Init+0x11c>)
 8003084:	f002 f81e 	bl	80050c4 <HAL_GPIO_Init>

}
 8003088:	bf00      	nop
 800308a:	3728      	adds	r7, #40	; 0x28
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40023800 	.word	0x40023800
 8003094:	40020800 	.word	0x40020800
 8003098:	40020000 	.word	0x40020000
 800309c:	40020400 	.word	0x40020400

080030a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	if (htim == &htim11 ){		//Checking if the IRQ is from Timer11 Acceleration
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a1f      	ldr	r2, [pc, #124]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d103      	bne.n	80030b8 <HAL_TIM_PeriodElapsedCallback+0x18>
		update_speed = 1;
 80030b0:	4b1e      	ldr	r3, [pc, #120]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	801a      	strh	r2, [r3, #0]
			aux_debouncing = 0;
		}
	}else if( htim == &htim9 ){
		delay100ms_counter += 1;
	}
}
 80030b6:	e031      	b.n	800311c <HAL_TIM_PeriodElapsedCallback+0x7c>
	}else if ( htim == &htim10 ){	//Checking if the IRQ is from Timer10 Debouncing
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d124      	bne.n	800310a <HAL_TIM_PeriodElapsedCallback+0x6a>
		if (debouncing_en_sw){		//If debouncing enable, increment counter
 80030c0:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d006      	beq.n	80030d6 <HAL_TIM_PeriodElapsedCallback+0x36>
			debouncing = debouncing + 1;
 80030c8:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	3301      	adds	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80030d2:	801a      	strh	r2, [r3, #0]
 80030d4:	e006      	b.n	80030e4 <HAL_TIM_PeriodElapsedCallback+0x44>
		}else if (!debouncing_en_sw){	//If debouncing disable reset counter
 80030d6:	4b17      	ldr	r3, [pc, #92]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <HAL_TIM_PeriodElapsedCallback+0x44>
			debouncing = 0;
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	801a      	strh	r2, [r3, #0]
		if (debouncing_aux_sw){		//If debouncing enable, increment counter
 80030e4:	4b15      	ldr	r3, [pc, #84]	; (800313c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d006      	beq.n	80030fa <HAL_TIM_PeriodElapsedCallback+0x5a>
			aux_debouncing = aux_debouncing + 1;
 80030ec:	4b14      	ldr	r3, [pc, #80]	; (8003140 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	3301      	adds	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80030f6:	801a      	strh	r2, [r3, #0]
}
 80030f8:	e010      	b.n	800311c <HAL_TIM_PeriodElapsedCallback+0x7c>
		}else if (!debouncing_aux_sw){	//If debouncing disable reset counter
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10c      	bne.n	800311c <HAL_TIM_PeriodElapsedCallback+0x7c>
			aux_debouncing = 0;
 8003102:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003104:	2200      	movs	r2, #0
 8003106:	801a      	strh	r2, [r3, #0]
}
 8003108:	e008      	b.n	800311c <HAL_TIM_PeriodElapsedCallback+0x7c>
	}else if( htim == &htim9 ){
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a0d      	ldr	r2, [pc, #52]	; (8003144 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d104      	bne.n	800311c <HAL_TIM_PeriodElapsedCallback+0x7c>
		delay100ms_counter += 1;
 8003112:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3301      	adds	r3, #1
 8003118:	4a0b      	ldr	r2, [pc, #44]	; (8003148 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800311a:	6013      	str	r3, [r2, #0]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	200006f4 	.word	0x200006f4
 800312c:	2000078e 	.word	0x2000078e
 8003130:	200006ac 	.word	0x200006ac
 8003134:	20000792 	.word	0x20000792
 8003138:	20000796 	.word	0x20000796
 800313c:	20000794 	.word	0x20000794
 8003140:	20000798 	.word	0x20000798
 8003144:	20000664 	.word	0x20000664
 8003148:	20000784 	.word	0x20000784

0800314c <Encoder_Read>:
  * @brief Encoder Steps Read Function
  * @param old_value - Pointer to the value storage as latest encoder value
  * @retval encoder_steps - Number of steps increased or decreased on the encoder
  */
int32_t Encoder_Read(void)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
	int32_t encoder_steps;
	static int32_t old_value = 0x7FFF;		//Initialisation old_value variable

	if (TIM1->SR & (1 << 0)){		//If overflow or underflow occurs reset the CNT value
 8003152:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <Encoder_Read+0x78>)
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00d      	beq.n	800317a <Encoder_Read+0x2e>
		TIM1->SR = ~(1UL << 0);		//Reset UIF bit
 800315e:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <Encoder_Read+0x78>)
 8003160:	f06f 0201 	mvn.w	r2, #1
 8003164:	611a      	str	r2, [r3, #16]
		TIM1->CNT = 0x7FFF;			//Reload CNT register to ox7FFF
 8003166:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <Encoder_Read+0x78>)
 8003168:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800316c:	625a      	str	r2, [r3, #36]	; 0x24
		old_value = 0x7FFF;
 800316e:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <Encoder_Read+0x7c>)
 8003170:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003174:	601a      	str	r2, [r3, #0]
		return 0;					//Return 0
 8003176:	2300      	movs	r3, #0
 8003178:	e01d      	b.n	80031b6 <Encoder_Read+0x6a>
	}

	uint16_t encoder_value = TIM1->CNT;		//Variable to storage the CNT register value
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <Encoder_Read+0x78>)
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	80fb      	strh	r3, [r7, #6]
	if ( ( encoder_value - old_value >= 2 ) || ( encoder_value - old_value <= -2 ) ){		//If the value in the encoder register changed (At least 2, to avoid glitches) calculate increment
 8003180:	88fa      	ldrh	r2, [r7, #6]
 8003182:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <Encoder_Read+0x7c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	dc06      	bgt.n	800319a <Encoder_Read+0x4e>
 800318c:	88fa      	ldrh	r2, [r7, #6]
 800318e:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <Encoder_Read+0x7c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003198:	da0c      	bge.n	80031b4 <Encoder_Read+0x68>
		encoder_steps = (old_value - encoder_value)/2;	//Divide by 2 is needed due to increments by two on the encoder
 800319a:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <Encoder_Read+0x7c>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	0fda      	lsrs	r2, r3, #31
 80031a4:	4413      	add	r3, r2
 80031a6:	105b      	asrs	r3, r3, #1
 80031a8:	603b      	str	r3, [r7, #0]
		old_value = encoder_value;			//Reload the old_value
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	4a06      	ldr	r2, [pc, #24]	; (80031c8 <Encoder_Read+0x7c>)
 80031ae:	6013      	str	r3, [r2, #0]
		return encoder_steps;				//Return the increments, can be positive or negative
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	e000      	b.n	80031b6 <Encoder_Read+0x6a>
	}else{
		return 0;							//Return 0 in case no changes
 80031b4:	2300      	movs	r3, #0
	}
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40010000 	.word	0x40010000
 80031c8:	2000000c 	.word	0x2000000c

080031cc <LCD_Write_Number>:
  * 		col_pos - column position for the number
  * 		row_pos - raw position for the number
  * @retval
  */
void LCD_Write_Number(int32_t value, int32_t col_pos, int32_t row_pos)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
	char str[10];					//Variable to storage the string
	sprintf(str, "%ld", value);		//Convert number to string
 80031d8:	f107 0314 	add.w	r3, r7, #20
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	498e      	ldr	r1, [pc, #568]	; (8003418 <LCD_Write_Number+0x24c>)
 80031e0:	4618      	mov	r0, r3
 80031e2:	f004 fe59 	bl	8007e98 <siprintf>
	if (value > 0){					//If value is positive
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f340 809b 	ble.w	8003324 <LCD_Write_Number+0x158>
		if (value < 10){			//If value is lower than 10
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b09      	cmp	r3, #9
 80031f2:	dc1a      	bgt.n	800322a <LCD_Write_Number+0x5e>
			lcdSetCursor(col_pos+1,row_pos);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	3301      	adds	r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	4611      	mov	r1, r2
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd fe6c 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(" ");
 8003208:	4884      	ldr	r0, [pc, #528]	; (800341c <LCD_Write_Number+0x250>)
 800320a:	f7fd fe9b 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f7fd fe61 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 800321e:	f107 0314 	add.w	r3, r7, #20
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd fe8e 	bl	8000f44 <lcdPrint>
		lcdSetCursor(col_pos,row_pos);
		lcdPrint("  ");
		lcdSetCursor(col_pos,row_pos);
		lcdPrint("0");
	}
}
 8003228:	e0f2      	b.n	8003410 <LCD_Write_Number+0x244>
		}else if (value < 100){		//If value is lower than 100
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b63      	cmp	r3, #99	; 0x63
 800322e:	dc1a      	bgt.n	8003266 <LCD_Write_Number+0x9a>
			lcdSetCursor(col_pos+2,row_pos);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	3302      	adds	r3, #2
 8003236:	b2db      	uxtb	r3, r3
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	4611      	mov	r1, r2
 800323e:	4618      	mov	r0, r3
 8003240:	f7fd fe4e 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(" ");
 8003244:	4875      	ldr	r0, [pc, #468]	; (800341c <LCD_Write_Number+0x250>)
 8003246:	f7fd fe7d 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f7fd fe43 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 800325a:	f107 0314 	add.w	r3, r7, #20
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd fe70 	bl	8000f44 <lcdPrint>
}
 8003264:	e0d4      	b.n	8003410 <LCD_Write_Number+0x244>
		}else if (value < 1000){	//If value is lower than 1000
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800326c:	da1a      	bge.n	80032a4 <LCD_Write_Number+0xd8>
			lcdSetCursor(col_pos+3,row_pos);
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	3303      	adds	r3, #3
 8003274:	b2db      	uxtb	r3, r3
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	4611      	mov	r1, r2
 800327c:	4618      	mov	r0, r3
 800327e:	f7fd fe2f 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(" ");
 8003282:	4866      	ldr	r0, [pc, #408]	; (800341c <LCD_Write_Number+0x250>)
 8003284:	f7fd fe5e 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd fe24 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd fe51 	bl	8000f44 <lcdPrint>
}
 80032a2:	e0b5      	b.n	8003410 <LCD_Write_Number+0x244>
		}else if (value < 10000){	//If value is lower than 10000
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f242 720f 	movw	r2, #9999	; 0x270f
 80032aa:	4293      	cmp	r3, r2
 80032ac:	dc1a      	bgt.n	80032e4 <LCD_Write_Number+0x118>
			lcdSetCursor(col_pos+4,row_pos);
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	3304      	adds	r3, #4
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fd fe0f 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(" ");
 80032c2:	4856      	ldr	r0, [pc, #344]	; (800341c <LCD_Write_Number+0x250>)
 80032c4:	f7fd fe3e 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd fe04 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 80032d8:	f107 0314 	add.w	r3, r7, #20
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fd fe31 	bl	8000f44 <lcdPrint>
}
 80032e2:	e095      	b.n	8003410 <LCD_Write_Number+0x244>
		}else if (value < 100000){	//If value is lower than 100000
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4a4e      	ldr	r2, [pc, #312]	; (8003420 <LCD_Write_Number+0x254>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	f300 8091 	bgt.w	8003410 <LCD_Write_Number+0x244>
			lcdSetCursor(col_pos+5,row_pos);
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	3305      	adds	r3, #5
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	4611      	mov	r1, r2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fd fdef 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(" ");
 8003302:	4846      	ldr	r0, [pc, #280]	; (800341c <LCD_Write_Number+0x250>)
 8003304:	f7fd fe1e 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	b2db      	uxtb	r3, r3
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	4611      	mov	r1, r2
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd fde4 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 8003318:	f107 0314 	add.w	r3, r7, #20
 800331c:	4618      	mov	r0, r3
 800331e:	f7fd fe11 	bl	8000f44 <lcdPrint>
}
 8003322:	e075      	b.n	8003410 <LCD_Write_Number+0x244>
	}else if (value < 0) {			//If value is negative
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	da5c      	bge.n	80033e4 <LCD_Write_Number+0x218>
		if (value > -10){			//If value is higher than -10
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f113 0f09 	cmn.w	r3, #9
 8003330:	db1a      	blt.n	8003368 <LCD_Write_Number+0x19c>
			lcdSetCursor(col_pos+2,row_pos);
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	3302      	adds	r3, #2
 8003338:	b2db      	uxtb	r3, r3
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd fdcd 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(" ");
 8003346:	4835      	ldr	r0, [pc, #212]	; (800341c <LCD_Write_Number+0x250>)
 8003348:	f7fd fdfc 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	4611      	mov	r1, r2
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd fdc2 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 800335c:	f107 0314 	add.w	r3, r7, #20
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd fdef 	bl	8000f44 <lcdPrint>
}
 8003366:	e053      	b.n	8003410 <LCD_Write_Number+0x244>
		}else if (value > -100){	//If value is higher than -100
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800336e:	db1a      	blt.n	80033a6 <LCD_Write_Number+0x1da>
			lcdSetCursor(col_pos+2,row_pos);
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	3302      	adds	r3, #2
 8003376:	b2db      	uxtb	r3, r3
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	4611      	mov	r1, r2
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd fdae 	bl	8000ee0 <lcdSetCursor>
			lcdPrint("  ");
 8003384:	4827      	ldr	r0, [pc, #156]	; (8003424 <LCD_Write_Number+0x258>)
 8003386:	f7fd fddd 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	4611      	mov	r1, r2
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd fda3 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 800339a:	f107 0314 	add.w	r3, r7, #20
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd fdd0 	bl	8000f44 <lcdPrint>
}
 80033a4:	e034      	b.n	8003410 <LCD_Write_Number+0x244>
		}else if (value > -1000){	//If value is higher than -1000
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80033ac:	dd30      	ble.n	8003410 <LCD_Write_Number+0x244>
			lcdSetCursor(col_pos+2,row_pos);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	3302      	adds	r3, #2
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fd fd8f 	bl	8000ee0 <lcdSetCursor>
			lcdPrint("   ");
 80033c2:	4819      	ldr	r0, [pc, #100]	; (8003428 <LCD_Write_Number+0x25c>)
 80033c4:	f7fd fdbe 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd fd84 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 80033d8:	f107 0314 	add.w	r3, r7, #20
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fd fdb1 	bl	8000f44 <lcdPrint>
}
 80033e2:	e015      	b.n	8003410 <LCD_Write_Number+0x244>
		lcdSetCursor(col_pos,row_pos);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	4611      	mov	r1, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd fd76 	bl	8000ee0 <lcdSetCursor>
		lcdPrint("  ");
 80033f4:	480b      	ldr	r0, [pc, #44]	; (8003424 <LCD_Write_Number+0x258>)
 80033f6:	f7fd fda5 	bl	8000f44 <lcdPrint>
		lcdSetCursor(col_pos,row_pos);
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f7fd fd6b 	bl	8000ee0 <lcdSetCursor>
		lcdPrint("0");
 800340a:	4808      	ldr	r0, [pc, #32]	; (800342c <LCD_Write_Number+0x260>)
 800340c:	f7fd fd9a 	bl	8000f44 <lcdPrint>
}
 8003410:	bf00      	nop
 8003412:	3720      	adds	r7, #32
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	08008984 	.word	0x08008984
 800341c:	08008988 	.word	0x08008988
 8003420:	0001869f 	.word	0x0001869f
 8003424:	0800898c 	.word	0x0800898c
 8003428:	08008990 	.word	0x08008990
 800342c:	08008994 	.word	0x08008994

08003430 <_float_to_char>:
  * @brief Function to convert float number to char
  * @param 	x - float value which expected to be converted
  * 		p - char used for the conversion
  * @retval Pointer to the char in which the value will be loaded
  */
static char * _float_to_char(float x, char *p) {
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	ed87 0a01 	vstr	s0, [r7, #4]
 800343a:	6038      	str	r0, [r7, #0]
    char *s = p + CHAR_BUFF_SIZE; // go to end of buffer
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	3304      	adds	r3, #4
 8003440:	617b      	str	r3, [r7, #20]
    uint16_t decimals;  // variable to store the decimals
    int units;  // variable to store the units (part to left of decimal place)
    if (x < 0) { // take care of negative numbers
 8003442:	edd7 7a01 	vldr	s15, [r7, #4]
 8003446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800344a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344e:	d51e      	bpl.n	800348e <_float_to_char+0x5e>
        decimals = (int)(x * -100) % 100; // make 1000 for 3 decimals etc.
 8003450:	edd7 7a01 	vldr	s15, [r7, #4]
 8003454:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003594 <_float_to_char+0x164>
 8003458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800345c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003460:	ee17 2a90 	vmov	r2, s15
 8003464:	4b4c      	ldr	r3, [pc, #304]	; (8003598 <_float_to_char+0x168>)
 8003466:	fb83 1302 	smull	r1, r3, r3, r2
 800346a:	1159      	asrs	r1, r3, #5
 800346c:	17d3      	asrs	r3, r2, #31
 800346e:	1acb      	subs	r3, r1, r3
 8003470:	2164      	movs	r1, #100	; 0x64
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	827b      	strh	r3, [r7, #18]
        units = (int)(-1 * x);
 800347a:	edd7 7a01 	vldr	s15, [r7, #4]
 800347e:	eef1 7a67 	vneg.f32	s15, s15
 8003482:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003486:	ee17 3a90 	vmov	r3, s15
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e01b      	b.n	80034c6 <_float_to_char+0x96>
    } else { // positive numbers
        decimals = (int)(x * 100) % 100;
 800348e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003492:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800359c <_float_to_char+0x16c>
 8003496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800349a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800349e:	ee17 2a90 	vmov	r2, s15
 80034a2:	4b3d      	ldr	r3, [pc, #244]	; (8003598 <_float_to_char+0x168>)
 80034a4:	fb83 1302 	smull	r1, r3, r3, r2
 80034a8:	1159      	asrs	r1, r3, #5
 80034aa:	17d3      	asrs	r3, r2, #31
 80034ac:	1acb      	subs	r3, r1, r3
 80034ae:	2164      	movs	r1, #100	; 0x64
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	827b      	strh	r3, [r7, #18]
        units = (int)x;
 80034b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80034bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034c0:	ee17 3a90 	vmov	r3, s15
 80034c4:	60fb      	str	r3, [r7, #12]
    }

    *--s = (decimals % 10) + '0';
 80034c6:	8a7a      	ldrh	r2, [r7, #18]
 80034c8:	4b35      	ldr	r3, [pc, #212]	; (80035a0 <_float_to_char+0x170>)
 80034ca:	fba3 1302 	umull	r1, r3, r3, r2
 80034ce:	08d9      	lsrs	r1, r3, #3
 80034d0:	460b      	mov	r3, r1
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	b29b      	uxth	r3, r3
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	3a01      	subs	r2, #1
 80034e2:	617a      	str	r2, [r7, #20]
 80034e4:	3330      	adds	r3, #48	; 0x30
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	701a      	strb	r2, [r3, #0]
    decimals /= 10; // repeat for as many decimal places as you need
 80034ec:	8a7b      	ldrh	r3, [r7, #18]
 80034ee:	4a2c      	ldr	r2, [pc, #176]	; (80035a0 <_float_to_char+0x170>)
 80034f0:	fba2 2303 	umull	r2, r3, r2, r3
 80034f4:	08db      	lsrs	r3, r3, #3
 80034f6:	827b      	strh	r3, [r7, #18]
    *--s = (decimals % 10) + '0';
 80034f8:	8a7a      	ldrh	r2, [r7, #18]
 80034fa:	4b29      	ldr	r3, [pc, #164]	; (80035a0 <_float_to_char+0x170>)
 80034fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003500:	08d9      	lsrs	r1, r3, #3
 8003502:	460b      	mov	r3, r1
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	b29b      	uxth	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	3a01      	subs	r2, #1
 8003514:	617a      	str	r2, [r7, #20]
 8003516:	3330      	adds	r3, #48	; 0x30
 8003518:	b2da      	uxtb	r2, r3
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	701a      	strb	r2, [r3, #0]
    *--s = '.';
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	3b01      	subs	r3, #1
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	222e      	movs	r2, #46	; 0x2e
 8003528:	701a      	strb	r2, [r3, #0]

    while (units > 0) {
 800352a:	e01b      	b.n	8003564 <_float_to_char+0x134>
        *--s = (units % 10) + '0';
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <_float_to_char+0x174>)
 8003530:	fb83 1302 	smull	r1, r3, r3, r2
 8003534:	1099      	asrs	r1, r3, #2
 8003536:	17d3      	asrs	r3, r2, #31
 8003538:	1ac9      	subs	r1, r1, r3
 800353a:	460b      	mov	r3, r1
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	1ad1      	subs	r1, r2, r3
 8003544:	b2cb      	uxtb	r3, r1
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	3a01      	subs	r2, #1
 800354a:	617a      	str	r2, [r7, #20]
 800354c:	3330      	adds	r3, #48	; 0x30
 800354e:	b2da      	uxtb	r2, r3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	701a      	strb	r2, [r3, #0]
        units /= 10;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4a13      	ldr	r2, [pc, #76]	; (80035a4 <_float_to_char+0x174>)
 8003558:	fb82 1203 	smull	r1, r2, r2, r3
 800355c:	1092      	asrs	r2, r2, #2
 800355e:	17db      	asrs	r3, r3, #31
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	60fb      	str	r3, [r7, #12]
    while (units > 0) {
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	dce0      	bgt.n	800352c <_float_to_char+0xfc>
    }
    if (x < 0) *--s = '-'; // unary minus sign for negative numbers
 800356a:	edd7 7a01 	vldr	s15, [r7, #4]
 800356e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003576:	d505      	bpl.n	8003584 <_float_to_char+0x154>
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3b01      	subs	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	222d      	movs	r2, #45	; 0x2d
 8003582:	701a      	strb	r2, [r3, #0]
    return s;
 8003584:	697b      	ldr	r3, [r7, #20]
}
 8003586:	4618      	mov	r0, r3
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	c2c80000 	.word	0xc2c80000
 8003598:	51eb851f 	.word	0x51eb851f
 800359c:	42c80000 	.word	0x42c80000
 80035a0:	cccccccd 	.word	0xcccccccd
 80035a4:	66666667 	.word	0x66666667

080035a8 <LCD_Write_Float_Number>:
  * @param 	float_char - char expected to be writen
  * 		col_pos - column position for the number
  * 		row_pos - raw position for the number
  * @retval
  */
void LCD_Write_Float_Number(float float_char, int32_t col_pos_float, int32_t row_pos_float){
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80035b2:	60b8      	str	r0, [r7, #8]
 80035b4:	6079      	str	r1, [r7, #4]
	char float2char[CHAR_BUFF_SIZE+1];
	float2char[CHAR_BUFF_SIZE] = '\0';
 80035b6:	2300      	movs	r3, #0
 80035b8:	763b      	strb	r3, [r7, #24]
	char float1[4];						//Initialization array to save the output
	char *ptr = float1;
 80035ba:	f107 0310 	add.w	r3, r7, #16
 80035be:	61fb      	str	r3, [r7, #28]
	if (float_char < 1 ){				//If float is lower than 1 print an extra 0 on the left
 80035c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80035c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d0:	d516      	bpl.n	8003600 <LCD_Write_Float_Number+0x58>
		lcdSetCursor(col_pos_float, row_pos_float);
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	4611      	mov	r1, r2
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fd fc7f 	bl	8000ee0 <lcdSetCursor>
		lcdPrint("0");
 80035e2:	4813      	ldr	r0, [pc, #76]	; (8003630 <LCD_Write_Float_Number+0x88>)
 80035e4:	f7fd fcae 	bl	8000f44 <lcdPrint>
		ptr = _float_to_char(float_char,&float2char[0]);
 80035e8:	f107 0314 	add.w	r3, r7, #20
 80035ec:	4618      	mov	r0, r3
 80035ee:	ed97 0a03 	vldr	s0, [r7, #12]
 80035f2:	f7ff ff1d 	bl	8003430 <_float_to_char>
 80035f6:	61f8      	str	r0, [r7, #28]
		lcdPrint(ptr);
 80035f8:	69f8      	ldr	r0, [r7, #28]
 80035fa:	f7fd fca3 	bl	8000f44 <lcdPrint>
	}else{
		ptr = _float_to_char(float_char,&float2char[0]);
		lcdSetCursor(col_pos_float, row_pos_float);
		lcdPrint(ptr);
	}
}
 80035fe:	e012      	b.n	8003626 <LCD_Write_Float_Number+0x7e>
		ptr = _float_to_char(float_char,&float2char[0]);
 8003600:	f107 0314 	add.w	r3, r7, #20
 8003604:	4618      	mov	r0, r3
 8003606:	ed97 0a03 	vldr	s0, [r7, #12]
 800360a:	f7ff ff11 	bl	8003430 <_float_to_char>
 800360e:	61f8      	str	r0, [r7, #28]
		lcdSetCursor(col_pos_float, row_pos_float);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f7fd fc60 	bl	8000ee0 <lcdSetCursor>
		lcdPrint(ptr);
 8003620:	69f8      	ldr	r0, [r7, #28]
 8003622:	f7fd fc8f 	bl	8000f44 <lcdPrint>
}
 8003626:	bf00      	nop
 8003628:	3720      	adds	r7, #32
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	08008994 	.word	0x08008994

08003634 <Motor_Enable>:
/**
  * @brief Function to Enable EN signal for Motor Driver
  * @param 	invert - variable to invert the EN pin logic
  * @retval
  */
void Motor_Enable(uint16_t invert){
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, (GPIO_PIN_SET^invert));	//Enable Motor, XOR with SET to invert it if selected
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	f083 0301 	eor.w	r3, r3, #1
 8003646:	b2db      	uxtb	r3, r3
 8003648:	461a      	mov	r2, r3
 800364a:	2108      	movs	r1, #8
 800364c:	4803      	ldr	r0, [pc, #12]	; (800365c <Motor_Enable+0x28>)
 800364e:	f001 fed5 	bl	80053fc <HAL_GPIO_WritePin>
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40020000 	.word	0x40020000

08003660 <Motor_Disable>:
/**
  * @brief Function to Disable EN signal for Motor Driver
  * @param 	invert - variable to invert the EN pin logic
  * @retval
  */
void Motor_Disable(uint16_t invert){
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, (GPIO_PIN_RESET^invert));	//Disable Motor, XOR with SET to invert it if selected
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	461a      	mov	r2, r3
 8003670:	2108      	movs	r1, #8
 8003672:	4805      	ldr	r0, [pc, #20]	; (8003688 <Motor_Disable+0x28>)
 8003674:	f001 fec2 	bl	80053fc <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8003678:	2100      	movs	r1, #0
 800367a:	4804      	ldr	r0, [pc, #16]	; (800368c <Motor_Disable+0x2c>)
 800367c:	f003 f924 	bl	80068c8 <HAL_TIM_PWM_Stop>
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40020000 	.word	0x40020000
 800368c:	2000058c 	.word	0x2000058c

08003690 <Motor_Direction>:
  * @brief Function to select the direction of the motor
  * @param 	direction - variable to set the direction of the motor (RIGHT or LEFT)
  * 		invert - variable to invert the DIR pin logic
  * @retval
  */
void Motor_Direction(uint16_t direction, uint16_t invert){
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	460a      	mov	r2, r1
 800369a:	80fb      	strh	r3, [r7, #6]
 800369c:	4613      	mov	r3, r2
 800369e:	80bb      	strh	r3, [r7, #4]
	if ( direction == RIGHT ){
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d10a      	bne.n	80036bc <Motor_Direction+0x2c>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, (GPIO_PIN_SET^invert));	//Disable Motor, XOR with SET to invert it if selected
 80036a6:	88bb      	ldrh	r3, [r7, #4]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	f083 0301 	eor.w	r3, r3, #1
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	2104      	movs	r1, #4
 80036b4:	4808      	ldr	r0, [pc, #32]	; (80036d8 <Motor_Direction+0x48>)
 80036b6:	f001 fea1 	bl	80053fc <HAL_GPIO_WritePin>
	}else if (direction == LEFT){
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, (GPIO_PIN_RESET^invert));	//Disable Motor, XOR with SET to invert it if selected
	}

}
 80036ba:	e009      	b.n	80036d0 <Motor_Direction+0x40>
	}else if (direction == LEFT){
 80036bc:	88fb      	ldrh	r3, [r7, #6]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <Motor_Direction+0x40>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, (GPIO_PIN_RESET^invert));	//Disable Motor, XOR with SET to invert it if selected
 80036c2:	88bb      	ldrh	r3, [r7, #4]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	2104      	movs	r1, #4
 80036ca:	4803      	ldr	r0, [pc, #12]	; (80036d8 <Motor_Direction+0x48>)
 80036cc:	f001 fe96 	bl	80053fc <HAL_GPIO_WritePin>
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40020000 	.word	0x40020000

080036dc <Motor_Speed_RPM>:
/**
  * @brief Function to select the speed of the motor in RPM
  * @param 	rpm - Speed value in RPM it is wanted
  * @retval
  */
void Motor_Speed_RPM(uint16_t speed){
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	80fb      	strh	r3, [r7, #6]
	float ARR_value_temp = 0;
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
	uint32_t ARR_value;
	if ((TIM2->CR1 & (1 << 0)) ^ (1 << 0)){			//Checking if the Timer is already enabled, if not, enable it
 80036ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <Motor_Speed_RPM+0x22>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <Motor_Speed_RPM+0x24>
 80036fe:	2300      	movs	r3, #0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <Motor_Speed_RPM+0x30>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	//Enable Timer2 on PWM Mode
 8003704:	2100      	movs	r1, #0
 8003706:	4818      	ldr	r0, [pc, #96]	; (8003768 <Motor_Speed_RPM+0x8c>)
 8003708:	f003 f82e 	bl	8006768 <HAL_TIM_PWM_Start>
	}
	if (speed > 0){
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d021      	beq.n	8003756 <Motor_Speed_RPM+0x7a>
	ARR_value_temp = ((60 * (float) CLK_FREQ_T2)/(speed*parameter.motor_stepsrev));	//Calculation Value to load in ARR
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	4a15      	ldr	r2, [pc, #84]	; (800376c <Motor_Speed_RPM+0x90>)
 8003716:	8892      	ldrh	r2, [r2, #4]
 8003718:	fb02 f303 	mul.w	r3, r2, r3
 800371c:	ee07 3a90 	vmov	s15, r3
 8003720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003724:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003770 <Motor_Speed_RPM+0x94>
 8003728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800372c:	edc7 7a03 	vstr	s15, [r7, #12]
	ARR_value = (uint32_t) ARR_value_temp;	//Uint32 casting
 8003730:	edd7 7a03 	vldr	s15, [r7, #12]
 8003734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003738:	ee17 3a90 	vmov	r3, s15
 800373c:	60bb      	str	r3, [r7, #8]
	TIM2->ARR = ARR_value+1;				//Load ARR + 1
 800373e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	3301      	adds	r3, #1
 8003746:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CCR1 = (uint32_t) (ARR_value+1)/2;	//Load CCR1 to have always 50% Duty Cycle
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	3301      	adds	r3, #1
 800374c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003750:	085b      	lsrs	r3, r3, #1
 8003752:	6353      	str	r3, [r2, #52]	; 0x34
	}else{
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);	//Disable Timer2 on PWM Mode
	}
}
 8003754:	e003      	b.n	800375e <Motor_Speed_RPM+0x82>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);	//Disable Timer2 on PWM Mode
 8003756:	2100      	movs	r1, #0
 8003758:	4803      	ldr	r0, [pc, #12]	; (8003768 <Motor_Speed_RPM+0x8c>)
 800375a:	f003 f8b5 	bl	80068c8 <HAL_TIM_PWM_Stop>
}
 800375e:	bf00      	nop
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	2000058c 	.word	0x2000058c
 800376c:	20000744 	.word	0x20000744
 8003770:	4f163426 	.word	0x4f163426

08003774 <Motor_Feedrate_Update>:
  * @brief Function to update the feedrate of the motor following the acceleration
  * @param 	current_feedrate - Current feedrate
  * 		target_speed - Target feedrate
  * @retval updated_feedrate - Updated feedrate
  */
uint16_t Motor_Feedrate_Update(int16_t *current_feedrate, int16_t *target_feedrate){
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
	static uint16_t prev_target_feedrate;	//Static Variable to storage the previous target feedrate
	static uint16_t acc_step_increment;		//Static Variable to storage the acceleration step increment
	static uint16_t diff_feedrate;			//Static variable to storage the delta feedrate

	uint16_t acc_step = ceil(parameter.acc_time/parameter.acc_update_ratio);	//Calculation acc_step with the desired time in ms, and the refresh ratio on acc update
 800377e:	4b61      	ldr	r3, [pc, #388]	; (8003904 <Motor_Feedrate_Update+0x190>)
 8003780:	89da      	ldrh	r2, [r3, #14]
 8003782:	4b60      	ldr	r3, [pc, #384]	; (8003904 <Motor_Feedrate_Update+0x190>)
 8003784:	8a1b      	ldrh	r3, [r3, #16]
 8003786:	fbb2 f3f3 	udiv	r3, r2, r3
 800378a:	b29b      	uxth	r3, r3
 800378c:	4618      	mov	r0, r3
 800378e:	f7fc fffb 	bl	8000788 <__aeabi_i2d>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4610      	mov	r0, r2
 8003798:	4619      	mov	r1, r3
 800379a:	f7fd f8e7 	bl	800096c <__aeabi_d2uiz>
 800379e:	4603      	mov	r3, r0
 80037a0:	81fb      	strh	r3, [r7, #14]
															//This will provide the number of steps we need to do to accelerate on the desired ACC_TIME

	diff_feedrate = *target_feedrate - *current_feedrate;	//Calculation for the Delta feedrate
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	4b54      	ldr	r3, [pc, #336]	; (8003908 <Motor_Feedrate_Update+0x194>)
 80037b8:	801a      	strh	r2, [r3, #0]

	if (prev_target_feedrate != *target_feedrate){			//If the storaged feedrate changed since last time
 80037ba:	4b54      	ldr	r3, [pc, #336]	; (800390c <Motor_Feedrate_Update+0x198>)
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d026      	beq.n	8003818 <Motor_Feedrate_Update+0xa4>
		prev_target_feedrate = *target_feedrate;				//Reload the prev_target_feedrate with latest value
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	4b4e      	ldr	r3, [pc, #312]	; (800390c <Motor_Feedrate_Update+0x198>)
 80037d4:	801a      	strh	r2, [r3, #0]
		diff_feedrate = abs(*target_feedrate - *current_feedrate);	//Re-calculate the delta feedrate
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037dc:	461a      	mov	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	bfb8      	it	lt
 80037ea:	425b      	neglt	r3, r3
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	4b46      	ldr	r3, [pc, #280]	; (8003908 <Motor_Feedrate_Update+0x194>)
 80037f0:	801a      	strh	r2, [r3, #0]
		acc_step_increment = ceil(diff_feedrate / acc_step);	//Re-calculate the acceleration step increment, so we take the Delta feedrate and divide it by
 80037f2:	4b45      	ldr	r3, [pc, #276]	; (8003908 <Motor_Feedrate_Update+0x194>)
 80037f4:	881a      	ldrh	r2, [r3, #0]
 80037f6:	89fb      	ldrh	r3, [r7, #14]
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fc ffc2 	bl	8000788 <__aeabi_i2d>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4610      	mov	r0, r2
 800380a:	4619      	mov	r1, r3
 800380c:	f7fd f8ae 	bl	800096c <__aeabi_d2uiz>
 8003810:	4603      	mov	r3, r0
 8003812:	b29a      	uxth	r2, r3
 8003814:	4b3e      	ldr	r3, [pc, #248]	; (8003910 <Motor_Feedrate_Update+0x19c>)
 8003816:	801a      	strh	r2, [r3, #0]
																//the numbers of step required to meeting the timing
	}

	if ( *current_feedrate < *target_feedrate){			//If the current feedrate is lower than the target, accelerate
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003824:	429a      	cmp	r2, r3
 8003826:	da1f      	bge.n	8003868 <Motor_Feedrate_Update+0xf4>
		if (  (acc_step_increment >= diff_feedrate) || (!acc_step_increment) ){	//If the step increment is lower than the delta feedrate then we increase by one to reach the target
 8003828:	4b39      	ldr	r3, [pc, #228]	; (8003910 <Motor_Feedrate_Update+0x19c>)
 800382a:	881a      	ldrh	r2, [r3, #0]
 800382c:	4b36      	ldr	r3, [pc, #216]	; (8003908 <Motor_Feedrate_Update+0x194>)
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d203      	bcs.n	800383c <Motor_Feedrate_Update+0xc8>
 8003834:	4b36      	ldr	r3, [pc, #216]	; (8003910 <Motor_Feedrate_Update+0x19c>)
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d109      	bne.n	8003850 <Motor_Feedrate_Update+0xdc>
																				//Or if the acceleration step increment is zero (If the delta feedrate is lower than the acceleration step)
			*current_feedrate = *current_feedrate + 1;	//Increment by one
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003842:	b29b      	uxth	r3, r3
 8003844:	3301      	adds	r3, #1
 8003846:	b29b      	uxth	r3, r3
 8003848:	b21a      	sxth	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	801a      	strh	r2, [r3, #0]
 800384e:	e03a      	b.n	80038c6 <Motor_Feedrate_Update+0x152>
		}else{											//If the delta feedrate is bigger than acc_step and the the step incrmenet is lower than the delta feedrate the we increase
			*current_feedrate = *current_feedrate + acc_step_increment;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003856:	b29a      	uxth	r2, r3
 8003858:	4b2d      	ldr	r3, [pc, #180]	; (8003910 <Motor_Feedrate_Update+0x19c>)
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	4413      	add	r3, r2
 800385e:	b29b      	uxth	r3, r3
 8003860:	b21a      	sxth	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	801a      	strh	r2, [r3, #0]
 8003866:	e02e      	b.n	80038c6 <Motor_Feedrate_Update+0x152>
		}
	}else if (*current_feedrate == *target_feedrate){	//If the target is achieved
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003874:	429a      	cmp	r2, r3
 8003876:	d026      	beq.n	80038c6 <Motor_Feedrate_Update+0x152>

	}else if ( *current_feedrate > *target_feedrate ){	//If the current feedrate is higher than the target, decelerate
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003884:	429a      	cmp	r2, r3
 8003886:	dd1e      	ble.n	80038c6 <Motor_Feedrate_Update+0x152>
		if (  (acc_step_increment >= diff_feedrate) || (!acc_step_increment) ){	//If the step increment is lower than the delta feedrate then we increase by one to reach the target
 8003888:	4b21      	ldr	r3, [pc, #132]	; (8003910 <Motor_Feedrate_Update+0x19c>)
 800388a:	881a      	ldrh	r2, [r3, #0]
 800388c:	4b1e      	ldr	r3, [pc, #120]	; (8003908 <Motor_Feedrate_Update+0x194>)
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d203      	bcs.n	800389c <Motor_Feedrate_Update+0x128>
 8003894:	4b1e      	ldr	r3, [pc, #120]	; (8003910 <Motor_Feedrate_Update+0x19c>)
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d109      	bne.n	80038b0 <Motor_Feedrate_Update+0x13c>
																						//Or if the acceleration step increment is zero (If the delta feedrate is lower than the acceleration step)
			*current_feedrate = *current_feedrate - 1;	//Decrement by one
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	b21a      	sxth	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	801a      	strh	r2, [r3, #0]
 80038ae:	e00a      	b.n	80038c6 <Motor_Feedrate_Update+0x152>
		}else{											//If the delta feedrate is bigger than acc_step and the the step incrmenet is lower than the delta feedrate the we increase
			*current_feedrate = *current_feedrate - acc_step_increment;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	4b15      	ldr	r3, [pc, #84]	; (8003910 <Motor_Feedrate_Update+0x19c>)
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	b29b      	uxth	r3, r3
 80038c0:	b21a      	sxth	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	801a      	strh	r2, [r3, #0]
		}
	}

	uint16_t rpm = *current_feedrate/parameter.leadscrew_pitch;	//Calculation for RPM with the leadscrew pitch
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038cc:	ee07 3a90 	vmov	s15, r3
 80038d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <Motor_Feedrate_Update+0x190>)
 80038d6:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80038e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038e6:	ee17 3a90 	vmov	r3, s15
 80038ea:	81bb      	strh	r3, [r7, #12]
	Motor_Speed_RPM(rpm);	//Set the motor speed
 80038ec:	89bb      	ldrh	r3, [r7, #12]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fef4 	bl	80036dc <Motor_Speed_RPM>

	return *current_feedrate;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038fa:	b29b      	uxth	r3, r3
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000744 	.word	0x20000744
 8003908:	2000079a 	.word	0x2000079a
 800390c:	2000079c 	.word	0x2000079c
 8003910:	2000079e 	.word	0x2000079e

08003914 <LCD_Write_Feedrate>:
  * @param 	feedrate - feedrate value which expected to be writen into the LCD
  * 		col_pos - column position for the number
  * 		row_pos - raw position for the number
  * @retval
  */
void LCD_Write_Feedrate(int32_t feedrate, int32_t col_pos, int32_t row_pos){
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
	static int32_t saved_feedrate;
	if ( saved_feedrate != feedrate ){					//Print only if the feedrate changed
 8003920:	4b09      	ldr	r3, [pc, #36]	; (8003948 <LCD_Write_Feedrate+0x34>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	429a      	cmp	r2, r3
 8003928:	d00a      	beq.n	8003940 <LCD_Write_Feedrate+0x2c>
		LCD_Write_Number(feedrate,col_pos,row_pos);		//Write the number in the desired position
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f7ff fc4c 	bl	80031cc <LCD_Write_Number>
		lcdPrint("mm/min ");							//Adding mm/min
 8003934:	4805      	ldr	r0, [pc, #20]	; (800394c <LCD_Write_Feedrate+0x38>)
 8003936:	f7fd fb05 	bl	8000f44 <lcdPrint>
		saved_feedrate = feedrate;						//Updating Feedrate Saved
 800393a:	4a03      	ldr	r2, [pc, #12]	; (8003948 <LCD_Write_Feedrate+0x34>)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6013      	str	r3, [r2, #0]
	}
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	200007a0 	.word	0x200007a0
 800394c:	08008998 	.word	0x08008998

08003950 <Switch_Status_Read>:
/**
  * @brief Function to read the value for the switchs
  * @param	- NONE
  * @retval	- Switch Status RIGHT, LEFT, MID, FAIL
  */
int16_t Switch_Status_Read(void){
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
	int16_t switch_right, switch_left, sw_status;
	switch_right = HAL_GPIO_ReadPin(SW_RIGHT_GPIO_Port, SW_RIGHT_Pin);	//Storage value of RIGHT pin
 8003956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800395a:	4821      	ldr	r0, [pc, #132]	; (80039e0 <Switch_Status_Read+0x90>)
 800395c:	f001 fd36 	bl	80053cc <HAL_GPIO_ReadPin>
 8003960:	4603      	mov	r3, r0
 8003962:	80bb      	strh	r3, [r7, #4]
	switch_left = HAL_GPIO_ReadPin(SW_LEFT_GPIO_Port, SW_LEFT_Pin);		//Storage value of LEFT pin
 8003964:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003968:	481d      	ldr	r0, [pc, #116]	; (80039e0 <Switch_Status_Read+0x90>)
 800396a:	f001 fd2f 	bl	80053cc <HAL_GPIO_ReadPin>
 800396e:	4603      	mov	r3, r0
 8003970:	807b      	strh	r3, [r7, #2]
	if ( !switch_right & !switch_left ){	//If both are enabled at same time, return FAIL
 8003972:	88ba      	ldrh	r2, [r7, #4]
 8003974:	887b      	ldrh	r3, [r7, #2]
 8003976:	4313      	orrs	r3, r2
 8003978:	b21b      	sxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d103      	bne.n	8003986 <Switch_Status_Read+0x36>
		sw_status = FAIL;
 800397e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003982:	80fb      	strh	r3, [r7, #6]
 8003984:	e026      	b.n	80039d4 <Switch_Status_Read+0x84>
	}else if( switch_right & switch_left ){	//If none are enabled return MID point
 8003986:	88ba      	ldrh	r2, [r7, #4]
 8003988:	887b      	ldrh	r3, [r7, #2]
 800398a:	4013      	ands	r3, r2
 800398c:	b21b      	sxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <Switch_Status_Read+0x48>
		sw_status = MID;
 8003992:	2302      	movs	r3, #2
 8003994:	80fb      	strh	r3, [r7, #6]
 8003996:	e01d      	b.n	80039d4 <Switch_Status_Read+0x84>
	}else if ( ( !switch_right ) & switch_left ){	//If right is enable return RIGHT
 8003998:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <Switch_Status_Read+0x68>
		sw_status = RIGHT;
 80039b2:	2301      	movs	r3, #1
 80039b4:	80fb      	strh	r3, [r7, #6]
 80039b6:	e00d      	b.n	80039d4 <Switch_Status_Read+0x84>
	}else if ( switch_right & ( !switch_left ) ){	//If left is enable return LEFT
 80039b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80039bc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80039c0:	2a00      	cmp	r2, #0
 80039c2:	bf0c      	ite	eq
 80039c4:	2201      	moveq	r2, #1
 80039c6:	2200      	movne	r2, #0
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <Switch_Status_Read+0x84>
		sw_status = LEFT;
 80039d0:	2300      	movs	r3, #0
 80039d2:	80fb      	strh	r3, [r7, #6]
	}
	return sw_status;
 80039d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40020400 	.word	0x40020400

080039e4 <Update_Feedrate>:
/**
  * @brief Update Feedrate Function
  * @param old_value - Pointer to the value storaged as latest feedrate value
  * @retval new_feedrate - Updated Feedrate
  */
void Update_Feedrate(int16_t *feedrate){
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
	if (step_mode == STEP_NORMAL){
 80039ec:	4b20      	ldr	r3, [pc, #128]	; (8003a70 <Update_Feedrate+0x8c>)
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10d      	bne.n	8003a10 <Update_Feedrate+0x2c>
		*feedrate += Encoder_Read();	//Update Feedrate
 80039f4:	f7ff fbaa 	bl	800314c <Encoder_Read>
 80039f8:	4601      	mov	r1, r0
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	b28b      	uxth	r3, r1
 8003a04:	4413      	add	r3, r2
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	b21a      	sxth	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	801a      	strh	r2, [r3, #0]
 8003a0e:	e015      	b.n	8003a3c <Update_Feedrate+0x58>
	}else if (step_mode == STEP_x10){
 8003a10:	4b17      	ldr	r3, [pc, #92]	; (8003a70 <Update_Feedrate+0x8c>)
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d111      	bne.n	8003a3c <Update_Feedrate+0x58>
		*feedrate += ( 10 * Encoder_Read());	//Update Feedrate
 8003a18:	f7ff fb98 	bl	800314c <Encoder_Read>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4619      	mov	r1, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	b28b      	uxth	r3, r1
 8003a32:	4413      	add	r3, r2
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	b21a      	sxth	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	801a      	strh	r2, [r3, #0]
	}
	if (*feedrate <= 0 ){	//Limit the min value to zero
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	dc03      	bgt.n	8003a4e <Update_Feedrate+0x6a>
		*feedrate = 1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	801a      	strh	r2, [r3, #0]
	}else if (*feedrate > parameter.max_feedrate){
		*feedrate = parameter.max_feedrate;
	}
}
 8003a4c:	e00c      	b.n	8003a68 <Update_Feedrate+0x84>
	}else if (*feedrate > parameter.max_feedrate){
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a54:	461a      	mov	r2, r3
 8003a56:	4b07      	ldr	r3, [pc, #28]	; (8003a74 <Update_Feedrate+0x90>)
 8003a58:	895b      	ldrh	r3, [r3, #10]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	dd04      	ble.n	8003a68 <Update_Feedrate+0x84>
		*feedrate = parameter.max_feedrate;
 8003a5e:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <Update_Feedrate+0x90>)
 8003a60:	895b      	ldrh	r3, [r3, #10]
 8003a62:	b21a      	sxth	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	801a      	strh	r2, [r3, #0]
}
 8003a68:	bf00      	nop
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20000742 	.word	0x20000742
 8003a74:	20000744 	.word	0x20000744

08003a78 <Encoder_Switch_Status_Read>:
/**
  * @brief Function to read the value for the encoder switch
  * @param	- NONE
  * @retval	- Encoder Switch Status TRUE, FALSE or TRUE_HOLD
  */
int16_t Encoder_Switch_Status_Read(void){
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
	static uint16_t temp_debouncing = 0;	//Temporal variable to storage the debouncing
	static uint16_t previous_en_sw_status;	//Variable to storage the previous status of the encoder switch
	uint16_t en_sw_status = 0;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	80fb      	strh	r3, [r7, #6]
	uint16_t encoder_sw_read_value;

	encoder_sw_read_value = HAL_GPIO_ReadPin(EN_SW_GPIO_Port, EN_SW_Pin);
 8003a82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a86:	482a      	ldr	r0, [pc, #168]	; (8003b30 <Encoder_Switch_Status_Read+0xb8>)
 8003a88:	f001 fca0 	bl	80053cc <HAL_GPIO_ReadPin>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	80bb      	strh	r3, [r7, #4]

	if ( ( !encoder_sw_read_value ) && ( !debouncing_en_sw ) ){	//If encoder is pressed and debouncing not enable
 8003a90:	88bb      	ldrh	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10d      	bne.n	8003ab2 <Encoder_Switch_Status_Read+0x3a>
 8003a96:	4b27      	ldr	r3, [pc, #156]	; (8003b34 <Encoder_Switch_Status_Read+0xbc>)
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <Encoder_Switch_Status_Read+0x3a>
		debouncing_en_sw = TRUE;	//Enable debouncing
 8003a9e:	4b25      	ldr	r3, [pc, #148]	; (8003b34 <Encoder_Switch_Status_Read+0xbc>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	801a      	strh	r2, [r3, #0]
		temp_debouncing = debouncing;	//Load value from debouncing
 8003aa4:	4b24      	ldr	r3, [pc, #144]	; (8003b38 <Encoder_Switch_Status_Read+0xc0>)
 8003aa6:	881a      	ldrh	r2, [r3, #0]
 8003aa8:	4b24      	ldr	r3, [pc, #144]	; (8003b3c <Encoder_Switch_Status_Read+0xc4>)
 8003aaa:	801a      	strh	r2, [r3, #0]
		en_sw_status = FALSE;			//SW status still disable waiting debouncing time
 8003aac:	2300      	movs	r3, #0
 8003aae:	80fb      	strh	r3, [r7, #6]
 8003ab0:	e037      	b.n	8003b22 <Encoder_Switch_Status_Read+0xaa>
	}else if ( ( !encoder_sw_read_value ) && ( temp_debouncing+2 <= debouncing )){ //If encoder still pressed and debouncing +2 already passed
 8003ab2:	88bb      	ldrh	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d118      	bne.n	8003aea <Encoder_Switch_Status_Read+0x72>
 8003ab8:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <Encoder_Switch_Status_Read+0xc4>)
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	4a1e      	ldr	r2, [pc, #120]	; (8003b38 <Encoder_Switch_Status_Read+0xc0>)
 8003ac0:	8812      	ldrh	r2, [r2, #0]
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	da11      	bge.n	8003aea <Encoder_Switch_Status_Read+0x72>
		en_sw_status = FALSE;	//Status still FALSE
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	80fb      	strh	r3, [r7, #6]
		//debouncing_en_sw = FALSE;	//Disable debouncing
		previous_en_sw_status = TRUE;	//Set previous status of enable TRUE
 8003aca:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <Encoder_Switch_Status_Read+0xc8>)
 8003acc:	2201      	movs	r2, #1
 8003ace:	801a      	strh	r2, [r3, #0]
		if ( temp_debouncing+SW_HOLD_TIME <= debouncing ){	//If we keep the button pressed more than the time defines
 8003ad0:	4b1a      	ldr	r3, [pc, #104]	; (8003b3c <Encoder_Switch_Status_Read+0xc4>)
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	3309      	adds	r3, #9
 8003ad6:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <Encoder_Switch_Status_Read+0xc0>)
 8003ad8:	8812      	ldrh	r2, [r2, #0]
 8003ada:	4293      	cmp	r3, r2
 8003adc:	da21      	bge.n	8003b22 <Encoder_Switch_Status_Read+0xaa>
			en_sw_status = TRUE_HOLD;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	80fb      	strh	r3, [r7, #6]
			previous_en_sw_status = TRUE_HOLD;
 8003ae2:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <Encoder_Switch_Status_Read+0xc8>)
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	801a      	strh	r2, [r3, #0]
		if ( temp_debouncing+SW_HOLD_TIME <= debouncing ){	//If we keep the button pressed more than the time defines
 8003ae8:	e01b      	b.n	8003b22 <Encoder_Switch_Status_Read+0xaa>
		}
	}else if( ( encoder_sw_read_value )){
 8003aea:	88bb      	ldrh	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d018      	beq.n	8003b22 <Encoder_Switch_Status_Read+0xaa>
		if ( previous_en_sw_status == TRUE_HOLD ){	//If previous status was HOLD< do not report push
 8003af0:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <Encoder_Switch_Status_Read+0xc8>)
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d102      	bne.n	8003afe <Encoder_Switch_Status_Read+0x86>
			en_sw_status = FALSE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	80fb      	strh	r3, [r7, #6]
 8003afc:	e00e      	b.n	8003b1c <Encoder_Switch_Status_Read+0xa4>
		}else if ( previous_en_sw_status == TRUE ){
 8003afe:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <Encoder_Switch_Status_Read+0xc8>)
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d105      	bne.n	8003b12 <Encoder_Switch_Status_Read+0x9a>
			en_sw_status = TRUE;	//If button released then send status TRUE
 8003b06:	2301      	movs	r3, #1
 8003b08:	80fb      	strh	r3, [r7, #6]
			debouncing_en_sw = FALSE;	//Disable debouncing
 8003b0a:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <Encoder_Switch_Status_Read+0xbc>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	801a      	strh	r2, [r3, #0]
 8003b10:	e004      	b.n	8003b1c <Encoder_Switch_Status_Read+0xa4>
		}else{
			en_sw_status = FALSE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	80fb      	strh	r3, [r7, #6]
			debouncing_en_sw = FALSE;	//Disable debouncing
 8003b16:	4b07      	ldr	r3, [pc, #28]	; (8003b34 <Encoder_Switch_Status_Read+0xbc>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	801a      	strh	r2, [r3, #0]
		}
		previous_en_sw_status = FALSE;	//Reset variable of previous status
 8003b1c:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <Encoder_Switch_Status_Read+0xc8>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	801a      	strh	r2, [r3, #0]
	}else{
		//en_sw_status = FALSE;	//In case other condition, send FALSE
	}
	return en_sw_status;
 8003b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40020400 	.word	0x40020400
 8003b34:	20000792 	.word	0x20000792
 8003b38:	20000796 	.word	0x20000796
 8003b3c:	200007a4 	.word	0x200007a4
 8003b40:	200007a6 	.word	0x200007a6

08003b44 <Aux_Switch_Status_Read>:
/**
  * @brief Function to read the value for auxiliary switch
  * @param	- NONE
  * @retval	- Aux Switch Status TRUE, FALSE or TRUE_HOLD
  */
int16_t Aux_Switch_Status_Read(void){
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
	static uint16_t aux_temp_debouncing = 0;	//Temporal variable to storage the debouncing
	static uint16_t previous_aux_sw_status;	//Variable to storage the previous status of the encoder switch
	uint16_t aux_sw_status;
	uint16_t aux_sw_read_value;

	aux_sw_read_value = HAL_GPIO_ReadPin(SEC_SW_GPIO_Port, SEC_SW_Pin);
 8003b4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b4e:	482a      	ldr	r0, [pc, #168]	; (8003bf8 <Aux_Switch_Status_Read+0xb4>)
 8003b50:	f001 fc3c 	bl	80053cc <HAL_GPIO_ReadPin>
 8003b54:	4603      	mov	r3, r0
 8003b56:	80bb      	strh	r3, [r7, #4]

	if ( ( !aux_sw_read_value ) && ( !debouncing_aux_sw ) ){	//If encoder is pressed and debouncing not enable
 8003b58:	88bb      	ldrh	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10d      	bne.n	8003b7a <Aux_Switch_Status_Read+0x36>
 8003b5e:	4b27      	ldr	r3, [pc, #156]	; (8003bfc <Aux_Switch_Status_Read+0xb8>)
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d109      	bne.n	8003b7a <Aux_Switch_Status_Read+0x36>
		debouncing_aux_sw = TRUE;	//Enable debouncing
 8003b66:	4b25      	ldr	r3, [pc, #148]	; (8003bfc <Aux_Switch_Status_Read+0xb8>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	801a      	strh	r2, [r3, #0]
		aux_temp_debouncing = aux_debouncing;	//Load value from debouncing
 8003b6c:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <Aux_Switch_Status_Read+0xbc>)
 8003b6e:	881a      	ldrh	r2, [r3, #0]
 8003b70:	4b24      	ldr	r3, [pc, #144]	; (8003c04 <Aux_Switch_Status_Read+0xc0>)
 8003b72:	801a      	strh	r2, [r3, #0]
		aux_sw_status = FALSE;			//SW status still disable waiting debouncing time
 8003b74:	2300      	movs	r3, #0
 8003b76:	80fb      	strh	r3, [r7, #6]
 8003b78:	e037      	b.n	8003bea <Aux_Switch_Status_Read+0xa6>
	}else if ( ( !aux_sw_read_value ) && ( aux_temp_debouncing+2 <= aux_debouncing )){ //If encoder still pressed and debouncing +2 already passed
 8003b7a:	88bb      	ldrh	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d118      	bne.n	8003bb2 <Aux_Switch_Status_Read+0x6e>
 8003b80:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <Aux_Switch_Status_Read+0xc0>)
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	3301      	adds	r3, #1
 8003b86:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <Aux_Switch_Status_Read+0xbc>)
 8003b88:	8812      	ldrh	r2, [r2, #0]
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	da11      	bge.n	8003bb2 <Aux_Switch_Status_Read+0x6e>
		aux_sw_status = FALSE;	//Status still FALSE
 8003b8e:	2300      	movs	r3, #0
 8003b90:	80fb      	strh	r3, [r7, #6]
		//debouncing_aux_sw = FALSE;	//Disable debouncing
		previous_aux_sw_status = TRUE;	//Set previous status of enable TRUE
 8003b92:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <Aux_Switch_Status_Read+0xc4>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	801a      	strh	r2, [r3, #0]
		if ( aux_temp_debouncing+SW_HOLD_TIME <= aux_debouncing ){	//If we keep the button pressed more than the time defines
 8003b98:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <Aux_Switch_Status_Read+0xc0>)
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	3309      	adds	r3, #9
 8003b9e:	4a18      	ldr	r2, [pc, #96]	; (8003c00 <Aux_Switch_Status_Read+0xbc>)
 8003ba0:	8812      	ldrh	r2, [r2, #0]
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	da21      	bge.n	8003bea <Aux_Switch_Status_Read+0xa6>
			aux_sw_status = TRUE_HOLD;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	80fb      	strh	r3, [r7, #6]
			previous_aux_sw_status = TRUE_HOLD;
 8003baa:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <Aux_Switch_Status_Read+0xc4>)
 8003bac:	2203      	movs	r2, #3
 8003bae:	801a      	strh	r2, [r3, #0]
		if ( aux_temp_debouncing+SW_HOLD_TIME <= aux_debouncing ){	//If we keep the button pressed more than the time defines
 8003bb0:	e01b      	b.n	8003bea <Aux_Switch_Status_Read+0xa6>
		}
	}else if( ( aux_sw_read_value )){
 8003bb2:	88bb      	ldrh	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d018      	beq.n	8003bea <Aux_Switch_Status_Read+0xa6>
		if ( previous_aux_sw_status == TRUE_HOLD ){	//If previous status was HOLD< do not report push
 8003bb8:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <Aux_Switch_Status_Read+0xc4>)
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d102      	bne.n	8003bc6 <Aux_Switch_Status_Read+0x82>
			aux_sw_status = FALSE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	80fb      	strh	r3, [r7, #6]
 8003bc4:	e00e      	b.n	8003be4 <Aux_Switch_Status_Read+0xa0>
		}else if ( previous_aux_sw_status == TRUE ){
 8003bc6:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <Aux_Switch_Status_Read+0xc4>)
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d105      	bne.n	8003bda <Aux_Switch_Status_Read+0x96>
			aux_sw_status = TRUE;	//If button released then send status TRUE
 8003bce:	2301      	movs	r3, #1
 8003bd0:	80fb      	strh	r3, [r7, #6]
			debouncing_aux_sw = FALSE;	//Disable debouncing
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <Aux_Switch_Status_Read+0xb8>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	801a      	strh	r2, [r3, #0]
 8003bd8:	e004      	b.n	8003be4 <Aux_Switch_Status_Read+0xa0>
		}else{
			aux_sw_status = FALSE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	80fb      	strh	r3, [r7, #6]
			debouncing_aux_sw = FALSE;	//Disable debouncing
 8003bde:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <Aux_Switch_Status_Read+0xb8>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	801a      	strh	r2, [r3, #0]
		}
		previous_aux_sw_status = FALSE;	//Reset variable of previous status
 8003be4:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <Aux_Switch_Status_Read+0xc4>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	801a      	strh	r2, [r3, #0]
	}else{
		//aux_sw_status = FALSE;	//In case other condition, send FALSE
	}
	return aux_sw_status;
 8003bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40020400 	.word	0x40020400
 8003bfc:	20000794 	.word	0x20000794
 8003c00:	20000798 	.word	0x20000798
 8003c04:	200007a8 	.word	0x200007a8
 8003c08:	200007aa 	.word	0x200007aa

08003c0c <Save_Parameter_Data>:
/**
  * @brief Function to save the data into flash (EEPROM Emulation)
  * @param	- Pointer to the struct to be saved
  * @retval
  */
uint16_t Save_Parameter_Data(str_parameters *struct_ptr){
 8003c0c:	b5b0      	push	{r4, r5, r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
	  {
	    str_parameters temp;
	    uint8_t bytes[sizeof(*struct_ptr)];
	  }save_union_par;

	  save_union_par.temp = *struct_ptr; //Copy values from value struct to uniun
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f107 0408 	add.w	r4, r7, #8
 8003c1a:	461d      	mov	r5, r3
 8003c1c:	6828      	ldr	r0, [r5, #0]
 8003c1e:	6869      	ldr	r1, [r5, #4]
 8003c20:	68aa      	ldr	r2, [r5, #8]
 8003c22:	68eb      	ldr	r3, [r5, #12]
 8003c24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c26:	6928      	ldr	r0, [r5, #16]
 8003c28:	6020      	str	r0, [r4, #0]
 8003c2a:	8aab      	ldrh	r3, [r5, #20]
 8003c2c:	80a3      	strh	r3, [r4, #4]

	  for (uint8_t i=0; i<sizeof(*struct_ptr); i++)  //Transfers values to Union
 8003c2e:	2300      	movs	r3, #0
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e00b      	b.n	8003c4c <Save_Parameter_Data+0x40>
	  {
	    ee_writeToRam(i, 1, &save_union_par.bytes[i]);
 8003c34:	7ff8      	ldrb	r0, [r7, #31]
 8003c36:	7ffb      	ldrb	r3, [r7, #31]
 8003c38:	f107 0208 	add.w	r2, r7, #8
 8003c3c:	4413      	add	r3, r2
 8003c3e:	461a      	mov	r2, r3
 8003c40:	2101      	movs	r1, #1
 8003c42:	f7fd fc45 	bl	80014d0 <ee_writeToRam>
	  for (uint8_t i=0; i<sizeof(*struct_ptr); i++)  //Transfers values to Union
 8003c46:	7ffb      	ldrb	r3, [r7, #31]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	77fb      	strb	r3, [r7, #31]
 8003c4c:	7ffb      	ldrb	r3, [r7, #31]
 8003c4e:	2b15      	cmp	r3, #21
 8003c50:	d9f0      	bls.n	8003c34 <Save_Parameter_Data+0x28>
	  }
	  return ee_commit();
 8003c52:	f7fd fc5f 	bl	8001514 <ee_commit>
 8003c56:	4603      	mov	r3, r0
 8003c58:	b29b      	uxth	r3, r3
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bdb0      	pop	{r4, r5, r7, pc}

08003c62 <Read_Parameter_Data>:
/**
  * @brief Function to read the data from flash (EEPROM Emulation)
  * @param	- Pointer to the struct in which the data needs to be loaded
  * @retval
  */
uint16_t Read_Parameter_Data(str_parameters *struct_ptr){
 8003c62:	b5b0      	push	{r4, r5, r7, lr}
 8003c64:	b08a      	sub	sp, #40	; 0x28
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
		str_parameters temp;
		uint8_t bytes[sizeof(*struct_ptr)];
	}save_union_par;

	uint16_t status_read;
	uint16_t read_fail = 1;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t data;             //Temporal variable to copy each data from EEPROM to Union
	for (uint8_t i=0; i<sizeof(*struct_ptr); i++)  //Transfers values to Union
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003c74:	e01a      	b.n	8003cac <Read_Parameter_Data+0x4a>
	{
		status_read = ee_read(i, 1, &data);
 8003c76:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c7a:	f107 020b 	add.w	r2, r7, #11
 8003c7e:	2101      	movs	r1, #1
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fd fa7f 	bl	8001184 <ee_read>
 8003c86:	4603      	mov	r3, r0
 8003c88:	847b      	strh	r3, [r7, #34]	; 0x22
		save_union_par.bytes[i] = data;   //Save data on union
 8003c8a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c8e:	7afa      	ldrb	r2, [r7, #11]
 8003c90:	3328      	adds	r3, #40	; 0x28
 8003c92:	443b      	add	r3, r7
 8003c94:	f803 2c1c 	strb.w	r2, [r3, #-28]
		if (!status_read){
 8003c98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <Read_Parameter_Data+0x40>
			read_fail = 0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (uint8_t i=0; i<sizeof(*struct_ptr); i++)  //Transfers values to Union
 8003ca2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003cac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003cb0:	2b15      	cmp	r3, #21
 8003cb2:	d9e0      	bls.n	8003c76 <Read_Parameter_Data+0x14>
		}
	}
	*struct_ptr = save_union_par.temp;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	461d      	mov	r5, r3
 8003cb8:	f107 040c 	add.w	r4, r7, #12
 8003cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cbe:	6028      	str	r0, [r5, #0]
 8003cc0:	6069      	str	r1, [r5, #4]
 8003cc2:	60aa      	str	r2, [r5, #8]
 8003cc4:	60eb      	str	r3, [r5, #12]
 8003cc6:	6820      	ldr	r0, [r4, #0]
 8003cc8:	6128      	str	r0, [r5, #16]
 8003cca:	88a3      	ldrh	r3, [r4, #4]
 8003ccc:	82ab      	strh	r3, [r5, #20]
	return read_fail;
 8003cce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3728      	adds	r7, #40	; 0x28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bdb0      	pop	{r4, r5, r7, pc}

08003cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cdc:	b672      	cpsid	i
}
 8003cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ce0:	e7fe      	b.n	8003ce0 <Error_Handler+0x8>
	...

08003ce4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	607b      	str	r3, [r7, #4]
 8003cee:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <HAL_MspInit+0x4c>)
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	4a0f      	ldr	r2, [pc, #60]	; (8003d30 <HAL_MspInit+0x4c>)
 8003cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <HAL_MspInit+0x4c>)
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d02:	607b      	str	r3, [r7, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	603b      	str	r3, [r7, #0]
 8003d0a:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <HAL_MspInit+0x4c>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	4a08      	ldr	r2, [pc, #32]	; (8003d30 <HAL_MspInit+0x4c>)
 8003d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d14:	6413      	str	r3, [r2, #64]	; 0x40
 8003d16:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <HAL_MspInit+0x4c>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800

08003d34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d3c:	f107 0314 	add.w	r3, r7, #20
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	605a      	str	r2, [r3, #4]
 8003d46:	609a      	str	r2, [r3, #8]
 8003d48:	60da      	str	r2, [r3, #12]
 8003d4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a17      	ldr	r2, [pc, #92]	; (8003db0 <HAL_ADC_MspInit+0x7c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d127      	bne.n	8003da6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <HAL_ADC_MspInit+0x80>)
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	4a15      	ldr	r2, [pc, #84]	; (8003db4 <HAL_ADC_MspInit+0x80>)
 8003d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d64:	6453      	str	r3, [r2, #68]	; 0x44
 8003d66:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <HAL_ADC_MspInit+0x80>)
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <HAL_ADC_MspInit+0x80>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	4a0e      	ldr	r2, [pc, #56]	; (8003db4 <HAL_ADC_MspInit+0x80>)
 8003d7c:	f043 0302 	orr.w	r3, r3, #2
 8003d80:	6313      	str	r3, [r2, #48]	; 0x30
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <HAL_ADC_MspInit+0x80>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d92:	2303      	movs	r3, #3
 8003d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d9a:	f107 0314 	add.w	r3, r7, #20
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4805      	ldr	r0, [pc, #20]	; (8003db8 <HAL_ADC_MspInit+0x84>)
 8003da2:	f001 f98f 	bl	80050c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003da6:	bf00      	nop
 8003da8:	3728      	adds	r7, #40	; 0x28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40012000 	.word	0x40012000
 8003db4:	40023800 	.word	0x40023800
 8003db8:	40020400 	.word	0x40020400

08003dbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	; 0x28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc4:	f107 0314 	add.w	r3, r7, #20
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	60da      	str	r2, [r3, #12]
 8003dd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a19      	ldr	r2, [pc, #100]	; (8003e40 <HAL_I2C_MspInit+0x84>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d12c      	bne.n	8003e38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	4b18      	ldr	r3, [pc, #96]	; (8003e44 <HAL_I2C_MspInit+0x88>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	4a17      	ldr	r2, [pc, #92]	; (8003e44 <HAL_I2C_MspInit+0x88>)
 8003de8:	f043 0302 	orr.w	r3, r3, #2
 8003dec:	6313      	str	r3, [r2, #48]	; 0x30
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <HAL_I2C_MspInit+0x88>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003dfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e00:	2312      	movs	r3, #18
 8003e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e0c:	2304      	movs	r3, #4
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e10:	f107 0314 	add.w	r3, r7, #20
 8003e14:	4619      	mov	r1, r3
 8003e16:	480c      	ldr	r0, [pc, #48]	; (8003e48 <HAL_I2C_MspInit+0x8c>)
 8003e18:	f001 f954 	bl	80050c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <HAL_I2C_MspInit+0x88>)
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	4a07      	ldr	r2, [pc, #28]	; (8003e44 <HAL_I2C_MspInit+0x88>)
 8003e26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <HAL_I2C_MspInit+0x88>)
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003e38:	bf00      	nop
 8003e3a:	3728      	adds	r7, #40	; 0x28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40005400 	.word	0x40005400
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40020400 	.word	0x40020400

08003e4c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08a      	sub	sp, #40	; 0x28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e54:	f107 0314 	add.w	r3, r7, #20
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	605a      	str	r2, [r3, #4]
 8003e5e:	609a      	str	r2, [r3, #8]
 8003e60:	60da      	str	r2, [r3, #12]
 8003e62:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a25      	ldr	r2, [pc, #148]	; (8003f00 <HAL_TIM_Encoder_MspInit+0xb4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d144      	bne.n	8003ef8 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e6e:	2300      	movs	r3, #0
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	4a23      	ldr	r2, [pc, #140]	; (8003f04 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e7e:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	613b      	str	r3, [r7, #16]
 8003e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	4a1c      	ldr	r2, [pc, #112]	; (8003f04 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	6313      	str	r3, [r2, #48]	; 0x30
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN_A_Pin|EN_B_Pin;
 8003ea6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eac:	2302      	movs	r3, #2
 8003eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ebc:	f107 0314 	add.w	r3, r7, #20
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4811      	ldr	r0, [pc, #68]	; (8003f08 <HAL_TIM_Encoder_MspInit+0xbc>)
 8003ec4:	f001 f8fe 	bl	80050c4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2100      	movs	r1, #0
 8003ecc:	2018      	movs	r0, #24
 8003ece:	f000 fdda 	bl	8004a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003ed2:	2018      	movs	r0, #24
 8003ed4:	f000 fdf3 	bl	8004abe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2100      	movs	r1, #0
 8003edc:	2019      	movs	r0, #25
 8003ede:	f000 fdd2 	bl	8004a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003ee2:	2019      	movs	r0, #25
 8003ee4:	f000 fdeb 	bl	8004abe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2100      	movs	r1, #0
 8003eec:	201a      	movs	r0, #26
 8003eee:	f000 fdca 	bl	8004a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003ef2:	201a      	movs	r0, #26
 8003ef4:	f000 fde3 	bl	8004abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003ef8:	bf00      	nop
 8003efa:	3728      	adds	r7, #40	; 0x28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40010000 	.word	0x40010000
 8003f04:	40023800 	.word	0x40023800
 8003f08:	40020000 	.word	0x40020000

08003f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b090      	sub	sp, #64	; 0x40
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	609a      	str	r2, [r3, #8]
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2c:	d10e      	bne.n	8003f4c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f32:	4b64      	ldr	r3, [pc, #400]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	4a63      	ldr	r2, [pc, #396]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f3e:	4b61      	ldr	r3, [pc, #388]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003f4a:	e0b6      	b.n	80040ba <HAL_TIM_Base_MspInit+0x1ae>
  else if(htim_base->Instance==TIM4)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a5d      	ldr	r2, [pc, #372]	; (80040c8 <HAL_TIM_Base_MspInit+0x1bc>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d12c      	bne.n	8003fb0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f56:	2300      	movs	r3, #0
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5a:	4b5a      	ldr	r3, [pc, #360]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	4a59      	ldr	r2, [pc, #356]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8003f60:	f043 0304 	orr.w	r3, r3, #4
 8003f64:	6413      	str	r3, [r2, #64]	; 0x40
 8003f66:	4b57      	ldr	r3, [pc, #348]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	623b      	str	r3, [r7, #32]
 8003f76:	4b53      	ldr	r3, [pc, #332]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	4a52      	ldr	r2, [pc, #328]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8003f7c:	f043 0302 	orr.w	r3, r3, #2
 8003f80:	6313      	str	r3, [r2, #48]	; 0x30
 8003f82:	4b50      	ldr	r3, [pc, #320]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	623b      	str	r3, [r7, #32]
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = RPM_Pin;
 8003f8e:	2380      	movs	r3, #128	; 0x80
 8003f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f92:	2302      	movs	r3, #2
 8003f94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(RPM_GPIO_Port, &GPIO_InitStruct);
 8003fa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4848      	ldr	r0, [pc, #288]	; (80040cc <HAL_TIM_Base_MspInit+0x1c0>)
 8003faa:	f001 f88b 	bl	80050c4 <HAL_GPIO_Init>
}
 8003fae:	e084      	b.n	80040ba <HAL_TIM_Base_MspInit+0x1ae>
  else if(htim_base->Instance==TIM5)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a46      	ldr	r2, [pc, #280]	; (80040d0 <HAL_TIM_Base_MspInit+0x1c4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d12c      	bne.n	8004014 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	4b41      	ldr	r3, [pc, #260]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	4a40      	ldr	r2, [pc, #256]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8003fc4:	f043 0308 	orr.w	r3, r3, #8
 8003fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fca:	4b3e      	ldr	r3, [pc, #248]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	61fb      	str	r3, [r7, #28]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	4b3a      	ldr	r3, [pc, #232]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	4a39      	ldr	r2, [pc, #228]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fe6:	4b37      	ldr	r3, [pc, #220]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	61bb      	str	r3, [r7, #24]
 8003ff0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PULSE_IN_Pin;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ffe:	2302      	movs	r3, #2
 8004000:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004002:	2302      	movs	r3, #2
 8004004:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(PULSE_IN_GPIO_Port, &GPIO_InitStruct);
 8004006:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800400a:	4619      	mov	r1, r3
 800400c:	4831      	ldr	r0, [pc, #196]	; (80040d4 <HAL_TIM_Base_MspInit+0x1c8>)
 800400e:	f001 f859 	bl	80050c4 <HAL_GPIO_Init>
}
 8004012:	e052      	b.n	80040ba <HAL_TIM_Base_MspInit+0x1ae>
  else if(htim_base->Instance==TIM9)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a2f      	ldr	r2, [pc, #188]	; (80040d8 <HAL_TIM_Base_MspInit+0x1cc>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d116      	bne.n	800404c <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	4b28      	ldr	r3, [pc, #160]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	4a27      	ldr	r2, [pc, #156]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8004028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402c:	6453      	str	r3, [r2, #68]	; 0x44
 800402e:	4b25      	ldr	r3, [pc, #148]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800403a:	2200      	movs	r2, #0
 800403c:	2100      	movs	r1, #0
 800403e:	2018      	movs	r0, #24
 8004040:	f000 fd21 	bl	8004a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004044:	2018      	movs	r0, #24
 8004046:	f000 fd3a 	bl	8004abe <HAL_NVIC_EnableIRQ>
}
 800404a:	e036      	b.n	80040ba <HAL_TIM_Base_MspInit+0x1ae>
  else if(htim_base->Instance==TIM10)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a22      	ldr	r2, [pc, #136]	; (80040dc <HAL_TIM_Base_MspInit+0x1d0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d116      	bne.n	8004084 <HAL_TIM_Base_MspInit+0x178>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	4b1a      	ldr	r3, [pc, #104]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	4a19      	ldr	r2, [pc, #100]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8004060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004064:	6453      	str	r3, [r2, #68]	; 0x44
 8004066:	4b17      	ldr	r3, [pc, #92]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004072:	2200      	movs	r2, #0
 8004074:	2100      	movs	r1, #0
 8004076:	2019      	movs	r0, #25
 8004078:	f000 fd05 	bl	8004a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800407c:	2019      	movs	r0, #25
 800407e:	f000 fd1e 	bl	8004abe <HAL_NVIC_EnableIRQ>
}
 8004082:	e01a      	b.n	80040ba <HAL_TIM_Base_MspInit+0x1ae>
  else if(htim_base->Instance==TIM11)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <HAL_TIM_Base_MspInit+0x1d4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d115      	bne.n	80040ba <HAL_TIM_Base_MspInit+0x1ae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8004094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004096:	4a0b      	ldr	r2, [pc, #44]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 8004098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800409c:	6453      	str	r3, [r2, #68]	; 0x44
 800409e:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <HAL_TIM_Base_MspInit+0x1b8>)
 80040a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80040aa:	2200      	movs	r2, #0
 80040ac:	2100      	movs	r1, #0
 80040ae:	201a      	movs	r0, #26
 80040b0:	f000 fce9 	bl	8004a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80040b4:	201a      	movs	r0, #26
 80040b6:	f000 fd02 	bl	8004abe <HAL_NVIC_EnableIRQ>
}
 80040ba:	bf00      	nop
 80040bc:	3740      	adds	r7, #64	; 0x40
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40023800 	.word	0x40023800
 80040c8:	40000800 	.word	0x40000800
 80040cc:	40020400 	.word	0x40020400
 80040d0:	40000c00 	.word	0x40000c00
 80040d4:	40020000 	.word	0x40020000
 80040d8:	40014000 	.word	0x40014000
 80040dc:	40014400 	.word	0x40014400
 80040e0:	40014800 	.word	0x40014800

080040e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ec:	f107 030c 	add.w	r3, r7, #12
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	605a      	str	r2, [r3, #4]
 80040f6:	609a      	str	r2, [r3, #8]
 80040f8:	60da      	str	r2, [r3, #12]
 80040fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004104:	d11d      	bne.n	8004142 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004106:	2300      	movs	r3, #0
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <HAL_TIM_MspPostInit+0x68>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	4a0f      	ldr	r2, [pc, #60]	; (800414c <HAL_TIM_MspPostInit+0x68>)
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	6313      	str	r3, [r2, #48]	; 0x30
 8004116:	4b0d      	ldr	r3, [pc, #52]	; (800414c <HAL_TIM_MspPostInit+0x68>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	60bb      	str	r3, [r7, #8]
 8004120:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PULSE_Pin;
 8004122:	2301      	movs	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004126:	2302      	movs	r3, #2
 8004128:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800412e:	2302      	movs	r3, #2
 8004130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004132:	2301      	movs	r3, #1
 8004134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PULSE_GPIO_Port, &GPIO_InitStruct);
 8004136:	f107 030c 	add.w	r3, r7, #12
 800413a:	4619      	mov	r1, r3
 800413c:	4804      	ldr	r0, [pc, #16]	; (8004150 <HAL_TIM_MspPostInit+0x6c>)
 800413e:	f000 ffc1 	bl	80050c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004142:	bf00      	nop
 8004144:	3720      	adds	r7, #32
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40023800 	.word	0x40023800
 8004150:	40020000 	.word	0x40020000

08004154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004158:	e7fe      	b.n	8004158 <NMI_Handler+0x4>

0800415a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800415a:	b480      	push	{r7}
 800415c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800415e:	e7fe      	b.n	800415e <HardFault_Handler+0x4>

08004160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004164:	e7fe      	b.n	8004164 <MemManage_Handler+0x4>

08004166 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004166:	b480      	push	{r7}
 8004168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800416a:	e7fe      	b.n	800416a <BusFault_Handler+0x4>

0800416c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004170:	e7fe      	b.n	8004170 <UsageFault_Handler+0x4>

08004172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004172:	b480      	push	{r7}
 8004174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004176:	bf00      	nop
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004184:	bf00      	nop
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800418e:	b480      	push	{r7}
 8004190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041a0:	f000 f8f0 	bl	8004384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041a4:	bf00      	nop
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041ac:	4803      	ldr	r0, [pc, #12]	; (80041bc <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80041ae:	f002 fd9c 	bl	8006cea <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80041b2:	4803      	ldr	r0, [pc, #12]	; (80041c0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80041b4:	f002 fd99 	bl	8006cea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80041b8:	bf00      	nop
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20000544 	.word	0x20000544
 80041c0:	20000664 	.word	0x20000664

080041c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041c8:	4803      	ldr	r0, [pc, #12]	; (80041d8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80041ca:	f002 fd8e 	bl	8006cea <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80041ce:	4803      	ldr	r0, [pc, #12]	; (80041dc <TIM1_UP_TIM10_IRQHandler+0x18>)
 80041d0:	f002 fd8b 	bl	8006cea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80041d4:	bf00      	nop
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000544 	.word	0x20000544
 80041dc:	200006ac 	.word	0x200006ac

080041e0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041e4:	4803      	ldr	r0, [pc, #12]	; (80041f4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80041e6:	f002 fd80 	bl	8006cea <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80041ea:	4803      	ldr	r0, [pc, #12]	; (80041f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80041ec:	f002 fd7d 	bl	8006cea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80041f0:	bf00      	nop
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000544 	.word	0x20000544
 80041f8:	200006f4 	.word	0x200006f4

080041fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004204:	4a14      	ldr	r2, [pc, #80]	; (8004258 <_sbrk+0x5c>)
 8004206:	4b15      	ldr	r3, [pc, #84]	; (800425c <_sbrk+0x60>)
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004210:	4b13      	ldr	r3, [pc, #76]	; (8004260 <_sbrk+0x64>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d102      	bne.n	800421e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004218:	4b11      	ldr	r3, [pc, #68]	; (8004260 <_sbrk+0x64>)
 800421a:	4a12      	ldr	r2, [pc, #72]	; (8004264 <_sbrk+0x68>)
 800421c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <_sbrk+0x64>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4413      	add	r3, r2
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	429a      	cmp	r2, r3
 800422a:	d207      	bcs.n	800423c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800422c:	f003 fdf4 	bl	8007e18 <__errno>
 8004230:	4603      	mov	r3, r0
 8004232:	220c      	movs	r2, #12
 8004234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004236:	f04f 33ff 	mov.w	r3, #4294967295
 800423a:	e009      	b.n	8004250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800423c:	4b08      	ldr	r3, [pc, #32]	; (8004260 <_sbrk+0x64>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004242:	4b07      	ldr	r3, [pc, #28]	; (8004260 <_sbrk+0x64>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4413      	add	r3, r2
 800424a:	4a05      	ldr	r2, [pc, #20]	; (8004260 <_sbrk+0x64>)
 800424c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800424e:	68fb      	ldr	r3, [r7, #12]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20010000 	.word	0x20010000
 800425c:	00000400 	.word	0x00000400
 8004260:	200007ac 	.word	0x200007ac
 8004264:	200007e8 	.word	0x200007e8

08004268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <SystemInit+0x20>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004272:	4a05      	ldr	r2, [pc, #20]	; (8004288 <SystemInit+0x20>)
 8004274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800427c:	bf00      	nop
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	e000ed00 	.word	0xe000ed00

0800428c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800428c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004290:	480d      	ldr	r0, [pc, #52]	; (80042c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004292:	490e      	ldr	r1, [pc, #56]	; (80042cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004294:	4a0e      	ldr	r2, [pc, #56]	; (80042d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004298:	e002      	b.n	80042a0 <LoopCopyDataInit>

0800429a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800429a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800429c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800429e:	3304      	adds	r3, #4

080042a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042a4:	d3f9      	bcc.n	800429a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042a6:	4a0b      	ldr	r2, [pc, #44]	; (80042d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80042a8:	4c0b      	ldr	r4, [pc, #44]	; (80042d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80042aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042ac:	e001      	b.n	80042b2 <LoopFillZerobss>

080042ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042b0:	3204      	adds	r2, #4

080042b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042b4:	d3fb      	bcc.n	80042ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80042b6:	f7ff ffd7 	bl	8004268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042ba:	f003 fdb3 	bl	8007e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042be:	f7fd f943 	bl	8001548 <main>
  bx  lr    
 80042c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80042c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80042c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042cc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80042d0:	080089fc 	.word	0x080089fc
  ldr r2, =_sbss
 80042d4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80042d8:	200007e4 	.word	0x200007e4

080042dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042dc:	e7fe      	b.n	80042dc <ADC_IRQHandler>
	...

080042e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042e4:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <HAL_Init+0x40>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a0d      	ldr	r2, [pc, #52]	; (8004320 <HAL_Init+0x40>)
 80042ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_Init+0x40>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <HAL_Init+0x40>)
 80042f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042fc:	4b08      	ldr	r3, [pc, #32]	; (8004320 <HAL_Init+0x40>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a07      	ldr	r2, [pc, #28]	; (8004320 <HAL_Init+0x40>)
 8004302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004308:	2003      	movs	r0, #3
 800430a:	f000 fbb1 	bl	8004a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800430e:	200f      	movs	r0, #15
 8004310:	f000 f808 	bl	8004324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004314:	f7ff fce6 	bl	8003ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40023c00 	.word	0x40023c00

08004324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800432c:	4b12      	ldr	r3, [pc, #72]	; (8004378 <HAL_InitTick+0x54>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b12      	ldr	r3, [pc, #72]	; (800437c <HAL_InitTick+0x58>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	4619      	mov	r1, r3
 8004336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800433a:	fbb3 f3f1 	udiv	r3, r3, r1
 800433e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fbc9 	bl	8004ada <HAL_SYSTICK_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e00e      	b.n	8004370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b0f      	cmp	r3, #15
 8004356:	d80a      	bhi.n	800436e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004358:	2200      	movs	r2, #0
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	f04f 30ff 	mov.w	r0, #4294967295
 8004360:	f000 fb91 	bl	8004a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004364:	4a06      	ldr	r2, [pc, #24]	; (8004380 <HAL_InitTick+0x5c>)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	e000      	b.n	8004370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
}
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000010 	.word	0x20000010
 800437c:	20000018 	.word	0x20000018
 8004380:	20000014 	.word	0x20000014

08004384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004388:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <HAL_IncTick+0x20>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <HAL_IncTick+0x24>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4413      	add	r3, r2
 8004394:	4a04      	ldr	r2, [pc, #16]	; (80043a8 <HAL_IncTick+0x24>)
 8004396:	6013      	str	r3, [r2, #0]
}
 8004398:	bf00      	nop
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	20000018 	.word	0x20000018
 80043a8:	200007b0 	.word	0x200007b0

080043ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  return uwTick;
 80043b0:	4b03      	ldr	r3, [pc, #12]	; (80043c0 <HAL_GetTick+0x14>)
 80043b2:	681b      	ldr	r3, [r3, #0]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	200007b0 	.word	0x200007b0

080043c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043cc:	f7ff ffee 	bl	80043ac <HAL_GetTick>
 80043d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d005      	beq.n	80043ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043de:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <HAL_Delay+0x44>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043ea:	bf00      	nop
 80043ec:	f7ff ffde 	bl	80043ac <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d8f7      	bhi.n	80043ec <HAL_Delay+0x28>
  {
  }
}
 80043fc:	bf00      	nop
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000018 	.word	0x20000018

0800440c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e033      	b.n	800448a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff fc82 	bl	8003d34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f003 0310 	and.w	r3, r3, #16
 8004446:	2b00      	cmp	r3, #0
 8004448:	d118      	bne.n	800447c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004452:	f023 0302 	bic.w	r3, r3, #2
 8004456:	f043 0202 	orr.w	r2, r3, #2
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f93a 	bl	80046d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f023 0303 	bic.w	r3, r3, #3
 8004472:	f043 0201 	orr.w	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	641a      	str	r2, [r3, #64]	; 0x40
 800447a:	e001      	b.n	8004480 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004488:	7bfb      	ldrb	r3, [r7, #15]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x1c>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e105      	b.n	80046bc <HAL_ADC_ConfigChannel+0x228>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b09      	cmp	r3, #9
 80044be:	d925      	bls.n	800450c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68d9      	ldr	r1, [r3, #12]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	4613      	mov	r3, r2
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	4413      	add	r3, r2
 80044d4:	3b1e      	subs	r3, #30
 80044d6:	2207      	movs	r2, #7
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	43da      	mvns	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	400a      	ands	r2, r1
 80044e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68d9      	ldr	r1, [r3, #12]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	4618      	mov	r0, r3
 80044f8:	4603      	mov	r3, r0
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	4403      	add	r3, r0
 80044fe:	3b1e      	subs	r3, #30
 8004500:	409a      	lsls	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	60da      	str	r2, [r3, #12]
 800450a:	e022      	b.n	8004552 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6919      	ldr	r1, [r3, #16]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	4613      	mov	r3, r2
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4413      	add	r3, r2
 8004520:	2207      	movs	r2, #7
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	43da      	mvns	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	400a      	ands	r2, r1
 800452e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6919      	ldr	r1, [r3, #16]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	b29b      	uxth	r3, r3
 8004540:	4618      	mov	r0, r3
 8004542:	4603      	mov	r3, r0
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	4403      	add	r3, r0
 8004548:	409a      	lsls	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b06      	cmp	r3, #6
 8004558:	d824      	bhi.n	80045a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	3b05      	subs	r3, #5
 800456c:	221f      	movs	r2, #31
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	43da      	mvns	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	400a      	ands	r2, r1
 800457a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	b29b      	uxth	r3, r3
 8004588:	4618      	mov	r0, r3
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	3b05      	subs	r3, #5
 8004596:	fa00 f203 	lsl.w	r2, r0, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	635a      	str	r2, [r3, #52]	; 0x34
 80045a2:	e04c      	b.n	800463e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b0c      	cmp	r3, #12
 80045aa:	d824      	bhi.n	80045f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	3b23      	subs	r3, #35	; 0x23
 80045be:	221f      	movs	r2, #31
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	43da      	mvns	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	400a      	ands	r2, r1
 80045cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	4618      	mov	r0, r3
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	3b23      	subs	r3, #35	; 0x23
 80045e8:	fa00 f203 	lsl.w	r2, r0, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
 80045f4:	e023      	b.n	800463e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	3b41      	subs	r3, #65	; 0x41
 8004608:	221f      	movs	r2, #31
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	43da      	mvns	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	400a      	ands	r2, r1
 8004616:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	b29b      	uxth	r3, r3
 8004624:	4618      	mov	r0, r3
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	4613      	mov	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	3b41      	subs	r3, #65	; 0x41
 8004632:	fa00 f203 	lsl.w	r2, r0, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800463e:	4b22      	ldr	r3, [pc, #136]	; (80046c8 <HAL_ADC_ConfigChannel+0x234>)
 8004640:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a21      	ldr	r2, [pc, #132]	; (80046cc <HAL_ADC_ConfigChannel+0x238>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d109      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x1cc>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b12      	cmp	r3, #18
 8004652:	d105      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a19      	ldr	r2, [pc, #100]	; (80046cc <HAL_ADC_ConfigChannel+0x238>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d123      	bne.n	80046b2 <HAL_ADC_ConfigChannel+0x21e>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b10      	cmp	r3, #16
 8004670:	d003      	beq.n	800467a <HAL_ADC_ConfigChannel+0x1e6>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b11      	cmp	r3, #17
 8004678:	d11b      	bne.n	80046b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b10      	cmp	r3, #16
 800468c:	d111      	bne.n	80046b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800468e:	4b10      	ldr	r3, [pc, #64]	; (80046d0 <HAL_ADC_ConfigChannel+0x23c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a10      	ldr	r2, [pc, #64]	; (80046d4 <HAL_ADC_ConfigChannel+0x240>)
 8004694:	fba2 2303 	umull	r2, r3, r2, r3
 8004698:	0c9a      	lsrs	r2, r3, #18
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046a4:	e002      	b.n	80046ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f9      	bne.n	80046a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	40012300 	.word	0x40012300
 80046cc:	40012000 	.word	0x40012000
 80046d0:	20000010 	.word	0x20000010
 80046d4:	431bde83 	.word	0x431bde83

080046d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046e0:	4b79      	ldr	r3, [pc, #484]	; (80048c8 <ADC_Init+0x1f0>)
 80046e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	431a      	orrs	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800470c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6859      	ldr	r1, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	021a      	lsls	r2, r3, #8
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004730:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6859      	ldr	r1, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004752:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6899      	ldr	r1, [r3, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	4a58      	ldr	r2, [pc, #352]	; (80048cc <ADC_Init+0x1f4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d022      	beq.n	80047b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800477e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6899      	ldr	r1, [r3, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6899      	ldr	r1, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	609a      	str	r2, [r3, #8]
 80047b4:	e00f      	b.n	80047d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0202 	bic.w	r2, r2, #2
 80047e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6899      	ldr	r1, [r3, #8]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	7e1b      	ldrb	r3, [r3, #24]
 80047f0:	005a      	lsls	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01b      	beq.n	800483c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004812:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004822:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6859      	ldr	r1, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	3b01      	subs	r3, #1
 8004830:	035a      	lsls	r2, r3, #13
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]
 800483a:	e007      	b.n	800484c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800484a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800485a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	3b01      	subs	r3, #1
 8004868:	051a      	lsls	r2, r3, #20
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004880:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6899      	ldr	r1, [r3, #8]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800488e:	025a      	lsls	r2, r3, #9
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6899      	ldr	r1, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	029a      	lsls	r2, r3, #10
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	609a      	str	r2, [r3, #8]
}
 80048bc:	bf00      	nop
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	40012300 	.word	0x40012300
 80048cc:	0f000001 	.word	0x0f000001

080048d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048e0:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <__NVIC_SetPriorityGrouping+0x44>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048ec:	4013      	ands	r3, r2
 80048ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004902:	4a04      	ldr	r2, [pc, #16]	; (8004914 <__NVIC_SetPriorityGrouping+0x44>)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	60d3      	str	r3, [r2, #12]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	e000ed00 	.word	0xe000ed00

08004918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800491c:	4b04      	ldr	r3, [pc, #16]	; (8004930 <__NVIC_GetPriorityGrouping+0x18>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	0a1b      	lsrs	r3, r3, #8
 8004922:	f003 0307 	and.w	r3, r3, #7
}
 8004926:	4618      	mov	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	e000ed00 	.word	0xe000ed00

08004934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800493e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004942:	2b00      	cmp	r3, #0
 8004944:	db0b      	blt.n	800495e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004946:	79fb      	ldrb	r3, [r7, #7]
 8004948:	f003 021f 	and.w	r2, r3, #31
 800494c:	4907      	ldr	r1, [pc, #28]	; (800496c <__NVIC_EnableIRQ+0x38>)
 800494e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	2001      	movs	r0, #1
 8004956:	fa00 f202 	lsl.w	r2, r0, r2
 800495a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	e000e100 	.word	0xe000e100

08004970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	6039      	str	r1, [r7, #0]
 800497a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800497c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004980:	2b00      	cmp	r3, #0
 8004982:	db0a      	blt.n	800499a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	b2da      	uxtb	r2, r3
 8004988:	490c      	ldr	r1, [pc, #48]	; (80049bc <__NVIC_SetPriority+0x4c>)
 800498a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498e:	0112      	lsls	r2, r2, #4
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	440b      	add	r3, r1
 8004994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004998:	e00a      	b.n	80049b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	4908      	ldr	r1, [pc, #32]	; (80049c0 <__NVIC_SetPriority+0x50>)
 80049a0:	79fb      	ldrb	r3, [r7, #7]
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	3b04      	subs	r3, #4
 80049a8:	0112      	lsls	r2, r2, #4
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	440b      	add	r3, r1
 80049ae:	761a      	strb	r2, [r3, #24]
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	e000e100 	.word	0xe000e100
 80049c0:	e000ed00 	.word	0xe000ed00

080049c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b089      	sub	sp, #36	; 0x24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f1c3 0307 	rsb	r3, r3, #7
 80049de:	2b04      	cmp	r3, #4
 80049e0:	bf28      	it	cs
 80049e2:	2304      	movcs	r3, #4
 80049e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	3304      	adds	r3, #4
 80049ea:	2b06      	cmp	r3, #6
 80049ec:	d902      	bls.n	80049f4 <NVIC_EncodePriority+0x30>
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	3b03      	subs	r3, #3
 80049f2:	e000      	b.n	80049f6 <NVIC_EncodePriority+0x32>
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f8:	f04f 32ff 	mov.w	r2, #4294967295
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	43da      	mvns	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	401a      	ands	r2, r3
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	fa01 f303 	lsl.w	r3, r1, r3
 8004a16:	43d9      	mvns	r1, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a1c:	4313      	orrs	r3, r2
         );
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3724      	adds	r7, #36	; 0x24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
	...

08004a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a3c:	d301      	bcc.n	8004a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e00f      	b.n	8004a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a42:	4a0a      	ldr	r2, [pc, #40]	; (8004a6c <SysTick_Config+0x40>)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a4a:	210f      	movs	r1, #15
 8004a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a50:	f7ff ff8e 	bl	8004970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a54:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <SysTick_Config+0x40>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a5a:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <SysTick_Config+0x40>)
 8004a5c:	2207      	movs	r2, #7
 8004a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	e000e010 	.word	0xe000e010

08004a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff ff29 	bl	80048d0 <__NVIC_SetPriorityGrouping>
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a98:	f7ff ff3e 	bl	8004918 <__NVIC_GetPriorityGrouping>
 8004a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	6978      	ldr	r0, [r7, #20]
 8004aa4:	f7ff ff8e 	bl	80049c4 <NVIC_EncodePriority>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff ff5d 	bl	8004970 <__NVIC_SetPriority>
}
 8004ab6:	bf00      	nop
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff ff31 	bl	8004934 <__NVIC_EnableIRQ>
}
 8004ad2:	bf00      	nop
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff ffa2 	bl	8004a2c <SysTick_Config>
 8004ae8:	4603      	mov	r3, r0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004b06:	4b23      	ldr	r3, [pc, #140]	; (8004b94 <HAL_FLASH_Program+0xa0>)
 8004b08:	7e1b      	ldrb	r3, [r3, #24]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_FLASH_Program+0x1e>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e03b      	b.n	8004b8a <HAL_FLASH_Program+0x96>
 8004b12:	4b20      	ldr	r3, [pc, #128]	; (8004b94 <HAL_FLASH_Program+0xa0>)
 8004b14:	2201      	movs	r2, #1
 8004b16:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b1c:	f000 f870 	bl	8004c00 <FLASH_WaitForLastOperation>
 8004b20:	4603      	mov	r3, r0
 8004b22:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004b24:	7dfb      	ldrb	r3, [r7, #23]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d12b      	bne.n	8004b82 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d105      	bne.n	8004b3c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004b30:	783b      	ldrb	r3, [r7, #0]
 8004b32:	4619      	mov	r1, r3
 8004b34:	68b8      	ldr	r0, [r7, #8]
 8004b36:	f000 f91b 	bl	8004d70 <FLASH_Program_Byte>
 8004b3a:	e016      	b.n	8004b6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d105      	bne.n	8004b4e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004b42:	883b      	ldrh	r3, [r7, #0]
 8004b44:	4619      	mov	r1, r3
 8004b46:	68b8      	ldr	r0, [r7, #8]
 8004b48:	f000 f8ee 	bl	8004d28 <FLASH_Program_HalfWord>
 8004b4c:	e00d      	b.n	8004b6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d105      	bne.n	8004b60 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	4619      	mov	r1, r3
 8004b58:	68b8      	ldr	r0, [r7, #8]
 8004b5a:	f000 f8c3 	bl	8004ce4 <FLASH_Program_Word>
 8004b5e:	e004      	b.n	8004b6a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b64:	68b8      	ldr	r0, [r7, #8]
 8004b66:	f000 f88b 	bl	8004c80 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b6e:	f000 f847 	bl	8004c00 <FLASH_WaitForLastOperation>
 8004b72:	4603      	mov	r3, r0
 8004b74:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004b76:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <HAL_FLASH_Program+0xa4>)
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	4a07      	ldr	r2, [pc, #28]	; (8004b98 <HAL_FLASH_Program+0xa4>)
 8004b7c:	f023 0301 	bic.w	r3, r3, #1
 8004b80:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004b82:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <HAL_FLASH_Program+0xa0>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	200007b4 	.word	0x200007b4
 8004b98:	40023c00 	.word	0x40023c00

08004b9c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <HAL_FLASH_Unlock+0x38>)
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	da0b      	bge.n	8004bc6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004bae:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <HAL_FLASH_Unlock+0x38>)
 8004bb0:	4a09      	ldr	r2, [pc, #36]	; (8004bd8 <HAL_FLASH_Unlock+0x3c>)
 8004bb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004bb4:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <HAL_FLASH_Unlock+0x38>)
 8004bb6:	4a09      	ldr	r2, [pc, #36]	; (8004bdc <HAL_FLASH_Unlock+0x40>)
 8004bb8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <HAL_FLASH_Unlock+0x38>)
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	da01      	bge.n	8004bc6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40023c00 	.word	0x40023c00
 8004bd8:	45670123 	.word	0x45670123
 8004bdc:	cdef89ab 	.word	0xcdef89ab

08004be0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004be4:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <HAL_FLASH_Lock+0x1c>)
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	4a04      	ldr	r2, [pc, #16]	; (8004bfc <HAL_FLASH_Lock+0x1c>)
 8004bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bee:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	40023c00 	.word	0x40023c00

08004c00 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004c0c:	4b1a      	ldr	r3, [pc, #104]	; (8004c78 <FLASH_WaitForLastOperation+0x78>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004c12:	f7ff fbcb 	bl	80043ac <HAL_GetTick>
 8004c16:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004c18:	e010      	b.n	8004c3c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c20:	d00c      	beq.n	8004c3c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <FLASH_WaitForLastOperation+0x38>
 8004c28:	f7ff fbc0 	bl	80043ac <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d201      	bcs.n	8004c3c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e019      	b.n	8004c70 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <FLASH_WaitForLastOperation+0x7c>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1e8      	bne.n	8004c1a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004c48:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <FLASH_WaitForLastOperation+0x7c>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004c54:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <FLASH_WaitForLastOperation+0x7c>)
 8004c56:	2201      	movs	r2, #1
 8004c58:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004c5a:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <FLASH_WaitForLastOperation+0x7c>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004c66:	f000 f8a5 	bl	8004db4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
  
}  
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	200007b4 	.word	0x200007b4
 8004c7c:	40023c00 	.word	0x40023c00

08004c80 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c8c:	4b14      	ldr	r3, [pc, #80]	; (8004ce0 <FLASH_Program_DoubleWord+0x60>)
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	4a13      	ldr	r2, [pc, #76]	; (8004ce0 <FLASH_Program_DoubleWord+0x60>)
 8004c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004c98:	4b11      	ldr	r3, [pc, #68]	; (8004ce0 <FLASH_Program_DoubleWord+0x60>)
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	4a10      	ldr	r2, [pc, #64]	; (8004ce0 <FLASH_Program_DoubleWord+0x60>)
 8004c9e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004ca2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004ca4:	4b0e      	ldr	r3, [pc, #56]	; (8004ce0 <FLASH_Program_DoubleWord+0x60>)
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	4a0d      	ldr	r2, [pc, #52]	; (8004ce0 <FLASH_Program_DoubleWord+0x60>)
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004cb6:	f3bf 8f6f 	isb	sy
}
 8004cba:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004cbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	000a      	movs	r2, r1
 8004cca:	2300      	movs	r3, #0
 8004ccc:	68f9      	ldr	r1, [r7, #12]
 8004cce:	3104      	adds	r1, #4
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	600b      	str	r3, [r1, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	40023c00 	.word	0x40023c00

08004ce4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004cee:	4b0d      	ldr	r3, [pc, #52]	; (8004d24 <FLASH_Program_Word+0x40>)
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	4a0c      	ldr	r2, [pc, #48]	; (8004d24 <FLASH_Program_Word+0x40>)
 8004cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004cfa:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <FLASH_Program_Word+0x40>)
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	4a09      	ldr	r2, [pc, #36]	; (8004d24 <FLASH_Program_Word+0x40>)
 8004d00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004d06:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <FLASH_Program_Word+0x40>)
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	4a06      	ldr	r2, [pc, #24]	; (8004d24 <FLASH_Program_Word+0x40>)
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	601a      	str	r2, [r3, #0]
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	40023c00 	.word	0x40023c00

08004d28 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004d34:	4b0d      	ldr	r3, [pc, #52]	; (8004d6c <FLASH_Program_HalfWord+0x44>)
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	4a0c      	ldr	r2, [pc, #48]	; (8004d6c <FLASH_Program_HalfWord+0x44>)
 8004d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <FLASH_Program_HalfWord+0x44>)
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	4a09      	ldr	r2, [pc, #36]	; (8004d6c <FLASH_Program_HalfWord+0x44>)
 8004d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004d4c:	4b07      	ldr	r3, [pc, #28]	; (8004d6c <FLASH_Program_HalfWord+0x44>)
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	4a06      	ldr	r2, [pc, #24]	; (8004d6c <FLASH_Program_HalfWord+0x44>)
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	887a      	ldrh	r2, [r7, #2]
 8004d5c:	801a      	strh	r2, [r3, #0]
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40023c00 	.word	0x40023c00

08004d70 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <FLASH_Program_Byte+0x40>)
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	4a0b      	ldr	r2, [pc, #44]	; (8004db0 <FLASH_Program_Byte+0x40>)
 8004d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004d88:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <FLASH_Program_Byte+0x40>)
 8004d8a:	4a09      	ldr	r2, [pc, #36]	; (8004db0 <FLASH_Program_Byte+0x40>)
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004d90:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <FLASH_Program_Byte+0x40>)
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	4a06      	ldr	r2, [pc, #24]	; (8004db0 <FLASH_Program_Byte+0x40>)
 8004d96:	f043 0301 	orr.w	r3, r3, #1
 8004d9a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	78fa      	ldrb	r2, [r7, #3]
 8004da0:	701a      	strb	r2, [r3, #0]
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40023c00 	.word	0x40023c00

08004db4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004db8:	4b2f      	ldr	r3, [pc, #188]	; (8004e78 <FLASH_SetErrorCode+0xc4>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004dc4:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <FLASH_SetErrorCode+0xc8>)
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	f043 0310 	orr.w	r3, r3, #16
 8004dcc:	4a2b      	ldr	r2, [pc, #172]	; (8004e7c <FLASH_SetErrorCode+0xc8>)
 8004dce:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004dd0:	4b29      	ldr	r3, [pc, #164]	; (8004e78 <FLASH_SetErrorCode+0xc4>)
 8004dd2:	2210      	movs	r2, #16
 8004dd4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004dd6:	4b28      	ldr	r3, [pc, #160]	; (8004e78 <FLASH_SetErrorCode+0xc4>)
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d008      	beq.n	8004df4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004de2:	4b26      	ldr	r3, [pc, #152]	; (8004e7c <FLASH_SetErrorCode+0xc8>)
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f043 0308 	orr.w	r3, r3, #8
 8004dea:	4a24      	ldr	r2, [pc, #144]	; (8004e7c <FLASH_SetErrorCode+0xc8>)
 8004dec:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004dee:	4b22      	ldr	r3, [pc, #136]	; (8004e78 <FLASH_SetErrorCode+0xc4>)
 8004df0:	2220      	movs	r2, #32
 8004df2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004df4:	4b20      	ldr	r3, [pc, #128]	; (8004e78 <FLASH_SetErrorCode+0xc4>)
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d008      	beq.n	8004e12 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004e00:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <FLASH_SetErrorCode+0xc8>)
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	f043 0304 	orr.w	r3, r3, #4
 8004e08:	4a1c      	ldr	r2, [pc, #112]	; (8004e7c <FLASH_SetErrorCode+0xc8>)
 8004e0a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004e0c:	4b1a      	ldr	r3, [pc, #104]	; (8004e78 <FLASH_SetErrorCode+0xc4>)
 8004e0e:	2240      	movs	r2, #64	; 0x40
 8004e10:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004e12:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <FLASH_SetErrorCode+0xc4>)
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d008      	beq.n	8004e30 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004e1e:	4b17      	ldr	r3, [pc, #92]	; (8004e7c <FLASH_SetErrorCode+0xc8>)
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	f043 0302 	orr.w	r3, r3, #2
 8004e26:	4a15      	ldr	r2, [pc, #84]	; (8004e7c <FLASH_SetErrorCode+0xc8>)
 8004e28:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004e2a:	4b13      	ldr	r3, [pc, #76]	; (8004e78 <FLASH_SetErrorCode+0xc4>)
 8004e2c:	2280      	movs	r2, #128	; 0x80
 8004e2e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004e30:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <FLASH_SetErrorCode+0xc4>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d009      	beq.n	8004e50 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <FLASH_SetErrorCode+0xc8>)
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	f043 0301 	orr.w	r3, r3, #1
 8004e44:	4a0d      	ldr	r2, [pc, #52]	; (8004e7c <FLASH_SetErrorCode+0xc8>)
 8004e46:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004e48:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <FLASH_SetErrorCode+0xc4>)
 8004e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e4e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004e50:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <FLASH_SetErrorCode+0xc4>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004e5c:	4b07      	ldr	r3, [pc, #28]	; (8004e7c <FLASH_SetErrorCode+0xc8>)
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	f043 0320 	orr.w	r3, r3, #32
 8004e64:	4a05      	ldr	r2, [pc, #20]	; (8004e7c <FLASH_SetErrorCode+0xc8>)
 8004e66:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004e68:	4b03      	ldr	r3, [pc, #12]	; (8004e78 <FLASH_SetErrorCode+0xc4>)
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	60da      	str	r2, [r3, #12]
  }
}
 8004e6e:	bf00      	nop
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	40023c00 	.word	0x40023c00
 8004e7c:	200007b4 	.word	0x200007b4

08004e80 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004e92:	4b31      	ldr	r3, [pc, #196]	; (8004f58 <HAL_FLASHEx_Erase+0xd8>)
 8004e94:	7e1b      	ldrb	r3, [r3, #24]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_FLASHEx_Erase+0x1e>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e058      	b.n	8004f50 <HAL_FLASHEx_Erase+0xd0>
 8004e9e:	4b2e      	ldr	r3, [pc, #184]	; (8004f58 <HAL_FLASHEx_Erase+0xd8>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ea4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ea8:	f7ff feaa 	bl	8004c00 <FLASH_WaitForLastOperation>
 8004eac:	4603      	mov	r3, r0
 8004eae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d148      	bne.n	8004f48 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ebc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d115      	bne.n	8004ef2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f000 f844 	bl	8004f60 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ed8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004edc:	f7ff fe90 	bl	8004c00 <FLASH_WaitForLastOperation>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004ee4:	4b1d      	ldr	r3, [pc, #116]	; (8004f5c <HAL_FLASHEx_Erase+0xdc>)
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	4a1c      	ldr	r2, [pc, #112]	; (8004f5c <HAL_FLASHEx_Erase+0xdc>)
 8004eea:	f023 0304 	bic.w	r3, r3, #4
 8004eee:	6113      	str	r3, [r2, #16]
 8004ef0:	e028      	b.n	8004f44 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	60bb      	str	r3, [r7, #8]
 8004ef8:	e01c      	b.n	8004f34 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	4619      	mov	r1, r3
 8004f02:	68b8      	ldr	r0, [r7, #8]
 8004f04:	f000 f850 	bl	8004fa8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f0c:	f7ff fe78 	bl	8004c00 <FLASH_WaitForLastOperation>
 8004f10:	4603      	mov	r3, r0
 8004f12:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004f14:	4b11      	ldr	r3, [pc, #68]	; (8004f5c <HAL_FLASHEx_Erase+0xdc>)
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	4a10      	ldr	r2, [pc, #64]	; (8004f5c <HAL_FLASHEx_Erase+0xdc>)
 8004f1a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004f1e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	601a      	str	r2, [r3, #0]
          break;
 8004f2c:	e00a      	b.n	8004f44 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	3301      	adds	r3, #1
 8004f32:	60bb      	str	r3, [r7, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d3da      	bcc.n	8004efa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004f44:	f000 f878 	bl	8005038 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004f48:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <HAL_FLASHEx_Erase+0xd8>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	761a      	strb	r2, [r3, #24]

  return status;
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	200007b4 	.word	0x200007b4
 8004f5c:	40023c00 	.word	0x40023c00

08004f60 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	4603      	mov	r3, r0
 8004f68:	6039      	str	r1, [r7, #0]
 8004f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004f6c:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <FLASH_MassErase+0x44>)
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	4a0c      	ldr	r2, [pc, #48]	; (8004fa4 <FLASH_MassErase+0x44>)
 8004f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004f78:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <FLASH_MassErase+0x44>)
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	4a09      	ldr	r2, [pc, #36]	; (8004fa4 <FLASH_MassErase+0x44>)
 8004f7e:	f043 0304 	orr.w	r3, r3, #4
 8004f82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004f84:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <FLASH_MassErase+0x44>)
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	021b      	lsls	r3, r3, #8
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	4a05      	ldr	r2, [pc, #20]	; (8004fa4 <FLASH_MassErase+0x44>)
 8004f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f94:	6113      	str	r3, [r2, #16]
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	40023c00 	.word	0x40023c00

08004fa8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d102      	bne.n	8004fc4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	e010      	b.n	8004fe6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d103      	bne.n	8004fd2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	e009      	b.n	8004fe6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004fd2:	78fb      	ldrb	r3, [r7, #3]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d103      	bne.n	8004fe0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	e002      	b.n	8004fe6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004fe0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004fe4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004fe6:	4b13      	ldr	r3, [pc, #76]	; (8005034 <FLASH_Erase_Sector+0x8c>)
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	4a12      	ldr	r2, [pc, #72]	; (8005034 <FLASH_Erase_Sector+0x8c>)
 8004fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004ff2:	4b10      	ldr	r3, [pc, #64]	; (8005034 <FLASH_Erase_Sector+0x8c>)
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	490f      	ldr	r1, [pc, #60]	; (8005034 <FLASH_Erase_Sector+0x8c>)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004ffe:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <FLASH_Erase_Sector+0x8c>)
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	4a0c      	ldr	r2, [pc, #48]	; (8005034 <FLASH_Erase_Sector+0x8c>)
 8005004:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005008:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800500a:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <FLASH_Erase_Sector+0x8c>)
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	4313      	orrs	r3, r2
 8005014:	4a07      	ldr	r2, [pc, #28]	; (8005034 <FLASH_Erase_Sector+0x8c>)
 8005016:	f043 0302 	orr.w	r3, r3, #2
 800501a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800501c:	4b05      	ldr	r3, [pc, #20]	; (8005034 <FLASH_Erase_Sector+0x8c>)
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	4a04      	ldr	r2, [pc, #16]	; (8005034 <FLASH_Erase_Sector+0x8c>)
 8005022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005026:	6113      	str	r3, [r2, #16]
}
 8005028:	bf00      	nop
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	40023c00 	.word	0x40023c00

08005038 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800503c:	4b20      	ldr	r3, [pc, #128]	; (80050c0 <FLASH_FlushCaches+0x88>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005044:	2b00      	cmp	r3, #0
 8005046:	d017      	beq.n	8005078 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005048:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <FLASH_FlushCaches+0x88>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1c      	ldr	r2, [pc, #112]	; (80050c0 <FLASH_FlushCaches+0x88>)
 800504e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005052:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005054:	4b1a      	ldr	r3, [pc, #104]	; (80050c0 <FLASH_FlushCaches+0x88>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a19      	ldr	r2, [pc, #100]	; (80050c0 <FLASH_FlushCaches+0x88>)
 800505a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	4b17      	ldr	r3, [pc, #92]	; (80050c0 <FLASH_FlushCaches+0x88>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a16      	ldr	r2, [pc, #88]	; (80050c0 <FLASH_FlushCaches+0x88>)
 8005066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800506a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800506c:	4b14      	ldr	r3, [pc, #80]	; (80050c0 <FLASH_FlushCaches+0x88>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a13      	ldr	r2, [pc, #76]	; (80050c0 <FLASH_FlushCaches+0x88>)
 8005072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005076:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005078:	4b11      	ldr	r3, [pc, #68]	; (80050c0 <FLASH_FlushCaches+0x88>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005080:	2b00      	cmp	r3, #0
 8005082:	d017      	beq.n	80050b4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005084:	4b0e      	ldr	r3, [pc, #56]	; (80050c0 <FLASH_FlushCaches+0x88>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a0d      	ldr	r2, [pc, #52]	; (80050c0 <FLASH_FlushCaches+0x88>)
 800508a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800508e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <FLASH_FlushCaches+0x88>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a0a      	ldr	r2, [pc, #40]	; (80050c0 <FLASH_FlushCaches+0x88>)
 8005096:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <FLASH_FlushCaches+0x88>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a07      	ldr	r2, [pc, #28]	; (80050c0 <FLASH_FlushCaches+0x88>)
 80050a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050a6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80050a8:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <FLASH_FlushCaches+0x88>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a04      	ldr	r2, [pc, #16]	; (80050c0 <FLASH_FlushCaches+0x88>)
 80050ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050b2:	6013      	str	r3, [r2, #0]
  }
}
 80050b4:	bf00      	nop
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40023c00 	.word	0x40023c00

080050c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b089      	sub	sp, #36	; 0x24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	e159      	b.n	8005394 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050e0:	2201      	movs	r2, #1
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4013      	ands	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	f040 8148 	bne.w	800538e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	2b01      	cmp	r3, #1
 8005108:	d005      	beq.n	8005116 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005112:	2b02      	cmp	r3, #2
 8005114:	d130      	bne.n	8005178 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	2203      	movs	r2, #3
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	43db      	mvns	r3, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4013      	ands	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	4313      	orrs	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800514c:	2201      	movs	r2, #1
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	43db      	mvns	r3, r3
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	4013      	ands	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	091b      	lsrs	r3, r3, #4
 8005162:	f003 0201 	and.w	r2, r3, #1
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	4313      	orrs	r3, r2
 8005170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f003 0303 	and.w	r3, r3, #3
 8005180:	2b03      	cmp	r3, #3
 8005182:	d017      	beq.n	80051b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	2203      	movs	r2, #3
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	43db      	mvns	r3, r3
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	4013      	ands	r3, r2
 800519a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f003 0303 	and.w	r3, r3, #3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d123      	bne.n	8005208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	08da      	lsrs	r2, r3, #3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3208      	adds	r2, #8
 80051c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	220f      	movs	r2, #15
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	43db      	mvns	r3, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4013      	ands	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	08da      	lsrs	r2, r3, #3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3208      	adds	r2, #8
 8005202:	69b9      	ldr	r1, [r7, #24]
 8005204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	2203      	movs	r2, #3
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	43db      	mvns	r3, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f003 0203 	and.w	r2, r3, #3
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4313      	orrs	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80a2 	beq.w	800538e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	4b57      	ldr	r3, [pc, #348]	; (80053ac <HAL_GPIO_Init+0x2e8>)
 8005250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005252:	4a56      	ldr	r2, [pc, #344]	; (80053ac <HAL_GPIO_Init+0x2e8>)
 8005254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005258:	6453      	str	r3, [r2, #68]	; 0x44
 800525a:	4b54      	ldr	r3, [pc, #336]	; (80053ac <HAL_GPIO_Init+0x2e8>)
 800525c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005266:	4a52      	ldr	r2, [pc, #328]	; (80053b0 <HAL_GPIO_Init+0x2ec>)
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	089b      	lsrs	r3, r3, #2
 800526c:	3302      	adds	r3, #2
 800526e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	220f      	movs	r2, #15
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	43db      	mvns	r3, r3
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	4013      	ands	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a49      	ldr	r2, [pc, #292]	; (80053b4 <HAL_GPIO_Init+0x2f0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d019      	beq.n	80052c6 <HAL_GPIO_Init+0x202>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a48      	ldr	r2, [pc, #288]	; (80053b8 <HAL_GPIO_Init+0x2f4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <HAL_GPIO_Init+0x1fe>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a47      	ldr	r2, [pc, #284]	; (80053bc <HAL_GPIO_Init+0x2f8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00d      	beq.n	80052be <HAL_GPIO_Init+0x1fa>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a46      	ldr	r2, [pc, #280]	; (80053c0 <HAL_GPIO_Init+0x2fc>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d007      	beq.n	80052ba <HAL_GPIO_Init+0x1f6>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a45      	ldr	r2, [pc, #276]	; (80053c4 <HAL_GPIO_Init+0x300>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d101      	bne.n	80052b6 <HAL_GPIO_Init+0x1f2>
 80052b2:	2304      	movs	r3, #4
 80052b4:	e008      	b.n	80052c8 <HAL_GPIO_Init+0x204>
 80052b6:	2307      	movs	r3, #7
 80052b8:	e006      	b.n	80052c8 <HAL_GPIO_Init+0x204>
 80052ba:	2303      	movs	r3, #3
 80052bc:	e004      	b.n	80052c8 <HAL_GPIO_Init+0x204>
 80052be:	2302      	movs	r3, #2
 80052c0:	e002      	b.n	80052c8 <HAL_GPIO_Init+0x204>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <HAL_GPIO_Init+0x204>
 80052c6:	2300      	movs	r3, #0
 80052c8:	69fa      	ldr	r2, [r7, #28]
 80052ca:	f002 0203 	and.w	r2, r2, #3
 80052ce:	0092      	lsls	r2, r2, #2
 80052d0:	4093      	lsls	r3, r2
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052d8:	4935      	ldr	r1, [pc, #212]	; (80053b0 <HAL_GPIO_Init+0x2ec>)
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	089b      	lsrs	r3, r3, #2
 80052de:	3302      	adds	r3, #2
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052e6:	4b38      	ldr	r3, [pc, #224]	; (80053c8 <HAL_GPIO_Init+0x304>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	43db      	mvns	r3, r3
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	4013      	ands	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800530a:	4a2f      	ldr	r2, [pc, #188]	; (80053c8 <HAL_GPIO_Init+0x304>)
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005310:	4b2d      	ldr	r3, [pc, #180]	; (80053c8 <HAL_GPIO_Init+0x304>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	43db      	mvns	r3, r3
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	4013      	ands	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005334:	4a24      	ldr	r2, [pc, #144]	; (80053c8 <HAL_GPIO_Init+0x304>)
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800533a:	4b23      	ldr	r3, [pc, #140]	; (80053c8 <HAL_GPIO_Init+0x304>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	43db      	mvns	r3, r3
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	4013      	ands	r3, r2
 8005348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800535e:	4a1a      	ldr	r2, [pc, #104]	; (80053c8 <HAL_GPIO_Init+0x304>)
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005364:	4b18      	ldr	r3, [pc, #96]	; (80053c8 <HAL_GPIO_Init+0x304>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	43db      	mvns	r3, r3
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4013      	ands	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005388:	4a0f      	ldr	r2, [pc, #60]	; (80053c8 <HAL_GPIO_Init+0x304>)
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	3301      	adds	r3, #1
 8005392:	61fb      	str	r3, [r7, #28]
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	2b0f      	cmp	r3, #15
 8005398:	f67f aea2 	bls.w	80050e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800539c:	bf00      	nop
 800539e:	bf00      	nop
 80053a0:	3724      	adds	r7, #36	; 0x24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40023800 	.word	0x40023800
 80053b0:	40013800 	.word	0x40013800
 80053b4:	40020000 	.word	0x40020000
 80053b8:	40020400 	.word	0x40020400
 80053bc:	40020800 	.word	0x40020800
 80053c0:	40020c00 	.word	0x40020c00
 80053c4:	40021000 	.word	0x40021000
 80053c8:	40013c00 	.word	0x40013c00

080053cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	887b      	ldrh	r3, [r7, #2]
 80053de:	4013      	ands	r3, r2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80053e4:	2301      	movs	r3, #1
 80053e6:	73fb      	strb	r3, [r7, #15]
 80053e8:	e001      	b.n	80053ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053ea:	2300      	movs	r3, #0
 80053ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	460b      	mov	r3, r1
 8005406:	807b      	strh	r3, [r7, #2]
 8005408:	4613      	mov	r3, r2
 800540a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800540c:	787b      	ldrb	r3, [r7, #1]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005412:	887a      	ldrh	r2, [r7, #2]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005418:	e003      	b.n	8005422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800541a:	887b      	ldrh	r3, [r7, #2]
 800541c:	041a      	lsls	r2, r3, #16
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	619a      	str	r2, [r3, #24]
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
	...

08005430 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e12b      	b.n	800569a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7fe fcb0 	bl	8003dbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2224      	movs	r2, #36	; 0x24
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0201 	bic.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005482:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005492:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005494:	f001 f848 	bl	8006528 <HAL_RCC_GetPCLK1Freq>
 8005498:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	4a81      	ldr	r2, [pc, #516]	; (80056a4 <HAL_I2C_Init+0x274>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d807      	bhi.n	80054b4 <HAL_I2C_Init+0x84>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4a80      	ldr	r2, [pc, #512]	; (80056a8 <HAL_I2C_Init+0x278>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	bf94      	ite	ls
 80054ac:	2301      	movls	r3, #1
 80054ae:	2300      	movhi	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	e006      	b.n	80054c2 <HAL_I2C_Init+0x92>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4a7d      	ldr	r2, [pc, #500]	; (80056ac <HAL_I2C_Init+0x27c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	bf94      	ite	ls
 80054bc:	2301      	movls	r3, #1
 80054be:	2300      	movhi	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e0e7      	b.n	800569a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4a78      	ldr	r2, [pc, #480]	; (80056b0 <HAL_I2C_Init+0x280>)
 80054ce:	fba2 2303 	umull	r2, r3, r2, r3
 80054d2:	0c9b      	lsrs	r3, r3, #18
 80054d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	4a6a      	ldr	r2, [pc, #424]	; (80056a4 <HAL_I2C_Init+0x274>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d802      	bhi.n	8005504 <HAL_I2C_Init+0xd4>
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	3301      	adds	r3, #1
 8005502:	e009      	b.n	8005518 <HAL_I2C_Init+0xe8>
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800550a:	fb02 f303 	mul.w	r3, r2, r3
 800550e:	4a69      	ldr	r2, [pc, #420]	; (80056b4 <HAL_I2C_Init+0x284>)
 8005510:	fba2 2303 	umull	r2, r3, r2, r3
 8005514:	099b      	lsrs	r3, r3, #6
 8005516:	3301      	adds	r3, #1
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6812      	ldr	r2, [r2, #0]
 800551c:	430b      	orrs	r3, r1
 800551e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800552a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	495c      	ldr	r1, [pc, #368]	; (80056a4 <HAL_I2C_Init+0x274>)
 8005534:	428b      	cmp	r3, r1
 8005536:	d819      	bhi.n	800556c <HAL_I2C_Init+0x13c>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	1e59      	subs	r1, r3, #1
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	fbb1 f3f3 	udiv	r3, r1, r3
 8005546:	1c59      	adds	r1, r3, #1
 8005548:	f640 73fc 	movw	r3, #4092	; 0xffc
 800554c:	400b      	ands	r3, r1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <HAL_I2C_Init+0x138>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	1e59      	subs	r1, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005560:	3301      	adds	r3, #1
 8005562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005566:	e051      	b.n	800560c <HAL_I2C_Init+0x1dc>
 8005568:	2304      	movs	r3, #4
 800556a:	e04f      	b.n	800560c <HAL_I2C_Init+0x1dc>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d111      	bne.n	8005598 <HAL_I2C_Init+0x168>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	1e58      	subs	r0, r3, #1
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6859      	ldr	r1, [r3, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	440b      	add	r3, r1
 8005582:	fbb0 f3f3 	udiv	r3, r0, r3
 8005586:	3301      	adds	r3, #1
 8005588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800558c:	2b00      	cmp	r3, #0
 800558e:	bf0c      	ite	eq
 8005590:	2301      	moveq	r3, #1
 8005592:	2300      	movne	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	e012      	b.n	80055be <HAL_I2C_Init+0x18e>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	1e58      	subs	r0, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6859      	ldr	r1, [r3, #4]
 80055a0:	460b      	mov	r3, r1
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	0099      	lsls	r1, r3, #2
 80055a8:	440b      	add	r3, r1
 80055aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ae:	3301      	adds	r3, #1
 80055b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	bf0c      	ite	eq
 80055b8:	2301      	moveq	r3, #1
 80055ba:	2300      	movne	r3, #0
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <HAL_I2C_Init+0x196>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e022      	b.n	800560c <HAL_I2C_Init+0x1dc>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10e      	bne.n	80055ec <HAL_I2C_Init+0x1bc>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1e58      	subs	r0, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6859      	ldr	r1, [r3, #4]
 80055d6:	460b      	mov	r3, r1
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	440b      	add	r3, r1
 80055dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80055e0:	3301      	adds	r3, #1
 80055e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ea:	e00f      	b.n	800560c <HAL_I2C_Init+0x1dc>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	1e58      	subs	r0, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6859      	ldr	r1, [r3, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	440b      	add	r3, r1
 80055fa:	0099      	lsls	r1, r3, #2
 80055fc:	440b      	add	r3, r1
 80055fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005602:	3301      	adds	r3, #1
 8005604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005608:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	6809      	ldr	r1, [r1, #0]
 8005610:	4313      	orrs	r3, r2
 8005612:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69da      	ldr	r2, [r3, #28]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800563a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6911      	ldr	r1, [r2, #16]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	68d2      	ldr	r2, [r2, #12]
 8005646:	4311      	orrs	r1, r2
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6812      	ldr	r2, [r2, #0]
 800564c:	430b      	orrs	r3, r1
 800564e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0201 	orr.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	000186a0 	.word	0x000186a0
 80056a8:	001e847f 	.word	0x001e847f
 80056ac:	003d08ff 	.word	0x003d08ff
 80056b0:	431bde83 	.word	0x431bde83
 80056b4:	10624dd3 	.word	0x10624dd3

080056b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af02      	add	r7, sp, #8
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	607a      	str	r2, [r7, #4]
 80056c2:	461a      	mov	r2, r3
 80056c4:	460b      	mov	r3, r1
 80056c6:	817b      	strh	r3, [r7, #10]
 80056c8:	4613      	mov	r3, r2
 80056ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056cc:	f7fe fe6e 	bl	80043ac <HAL_GetTick>
 80056d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b20      	cmp	r3, #32
 80056dc:	f040 80e0 	bne.w	80058a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	2319      	movs	r3, #25
 80056e6:	2201      	movs	r2, #1
 80056e8:	4970      	ldr	r1, [pc, #448]	; (80058ac <HAL_I2C_Master_Transmit+0x1f4>)
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 f964 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80056f6:	2302      	movs	r3, #2
 80056f8:	e0d3      	b.n	80058a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <HAL_I2C_Master_Transmit+0x50>
 8005704:	2302      	movs	r3, #2
 8005706:	e0cc      	b.n	80058a2 <HAL_I2C_Master_Transmit+0x1ea>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b01      	cmp	r3, #1
 800571c:	d007      	beq.n	800572e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0201 	orr.w	r2, r2, #1
 800572c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800573c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2221      	movs	r2, #33	; 0x21
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2210      	movs	r2, #16
 800574a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	893a      	ldrh	r2, [r7, #8]
 800575e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4a50      	ldr	r2, [pc, #320]	; (80058b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800576e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005770:	8979      	ldrh	r1, [r7, #10]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	6a3a      	ldr	r2, [r7, #32]
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f89c 	bl	80058b4 <I2C_MasterRequestWrite>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e08d      	b.n	80058a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005786:	2300      	movs	r3, #0
 8005788:	613b      	str	r3, [r7, #16]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800579c:	e066      	b.n	800586c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	6a39      	ldr	r1, [r7, #32]
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 f9de 	bl	8005b64 <I2C_WaitOnTXEFlagUntilTimeout>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00d      	beq.n	80057ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d107      	bne.n	80057c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e06b      	b.n	80058a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	781a      	ldrb	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b04      	cmp	r3, #4
 8005806:	d11b      	bne.n	8005840 <HAL_I2C_Master_Transmit+0x188>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580c:	2b00      	cmp	r3, #0
 800580e:	d017      	beq.n	8005840 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	781a      	ldrb	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	6a39      	ldr	r1, [r7, #32]
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f9ce 	bl	8005be6 <I2C_WaitOnBTFFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00d      	beq.n	800586c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	2b04      	cmp	r3, #4
 8005856:	d107      	bne.n	8005868 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005866:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e01a      	b.n	80058a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005870:	2b00      	cmp	r3, #0
 8005872:	d194      	bne.n	800579e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2220      	movs	r2, #32
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800589c:	2300      	movs	r3, #0
 800589e:	e000      	b.n	80058a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80058a0:	2302      	movs	r3, #2
  }
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	00100002 	.word	0x00100002
 80058b0:	ffff0000 	.word	0xffff0000

080058b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af02      	add	r7, sp, #8
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	607a      	str	r2, [r7, #4]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	460b      	mov	r3, r1
 80058c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d006      	beq.n	80058de <I2C_MasterRequestWrite+0x2a>
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d003      	beq.n	80058de <I2C_MasterRequestWrite+0x2a>
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058dc:	d108      	bne.n	80058f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	e00b      	b.n	8005908 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f4:	2b12      	cmp	r3, #18
 80058f6:	d107      	bne.n	8005908 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005906:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 f84f 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00d      	beq.n	800593c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800592e:	d103      	bne.n	8005938 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005936:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e035      	b.n	80059a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005944:	d108      	bne.n	8005958 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005946:	897b      	ldrh	r3, [r7, #10]
 8005948:	b2db      	uxtb	r3, r3
 800594a:	461a      	mov	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005954:	611a      	str	r2, [r3, #16]
 8005956:	e01b      	b.n	8005990 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005958:	897b      	ldrh	r3, [r7, #10]
 800595a:	11db      	asrs	r3, r3, #7
 800595c:	b2db      	uxtb	r3, r3
 800595e:	f003 0306 	and.w	r3, r3, #6
 8005962:	b2db      	uxtb	r3, r3
 8005964:	f063 030f 	orn	r3, r3, #15
 8005968:	b2da      	uxtb	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	490e      	ldr	r1, [pc, #56]	; (80059b0 <I2C_MasterRequestWrite+0xfc>)
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 f875 	bl	8005a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e010      	b.n	80059a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005986:	897b      	ldrh	r3, [r7, #10]
 8005988:	b2da      	uxtb	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	4907      	ldr	r1, [pc, #28]	; (80059b4 <I2C_MasterRequestWrite+0x100>)
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f865 	bl	8005a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e000      	b.n	80059a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	00010008 	.word	0x00010008
 80059b4:	00010002 	.word	0x00010002

080059b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059c8:	e025      	b.n	8005a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d0:	d021      	beq.n	8005a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d2:	f7fe fceb 	bl	80043ac <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d302      	bcc.n	80059e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d116      	bne.n	8005a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	f043 0220 	orr.w	r2, r3, #32
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e023      	b.n	8005a5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	0c1b      	lsrs	r3, r3, #16
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d10d      	bne.n	8005a3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	43da      	mvns	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	bf0c      	ite	eq
 8005a32:	2301      	moveq	r3, #1
 8005a34:	2300      	movne	r3, #0
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	461a      	mov	r2, r3
 8005a3a:	e00c      	b.n	8005a56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	43da      	mvns	r2, r3
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4013      	ands	r3, r2
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	bf0c      	ite	eq
 8005a4e:	2301      	moveq	r3, #1
 8005a50:	2300      	movne	r3, #0
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	461a      	mov	r2, r3
 8005a56:	79fb      	ldrb	r3, [r7, #7]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d0b6      	beq.n	80059ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b084      	sub	sp, #16
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	607a      	str	r2, [r7, #4]
 8005a72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a74:	e051      	b.n	8005b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a84:	d123      	bne.n	8005ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	f043 0204 	orr.w	r2, r3, #4
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e046      	b.n	8005b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad4:	d021      	beq.n	8005b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad6:	f7fe fc69 	bl	80043ac <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d302      	bcc.n	8005aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d116      	bne.n	8005b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	f043 0220 	orr.w	r2, r3, #32
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e020      	b.n	8005b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	0c1b      	lsrs	r3, r3, #16
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d10c      	bne.n	8005b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	43da      	mvns	r2, r3
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	bf14      	ite	ne
 8005b36:	2301      	movne	r3, #1
 8005b38:	2300      	moveq	r3, #0
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	e00b      	b.n	8005b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	43da      	mvns	r2, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	bf14      	ite	ne
 8005b50:	2301      	movne	r3, #1
 8005b52:	2300      	moveq	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d18d      	bne.n	8005a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b70:	e02d      	b.n	8005bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 f878 	bl	8005c68 <I2C_IsAcknowledgeFailed>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e02d      	b.n	8005bde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d021      	beq.n	8005bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b8a:	f7fe fc0f 	bl	80043ac <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d302      	bcc.n	8005ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d116      	bne.n	8005bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	f043 0220 	orr.w	r2, r3, #32
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e007      	b.n	8005bde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd8:	2b80      	cmp	r3, #128	; 0x80
 8005bda:	d1ca      	bne.n	8005b72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	60f8      	str	r0, [r7, #12]
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bf2:	e02d      	b.n	8005c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f837 	bl	8005c68 <I2C_IsAcknowledgeFailed>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e02d      	b.n	8005c60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0a:	d021      	beq.n	8005c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c0c:	f7fe fbce 	bl	80043ac <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d302      	bcc.n	8005c22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d116      	bne.n	8005c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	f043 0220 	orr.w	r2, r3, #32
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e007      	b.n	8005c60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	f003 0304 	and.w	r3, r3, #4
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d1ca      	bne.n	8005bf4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c7e:	d11b      	bne.n	8005cb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2220      	movs	r2, #32
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca4:	f043 0204 	orr.w	r2, r3, #4
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e000      	b.n	8005cba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
	...

08005cc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e267      	b.n	80061aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d075      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ce6:	4b88      	ldr	r3, [pc, #544]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 030c 	and.w	r3, r3, #12
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d00c      	beq.n	8005d0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cf2:	4b85      	ldr	r3, [pc, #532]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cfa:	2b08      	cmp	r3, #8
 8005cfc:	d112      	bne.n	8005d24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cfe:	4b82      	ldr	r3, [pc, #520]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d0a:	d10b      	bne.n	8005d24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d0c:	4b7e      	ldr	r3, [pc, #504]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d05b      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x108>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d157      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e242      	b.n	80061aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2c:	d106      	bne.n	8005d3c <HAL_RCC_OscConfig+0x74>
 8005d2e:	4b76      	ldr	r3, [pc, #472]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a75      	ldr	r2, [pc, #468]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	e01d      	b.n	8005d78 <HAL_RCC_OscConfig+0xb0>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d44:	d10c      	bne.n	8005d60 <HAL_RCC_OscConfig+0x98>
 8005d46:	4b70      	ldr	r3, [pc, #448]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a6f      	ldr	r2, [pc, #444]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	4b6d      	ldr	r3, [pc, #436]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a6c      	ldr	r2, [pc, #432]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	e00b      	b.n	8005d78 <HAL_RCC_OscConfig+0xb0>
 8005d60:	4b69      	ldr	r3, [pc, #420]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a68      	ldr	r2, [pc, #416]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d6a:	6013      	str	r3, [r2, #0]
 8005d6c:	4b66      	ldr	r3, [pc, #408]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a65      	ldr	r2, [pc, #404]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d013      	beq.n	8005da8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d80:	f7fe fb14 	bl	80043ac <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d88:	f7fe fb10 	bl	80043ac <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b64      	cmp	r3, #100	; 0x64
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e207      	b.n	80061aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d9a:	4b5b      	ldr	r3, [pc, #364]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0f0      	beq.n	8005d88 <HAL_RCC_OscConfig+0xc0>
 8005da6:	e014      	b.n	8005dd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da8:	f7fe fb00 	bl	80043ac <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005db0:	f7fe fafc 	bl	80043ac <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b64      	cmp	r3, #100	; 0x64
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e1f3      	b.n	80061aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dc2:	4b51      	ldr	r3, [pc, #324]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1f0      	bne.n	8005db0 <HAL_RCC_OscConfig+0xe8>
 8005dce:	e000      	b.n	8005dd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d063      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dde:	4b4a      	ldr	r3, [pc, #296]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 030c 	and.w	r3, r3, #12
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00b      	beq.n	8005e02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dea:	4b47      	ldr	r3, [pc, #284]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d11c      	bne.n	8005e30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005df6:	4b44      	ldr	r3, [pc, #272]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d116      	bne.n	8005e30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e02:	4b41      	ldr	r3, [pc, #260]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <HAL_RCC_OscConfig+0x152>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d001      	beq.n	8005e1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e1c7      	b.n	80061aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e1a:	4b3b      	ldr	r3, [pc, #236]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	4937      	ldr	r1, [pc, #220]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e2e:	e03a      	b.n	8005ea6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d020      	beq.n	8005e7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e38:	4b34      	ldr	r3, [pc, #208]	; (8005f0c <HAL_RCC_OscConfig+0x244>)
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e3e:	f7fe fab5 	bl	80043ac <HAL_GetTick>
 8005e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e44:	e008      	b.n	8005e58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e46:	f7fe fab1 	bl	80043ac <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d901      	bls.n	8005e58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e1a8      	b.n	80061aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e58:	4b2b      	ldr	r3, [pc, #172]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d0f0      	beq.n	8005e46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e64:	4b28      	ldr	r3, [pc, #160]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	4925      	ldr	r1, [pc, #148]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	600b      	str	r3, [r1, #0]
 8005e78:	e015      	b.n	8005ea6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e7a:	4b24      	ldr	r3, [pc, #144]	; (8005f0c <HAL_RCC_OscConfig+0x244>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e80:	f7fe fa94 	bl	80043ac <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e88:	f7fe fa90 	bl	80043ac <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e187      	b.n	80061aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e9a:	4b1b      	ldr	r3, [pc, #108]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f0      	bne.n	8005e88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d036      	beq.n	8005f20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d016      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eba:	4b15      	ldr	r3, [pc, #84]	; (8005f10 <HAL_RCC_OscConfig+0x248>)
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec0:	f7fe fa74 	bl	80043ac <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ec8:	f7fe fa70 	bl	80043ac <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e167      	b.n	80061aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eda:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <HAL_RCC_OscConfig+0x240>)
 8005edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0f0      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x200>
 8005ee6:	e01b      	b.n	8005f20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ee8:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <HAL_RCC_OscConfig+0x248>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eee:	f7fe fa5d 	bl	80043ac <HAL_GetTick>
 8005ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ef4:	e00e      	b.n	8005f14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ef6:	f7fe fa59 	bl	80043ac <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d907      	bls.n	8005f14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e150      	b.n	80061aa <HAL_RCC_OscConfig+0x4e2>
 8005f08:	40023800 	.word	0x40023800
 8005f0c:	42470000 	.word	0x42470000
 8005f10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f14:	4b88      	ldr	r3, [pc, #544]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8005f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1ea      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0304 	and.w	r3, r3, #4
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 8097 	beq.w	800605c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f32:	4b81      	ldr	r3, [pc, #516]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10f      	bne.n	8005f5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60bb      	str	r3, [r7, #8]
 8005f42:	4b7d      	ldr	r3, [pc, #500]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	4a7c      	ldr	r2, [pc, #496]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8005f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f4e:	4b7a      	ldr	r3, [pc, #488]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f56:	60bb      	str	r3, [r7, #8]
 8005f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f5e:	4b77      	ldr	r3, [pc, #476]	; (800613c <HAL_RCC_OscConfig+0x474>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d118      	bne.n	8005f9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f6a:	4b74      	ldr	r3, [pc, #464]	; (800613c <HAL_RCC_OscConfig+0x474>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a73      	ldr	r2, [pc, #460]	; (800613c <HAL_RCC_OscConfig+0x474>)
 8005f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f76:	f7fe fa19 	bl	80043ac <HAL_GetTick>
 8005f7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f7c:	e008      	b.n	8005f90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f7e:	f7fe fa15 	bl	80043ac <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e10c      	b.n	80061aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f90:	4b6a      	ldr	r3, [pc, #424]	; (800613c <HAL_RCC_OscConfig+0x474>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0f0      	beq.n	8005f7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d106      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x2ea>
 8005fa4:	4b64      	ldr	r3, [pc, #400]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8005fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa8:	4a63      	ldr	r2, [pc, #396]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8005faa:	f043 0301 	orr.w	r3, r3, #1
 8005fae:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb0:	e01c      	b.n	8005fec <HAL_RCC_OscConfig+0x324>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	2b05      	cmp	r3, #5
 8005fb8:	d10c      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x30c>
 8005fba:	4b5f      	ldr	r3, [pc, #380]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8005fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fbe:	4a5e      	ldr	r2, [pc, #376]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8005fc0:	f043 0304 	orr.w	r3, r3, #4
 8005fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fc6:	4b5c      	ldr	r3, [pc, #368]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8005fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fca:	4a5b      	ldr	r2, [pc, #364]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8005fcc:	f043 0301 	orr.w	r3, r3, #1
 8005fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8005fd2:	e00b      	b.n	8005fec <HAL_RCC_OscConfig+0x324>
 8005fd4:	4b58      	ldr	r3, [pc, #352]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8005fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd8:	4a57      	ldr	r2, [pc, #348]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8005fda:	f023 0301 	bic.w	r3, r3, #1
 8005fde:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe0:	4b55      	ldr	r3, [pc, #340]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8005fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe4:	4a54      	ldr	r2, [pc, #336]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8005fe6:	f023 0304 	bic.w	r3, r3, #4
 8005fea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d015      	beq.n	8006020 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff4:	f7fe f9da 	bl	80043ac <HAL_GetTick>
 8005ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ffa:	e00a      	b.n	8006012 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ffc:	f7fe f9d6 	bl	80043ac <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	f241 3288 	movw	r2, #5000	; 0x1388
 800600a:	4293      	cmp	r3, r2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e0cb      	b.n	80061aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006012:	4b49      	ldr	r3, [pc, #292]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8006014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0ee      	beq.n	8005ffc <HAL_RCC_OscConfig+0x334>
 800601e:	e014      	b.n	800604a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006020:	f7fe f9c4 	bl	80043ac <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006026:	e00a      	b.n	800603e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006028:	f7fe f9c0 	bl	80043ac <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	f241 3288 	movw	r2, #5000	; 0x1388
 8006036:	4293      	cmp	r3, r2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e0b5      	b.n	80061aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800603e:	4b3e      	ldr	r3, [pc, #248]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8006040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1ee      	bne.n	8006028 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800604a:	7dfb      	ldrb	r3, [r7, #23]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d105      	bne.n	800605c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006050:	4b39      	ldr	r3, [pc, #228]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8006052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006054:	4a38      	ldr	r2, [pc, #224]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8006056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800605a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 80a1 	beq.w	80061a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006066:	4b34      	ldr	r3, [pc, #208]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 030c 	and.w	r3, r3, #12
 800606e:	2b08      	cmp	r3, #8
 8006070:	d05c      	beq.n	800612c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	2b02      	cmp	r3, #2
 8006078:	d141      	bne.n	80060fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800607a:	4b31      	ldr	r3, [pc, #196]	; (8006140 <HAL_RCC_OscConfig+0x478>)
 800607c:	2200      	movs	r2, #0
 800607e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006080:	f7fe f994 	bl	80043ac <HAL_GetTick>
 8006084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006086:	e008      	b.n	800609a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006088:	f7fe f990 	bl	80043ac <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d901      	bls.n	800609a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e087      	b.n	80061aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800609a:	4b27      	ldr	r3, [pc, #156]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1f0      	bne.n	8006088 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	69da      	ldr	r2, [r3, #28]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	019b      	lsls	r3, r3, #6
 80060b6:	431a      	orrs	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060bc:	085b      	lsrs	r3, r3, #1
 80060be:	3b01      	subs	r3, #1
 80060c0:	041b      	lsls	r3, r3, #16
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c8:	061b      	lsls	r3, r3, #24
 80060ca:	491b      	ldr	r1, [pc, #108]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060d0:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <HAL_RCC_OscConfig+0x478>)
 80060d2:	2201      	movs	r2, #1
 80060d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d6:	f7fe f969 	bl	80043ac <HAL_GetTick>
 80060da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060dc:	e008      	b.n	80060f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060de:	f7fe f965 	bl	80043ac <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d901      	bls.n	80060f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e05c      	b.n	80061aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060f0:	4b11      	ldr	r3, [pc, #68]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0f0      	beq.n	80060de <HAL_RCC_OscConfig+0x416>
 80060fc:	e054      	b.n	80061a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060fe:	4b10      	ldr	r3, [pc, #64]	; (8006140 <HAL_RCC_OscConfig+0x478>)
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006104:	f7fe f952 	bl	80043ac <HAL_GetTick>
 8006108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800610a:	e008      	b.n	800611e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800610c:	f7fe f94e 	bl	80043ac <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e045      	b.n	80061aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800611e:	4b06      	ldr	r3, [pc, #24]	; (8006138 <HAL_RCC_OscConfig+0x470>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1f0      	bne.n	800610c <HAL_RCC_OscConfig+0x444>
 800612a:	e03d      	b.n	80061a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d107      	bne.n	8006144 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e038      	b.n	80061aa <HAL_RCC_OscConfig+0x4e2>
 8006138:	40023800 	.word	0x40023800
 800613c:	40007000 	.word	0x40007000
 8006140:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006144:	4b1b      	ldr	r3, [pc, #108]	; (80061b4 <HAL_RCC_OscConfig+0x4ec>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d028      	beq.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800615c:	429a      	cmp	r2, r3
 800615e:	d121      	bne.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800616a:	429a      	cmp	r2, r3
 800616c:	d11a      	bne.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006174:	4013      	ands	r3, r2
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800617a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800617c:	4293      	cmp	r3, r2
 800617e:	d111      	bne.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	085b      	lsrs	r3, r3, #1
 800618c:	3b01      	subs	r3, #1
 800618e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006190:	429a      	cmp	r2, r3
 8006192:	d107      	bne.n	80061a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d001      	beq.n	80061a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e000      	b.n	80061aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	40023800 	.word	0x40023800

080061b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e0cc      	b.n	8006366 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061cc:	4b68      	ldr	r3, [pc, #416]	; (8006370 <HAL_RCC_ClockConfig+0x1b8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d90c      	bls.n	80061f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061da:	4b65      	ldr	r3, [pc, #404]	; (8006370 <HAL_RCC_ClockConfig+0x1b8>)
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061e2:	4b63      	ldr	r3, [pc, #396]	; (8006370 <HAL_RCC_ClockConfig+0x1b8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d001      	beq.n	80061f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e0b8      	b.n	8006366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d020      	beq.n	8006242 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800620c:	4b59      	ldr	r3, [pc, #356]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	4a58      	ldr	r2, [pc, #352]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 8006212:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006216:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0308 	and.w	r3, r3, #8
 8006220:	2b00      	cmp	r3, #0
 8006222:	d005      	beq.n	8006230 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006224:	4b53      	ldr	r3, [pc, #332]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	4a52      	ldr	r2, [pc, #328]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 800622a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800622e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006230:	4b50      	ldr	r3, [pc, #320]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	494d      	ldr	r1, [pc, #308]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 800623e:	4313      	orrs	r3, r2
 8006240:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d044      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d107      	bne.n	8006266 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006256:	4b47      	ldr	r3, [pc, #284]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d119      	bne.n	8006296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e07f      	b.n	8006366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2b02      	cmp	r3, #2
 800626c:	d003      	beq.n	8006276 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006272:	2b03      	cmp	r3, #3
 8006274:	d107      	bne.n	8006286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006276:	4b3f      	ldr	r3, [pc, #252]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d109      	bne.n	8006296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e06f      	b.n	8006366 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006286:	4b3b      	ldr	r3, [pc, #236]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e067      	b.n	8006366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006296:	4b37      	ldr	r3, [pc, #220]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f023 0203 	bic.w	r2, r3, #3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	4934      	ldr	r1, [pc, #208]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062a8:	f7fe f880 	bl	80043ac <HAL_GetTick>
 80062ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ae:	e00a      	b.n	80062c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062b0:	f7fe f87c 	bl	80043ac <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80062be:	4293      	cmp	r3, r2
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e04f      	b.n	8006366 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062c6:	4b2b      	ldr	r3, [pc, #172]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 020c 	and.w	r2, r3, #12
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d1eb      	bne.n	80062b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062d8:	4b25      	ldr	r3, [pc, #148]	; (8006370 <HAL_RCC_ClockConfig+0x1b8>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0307 	and.w	r3, r3, #7
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d20c      	bcs.n	8006300 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062e6:	4b22      	ldr	r3, [pc, #136]	; (8006370 <HAL_RCC_ClockConfig+0x1b8>)
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ee:	4b20      	ldr	r3, [pc, #128]	; (8006370 <HAL_RCC_ClockConfig+0x1b8>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d001      	beq.n	8006300 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e032      	b.n	8006366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d008      	beq.n	800631e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800630c:	4b19      	ldr	r3, [pc, #100]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	4916      	ldr	r1, [pc, #88]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 800631a:	4313      	orrs	r3, r2
 800631c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0308 	and.w	r3, r3, #8
 8006326:	2b00      	cmp	r3, #0
 8006328:	d009      	beq.n	800633e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800632a:	4b12      	ldr	r3, [pc, #72]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	490e      	ldr	r1, [pc, #56]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 800633a:	4313      	orrs	r3, r2
 800633c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800633e:	f000 f821 	bl	8006384 <HAL_RCC_GetSysClockFreq>
 8006342:	4602      	mov	r2, r0
 8006344:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	091b      	lsrs	r3, r3, #4
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	490a      	ldr	r1, [pc, #40]	; (8006378 <HAL_RCC_ClockConfig+0x1c0>)
 8006350:	5ccb      	ldrb	r3, [r1, r3]
 8006352:	fa22 f303 	lsr.w	r3, r2, r3
 8006356:	4a09      	ldr	r2, [pc, #36]	; (800637c <HAL_RCC_ClockConfig+0x1c4>)
 8006358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800635a:	4b09      	ldr	r3, [pc, #36]	; (8006380 <HAL_RCC_ClockConfig+0x1c8>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4618      	mov	r0, r3
 8006360:	f7fd ffe0 	bl	8004324 <HAL_InitTick>

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	40023c00 	.word	0x40023c00
 8006374:	40023800 	.word	0x40023800
 8006378:	080089a0 	.word	0x080089a0
 800637c:	20000010 	.word	0x20000010
 8006380:	20000014 	.word	0x20000014

08006384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006388:	b090      	sub	sp, #64	; 0x40
 800638a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800638c:	2300      	movs	r3, #0
 800638e:	637b      	str	r3, [r7, #52]	; 0x34
 8006390:	2300      	movs	r3, #0
 8006392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006394:	2300      	movs	r3, #0
 8006396:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800639c:	4b59      	ldr	r3, [pc, #356]	; (8006504 <HAL_RCC_GetSysClockFreq+0x180>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f003 030c 	and.w	r3, r3, #12
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d00d      	beq.n	80063c4 <HAL_RCC_GetSysClockFreq+0x40>
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	f200 80a1 	bhi.w	80064f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <HAL_RCC_GetSysClockFreq+0x34>
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d003      	beq.n	80063be <HAL_RCC_GetSysClockFreq+0x3a>
 80063b6:	e09b      	b.n	80064f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063b8:	4b53      	ldr	r3, [pc, #332]	; (8006508 <HAL_RCC_GetSysClockFreq+0x184>)
 80063ba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80063bc:	e09b      	b.n	80064f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063be:	4b53      	ldr	r3, [pc, #332]	; (800650c <HAL_RCC_GetSysClockFreq+0x188>)
 80063c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80063c2:	e098      	b.n	80064f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063c4:	4b4f      	ldr	r3, [pc, #316]	; (8006504 <HAL_RCC_GetSysClockFreq+0x180>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063ce:	4b4d      	ldr	r3, [pc, #308]	; (8006504 <HAL_RCC_GetSysClockFreq+0x180>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d028      	beq.n	800642c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063da:	4b4a      	ldr	r3, [pc, #296]	; (8006504 <HAL_RCC_GetSysClockFreq+0x180>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	099b      	lsrs	r3, r3, #6
 80063e0:	2200      	movs	r2, #0
 80063e2:	623b      	str	r3, [r7, #32]
 80063e4:	627a      	str	r2, [r7, #36]	; 0x24
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80063ec:	2100      	movs	r1, #0
 80063ee:	4b47      	ldr	r3, [pc, #284]	; (800650c <HAL_RCC_GetSysClockFreq+0x188>)
 80063f0:	fb03 f201 	mul.w	r2, r3, r1
 80063f4:	2300      	movs	r3, #0
 80063f6:	fb00 f303 	mul.w	r3, r0, r3
 80063fa:	4413      	add	r3, r2
 80063fc:	4a43      	ldr	r2, [pc, #268]	; (800650c <HAL_RCC_GetSysClockFreq+0x188>)
 80063fe:	fba0 1202 	umull	r1, r2, r0, r2
 8006402:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006404:	460a      	mov	r2, r1
 8006406:	62ba      	str	r2, [r7, #40]	; 0x28
 8006408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800640a:	4413      	add	r3, r2
 800640c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800640e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006410:	2200      	movs	r2, #0
 8006412:	61bb      	str	r3, [r7, #24]
 8006414:	61fa      	str	r2, [r7, #28]
 8006416:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800641a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800641e:	f7fa fb15 	bl	8000a4c <__aeabi_uldivmod>
 8006422:	4602      	mov	r2, r0
 8006424:	460b      	mov	r3, r1
 8006426:	4613      	mov	r3, r2
 8006428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800642a:	e053      	b.n	80064d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800642c:	4b35      	ldr	r3, [pc, #212]	; (8006504 <HAL_RCC_GetSysClockFreq+0x180>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	099b      	lsrs	r3, r3, #6
 8006432:	2200      	movs	r2, #0
 8006434:	613b      	str	r3, [r7, #16]
 8006436:	617a      	str	r2, [r7, #20]
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800643e:	f04f 0b00 	mov.w	fp, #0
 8006442:	4652      	mov	r2, sl
 8006444:	465b      	mov	r3, fp
 8006446:	f04f 0000 	mov.w	r0, #0
 800644a:	f04f 0100 	mov.w	r1, #0
 800644e:	0159      	lsls	r1, r3, #5
 8006450:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006454:	0150      	lsls	r0, r2, #5
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	ebb2 080a 	subs.w	r8, r2, sl
 800645e:	eb63 090b 	sbc.w	r9, r3, fp
 8006462:	f04f 0200 	mov.w	r2, #0
 8006466:	f04f 0300 	mov.w	r3, #0
 800646a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800646e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006472:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006476:	ebb2 0408 	subs.w	r4, r2, r8
 800647a:	eb63 0509 	sbc.w	r5, r3, r9
 800647e:	f04f 0200 	mov.w	r2, #0
 8006482:	f04f 0300 	mov.w	r3, #0
 8006486:	00eb      	lsls	r3, r5, #3
 8006488:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800648c:	00e2      	lsls	r2, r4, #3
 800648e:	4614      	mov	r4, r2
 8006490:	461d      	mov	r5, r3
 8006492:	eb14 030a 	adds.w	r3, r4, sl
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	eb45 030b 	adc.w	r3, r5, fp
 800649c:	607b      	str	r3, [r7, #4]
 800649e:	f04f 0200 	mov.w	r2, #0
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064aa:	4629      	mov	r1, r5
 80064ac:	028b      	lsls	r3, r1, #10
 80064ae:	4621      	mov	r1, r4
 80064b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064b4:	4621      	mov	r1, r4
 80064b6:	028a      	lsls	r2, r1, #10
 80064b8:	4610      	mov	r0, r2
 80064ba:	4619      	mov	r1, r3
 80064bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064be:	2200      	movs	r2, #0
 80064c0:	60bb      	str	r3, [r7, #8]
 80064c2:	60fa      	str	r2, [r7, #12]
 80064c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064c8:	f7fa fac0 	bl	8000a4c <__aeabi_uldivmod>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4613      	mov	r3, r2
 80064d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064d4:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <HAL_RCC_GetSysClockFreq+0x180>)
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	0c1b      	lsrs	r3, r3, #16
 80064da:	f003 0303 	and.w	r3, r3, #3
 80064de:	3301      	adds	r3, #1
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80064e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80064ee:	e002      	b.n	80064f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064f0:	4b05      	ldr	r3, [pc, #20]	; (8006508 <HAL_RCC_GetSysClockFreq+0x184>)
 80064f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80064f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3740      	adds	r7, #64	; 0x40
 80064fc:	46bd      	mov	sp, r7
 80064fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006502:	bf00      	nop
 8006504:	40023800 	.word	0x40023800
 8006508:	00f42400 	.word	0x00f42400
 800650c:	017d7840 	.word	0x017d7840

08006510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006514:	4b03      	ldr	r3, [pc, #12]	; (8006524 <HAL_RCC_GetHCLKFreq+0x14>)
 8006516:	681b      	ldr	r3, [r3, #0]
}
 8006518:	4618      	mov	r0, r3
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	20000010 	.word	0x20000010

08006528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800652c:	f7ff fff0 	bl	8006510 <HAL_RCC_GetHCLKFreq>
 8006530:	4602      	mov	r2, r0
 8006532:	4b05      	ldr	r3, [pc, #20]	; (8006548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	0a9b      	lsrs	r3, r3, #10
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	4903      	ldr	r1, [pc, #12]	; (800654c <HAL_RCC_GetPCLK1Freq+0x24>)
 800653e:	5ccb      	ldrb	r3, [r1, r3]
 8006540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006544:	4618      	mov	r0, r3
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40023800 	.word	0x40023800
 800654c:	080089b0 	.word	0x080089b0

08006550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e041      	b.n	80065e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d106      	bne.n	800657c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fd fcc8 	bl	8003f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3304      	adds	r3, #4
 800658c:	4619      	mov	r1, r3
 800658e:	4610      	mov	r0, r2
 8006590:	f000 ff44 	bl	800741c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b01      	cmp	r3, #1
 8006602:	d001      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e044      	b.n	8006692 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0201 	orr.w	r2, r2, #1
 800661e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a1e      	ldr	r2, [pc, #120]	; (80066a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d018      	beq.n	800665c <HAL_TIM_Base_Start_IT+0x6c>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006632:	d013      	beq.n	800665c <HAL_TIM_Base_Start_IT+0x6c>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a1a      	ldr	r2, [pc, #104]	; (80066a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d00e      	beq.n	800665c <HAL_TIM_Base_Start_IT+0x6c>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a19      	ldr	r2, [pc, #100]	; (80066a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d009      	beq.n	800665c <HAL_TIM_Base_Start_IT+0x6c>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a17      	ldr	r2, [pc, #92]	; (80066ac <HAL_TIM_Base_Start_IT+0xbc>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d004      	beq.n	800665c <HAL_TIM_Base_Start_IT+0x6c>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a16      	ldr	r2, [pc, #88]	; (80066b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d111      	bne.n	8006680 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 0307 	and.w	r3, r3, #7
 8006666:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b06      	cmp	r3, #6
 800666c:	d010      	beq.n	8006690 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f042 0201 	orr.w	r2, r2, #1
 800667c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800667e:	e007      	b.n	8006690 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0201 	orr.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	40010000 	.word	0x40010000
 80066a4:	40000400 	.word	0x40000400
 80066a8:	40000800 	.word	0x40000800
 80066ac:	40000c00 	.word	0x40000c00
 80066b0:	40014000 	.word	0x40014000

080066b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e041      	b.n	800674a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d106      	bne.n	80066e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f839 	bl	8006752 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3304      	adds	r3, #4
 80066f0:	4619      	mov	r1, r3
 80066f2:	4610      	mov	r0, r2
 80066f4:	f000 fe92 	bl	800741c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
	...

08006768 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d109      	bne.n	800678c <HAL_TIM_PWM_Start+0x24>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b01      	cmp	r3, #1
 8006782:	bf14      	ite	ne
 8006784:	2301      	movne	r3, #1
 8006786:	2300      	moveq	r3, #0
 8006788:	b2db      	uxtb	r3, r3
 800678a:	e022      	b.n	80067d2 <HAL_TIM_PWM_Start+0x6a>
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b04      	cmp	r3, #4
 8006790:	d109      	bne.n	80067a6 <HAL_TIM_PWM_Start+0x3e>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b01      	cmp	r3, #1
 800679c:	bf14      	ite	ne
 800679e:	2301      	movne	r3, #1
 80067a0:	2300      	moveq	r3, #0
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	e015      	b.n	80067d2 <HAL_TIM_PWM_Start+0x6a>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	d109      	bne.n	80067c0 <HAL_TIM_PWM_Start+0x58>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	bf14      	ite	ne
 80067b8:	2301      	movne	r3, #1
 80067ba:	2300      	moveq	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	e008      	b.n	80067d2 <HAL_TIM_PWM_Start+0x6a>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	bf14      	ite	ne
 80067cc:	2301      	movne	r3, #1
 80067ce:	2300      	moveq	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e068      	b.n	80068ac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d104      	bne.n	80067ea <HAL_TIM_PWM_Start+0x82>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067e8:	e013      	b.n	8006812 <HAL_TIM_PWM_Start+0xaa>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	d104      	bne.n	80067fa <HAL_TIM_PWM_Start+0x92>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067f8:	e00b      	b.n	8006812 <HAL_TIM_PWM_Start+0xaa>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d104      	bne.n	800680a <HAL_TIM_PWM_Start+0xa2>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006808:	e003      	b.n	8006812 <HAL_TIM_PWM_Start+0xaa>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2202      	movs	r2, #2
 800680e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2201      	movs	r2, #1
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	4618      	mov	r0, r3
 800681c:	f001 fa54 	bl	8007cc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a23      	ldr	r2, [pc, #140]	; (80068b4 <HAL_TIM_PWM_Start+0x14c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d107      	bne.n	800683a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006838:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a1d      	ldr	r2, [pc, #116]	; (80068b4 <HAL_TIM_PWM_Start+0x14c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d018      	beq.n	8006876 <HAL_TIM_PWM_Start+0x10e>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800684c:	d013      	beq.n	8006876 <HAL_TIM_PWM_Start+0x10e>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a19      	ldr	r2, [pc, #100]	; (80068b8 <HAL_TIM_PWM_Start+0x150>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00e      	beq.n	8006876 <HAL_TIM_PWM_Start+0x10e>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a17      	ldr	r2, [pc, #92]	; (80068bc <HAL_TIM_PWM_Start+0x154>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d009      	beq.n	8006876 <HAL_TIM_PWM_Start+0x10e>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a16      	ldr	r2, [pc, #88]	; (80068c0 <HAL_TIM_PWM_Start+0x158>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d004      	beq.n	8006876 <HAL_TIM_PWM_Start+0x10e>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a14      	ldr	r2, [pc, #80]	; (80068c4 <HAL_TIM_PWM_Start+0x15c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d111      	bne.n	800689a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2b06      	cmp	r3, #6
 8006886:	d010      	beq.n	80068aa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0201 	orr.w	r2, r2, #1
 8006896:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006898:	e007      	b.n	80068aa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f042 0201 	orr.w	r2, r2, #1
 80068a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	40010000 	.word	0x40010000
 80068b8:	40000400 	.word	0x40000400
 80068bc:	40000800 	.word	0x40000800
 80068c0:	40000c00 	.word	0x40000c00
 80068c4:	40014000 	.word	0x40014000

080068c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2200      	movs	r2, #0
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	4618      	mov	r0, r3
 80068dc:	f001 f9f4 	bl	8007cc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a29      	ldr	r2, [pc, #164]	; (800698c <HAL_TIM_PWM_Stop+0xc4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d117      	bne.n	800691a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6a1a      	ldr	r2, [r3, #32]
 80068f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80068f4:	4013      	ands	r3, r2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10f      	bne.n	800691a <HAL_TIM_PWM_Stop+0x52>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6a1a      	ldr	r2, [r3, #32]
 8006900:	f240 4344 	movw	r3, #1092	; 0x444
 8006904:	4013      	ands	r3, r2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d107      	bne.n	800691a <HAL_TIM_PWM_Stop+0x52>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006918:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6a1a      	ldr	r2, [r3, #32]
 8006920:	f241 1311 	movw	r3, #4369	; 0x1111
 8006924:	4013      	ands	r3, r2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10f      	bne.n	800694a <HAL_TIM_PWM_Stop+0x82>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6a1a      	ldr	r2, [r3, #32]
 8006930:	f240 4344 	movw	r3, #1092	; 0x444
 8006934:	4013      	ands	r3, r2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d107      	bne.n	800694a <HAL_TIM_PWM_Stop+0x82>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0201 	bic.w	r2, r2, #1
 8006948:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d104      	bne.n	800695a <HAL_TIM_PWM_Stop+0x92>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006958:	e013      	b.n	8006982 <HAL_TIM_PWM_Stop+0xba>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b04      	cmp	r3, #4
 800695e:	d104      	bne.n	800696a <HAL_TIM_PWM_Stop+0xa2>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006968:	e00b      	b.n	8006982 <HAL_TIM_PWM_Stop+0xba>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b08      	cmp	r3, #8
 800696e:	d104      	bne.n	800697a <HAL_TIM_PWM_Stop+0xb2>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006978:	e003      	b.n	8006982 <HAL_TIM_PWM_Stop+0xba>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	40010000 	.word	0x40010000

08006990 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e041      	b.n	8006a26 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f839 	bl	8006a2e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3304      	adds	r3, #4
 80069cc:	4619      	mov	r1, r3
 80069ce:	4610      	mov	r0, r2
 80069d0:	f000 fd24 	bl	800741c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b086      	sub	sp, #24
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e097      	b.n	8006b86 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d106      	bne.n	8006a70 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7fd f9ee 	bl	8003e4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	6812      	ldr	r2, [r2, #0]
 8006a82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a86:	f023 0307 	bic.w	r3, r3, #7
 8006a8a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3304      	adds	r3, #4
 8006a94:	4619      	mov	r1, r3
 8006a96:	4610      	mov	r0, r2
 8006a98:	f000 fcc0 	bl	800741c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac4:	f023 0303 	bic.w	r3, r3, #3
 8006ac8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	021b      	lsls	r3, r3, #8
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006ae2:	f023 030c 	bic.w	r3, r3, #12
 8006ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	021b      	lsls	r3, r3, #8
 8006afe:	4313      	orrs	r3, r2
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	011a      	lsls	r2, r3, #4
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	031b      	lsls	r3, r3, #12
 8006b12:	4313      	orrs	r3, r2
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006b20:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006b28:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	4313      	orrs	r3, r2
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3718      	adds	r7, #24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b9e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ba6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bae:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006bb6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d110      	bne.n	8006be0 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d102      	bne.n	8006bca <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bc4:	7b7b      	ldrb	r3, [r7, #13]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d001      	beq.n	8006bce <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e089      	b.n	8006ce2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bde:	e031      	b.n	8006c44 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d110      	bne.n	8006c08 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006be6:	7bbb      	ldrb	r3, [r7, #14]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d102      	bne.n	8006bf2 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bec:	7b3b      	ldrb	r3, [r7, #12]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d001      	beq.n	8006bf6 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e075      	b.n	8006ce2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2202      	movs	r2, #2
 8006c02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c06:	e01d      	b.n	8006c44 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d108      	bne.n	8006c20 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d105      	bne.n	8006c20 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c14:	7b7b      	ldrb	r3, [r7, #13]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d102      	bne.n	8006c20 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c1a:	7b3b      	ldrb	r3, [r7, #12]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d001      	beq.n	8006c24 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e05e      	b.n	8006ce2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2202      	movs	r2, #2
 8006c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d003      	beq.n	8006c52 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	d010      	beq.n	8006c72 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006c50:	e01f      	b.n	8006c92 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2201      	movs	r2, #1
 8006c58:	2100      	movs	r1, #0
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f001 f834 	bl	8007cc8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f042 0202 	orr.w	r2, r2, #2
 8006c6e:	60da      	str	r2, [r3, #12]
      break;
 8006c70:	e02e      	b.n	8006cd0 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2201      	movs	r2, #1
 8006c78:	2104      	movs	r1, #4
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f001 f824 	bl	8007cc8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0204 	orr.w	r2, r2, #4
 8006c8e:	60da      	str	r2, [r3, #12]
      break;
 8006c90:	e01e      	b.n	8006cd0 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2201      	movs	r2, #1
 8006c98:	2100      	movs	r1, #0
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f001 f814 	bl	8007cc8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	2104      	movs	r1, #4
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f001 f80d 	bl	8007cc8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f042 0202 	orr.w	r2, r2, #2
 8006cbc:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68da      	ldr	r2, [r3, #12]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f042 0204 	orr.w	r2, r2, #4
 8006ccc:	60da      	str	r2, [r3, #12]
      break;
 8006cce:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0201 	orr.w	r2, r2, #1
 8006cde:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d122      	bne.n	8006d46 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d11b      	bne.n	8006d46 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f06f 0202 	mvn.w	r2, #2
 8006d16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	f003 0303 	and.w	r3, r3, #3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fb56 	bl	80073de <HAL_TIM_IC_CaptureCallback>
 8006d32:	e005      	b.n	8006d40 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fb48 	bl	80073ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fb59 	bl	80073f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b04      	cmp	r3, #4
 8006d52:	d122      	bne.n	8006d9a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f003 0304 	and.w	r3, r3, #4
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d11b      	bne.n	8006d9a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f06f 0204 	mvn.w	r2, #4
 8006d6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fb2c 	bl	80073de <HAL_TIM_IC_CaptureCallback>
 8006d86:	e005      	b.n	8006d94 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fb1e 	bl	80073ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fb2f 	bl	80073f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	f003 0308 	and.w	r3, r3, #8
 8006da4:	2b08      	cmp	r3, #8
 8006da6:	d122      	bne.n	8006dee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f003 0308 	and.w	r3, r3, #8
 8006db2:	2b08      	cmp	r3, #8
 8006db4:	d11b      	bne.n	8006dee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f06f 0208 	mvn.w	r2, #8
 8006dbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2204      	movs	r2, #4
 8006dc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	f003 0303 	and.w	r3, r3, #3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fb02 	bl	80073de <HAL_TIM_IC_CaptureCallback>
 8006dda:	e005      	b.n	8006de8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 faf4 	bl	80073ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fb05 	bl	80073f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	f003 0310 	and.w	r3, r3, #16
 8006df8:	2b10      	cmp	r3, #16
 8006dfa:	d122      	bne.n	8006e42 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f003 0310 	and.w	r3, r3, #16
 8006e06:	2b10      	cmp	r3, #16
 8006e08:	d11b      	bne.n	8006e42 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f06f 0210 	mvn.w	r2, #16
 8006e12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2208      	movs	r2, #8
 8006e18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fad8 	bl	80073de <HAL_TIM_IC_CaptureCallback>
 8006e2e:	e005      	b.n	8006e3c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 faca 	bl	80073ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fadb 	bl	80073f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d10e      	bne.n	8006e6e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d107      	bne.n	8006e6e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f06f 0201 	mvn.w	r2, #1
 8006e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7fc f919 	bl	80030a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e78:	2b80      	cmp	r3, #128	; 0x80
 8006e7a:	d10e      	bne.n	8006e9a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e86:	2b80      	cmp	r3, #128	; 0x80
 8006e88:	d107      	bne.n	8006e9a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 ffb5 	bl	8007e04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea4:	2b40      	cmp	r3, #64	; 0x40
 8006ea6:	d10e      	bne.n	8006ec6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb2:	2b40      	cmp	r3, #64	; 0x40
 8006eb4:	d107      	bne.n	8006ec6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 faa0 	bl	8007406 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	f003 0320 	and.w	r3, r3, #32
 8006ed0:	2b20      	cmp	r3, #32
 8006ed2:	d10e      	bne.n	8006ef2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f003 0320 	and.w	r3, r3, #32
 8006ede:	2b20      	cmp	r3, #32
 8006ee0:	d107      	bne.n	8006ef2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f06f 0220 	mvn.w	r2, #32
 8006eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 ff7f 	bl	8007df0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ef2:	bf00      	nop
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b086      	sub	sp, #24
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	60f8      	str	r0, [r7, #12]
 8006f02:	60b9      	str	r1, [r7, #8]
 8006f04:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d101      	bne.n	8006f18 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006f14:	2302      	movs	r3, #2
 8006f16:	e088      	b.n	800702a <HAL_TIM_IC_ConfigChannel+0x130>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d11b      	bne.n	8006f5e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6818      	ldr	r0, [r3, #0]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	6819      	ldr	r1, [r3, #0]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	f000 fd0f 	bl	8007958 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699a      	ldr	r2, [r3, #24]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 020c 	bic.w	r2, r2, #12
 8006f48:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6999      	ldr	r1, [r3, #24]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	619a      	str	r2, [r3, #24]
 8006f5c:	e060      	b.n	8007020 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b04      	cmp	r3, #4
 8006f62:	d11c      	bne.n	8006f9e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6818      	ldr	r0, [r3, #0]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	6819      	ldr	r1, [r3, #0]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	f000 fd87 	bl	8007a86 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	699a      	ldr	r2, [r3, #24]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006f86:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6999      	ldr	r1, [r3, #24]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	021a      	lsls	r2, r3, #8
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	619a      	str	r2, [r3, #24]
 8006f9c:	e040      	b.n	8007020 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d11b      	bne.n	8006fdc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6818      	ldr	r0, [r3, #0]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	6819      	ldr	r1, [r3, #0]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f000 fdd4 	bl	8007b60 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	69da      	ldr	r2, [r3, #28]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 020c 	bic.w	r2, r2, #12
 8006fc6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	69d9      	ldr	r1, [r3, #28]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	61da      	str	r2, [r3, #28]
 8006fda:	e021      	b.n	8007020 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b0c      	cmp	r3, #12
 8006fe0:	d11c      	bne.n	800701c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	6819      	ldr	r1, [r3, #0]
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	685a      	ldr	r2, [r3, #4]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	f000 fdf1 	bl	8007bd8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69da      	ldr	r2, [r3, #28]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007004:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69d9      	ldr	r1, [r3, #28]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	021a      	lsls	r2, r3, #8
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	61da      	str	r2, [r3, #28]
 800701a:	e001      	b.n	8007020 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007028:	7dfb      	ldrb	r3, [r7, #23]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800704a:	2b01      	cmp	r3, #1
 800704c:	d101      	bne.n	8007052 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800704e:	2302      	movs	r3, #2
 8007050:	e0ae      	b.n	80071b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b0c      	cmp	r3, #12
 800705e:	f200 809f 	bhi.w	80071a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007062:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007068:	0800709d 	.word	0x0800709d
 800706c:	080071a1 	.word	0x080071a1
 8007070:	080071a1 	.word	0x080071a1
 8007074:	080071a1 	.word	0x080071a1
 8007078:	080070dd 	.word	0x080070dd
 800707c:	080071a1 	.word	0x080071a1
 8007080:	080071a1 	.word	0x080071a1
 8007084:	080071a1 	.word	0x080071a1
 8007088:	0800711f 	.word	0x0800711f
 800708c:	080071a1 	.word	0x080071a1
 8007090:	080071a1 	.word	0x080071a1
 8007094:	080071a1 	.word	0x080071a1
 8007098:	0800715f 	.word	0x0800715f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68b9      	ldr	r1, [r7, #8]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 fa3a 	bl	800751c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	699a      	ldr	r2, [r3, #24]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0208 	orr.w	r2, r2, #8
 80070b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	699a      	ldr	r2, [r3, #24]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 0204 	bic.w	r2, r2, #4
 80070c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6999      	ldr	r1, [r3, #24]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	691a      	ldr	r2, [r3, #16]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	619a      	str	r2, [r3, #24]
      break;
 80070da:	e064      	b.n	80071a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68b9      	ldr	r1, [r7, #8]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 fa80 	bl	80075e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	699a      	ldr	r2, [r3, #24]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6999      	ldr	r1, [r3, #24]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	021a      	lsls	r2, r3, #8
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	430a      	orrs	r2, r1
 800711a:	619a      	str	r2, [r3, #24]
      break;
 800711c:	e043      	b.n	80071a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68b9      	ldr	r1, [r7, #8]
 8007124:	4618      	mov	r0, r3
 8007126:	f000 facb 	bl	80076c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	69da      	ldr	r2, [r3, #28]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f042 0208 	orr.w	r2, r2, #8
 8007138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69da      	ldr	r2, [r3, #28]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0204 	bic.w	r2, r2, #4
 8007148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	69d9      	ldr	r1, [r3, #28]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	691a      	ldr	r2, [r3, #16]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	430a      	orrs	r2, r1
 800715a:	61da      	str	r2, [r3, #28]
      break;
 800715c:	e023      	b.n	80071a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68b9      	ldr	r1, [r7, #8]
 8007164:	4618      	mov	r0, r3
 8007166:	f000 fb15 	bl	8007794 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69da      	ldr	r2, [r3, #28]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69da      	ldr	r2, [r3, #28]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	69d9      	ldr	r1, [r3, #28]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	021a      	lsls	r2, r3, #8
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	430a      	orrs	r2, r1
 800719c:	61da      	str	r2, [r3, #28]
      break;
 800719e:	e002      	b.n	80071a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	75fb      	strb	r3, [r7, #23]
      break;
 80071a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <HAL_TIM_ConfigClockSource+0x1c>
 80071d0:	2302      	movs	r3, #2
 80071d2:	e0b4      	b.n	800733e <HAL_TIM_ConfigClockSource+0x186>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800720c:	d03e      	beq.n	800728c <HAL_TIM_ConfigClockSource+0xd4>
 800720e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007212:	f200 8087 	bhi.w	8007324 <HAL_TIM_ConfigClockSource+0x16c>
 8007216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800721a:	f000 8086 	beq.w	800732a <HAL_TIM_ConfigClockSource+0x172>
 800721e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007222:	d87f      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x16c>
 8007224:	2b70      	cmp	r3, #112	; 0x70
 8007226:	d01a      	beq.n	800725e <HAL_TIM_ConfigClockSource+0xa6>
 8007228:	2b70      	cmp	r3, #112	; 0x70
 800722a:	d87b      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x16c>
 800722c:	2b60      	cmp	r3, #96	; 0x60
 800722e:	d050      	beq.n	80072d2 <HAL_TIM_ConfigClockSource+0x11a>
 8007230:	2b60      	cmp	r3, #96	; 0x60
 8007232:	d877      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x16c>
 8007234:	2b50      	cmp	r3, #80	; 0x50
 8007236:	d03c      	beq.n	80072b2 <HAL_TIM_ConfigClockSource+0xfa>
 8007238:	2b50      	cmp	r3, #80	; 0x50
 800723a:	d873      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x16c>
 800723c:	2b40      	cmp	r3, #64	; 0x40
 800723e:	d058      	beq.n	80072f2 <HAL_TIM_ConfigClockSource+0x13a>
 8007240:	2b40      	cmp	r3, #64	; 0x40
 8007242:	d86f      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x16c>
 8007244:	2b30      	cmp	r3, #48	; 0x30
 8007246:	d064      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0x15a>
 8007248:	2b30      	cmp	r3, #48	; 0x30
 800724a:	d86b      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x16c>
 800724c:	2b20      	cmp	r3, #32
 800724e:	d060      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0x15a>
 8007250:	2b20      	cmp	r3, #32
 8007252:	d867      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x16c>
 8007254:	2b00      	cmp	r3, #0
 8007256:	d05c      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0x15a>
 8007258:	2b10      	cmp	r3, #16
 800725a:	d05a      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0x15a>
 800725c:	e062      	b.n	8007324 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	6899      	ldr	r1, [r3, #8]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	f000 fd0b 	bl	8007c88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007280:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	609a      	str	r2, [r3, #8]
      break;
 800728a:	e04f      	b.n	800732c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6818      	ldr	r0, [r3, #0]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	6899      	ldr	r1, [r3, #8]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f000 fcf4 	bl	8007c88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689a      	ldr	r2, [r3, #8]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072ae:	609a      	str	r2, [r3, #8]
      break;
 80072b0:	e03c      	b.n	800732c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6818      	ldr	r0, [r3, #0]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	6859      	ldr	r1, [r3, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	461a      	mov	r2, r3
 80072c0:	f000 fbb2 	bl	8007a28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2150      	movs	r1, #80	; 0x50
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 fcc1 	bl	8007c52 <TIM_ITRx_SetConfig>
      break;
 80072d0:	e02c      	b.n	800732c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6818      	ldr	r0, [r3, #0]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	6859      	ldr	r1, [r3, #4]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	461a      	mov	r2, r3
 80072e0:	f000 fc0e 	bl	8007b00 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2160      	movs	r1, #96	; 0x60
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 fcb1 	bl	8007c52 <TIM_ITRx_SetConfig>
      break;
 80072f0:	e01c      	b.n	800732c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6818      	ldr	r0, [r3, #0]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	6859      	ldr	r1, [r3, #4]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	461a      	mov	r2, r3
 8007300:	f000 fb92 	bl	8007a28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2140      	movs	r1, #64	; 0x40
 800730a:	4618      	mov	r0, r3
 800730c:	f000 fca1 	bl	8007c52 <TIM_ITRx_SetConfig>
      break;
 8007310:	e00c      	b.n	800732c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4619      	mov	r1, r3
 800731c:	4610      	mov	r0, r2
 800731e:	f000 fc98 	bl	8007c52 <TIM_ITRx_SetConfig>
      break;
 8007322:	e003      	b.n	800732c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	73fb      	strb	r3, [r7, #15]
      break;
 8007328:	e000      	b.n	800732c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800732a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800733c:	7bfb      	ldrb	r3, [r7, #15]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007356:	2b01      	cmp	r3, #1
 8007358:	d101      	bne.n	800735e <HAL_TIM_SlaveConfigSynchro+0x18>
 800735a:	2302      	movs	r3, #2
 800735c:	e031      	b.n	80073c2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2202      	movs	r2, #2
 800736a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fa5f 	bl	8007834 <TIM_SlaveTimer_SetConfig>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d009      	beq.n	8007390 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e018      	b.n	80073c2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800739e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80073ae:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b083      	sub	sp, #12
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073d2:	bf00      	nop
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073de:	b480      	push	{r7}
 80073e0:	b083      	sub	sp, #12
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073e6:	bf00      	nop
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073fa:	bf00      	nop
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800740e:	bf00      	nop
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
	...

0800741c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a34      	ldr	r2, [pc, #208]	; (8007500 <TIM_Base_SetConfig+0xe4>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d00f      	beq.n	8007454 <TIM_Base_SetConfig+0x38>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800743a:	d00b      	beq.n	8007454 <TIM_Base_SetConfig+0x38>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a31      	ldr	r2, [pc, #196]	; (8007504 <TIM_Base_SetConfig+0xe8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d007      	beq.n	8007454 <TIM_Base_SetConfig+0x38>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a30      	ldr	r2, [pc, #192]	; (8007508 <TIM_Base_SetConfig+0xec>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d003      	beq.n	8007454 <TIM_Base_SetConfig+0x38>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a2f      	ldr	r2, [pc, #188]	; (800750c <TIM_Base_SetConfig+0xf0>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d108      	bne.n	8007466 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800745a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a25      	ldr	r2, [pc, #148]	; (8007500 <TIM_Base_SetConfig+0xe4>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d01b      	beq.n	80074a6 <TIM_Base_SetConfig+0x8a>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007474:	d017      	beq.n	80074a6 <TIM_Base_SetConfig+0x8a>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a22      	ldr	r2, [pc, #136]	; (8007504 <TIM_Base_SetConfig+0xe8>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d013      	beq.n	80074a6 <TIM_Base_SetConfig+0x8a>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a21      	ldr	r2, [pc, #132]	; (8007508 <TIM_Base_SetConfig+0xec>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d00f      	beq.n	80074a6 <TIM_Base_SetConfig+0x8a>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a20      	ldr	r2, [pc, #128]	; (800750c <TIM_Base_SetConfig+0xf0>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d00b      	beq.n	80074a6 <TIM_Base_SetConfig+0x8a>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a1f      	ldr	r2, [pc, #124]	; (8007510 <TIM_Base_SetConfig+0xf4>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d007      	beq.n	80074a6 <TIM_Base_SetConfig+0x8a>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a1e      	ldr	r2, [pc, #120]	; (8007514 <TIM_Base_SetConfig+0xf8>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d003      	beq.n	80074a6 <TIM_Base_SetConfig+0x8a>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a1d      	ldr	r2, [pc, #116]	; (8007518 <TIM_Base_SetConfig+0xfc>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d108      	bne.n	80074b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a08      	ldr	r2, [pc, #32]	; (8007500 <TIM_Base_SetConfig+0xe4>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d103      	bne.n	80074ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	691a      	ldr	r2, [r3, #16]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	615a      	str	r2, [r3, #20]
}
 80074f2:	bf00      	nop
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	40010000 	.word	0x40010000
 8007504:	40000400 	.word	0x40000400
 8007508:	40000800 	.word	0x40000800
 800750c:	40000c00 	.word	0x40000c00
 8007510:	40014000 	.word	0x40014000
 8007514:	40014400 	.word	0x40014400
 8007518:	40014800 	.word	0x40014800

0800751c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	f023 0201 	bic.w	r2, r3, #1
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 0303 	bic.w	r3, r3, #3
 8007552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	4313      	orrs	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f023 0302 	bic.w	r3, r3, #2
 8007564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	4313      	orrs	r3, r2
 800756e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a1c      	ldr	r2, [pc, #112]	; (80075e4 <TIM_OC1_SetConfig+0xc8>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d10c      	bne.n	8007592 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f023 0308 	bic.w	r3, r3, #8
 800757e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	4313      	orrs	r3, r2
 8007588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f023 0304 	bic.w	r3, r3, #4
 8007590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a13      	ldr	r2, [pc, #76]	; (80075e4 <TIM_OC1_SetConfig+0xc8>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d111      	bne.n	80075be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	621a      	str	r2, [r3, #32]
}
 80075d8:	bf00      	nop
 80075da:	371c      	adds	r7, #28
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr
 80075e4:	40010000 	.word	0x40010000

080075e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f023 0210 	bic.w	r2, r3, #16
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800761e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	021b      	lsls	r3, r3, #8
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	4313      	orrs	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f023 0320 	bic.w	r3, r3, #32
 8007632:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	4313      	orrs	r3, r2
 800763e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a1e      	ldr	r2, [pc, #120]	; (80076bc <TIM_OC2_SetConfig+0xd4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d10d      	bne.n	8007664 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800764e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	011b      	lsls	r3, r3, #4
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	4313      	orrs	r3, r2
 800765a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007662:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a15      	ldr	r2, [pc, #84]	; (80076bc <TIM_OC2_SetConfig+0xd4>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d113      	bne.n	8007694 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007672:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800767a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	4313      	orrs	r3, r2
 8007686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	4313      	orrs	r3, r2
 8007692:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	621a      	str	r2, [r3, #32]
}
 80076ae:	bf00      	nop
 80076b0:	371c      	adds	r7, #28
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	40010000 	.word	0x40010000

080076c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f023 0303 	bic.w	r3, r3, #3
 80076f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	4313      	orrs	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	021b      	lsls	r3, r3, #8
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	4313      	orrs	r3, r2
 8007714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a1d      	ldr	r2, [pc, #116]	; (8007790 <TIM_OC3_SetConfig+0xd0>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d10d      	bne.n	800773a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	021b      	lsls	r3, r3, #8
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	4313      	orrs	r3, r2
 8007730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a14      	ldr	r2, [pc, #80]	; (8007790 <TIM_OC3_SetConfig+0xd0>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d113      	bne.n	800776a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	011b      	lsls	r3, r3, #4
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	4313      	orrs	r3, r2
 800775c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	011b      	lsls	r3, r3, #4
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	4313      	orrs	r3, r2
 8007768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	621a      	str	r2, [r3, #32]
}
 8007784:	bf00      	nop
 8007786:	371c      	adds	r7, #28
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	40010000 	.word	0x40010000

08007794 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007794:	b480      	push	{r7}
 8007796:	b087      	sub	sp, #28
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	021b      	lsls	r3, r3, #8
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	031b      	lsls	r3, r3, #12
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a10      	ldr	r2, [pc, #64]	; (8007830 <TIM_OC4_SetConfig+0x9c>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d109      	bne.n	8007808 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	019b      	lsls	r3, r3, #6
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	4313      	orrs	r3, r2
 8007806:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	621a      	str	r2, [r3, #32]
}
 8007822:	bf00      	nop
 8007824:	371c      	adds	r7, #28
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	40010000 	.word	0x40010000

08007834 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007850:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	4313      	orrs	r3, r2
 800785a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f023 0307 	bic.w	r3, r3, #7
 8007862:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	4313      	orrs	r3, r2
 800786c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	2b70      	cmp	r3, #112	; 0x70
 800787c:	d01a      	beq.n	80078b4 <TIM_SlaveTimer_SetConfig+0x80>
 800787e:	2b70      	cmp	r3, #112	; 0x70
 8007880:	d860      	bhi.n	8007944 <TIM_SlaveTimer_SetConfig+0x110>
 8007882:	2b60      	cmp	r3, #96	; 0x60
 8007884:	d054      	beq.n	8007930 <TIM_SlaveTimer_SetConfig+0xfc>
 8007886:	2b60      	cmp	r3, #96	; 0x60
 8007888:	d85c      	bhi.n	8007944 <TIM_SlaveTimer_SetConfig+0x110>
 800788a:	2b50      	cmp	r3, #80	; 0x50
 800788c:	d046      	beq.n	800791c <TIM_SlaveTimer_SetConfig+0xe8>
 800788e:	2b50      	cmp	r3, #80	; 0x50
 8007890:	d858      	bhi.n	8007944 <TIM_SlaveTimer_SetConfig+0x110>
 8007892:	2b40      	cmp	r3, #64	; 0x40
 8007894:	d019      	beq.n	80078ca <TIM_SlaveTimer_SetConfig+0x96>
 8007896:	2b40      	cmp	r3, #64	; 0x40
 8007898:	d854      	bhi.n	8007944 <TIM_SlaveTimer_SetConfig+0x110>
 800789a:	2b30      	cmp	r3, #48	; 0x30
 800789c:	d055      	beq.n	800794a <TIM_SlaveTimer_SetConfig+0x116>
 800789e:	2b30      	cmp	r3, #48	; 0x30
 80078a0:	d850      	bhi.n	8007944 <TIM_SlaveTimer_SetConfig+0x110>
 80078a2:	2b20      	cmp	r3, #32
 80078a4:	d051      	beq.n	800794a <TIM_SlaveTimer_SetConfig+0x116>
 80078a6:	2b20      	cmp	r3, #32
 80078a8:	d84c      	bhi.n	8007944 <TIM_SlaveTimer_SetConfig+0x110>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d04d      	beq.n	800794a <TIM_SlaveTimer_SetConfig+0x116>
 80078ae:	2b10      	cmp	r3, #16
 80078b0:	d04b      	beq.n	800794a <TIM_SlaveTimer_SetConfig+0x116>
 80078b2:	e047      	b.n	8007944 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6818      	ldr	r0, [r3, #0]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	68d9      	ldr	r1, [r3, #12]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	f000 f9e0 	bl	8007c88 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80078c8:	e040      	b.n	800794c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b05      	cmp	r3, #5
 80078d0:	d101      	bne.n	80078d6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e03b      	b.n	800794e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6a1a      	ldr	r2, [r3, #32]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0201 	bic.w	r2, r2, #1
 80078ec:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078fc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	011b      	lsls	r3, r3, #4
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	4313      	orrs	r3, r2
 8007908:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	621a      	str	r2, [r3, #32]
      break;
 800791a:	e017      	b.n	800794c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6818      	ldr	r0, [r3, #0]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	6899      	ldr	r1, [r3, #8]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	461a      	mov	r2, r3
 800792a:	f000 f87d 	bl	8007a28 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800792e:	e00d      	b.n	800794c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6818      	ldr	r0, [r3, #0]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	6899      	ldr	r1, [r3, #8]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	461a      	mov	r2, r3
 800793e:	f000 f8df 	bl	8007b00 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007942:	e003      	b.n	800794c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	75fb      	strb	r3, [r7, #23]
      break;
 8007948:	e000      	b.n	800794c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800794a:	bf00      	nop
  }

  return status;
 800794c:	7dfb      	ldrb	r3, [r7, #23]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3718      	adds	r7, #24
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
	...

08007958 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
 8007964:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	f023 0201 	bic.w	r2, r3, #1
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4a24      	ldr	r2, [pc, #144]	; (8007a14 <TIM_TI1_SetConfig+0xbc>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d013      	beq.n	80079ae <TIM_TI1_SetConfig+0x56>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800798c:	d00f      	beq.n	80079ae <TIM_TI1_SetConfig+0x56>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4a21      	ldr	r2, [pc, #132]	; (8007a18 <TIM_TI1_SetConfig+0xc0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d00b      	beq.n	80079ae <TIM_TI1_SetConfig+0x56>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	4a20      	ldr	r2, [pc, #128]	; (8007a1c <TIM_TI1_SetConfig+0xc4>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d007      	beq.n	80079ae <TIM_TI1_SetConfig+0x56>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4a1f      	ldr	r2, [pc, #124]	; (8007a20 <TIM_TI1_SetConfig+0xc8>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d003      	beq.n	80079ae <TIM_TI1_SetConfig+0x56>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4a1e      	ldr	r2, [pc, #120]	; (8007a24 <TIM_TI1_SetConfig+0xcc>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d101      	bne.n	80079b2 <TIM_TI1_SetConfig+0x5a>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <TIM_TI1_SetConfig+0x5c>
 80079b2:	2300      	movs	r3, #0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d008      	beq.n	80079ca <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f023 0303 	bic.w	r3, r3, #3
 80079be:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	617b      	str	r3, [r7, #20]
 80079c8:	e003      	b.n	80079d2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f043 0301 	orr.w	r3, r3, #1
 80079d0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	011b      	lsls	r3, r3, #4
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	f023 030a 	bic.w	r3, r3, #10
 80079ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	f003 030a 	and.w	r3, r3, #10
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	621a      	str	r2, [r3, #32]
}
 8007a06:	bf00      	nop
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	40010000 	.word	0x40010000
 8007a18:	40000400 	.word	0x40000400
 8007a1c:	40000800 	.word	0x40000800
 8007a20:	40000c00 	.word	0x40000c00
 8007a24:	40014000 	.word	0x40014000

08007a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	f023 0201 	bic.w	r2, r3, #1
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	011b      	lsls	r3, r3, #4
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f023 030a 	bic.w	r3, r3, #10
 8007a64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	621a      	str	r2, [r3, #32]
}
 8007a7a:	bf00      	nop
 8007a7c:	371c      	adds	r7, #28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b087      	sub	sp, #28
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	60f8      	str	r0, [r7, #12]
 8007a8e:	60b9      	str	r1, [r7, #8]
 8007a90:	607a      	str	r2, [r7, #4]
 8007a92:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6a1b      	ldr	r3, [r3, #32]
 8007a98:	f023 0210 	bic.w	r2, r3, #16
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ab2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	021b      	lsls	r3, r3, #8
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ac4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	031b      	lsls	r3, r3, #12
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ad8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	621a      	str	r2, [r3, #32]
}
 8007af4:	bf00      	nop
 8007af6:	371c      	adds	r7, #28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6a1b      	ldr	r3, [r3, #32]
 8007b10:	f023 0210 	bic.w	r2, r3, #16
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	031b      	lsls	r3, r3, #12
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	011b      	lsls	r3, r3, #4
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	621a      	str	r2, [r3, #32]
}
 8007b54:	bf00      	nop
 8007b56:	371c      	adds	r7, #28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b087      	sub	sp, #28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
 8007b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	69db      	ldr	r3, [r3, #28]
 8007b7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6a1b      	ldr	r3, [r3, #32]
 8007b84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f023 0303 	bic.w	r3, r3, #3
 8007b8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	011b      	lsls	r3, r3, #4
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007bb0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	021b      	lsls	r3, r3, #8
 8007bb6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	621a      	str	r2, [r3, #32]
}
 8007bcc:	bf00      	nop
 8007bce:	371c      	adds	r7, #28
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
 8007be4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	021b      	lsls	r3, r3, #8
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c16:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	031b      	lsls	r3, r3, #12
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007c2a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	031b      	lsls	r3, r3, #12
 8007c30:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	621a      	str	r2, [r3, #32]
}
 8007c46:	bf00      	nop
 8007c48:	371c      	adds	r7, #28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b085      	sub	sp, #20
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	f043 0307 	orr.w	r3, r3, #7
 8007c74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	609a      	str	r2, [r3, #8]
}
 8007c7c:	bf00      	nop
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
 8007c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ca2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	021a      	lsls	r2, r3, #8
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	431a      	orrs	r2, r3
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	609a      	str	r2, [r3, #8]
}
 8007cbc:	bf00      	nop
 8007cbe:	371c      	adds	r7, #28
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b087      	sub	sp, #28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	f003 031f 	and.w	r3, r3, #31
 8007cda:	2201      	movs	r2, #1
 8007cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6a1a      	ldr	r2, [r3, #32]
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	43db      	mvns	r3, r3
 8007cea:	401a      	ands	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6a1a      	ldr	r2, [r3, #32]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f003 031f 	and.w	r3, r3, #31
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8007d00:	431a      	orrs	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	621a      	str	r2, [r3, #32]
}
 8007d06:	bf00      	nop
 8007d08:	371c      	adds	r7, #28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
	...

08007d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e050      	b.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a1c      	ldr	r2, [pc, #112]	; (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d018      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d78:	d013      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a18      	ldr	r2, [pc, #96]	; (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d00e      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a16      	ldr	r2, [pc, #88]	; (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d009      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a15      	ldr	r2, [pc, #84]	; (8007de8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d004      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a13      	ldr	r2, [pc, #76]	; (8007dec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d10c      	bne.n	8007dbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007da8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	40010000 	.word	0x40010000
 8007de0:	40000400 	.word	0x40000400
 8007de4:	40000800 	.word	0x40000800
 8007de8:	40000c00 	.word	0x40000c00
 8007dec:	40014000 	.word	0x40014000

08007df0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <__errno>:
 8007e18:	4b01      	ldr	r3, [pc, #4]	; (8007e20 <__errno+0x8>)
 8007e1a:	6818      	ldr	r0, [r3, #0]
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	2000001c 	.word	0x2000001c

08007e24 <__libc_init_array>:
 8007e24:	b570      	push	{r4, r5, r6, lr}
 8007e26:	4d0d      	ldr	r5, [pc, #52]	; (8007e5c <__libc_init_array+0x38>)
 8007e28:	4c0d      	ldr	r4, [pc, #52]	; (8007e60 <__libc_init_array+0x3c>)
 8007e2a:	1b64      	subs	r4, r4, r5
 8007e2c:	10a4      	asrs	r4, r4, #2
 8007e2e:	2600      	movs	r6, #0
 8007e30:	42a6      	cmp	r6, r4
 8007e32:	d109      	bne.n	8007e48 <__libc_init_array+0x24>
 8007e34:	4d0b      	ldr	r5, [pc, #44]	; (8007e64 <__libc_init_array+0x40>)
 8007e36:	4c0c      	ldr	r4, [pc, #48]	; (8007e68 <__libc_init_array+0x44>)
 8007e38:	f000 fc8e 	bl	8008758 <_init>
 8007e3c:	1b64      	subs	r4, r4, r5
 8007e3e:	10a4      	asrs	r4, r4, #2
 8007e40:	2600      	movs	r6, #0
 8007e42:	42a6      	cmp	r6, r4
 8007e44:	d105      	bne.n	8007e52 <__libc_init_array+0x2e>
 8007e46:	bd70      	pop	{r4, r5, r6, pc}
 8007e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e4c:	4798      	blx	r3
 8007e4e:	3601      	adds	r6, #1
 8007e50:	e7ee      	b.n	8007e30 <__libc_init_array+0xc>
 8007e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e56:	4798      	blx	r3
 8007e58:	3601      	adds	r6, #1
 8007e5a:	e7f2      	b.n	8007e42 <__libc_init_array+0x1e>
 8007e5c:	080089f4 	.word	0x080089f4
 8007e60:	080089f4 	.word	0x080089f4
 8007e64:	080089f4 	.word	0x080089f4
 8007e68:	080089f8 	.word	0x080089f8

08007e6c <memcpy>:
 8007e6c:	440a      	add	r2, r1
 8007e6e:	4291      	cmp	r1, r2
 8007e70:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e74:	d100      	bne.n	8007e78 <memcpy+0xc>
 8007e76:	4770      	bx	lr
 8007e78:	b510      	push	{r4, lr}
 8007e7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e82:	4291      	cmp	r1, r2
 8007e84:	d1f9      	bne.n	8007e7a <memcpy+0xe>
 8007e86:	bd10      	pop	{r4, pc}

08007e88 <memset>:
 8007e88:	4402      	add	r2, r0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d100      	bne.n	8007e92 <memset+0xa>
 8007e90:	4770      	bx	lr
 8007e92:	f803 1b01 	strb.w	r1, [r3], #1
 8007e96:	e7f9      	b.n	8007e8c <memset+0x4>

08007e98 <siprintf>:
 8007e98:	b40e      	push	{r1, r2, r3}
 8007e9a:	b500      	push	{lr}
 8007e9c:	b09c      	sub	sp, #112	; 0x70
 8007e9e:	ab1d      	add	r3, sp, #116	; 0x74
 8007ea0:	9002      	str	r0, [sp, #8]
 8007ea2:	9006      	str	r0, [sp, #24]
 8007ea4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ea8:	4809      	ldr	r0, [pc, #36]	; (8007ed0 <siprintf+0x38>)
 8007eaa:	9107      	str	r1, [sp, #28]
 8007eac:	9104      	str	r1, [sp, #16]
 8007eae:	4909      	ldr	r1, [pc, #36]	; (8007ed4 <siprintf+0x3c>)
 8007eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eb4:	9105      	str	r1, [sp, #20]
 8007eb6:	6800      	ldr	r0, [r0, #0]
 8007eb8:	9301      	str	r3, [sp, #4]
 8007eba:	a902      	add	r1, sp, #8
 8007ebc:	f000 f868 	bl	8007f90 <_svfiprintf_r>
 8007ec0:	9b02      	ldr	r3, [sp, #8]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	b01c      	add	sp, #112	; 0x70
 8007ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ecc:	b003      	add	sp, #12
 8007ece:	4770      	bx	lr
 8007ed0:	2000001c 	.word	0x2000001c
 8007ed4:	ffff0208 	.word	0xffff0208

08007ed8 <__ssputs_r>:
 8007ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007edc:	688e      	ldr	r6, [r1, #8]
 8007ede:	429e      	cmp	r6, r3
 8007ee0:	4682      	mov	sl, r0
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	4690      	mov	r8, r2
 8007ee6:	461f      	mov	r7, r3
 8007ee8:	d838      	bhi.n	8007f5c <__ssputs_r+0x84>
 8007eea:	898a      	ldrh	r2, [r1, #12]
 8007eec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ef0:	d032      	beq.n	8007f58 <__ssputs_r+0x80>
 8007ef2:	6825      	ldr	r5, [r4, #0]
 8007ef4:	6909      	ldr	r1, [r1, #16]
 8007ef6:	eba5 0901 	sub.w	r9, r5, r1
 8007efa:	6965      	ldr	r5, [r4, #20]
 8007efc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f04:	3301      	adds	r3, #1
 8007f06:	444b      	add	r3, r9
 8007f08:	106d      	asrs	r5, r5, #1
 8007f0a:	429d      	cmp	r5, r3
 8007f0c:	bf38      	it	cc
 8007f0e:	461d      	movcc	r5, r3
 8007f10:	0553      	lsls	r3, r2, #21
 8007f12:	d531      	bpl.n	8007f78 <__ssputs_r+0xa0>
 8007f14:	4629      	mov	r1, r5
 8007f16:	f000 fb55 	bl	80085c4 <_malloc_r>
 8007f1a:	4606      	mov	r6, r0
 8007f1c:	b950      	cbnz	r0, 8007f34 <__ssputs_r+0x5c>
 8007f1e:	230c      	movs	r3, #12
 8007f20:	f8ca 3000 	str.w	r3, [sl]
 8007f24:	89a3      	ldrh	r3, [r4, #12]
 8007f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f2a:	81a3      	strh	r3, [r4, #12]
 8007f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f34:	6921      	ldr	r1, [r4, #16]
 8007f36:	464a      	mov	r2, r9
 8007f38:	f7ff ff98 	bl	8007e6c <memcpy>
 8007f3c:	89a3      	ldrh	r3, [r4, #12]
 8007f3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f46:	81a3      	strh	r3, [r4, #12]
 8007f48:	6126      	str	r6, [r4, #16]
 8007f4a:	6165      	str	r5, [r4, #20]
 8007f4c:	444e      	add	r6, r9
 8007f4e:	eba5 0509 	sub.w	r5, r5, r9
 8007f52:	6026      	str	r6, [r4, #0]
 8007f54:	60a5      	str	r5, [r4, #8]
 8007f56:	463e      	mov	r6, r7
 8007f58:	42be      	cmp	r6, r7
 8007f5a:	d900      	bls.n	8007f5e <__ssputs_r+0x86>
 8007f5c:	463e      	mov	r6, r7
 8007f5e:	6820      	ldr	r0, [r4, #0]
 8007f60:	4632      	mov	r2, r6
 8007f62:	4641      	mov	r1, r8
 8007f64:	f000 faa8 	bl	80084b8 <memmove>
 8007f68:	68a3      	ldr	r3, [r4, #8]
 8007f6a:	1b9b      	subs	r3, r3, r6
 8007f6c:	60a3      	str	r3, [r4, #8]
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	4433      	add	r3, r6
 8007f72:	6023      	str	r3, [r4, #0]
 8007f74:	2000      	movs	r0, #0
 8007f76:	e7db      	b.n	8007f30 <__ssputs_r+0x58>
 8007f78:	462a      	mov	r2, r5
 8007f7a:	f000 fb97 	bl	80086ac <_realloc_r>
 8007f7e:	4606      	mov	r6, r0
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d1e1      	bne.n	8007f48 <__ssputs_r+0x70>
 8007f84:	6921      	ldr	r1, [r4, #16]
 8007f86:	4650      	mov	r0, sl
 8007f88:	f000 fab0 	bl	80084ec <_free_r>
 8007f8c:	e7c7      	b.n	8007f1e <__ssputs_r+0x46>
	...

08007f90 <_svfiprintf_r>:
 8007f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f94:	4698      	mov	r8, r3
 8007f96:	898b      	ldrh	r3, [r1, #12]
 8007f98:	061b      	lsls	r3, r3, #24
 8007f9a:	b09d      	sub	sp, #116	; 0x74
 8007f9c:	4607      	mov	r7, r0
 8007f9e:	460d      	mov	r5, r1
 8007fa0:	4614      	mov	r4, r2
 8007fa2:	d50e      	bpl.n	8007fc2 <_svfiprintf_r+0x32>
 8007fa4:	690b      	ldr	r3, [r1, #16]
 8007fa6:	b963      	cbnz	r3, 8007fc2 <_svfiprintf_r+0x32>
 8007fa8:	2140      	movs	r1, #64	; 0x40
 8007faa:	f000 fb0b 	bl	80085c4 <_malloc_r>
 8007fae:	6028      	str	r0, [r5, #0]
 8007fb0:	6128      	str	r0, [r5, #16]
 8007fb2:	b920      	cbnz	r0, 8007fbe <_svfiprintf_r+0x2e>
 8007fb4:	230c      	movs	r3, #12
 8007fb6:	603b      	str	r3, [r7, #0]
 8007fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fbc:	e0d1      	b.n	8008162 <_svfiprintf_r+0x1d2>
 8007fbe:	2340      	movs	r3, #64	; 0x40
 8007fc0:	616b      	str	r3, [r5, #20]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc6:	2320      	movs	r3, #32
 8007fc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fd0:	2330      	movs	r3, #48	; 0x30
 8007fd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800817c <_svfiprintf_r+0x1ec>
 8007fd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fda:	f04f 0901 	mov.w	r9, #1
 8007fde:	4623      	mov	r3, r4
 8007fe0:	469a      	mov	sl, r3
 8007fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fe6:	b10a      	cbz	r2, 8007fec <_svfiprintf_r+0x5c>
 8007fe8:	2a25      	cmp	r2, #37	; 0x25
 8007fea:	d1f9      	bne.n	8007fe0 <_svfiprintf_r+0x50>
 8007fec:	ebba 0b04 	subs.w	fp, sl, r4
 8007ff0:	d00b      	beq.n	800800a <_svfiprintf_r+0x7a>
 8007ff2:	465b      	mov	r3, fp
 8007ff4:	4622      	mov	r2, r4
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	4638      	mov	r0, r7
 8007ffa:	f7ff ff6d 	bl	8007ed8 <__ssputs_r>
 8007ffe:	3001      	adds	r0, #1
 8008000:	f000 80aa 	beq.w	8008158 <_svfiprintf_r+0x1c8>
 8008004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008006:	445a      	add	r2, fp
 8008008:	9209      	str	r2, [sp, #36]	; 0x24
 800800a:	f89a 3000 	ldrb.w	r3, [sl]
 800800e:	2b00      	cmp	r3, #0
 8008010:	f000 80a2 	beq.w	8008158 <_svfiprintf_r+0x1c8>
 8008014:	2300      	movs	r3, #0
 8008016:	f04f 32ff 	mov.w	r2, #4294967295
 800801a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800801e:	f10a 0a01 	add.w	sl, sl, #1
 8008022:	9304      	str	r3, [sp, #16]
 8008024:	9307      	str	r3, [sp, #28]
 8008026:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800802a:	931a      	str	r3, [sp, #104]	; 0x68
 800802c:	4654      	mov	r4, sl
 800802e:	2205      	movs	r2, #5
 8008030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008034:	4851      	ldr	r0, [pc, #324]	; (800817c <_svfiprintf_r+0x1ec>)
 8008036:	f7f8 f8db 	bl	80001f0 <memchr>
 800803a:	9a04      	ldr	r2, [sp, #16]
 800803c:	b9d8      	cbnz	r0, 8008076 <_svfiprintf_r+0xe6>
 800803e:	06d0      	lsls	r0, r2, #27
 8008040:	bf44      	itt	mi
 8008042:	2320      	movmi	r3, #32
 8008044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008048:	0711      	lsls	r1, r2, #28
 800804a:	bf44      	itt	mi
 800804c:	232b      	movmi	r3, #43	; 0x2b
 800804e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008052:	f89a 3000 	ldrb.w	r3, [sl]
 8008056:	2b2a      	cmp	r3, #42	; 0x2a
 8008058:	d015      	beq.n	8008086 <_svfiprintf_r+0xf6>
 800805a:	9a07      	ldr	r2, [sp, #28]
 800805c:	4654      	mov	r4, sl
 800805e:	2000      	movs	r0, #0
 8008060:	f04f 0c0a 	mov.w	ip, #10
 8008064:	4621      	mov	r1, r4
 8008066:	f811 3b01 	ldrb.w	r3, [r1], #1
 800806a:	3b30      	subs	r3, #48	; 0x30
 800806c:	2b09      	cmp	r3, #9
 800806e:	d94e      	bls.n	800810e <_svfiprintf_r+0x17e>
 8008070:	b1b0      	cbz	r0, 80080a0 <_svfiprintf_r+0x110>
 8008072:	9207      	str	r2, [sp, #28]
 8008074:	e014      	b.n	80080a0 <_svfiprintf_r+0x110>
 8008076:	eba0 0308 	sub.w	r3, r0, r8
 800807a:	fa09 f303 	lsl.w	r3, r9, r3
 800807e:	4313      	orrs	r3, r2
 8008080:	9304      	str	r3, [sp, #16]
 8008082:	46a2      	mov	sl, r4
 8008084:	e7d2      	b.n	800802c <_svfiprintf_r+0x9c>
 8008086:	9b03      	ldr	r3, [sp, #12]
 8008088:	1d19      	adds	r1, r3, #4
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	9103      	str	r1, [sp, #12]
 800808e:	2b00      	cmp	r3, #0
 8008090:	bfbb      	ittet	lt
 8008092:	425b      	neglt	r3, r3
 8008094:	f042 0202 	orrlt.w	r2, r2, #2
 8008098:	9307      	strge	r3, [sp, #28]
 800809a:	9307      	strlt	r3, [sp, #28]
 800809c:	bfb8      	it	lt
 800809e:	9204      	strlt	r2, [sp, #16]
 80080a0:	7823      	ldrb	r3, [r4, #0]
 80080a2:	2b2e      	cmp	r3, #46	; 0x2e
 80080a4:	d10c      	bne.n	80080c0 <_svfiprintf_r+0x130>
 80080a6:	7863      	ldrb	r3, [r4, #1]
 80080a8:	2b2a      	cmp	r3, #42	; 0x2a
 80080aa:	d135      	bne.n	8008118 <_svfiprintf_r+0x188>
 80080ac:	9b03      	ldr	r3, [sp, #12]
 80080ae:	1d1a      	adds	r2, r3, #4
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	9203      	str	r2, [sp, #12]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	bfb8      	it	lt
 80080b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80080bc:	3402      	adds	r4, #2
 80080be:	9305      	str	r3, [sp, #20]
 80080c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800818c <_svfiprintf_r+0x1fc>
 80080c4:	7821      	ldrb	r1, [r4, #0]
 80080c6:	2203      	movs	r2, #3
 80080c8:	4650      	mov	r0, sl
 80080ca:	f7f8 f891 	bl	80001f0 <memchr>
 80080ce:	b140      	cbz	r0, 80080e2 <_svfiprintf_r+0x152>
 80080d0:	2340      	movs	r3, #64	; 0x40
 80080d2:	eba0 000a 	sub.w	r0, r0, sl
 80080d6:	fa03 f000 	lsl.w	r0, r3, r0
 80080da:	9b04      	ldr	r3, [sp, #16]
 80080dc:	4303      	orrs	r3, r0
 80080de:	3401      	adds	r4, #1
 80080e0:	9304      	str	r3, [sp, #16]
 80080e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e6:	4826      	ldr	r0, [pc, #152]	; (8008180 <_svfiprintf_r+0x1f0>)
 80080e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080ec:	2206      	movs	r2, #6
 80080ee:	f7f8 f87f 	bl	80001f0 <memchr>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d038      	beq.n	8008168 <_svfiprintf_r+0x1d8>
 80080f6:	4b23      	ldr	r3, [pc, #140]	; (8008184 <_svfiprintf_r+0x1f4>)
 80080f8:	bb1b      	cbnz	r3, 8008142 <_svfiprintf_r+0x1b2>
 80080fa:	9b03      	ldr	r3, [sp, #12]
 80080fc:	3307      	adds	r3, #7
 80080fe:	f023 0307 	bic.w	r3, r3, #7
 8008102:	3308      	adds	r3, #8
 8008104:	9303      	str	r3, [sp, #12]
 8008106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008108:	4433      	add	r3, r6
 800810a:	9309      	str	r3, [sp, #36]	; 0x24
 800810c:	e767      	b.n	8007fde <_svfiprintf_r+0x4e>
 800810e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008112:	460c      	mov	r4, r1
 8008114:	2001      	movs	r0, #1
 8008116:	e7a5      	b.n	8008064 <_svfiprintf_r+0xd4>
 8008118:	2300      	movs	r3, #0
 800811a:	3401      	adds	r4, #1
 800811c:	9305      	str	r3, [sp, #20]
 800811e:	4619      	mov	r1, r3
 8008120:	f04f 0c0a 	mov.w	ip, #10
 8008124:	4620      	mov	r0, r4
 8008126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800812a:	3a30      	subs	r2, #48	; 0x30
 800812c:	2a09      	cmp	r2, #9
 800812e:	d903      	bls.n	8008138 <_svfiprintf_r+0x1a8>
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0c5      	beq.n	80080c0 <_svfiprintf_r+0x130>
 8008134:	9105      	str	r1, [sp, #20]
 8008136:	e7c3      	b.n	80080c0 <_svfiprintf_r+0x130>
 8008138:	fb0c 2101 	mla	r1, ip, r1, r2
 800813c:	4604      	mov	r4, r0
 800813e:	2301      	movs	r3, #1
 8008140:	e7f0      	b.n	8008124 <_svfiprintf_r+0x194>
 8008142:	ab03      	add	r3, sp, #12
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	462a      	mov	r2, r5
 8008148:	4b0f      	ldr	r3, [pc, #60]	; (8008188 <_svfiprintf_r+0x1f8>)
 800814a:	a904      	add	r1, sp, #16
 800814c:	4638      	mov	r0, r7
 800814e:	f3af 8000 	nop.w
 8008152:	1c42      	adds	r2, r0, #1
 8008154:	4606      	mov	r6, r0
 8008156:	d1d6      	bne.n	8008106 <_svfiprintf_r+0x176>
 8008158:	89ab      	ldrh	r3, [r5, #12]
 800815a:	065b      	lsls	r3, r3, #25
 800815c:	f53f af2c 	bmi.w	8007fb8 <_svfiprintf_r+0x28>
 8008160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008162:	b01d      	add	sp, #116	; 0x74
 8008164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008168:	ab03      	add	r3, sp, #12
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	462a      	mov	r2, r5
 800816e:	4b06      	ldr	r3, [pc, #24]	; (8008188 <_svfiprintf_r+0x1f8>)
 8008170:	a904      	add	r1, sp, #16
 8008172:	4638      	mov	r0, r7
 8008174:	f000 f87a 	bl	800826c <_printf_i>
 8008178:	e7eb      	b.n	8008152 <_svfiprintf_r+0x1c2>
 800817a:	bf00      	nop
 800817c:	080089b8 	.word	0x080089b8
 8008180:	080089c2 	.word	0x080089c2
 8008184:	00000000 	.word	0x00000000
 8008188:	08007ed9 	.word	0x08007ed9
 800818c:	080089be 	.word	0x080089be

08008190 <_printf_common>:
 8008190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008194:	4616      	mov	r6, r2
 8008196:	4699      	mov	r9, r3
 8008198:	688a      	ldr	r2, [r1, #8]
 800819a:	690b      	ldr	r3, [r1, #16]
 800819c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081a0:	4293      	cmp	r3, r2
 80081a2:	bfb8      	it	lt
 80081a4:	4613      	movlt	r3, r2
 80081a6:	6033      	str	r3, [r6, #0]
 80081a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081ac:	4607      	mov	r7, r0
 80081ae:	460c      	mov	r4, r1
 80081b0:	b10a      	cbz	r2, 80081b6 <_printf_common+0x26>
 80081b2:	3301      	adds	r3, #1
 80081b4:	6033      	str	r3, [r6, #0]
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	0699      	lsls	r1, r3, #26
 80081ba:	bf42      	ittt	mi
 80081bc:	6833      	ldrmi	r3, [r6, #0]
 80081be:	3302      	addmi	r3, #2
 80081c0:	6033      	strmi	r3, [r6, #0]
 80081c2:	6825      	ldr	r5, [r4, #0]
 80081c4:	f015 0506 	ands.w	r5, r5, #6
 80081c8:	d106      	bne.n	80081d8 <_printf_common+0x48>
 80081ca:	f104 0a19 	add.w	sl, r4, #25
 80081ce:	68e3      	ldr	r3, [r4, #12]
 80081d0:	6832      	ldr	r2, [r6, #0]
 80081d2:	1a9b      	subs	r3, r3, r2
 80081d4:	42ab      	cmp	r3, r5
 80081d6:	dc26      	bgt.n	8008226 <_printf_common+0x96>
 80081d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081dc:	1e13      	subs	r3, r2, #0
 80081de:	6822      	ldr	r2, [r4, #0]
 80081e0:	bf18      	it	ne
 80081e2:	2301      	movne	r3, #1
 80081e4:	0692      	lsls	r2, r2, #26
 80081e6:	d42b      	bmi.n	8008240 <_printf_common+0xb0>
 80081e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081ec:	4649      	mov	r1, r9
 80081ee:	4638      	mov	r0, r7
 80081f0:	47c0      	blx	r8
 80081f2:	3001      	adds	r0, #1
 80081f4:	d01e      	beq.n	8008234 <_printf_common+0xa4>
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	68e5      	ldr	r5, [r4, #12]
 80081fa:	6832      	ldr	r2, [r6, #0]
 80081fc:	f003 0306 	and.w	r3, r3, #6
 8008200:	2b04      	cmp	r3, #4
 8008202:	bf08      	it	eq
 8008204:	1aad      	subeq	r5, r5, r2
 8008206:	68a3      	ldr	r3, [r4, #8]
 8008208:	6922      	ldr	r2, [r4, #16]
 800820a:	bf0c      	ite	eq
 800820c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008210:	2500      	movne	r5, #0
 8008212:	4293      	cmp	r3, r2
 8008214:	bfc4      	itt	gt
 8008216:	1a9b      	subgt	r3, r3, r2
 8008218:	18ed      	addgt	r5, r5, r3
 800821a:	2600      	movs	r6, #0
 800821c:	341a      	adds	r4, #26
 800821e:	42b5      	cmp	r5, r6
 8008220:	d11a      	bne.n	8008258 <_printf_common+0xc8>
 8008222:	2000      	movs	r0, #0
 8008224:	e008      	b.n	8008238 <_printf_common+0xa8>
 8008226:	2301      	movs	r3, #1
 8008228:	4652      	mov	r2, sl
 800822a:	4649      	mov	r1, r9
 800822c:	4638      	mov	r0, r7
 800822e:	47c0      	blx	r8
 8008230:	3001      	adds	r0, #1
 8008232:	d103      	bne.n	800823c <_printf_common+0xac>
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800823c:	3501      	adds	r5, #1
 800823e:	e7c6      	b.n	80081ce <_printf_common+0x3e>
 8008240:	18e1      	adds	r1, r4, r3
 8008242:	1c5a      	adds	r2, r3, #1
 8008244:	2030      	movs	r0, #48	; 0x30
 8008246:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800824a:	4422      	add	r2, r4
 800824c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008250:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008254:	3302      	adds	r3, #2
 8008256:	e7c7      	b.n	80081e8 <_printf_common+0x58>
 8008258:	2301      	movs	r3, #1
 800825a:	4622      	mov	r2, r4
 800825c:	4649      	mov	r1, r9
 800825e:	4638      	mov	r0, r7
 8008260:	47c0      	blx	r8
 8008262:	3001      	adds	r0, #1
 8008264:	d0e6      	beq.n	8008234 <_printf_common+0xa4>
 8008266:	3601      	adds	r6, #1
 8008268:	e7d9      	b.n	800821e <_printf_common+0x8e>
	...

0800826c <_printf_i>:
 800826c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008270:	7e0f      	ldrb	r7, [r1, #24]
 8008272:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008274:	2f78      	cmp	r7, #120	; 0x78
 8008276:	4691      	mov	r9, r2
 8008278:	4680      	mov	r8, r0
 800827a:	460c      	mov	r4, r1
 800827c:	469a      	mov	sl, r3
 800827e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008282:	d807      	bhi.n	8008294 <_printf_i+0x28>
 8008284:	2f62      	cmp	r7, #98	; 0x62
 8008286:	d80a      	bhi.n	800829e <_printf_i+0x32>
 8008288:	2f00      	cmp	r7, #0
 800828a:	f000 80d8 	beq.w	800843e <_printf_i+0x1d2>
 800828e:	2f58      	cmp	r7, #88	; 0x58
 8008290:	f000 80a3 	beq.w	80083da <_printf_i+0x16e>
 8008294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008298:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800829c:	e03a      	b.n	8008314 <_printf_i+0xa8>
 800829e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082a2:	2b15      	cmp	r3, #21
 80082a4:	d8f6      	bhi.n	8008294 <_printf_i+0x28>
 80082a6:	a101      	add	r1, pc, #4	; (adr r1, 80082ac <_printf_i+0x40>)
 80082a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082ac:	08008305 	.word	0x08008305
 80082b0:	08008319 	.word	0x08008319
 80082b4:	08008295 	.word	0x08008295
 80082b8:	08008295 	.word	0x08008295
 80082bc:	08008295 	.word	0x08008295
 80082c0:	08008295 	.word	0x08008295
 80082c4:	08008319 	.word	0x08008319
 80082c8:	08008295 	.word	0x08008295
 80082cc:	08008295 	.word	0x08008295
 80082d0:	08008295 	.word	0x08008295
 80082d4:	08008295 	.word	0x08008295
 80082d8:	08008425 	.word	0x08008425
 80082dc:	08008349 	.word	0x08008349
 80082e0:	08008407 	.word	0x08008407
 80082e4:	08008295 	.word	0x08008295
 80082e8:	08008295 	.word	0x08008295
 80082ec:	08008447 	.word	0x08008447
 80082f0:	08008295 	.word	0x08008295
 80082f4:	08008349 	.word	0x08008349
 80082f8:	08008295 	.word	0x08008295
 80082fc:	08008295 	.word	0x08008295
 8008300:	0800840f 	.word	0x0800840f
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	1d1a      	adds	r2, r3, #4
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	602a      	str	r2, [r5, #0]
 800830c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008314:	2301      	movs	r3, #1
 8008316:	e0a3      	b.n	8008460 <_printf_i+0x1f4>
 8008318:	6820      	ldr	r0, [r4, #0]
 800831a:	6829      	ldr	r1, [r5, #0]
 800831c:	0606      	lsls	r6, r0, #24
 800831e:	f101 0304 	add.w	r3, r1, #4
 8008322:	d50a      	bpl.n	800833a <_printf_i+0xce>
 8008324:	680e      	ldr	r6, [r1, #0]
 8008326:	602b      	str	r3, [r5, #0]
 8008328:	2e00      	cmp	r6, #0
 800832a:	da03      	bge.n	8008334 <_printf_i+0xc8>
 800832c:	232d      	movs	r3, #45	; 0x2d
 800832e:	4276      	negs	r6, r6
 8008330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008334:	485e      	ldr	r0, [pc, #376]	; (80084b0 <_printf_i+0x244>)
 8008336:	230a      	movs	r3, #10
 8008338:	e019      	b.n	800836e <_printf_i+0x102>
 800833a:	680e      	ldr	r6, [r1, #0]
 800833c:	602b      	str	r3, [r5, #0]
 800833e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008342:	bf18      	it	ne
 8008344:	b236      	sxthne	r6, r6
 8008346:	e7ef      	b.n	8008328 <_printf_i+0xbc>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	6820      	ldr	r0, [r4, #0]
 800834c:	1d19      	adds	r1, r3, #4
 800834e:	6029      	str	r1, [r5, #0]
 8008350:	0601      	lsls	r1, r0, #24
 8008352:	d501      	bpl.n	8008358 <_printf_i+0xec>
 8008354:	681e      	ldr	r6, [r3, #0]
 8008356:	e002      	b.n	800835e <_printf_i+0xf2>
 8008358:	0646      	lsls	r6, r0, #25
 800835a:	d5fb      	bpl.n	8008354 <_printf_i+0xe8>
 800835c:	881e      	ldrh	r6, [r3, #0]
 800835e:	4854      	ldr	r0, [pc, #336]	; (80084b0 <_printf_i+0x244>)
 8008360:	2f6f      	cmp	r7, #111	; 0x6f
 8008362:	bf0c      	ite	eq
 8008364:	2308      	moveq	r3, #8
 8008366:	230a      	movne	r3, #10
 8008368:	2100      	movs	r1, #0
 800836a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800836e:	6865      	ldr	r5, [r4, #4]
 8008370:	60a5      	str	r5, [r4, #8]
 8008372:	2d00      	cmp	r5, #0
 8008374:	bfa2      	ittt	ge
 8008376:	6821      	ldrge	r1, [r4, #0]
 8008378:	f021 0104 	bicge.w	r1, r1, #4
 800837c:	6021      	strge	r1, [r4, #0]
 800837e:	b90e      	cbnz	r6, 8008384 <_printf_i+0x118>
 8008380:	2d00      	cmp	r5, #0
 8008382:	d04d      	beq.n	8008420 <_printf_i+0x1b4>
 8008384:	4615      	mov	r5, r2
 8008386:	fbb6 f1f3 	udiv	r1, r6, r3
 800838a:	fb03 6711 	mls	r7, r3, r1, r6
 800838e:	5dc7      	ldrb	r7, [r0, r7]
 8008390:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008394:	4637      	mov	r7, r6
 8008396:	42bb      	cmp	r3, r7
 8008398:	460e      	mov	r6, r1
 800839a:	d9f4      	bls.n	8008386 <_printf_i+0x11a>
 800839c:	2b08      	cmp	r3, #8
 800839e:	d10b      	bne.n	80083b8 <_printf_i+0x14c>
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	07de      	lsls	r6, r3, #31
 80083a4:	d508      	bpl.n	80083b8 <_printf_i+0x14c>
 80083a6:	6923      	ldr	r3, [r4, #16]
 80083a8:	6861      	ldr	r1, [r4, #4]
 80083aa:	4299      	cmp	r1, r3
 80083ac:	bfde      	ittt	le
 80083ae:	2330      	movle	r3, #48	; 0x30
 80083b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083b8:	1b52      	subs	r2, r2, r5
 80083ba:	6122      	str	r2, [r4, #16]
 80083bc:	f8cd a000 	str.w	sl, [sp]
 80083c0:	464b      	mov	r3, r9
 80083c2:	aa03      	add	r2, sp, #12
 80083c4:	4621      	mov	r1, r4
 80083c6:	4640      	mov	r0, r8
 80083c8:	f7ff fee2 	bl	8008190 <_printf_common>
 80083cc:	3001      	adds	r0, #1
 80083ce:	d14c      	bne.n	800846a <_printf_i+0x1fe>
 80083d0:	f04f 30ff 	mov.w	r0, #4294967295
 80083d4:	b004      	add	sp, #16
 80083d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083da:	4835      	ldr	r0, [pc, #212]	; (80084b0 <_printf_i+0x244>)
 80083dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80083e0:	6829      	ldr	r1, [r5, #0]
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80083e8:	6029      	str	r1, [r5, #0]
 80083ea:	061d      	lsls	r5, r3, #24
 80083ec:	d514      	bpl.n	8008418 <_printf_i+0x1ac>
 80083ee:	07df      	lsls	r7, r3, #31
 80083f0:	bf44      	itt	mi
 80083f2:	f043 0320 	orrmi.w	r3, r3, #32
 80083f6:	6023      	strmi	r3, [r4, #0]
 80083f8:	b91e      	cbnz	r6, 8008402 <_printf_i+0x196>
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	f023 0320 	bic.w	r3, r3, #32
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	2310      	movs	r3, #16
 8008404:	e7b0      	b.n	8008368 <_printf_i+0xfc>
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	f043 0320 	orr.w	r3, r3, #32
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	2378      	movs	r3, #120	; 0x78
 8008410:	4828      	ldr	r0, [pc, #160]	; (80084b4 <_printf_i+0x248>)
 8008412:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008416:	e7e3      	b.n	80083e0 <_printf_i+0x174>
 8008418:	0659      	lsls	r1, r3, #25
 800841a:	bf48      	it	mi
 800841c:	b2b6      	uxthmi	r6, r6
 800841e:	e7e6      	b.n	80083ee <_printf_i+0x182>
 8008420:	4615      	mov	r5, r2
 8008422:	e7bb      	b.n	800839c <_printf_i+0x130>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	6826      	ldr	r6, [r4, #0]
 8008428:	6961      	ldr	r1, [r4, #20]
 800842a:	1d18      	adds	r0, r3, #4
 800842c:	6028      	str	r0, [r5, #0]
 800842e:	0635      	lsls	r5, r6, #24
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	d501      	bpl.n	8008438 <_printf_i+0x1cc>
 8008434:	6019      	str	r1, [r3, #0]
 8008436:	e002      	b.n	800843e <_printf_i+0x1d2>
 8008438:	0670      	lsls	r0, r6, #25
 800843a:	d5fb      	bpl.n	8008434 <_printf_i+0x1c8>
 800843c:	8019      	strh	r1, [r3, #0]
 800843e:	2300      	movs	r3, #0
 8008440:	6123      	str	r3, [r4, #16]
 8008442:	4615      	mov	r5, r2
 8008444:	e7ba      	b.n	80083bc <_printf_i+0x150>
 8008446:	682b      	ldr	r3, [r5, #0]
 8008448:	1d1a      	adds	r2, r3, #4
 800844a:	602a      	str	r2, [r5, #0]
 800844c:	681d      	ldr	r5, [r3, #0]
 800844e:	6862      	ldr	r2, [r4, #4]
 8008450:	2100      	movs	r1, #0
 8008452:	4628      	mov	r0, r5
 8008454:	f7f7 fecc 	bl	80001f0 <memchr>
 8008458:	b108      	cbz	r0, 800845e <_printf_i+0x1f2>
 800845a:	1b40      	subs	r0, r0, r5
 800845c:	6060      	str	r0, [r4, #4]
 800845e:	6863      	ldr	r3, [r4, #4]
 8008460:	6123      	str	r3, [r4, #16]
 8008462:	2300      	movs	r3, #0
 8008464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008468:	e7a8      	b.n	80083bc <_printf_i+0x150>
 800846a:	6923      	ldr	r3, [r4, #16]
 800846c:	462a      	mov	r2, r5
 800846e:	4649      	mov	r1, r9
 8008470:	4640      	mov	r0, r8
 8008472:	47d0      	blx	sl
 8008474:	3001      	adds	r0, #1
 8008476:	d0ab      	beq.n	80083d0 <_printf_i+0x164>
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	079b      	lsls	r3, r3, #30
 800847c:	d413      	bmi.n	80084a6 <_printf_i+0x23a>
 800847e:	68e0      	ldr	r0, [r4, #12]
 8008480:	9b03      	ldr	r3, [sp, #12]
 8008482:	4298      	cmp	r0, r3
 8008484:	bfb8      	it	lt
 8008486:	4618      	movlt	r0, r3
 8008488:	e7a4      	b.n	80083d4 <_printf_i+0x168>
 800848a:	2301      	movs	r3, #1
 800848c:	4632      	mov	r2, r6
 800848e:	4649      	mov	r1, r9
 8008490:	4640      	mov	r0, r8
 8008492:	47d0      	blx	sl
 8008494:	3001      	adds	r0, #1
 8008496:	d09b      	beq.n	80083d0 <_printf_i+0x164>
 8008498:	3501      	adds	r5, #1
 800849a:	68e3      	ldr	r3, [r4, #12]
 800849c:	9903      	ldr	r1, [sp, #12]
 800849e:	1a5b      	subs	r3, r3, r1
 80084a0:	42ab      	cmp	r3, r5
 80084a2:	dcf2      	bgt.n	800848a <_printf_i+0x21e>
 80084a4:	e7eb      	b.n	800847e <_printf_i+0x212>
 80084a6:	2500      	movs	r5, #0
 80084a8:	f104 0619 	add.w	r6, r4, #25
 80084ac:	e7f5      	b.n	800849a <_printf_i+0x22e>
 80084ae:	bf00      	nop
 80084b0:	080089c9 	.word	0x080089c9
 80084b4:	080089da 	.word	0x080089da

080084b8 <memmove>:
 80084b8:	4288      	cmp	r0, r1
 80084ba:	b510      	push	{r4, lr}
 80084bc:	eb01 0402 	add.w	r4, r1, r2
 80084c0:	d902      	bls.n	80084c8 <memmove+0x10>
 80084c2:	4284      	cmp	r4, r0
 80084c4:	4623      	mov	r3, r4
 80084c6:	d807      	bhi.n	80084d8 <memmove+0x20>
 80084c8:	1e43      	subs	r3, r0, #1
 80084ca:	42a1      	cmp	r1, r4
 80084cc:	d008      	beq.n	80084e0 <memmove+0x28>
 80084ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084d6:	e7f8      	b.n	80084ca <memmove+0x12>
 80084d8:	4402      	add	r2, r0
 80084da:	4601      	mov	r1, r0
 80084dc:	428a      	cmp	r2, r1
 80084de:	d100      	bne.n	80084e2 <memmove+0x2a>
 80084e0:	bd10      	pop	{r4, pc}
 80084e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084ea:	e7f7      	b.n	80084dc <memmove+0x24>

080084ec <_free_r>:
 80084ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084ee:	2900      	cmp	r1, #0
 80084f0:	d044      	beq.n	800857c <_free_r+0x90>
 80084f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084f6:	9001      	str	r0, [sp, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f1a1 0404 	sub.w	r4, r1, #4
 80084fe:	bfb8      	it	lt
 8008500:	18e4      	addlt	r4, r4, r3
 8008502:	f000 f913 	bl	800872c <__malloc_lock>
 8008506:	4a1e      	ldr	r2, [pc, #120]	; (8008580 <_free_r+0x94>)
 8008508:	9801      	ldr	r0, [sp, #4]
 800850a:	6813      	ldr	r3, [r2, #0]
 800850c:	b933      	cbnz	r3, 800851c <_free_r+0x30>
 800850e:	6063      	str	r3, [r4, #4]
 8008510:	6014      	str	r4, [r2, #0]
 8008512:	b003      	add	sp, #12
 8008514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008518:	f000 b90e 	b.w	8008738 <__malloc_unlock>
 800851c:	42a3      	cmp	r3, r4
 800851e:	d908      	bls.n	8008532 <_free_r+0x46>
 8008520:	6825      	ldr	r5, [r4, #0]
 8008522:	1961      	adds	r1, r4, r5
 8008524:	428b      	cmp	r3, r1
 8008526:	bf01      	itttt	eq
 8008528:	6819      	ldreq	r1, [r3, #0]
 800852a:	685b      	ldreq	r3, [r3, #4]
 800852c:	1949      	addeq	r1, r1, r5
 800852e:	6021      	streq	r1, [r4, #0]
 8008530:	e7ed      	b.n	800850e <_free_r+0x22>
 8008532:	461a      	mov	r2, r3
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	b10b      	cbz	r3, 800853c <_free_r+0x50>
 8008538:	42a3      	cmp	r3, r4
 800853a:	d9fa      	bls.n	8008532 <_free_r+0x46>
 800853c:	6811      	ldr	r1, [r2, #0]
 800853e:	1855      	adds	r5, r2, r1
 8008540:	42a5      	cmp	r5, r4
 8008542:	d10b      	bne.n	800855c <_free_r+0x70>
 8008544:	6824      	ldr	r4, [r4, #0]
 8008546:	4421      	add	r1, r4
 8008548:	1854      	adds	r4, r2, r1
 800854a:	42a3      	cmp	r3, r4
 800854c:	6011      	str	r1, [r2, #0]
 800854e:	d1e0      	bne.n	8008512 <_free_r+0x26>
 8008550:	681c      	ldr	r4, [r3, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	6053      	str	r3, [r2, #4]
 8008556:	4421      	add	r1, r4
 8008558:	6011      	str	r1, [r2, #0]
 800855a:	e7da      	b.n	8008512 <_free_r+0x26>
 800855c:	d902      	bls.n	8008564 <_free_r+0x78>
 800855e:	230c      	movs	r3, #12
 8008560:	6003      	str	r3, [r0, #0]
 8008562:	e7d6      	b.n	8008512 <_free_r+0x26>
 8008564:	6825      	ldr	r5, [r4, #0]
 8008566:	1961      	adds	r1, r4, r5
 8008568:	428b      	cmp	r3, r1
 800856a:	bf04      	itt	eq
 800856c:	6819      	ldreq	r1, [r3, #0]
 800856e:	685b      	ldreq	r3, [r3, #4]
 8008570:	6063      	str	r3, [r4, #4]
 8008572:	bf04      	itt	eq
 8008574:	1949      	addeq	r1, r1, r5
 8008576:	6021      	streq	r1, [r4, #0]
 8008578:	6054      	str	r4, [r2, #4]
 800857a:	e7ca      	b.n	8008512 <_free_r+0x26>
 800857c:	b003      	add	sp, #12
 800857e:	bd30      	pop	{r4, r5, pc}
 8008580:	200007d4 	.word	0x200007d4

08008584 <sbrk_aligned>:
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	4e0e      	ldr	r6, [pc, #56]	; (80085c0 <sbrk_aligned+0x3c>)
 8008588:	460c      	mov	r4, r1
 800858a:	6831      	ldr	r1, [r6, #0]
 800858c:	4605      	mov	r5, r0
 800858e:	b911      	cbnz	r1, 8008596 <sbrk_aligned+0x12>
 8008590:	f000 f8bc 	bl	800870c <_sbrk_r>
 8008594:	6030      	str	r0, [r6, #0]
 8008596:	4621      	mov	r1, r4
 8008598:	4628      	mov	r0, r5
 800859a:	f000 f8b7 	bl	800870c <_sbrk_r>
 800859e:	1c43      	adds	r3, r0, #1
 80085a0:	d00a      	beq.n	80085b8 <sbrk_aligned+0x34>
 80085a2:	1cc4      	adds	r4, r0, #3
 80085a4:	f024 0403 	bic.w	r4, r4, #3
 80085a8:	42a0      	cmp	r0, r4
 80085aa:	d007      	beq.n	80085bc <sbrk_aligned+0x38>
 80085ac:	1a21      	subs	r1, r4, r0
 80085ae:	4628      	mov	r0, r5
 80085b0:	f000 f8ac 	bl	800870c <_sbrk_r>
 80085b4:	3001      	adds	r0, #1
 80085b6:	d101      	bne.n	80085bc <sbrk_aligned+0x38>
 80085b8:	f04f 34ff 	mov.w	r4, #4294967295
 80085bc:	4620      	mov	r0, r4
 80085be:	bd70      	pop	{r4, r5, r6, pc}
 80085c0:	200007d8 	.word	0x200007d8

080085c4 <_malloc_r>:
 80085c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c8:	1ccd      	adds	r5, r1, #3
 80085ca:	f025 0503 	bic.w	r5, r5, #3
 80085ce:	3508      	adds	r5, #8
 80085d0:	2d0c      	cmp	r5, #12
 80085d2:	bf38      	it	cc
 80085d4:	250c      	movcc	r5, #12
 80085d6:	2d00      	cmp	r5, #0
 80085d8:	4607      	mov	r7, r0
 80085da:	db01      	blt.n	80085e0 <_malloc_r+0x1c>
 80085dc:	42a9      	cmp	r1, r5
 80085de:	d905      	bls.n	80085ec <_malloc_r+0x28>
 80085e0:	230c      	movs	r3, #12
 80085e2:	603b      	str	r3, [r7, #0]
 80085e4:	2600      	movs	r6, #0
 80085e6:	4630      	mov	r0, r6
 80085e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085ec:	4e2e      	ldr	r6, [pc, #184]	; (80086a8 <_malloc_r+0xe4>)
 80085ee:	f000 f89d 	bl	800872c <__malloc_lock>
 80085f2:	6833      	ldr	r3, [r6, #0]
 80085f4:	461c      	mov	r4, r3
 80085f6:	bb34      	cbnz	r4, 8008646 <_malloc_r+0x82>
 80085f8:	4629      	mov	r1, r5
 80085fa:	4638      	mov	r0, r7
 80085fc:	f7ff ffc2 	bl	8008584 <sbrk_aligned>
 8008600:	1c43      	adds	r3, r0, #1
 8008602:	4604      	mov	r4, r0
 8008604:	d14d      	bne.n	80086a2 <_malloc_r+0xde>
 8008606:	6834      	ldr	r4, [r6, #0]
 8008608:	4626      	mov	r6, r4
 800860a:	2e00      	cmp	r6, #0
 800860c:	d140      	bne.n	8008690 <_malloc_r+0xcc>
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	4631      	mov	r1, r6
 8008612:	4638      	mov	r0, r7
 8008614:	eb04 0803 	add.w	r8, r4, r3
 8008618:	f000 f878 	bl	800870c <_sbrk_r>
 800861c:	4580      	cmp	r8, r0
 800861e:	d13a      	bne.n	8008696 <_malloc_r+0xd2>
 8008620:	6821      	ldr	r1, [r4, #0]
 8008622:	3503      	adds	r5, #3
 8008624:	1a6d      	subs	r5, r5, r1
 8008626:	f025 0503 	bic.w	r5, r5, #3
 800862a:	3508      	adds	r5, #8
 800862c:	2d0c      	cmp	r5, #12
 800862e:	bf38      	it	cc
 8008630:	250c      	movcc	r5, #12
 8008632:	4629      	mov	r1, r5
 8008634:	4638      	mov	r0, r7
 8008636:	f7ff ffa5 	bl	8008584 <sbrk_aligned>
 800863a:	3001      	adds	r0, #1
 800863c:	d02b      	beq.n	8008696 <_malloc_r+0xd2>
 800863e:	6823      	ldr	r3, [r4, #0]
 8008640:	442b      	add	r3, r5
 8008642:	6023      	str	r3, [r4, #0]
 8008644:	e00e      	b.n	8008664 <_malloc_r+0xa0>
 8008646:	6822      	ldr	r2, [r4, #0]
 8008648:	1b52      	subs	r2, r2, r5
 800864a:	d41e      	bmi.n	800868a <_malloc_r+0xc6>
 800864c:	2a0b      	cmp	r2, #11
 800864e:	d916      	bls.n	800867e <_malloc_r+0xba>
 8008650:	1961      	adds	r1, r4, r5
 8008652:	42a3      	cmp	r3, r4
 8008654:	6025      	str	r5, [r4, #0]
 8008656:	bf18      	it	ne
 8008658:	6059      	strne	r1, [r3, #4]
 800865a:	6863      	ldr	r3, [r4, #4]
 800865c:	bf08      	it	eq
 800865e:	6031      	streq	r1, [r6, #0]
 8008660:	5162      	str	r2, [r4, r5]
 8008662:	604b      	str	r3, [r1, #4]
 8008664:	4638      	mov	r0, r7
 8008666:	f104 060b 	add.w	r6, r4, #11
 800866a:	f000 f865 	bl	8008738 <__malloc_unlock>
 800866e:	f026 0607 	bic.w	r6, r6, #7
 8008672:	1d23      	adds	r3, r4, #4
 8008674:	1af2      	subs	r2, r6, r3
 8008676:	d0b6      	beq.n	80085e6 <_malloc_r+0x22>
 8008678:	1b9b      	subs	r3, r3, r6
 800867a:	50a3      	str	r3, [r4, r2]
 800867c:	e7b3      	b.n	80085e6 <_malloc_r+0x22>
 800867e:	6862      	ldr	r2, [r4, #4]
 8008680:	42a3      	cmp	r3, r4
 8008682:	bf0c      	ite	eq
 8008684:	6032      	streq	r2, [r6, #0]
 8008686:	605a      	strne	r2, [r3, #4]
 8008688:	e7ec      	b.n	8008664 <_malloc_r+0xa0>
 800868a:	4623      	mov	r3, r4
 800868c:	6864      	ldr	r4, [r4, #4]
 800868e:	e7b2      	b.n	80085f6 <_malloc_r+0x32>
 8008690:	4634      	mov	r4, r6
 8008692:	6876      	ldr	r6, [r6, #4]
 8008694:	e7b9      	b.n	800860a <_malloc_r+0x46>
 8008696:	230c      	movs	r3, #12
 8008698:	603b      	str	r3, [r7, #0]
 800869a:	4638      	mov	r0, r7
 800869c:	f000 f84c 	bl	8008738 <__malloc_unlock>
 80086a0:	e7a1      	b.n	80085e6 <_malloc_r+0x22>
 80086a2:	6025      	str	r5, [r4, #0]
 80086a4:	e7de      	b.n	8008664 <_malloc_r+0xa0>
 80086a6:	bf00      	nop
 80086a8:	200007d4 	.word	0x200007d4

080086ac <_realloc_r>:
 80086ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b0:	4680      	mov	r8, r0
 80086b2:	4614      	mov	r4, r2
 80086b4:	460e      	mov	r6, r1
 80086b6:	b921      	cbnz	r1, 80086c2 <_realloc_r+0x16>
 80086b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086bc:	4611      	mov	r1, r2
 80086be:	f7ff bf81 	b.w	80085c4 <_malloc_r>
 80086c2:	b92a      	cbnz	r2, 80086d0 <_realloc_r+0x24>
 80086c4:	f7ff ff12 	bl	80084ec <_free_r>
 80086c8:	4625      	mov	r5, r4
 80086ca:	4628      	mov	r0, r5
 80086cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d0:	f000 f838 	bl	8008744 <_malloc_usable_size_r>
 80086d4:	4284      	cmp	r4, r0
 80086d6:	4607      	mov	r7, r0
 80086d8:	d802      	bhi.n	80086e0 <_realloc_r+0x34>
 80086da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80086de:	d812      	bhi.n	8008706 <_realloc_r+0x5a>
 80086e0:	4621      	mov	r1, r4
 80086e2:	4640      	mov	r0, r8
 80086e4:	f7ff ff6e 	bl	80085c4 <_malloc_r>
 80086e8:	4605      	mov	r5, r0
 80086ea:	2800      	cmp	r0, #0
 80086ec:	d0ed      	beq.n	80086ca <_realloc_r+0x1e>
 80086ee:	42bc      	cmp	r4, r7
 80086f0:	4622      	mov	r2, r4
 80086f2:	4631      	mov	r1, r6
 80086f4:	bf28      	it	cs
 80086f6:	463a      	movcs	r2, r7
 80086f8:	f7ff fbb8 	bl	8007e6c <memcpy>
 80086fc:	4631      	mov	r1, r6
 80086fe:	4640      	mov	r0, r8
 8008700:	f7ff fef4 	bl	80084ec <_free_r>
 8008704:	e7e1      	b.n	80086ca <_realloc_r+0x1e>
 8008706:	4635      	mov	r5, r6
 8008708:	e7df      	b.n	80086ca <_realloc_r+0x1e>
	...

0800870c <_sbrk_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4d06      	ldr	r5, [pc, #24]	; (8008728 <_sbrk_r+0x1c>)
 8008710:	2300      	movs	r3, #0
 8008712:	4604      	mov	r4, r0
 8008714:	4608      	mov	r0, r1
 8008716:	602b      	str	r3, [r5, #0]
 8008718:	f7fb fd70 	bl	80041fc <_sbrk>
 800871c:	1c43      	adds	r3, r0, #1
 800871e:	d102      	bne.n	8008726 <_sbrk_r+0x1a>
 8008720:	682b      	ldr	r3, [r5, #0]
 8008722:	b103      	cbz	r3, 8008726 <_sbrk_r+0x1a>
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	bd38      	pop	{r3, r4, r5, pc}
 8008728:	200007dc 	.word	0x200007dc

0800872c <__malloc_lock>:
 800872c:	4801      	ldr	r0, [pc, #4]	; (8008734 <__malloc_lock+0x8>)
 800872e:	f000 b811 	b.w	8008754 <__retarget_lock_acquire_recursive>
 8008732:	bf00      	nop
 8008734:	200007e0 	.word	0x200007e0

08008738 <__malloc_unlock>:
 8008738:	4801      	ldr	r0, [pc, #4]	; (8008740 <__malloc_unlock+0x8>)
 800873a:	f000 b80c 	b.w	8008756 <__retarget_lock_release_recursive>
 800873e:	bf00      	nop
 8008740:	200007e0 	.word	0x200007e0

08008744 <_malloc_usable_size_r>:
 8008744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008748:	1f18      	subs	r0, r3, #4
 800874a:	2b00      	cmp	r3, #0
 800874c:	bfbc      	itt	lt
 800874e:	580b      	ldrlt	r3, [r1, r0]
 8008750:	18c0      	addlt	r0, r0, r3
 8008752:	4770      	bx	lr

08008754 <__retarget_lock_acquire_recursive>:
 8008754:	4770      	bx	lr

08008756 <__retarget_lock_release_recursive>:
 8008756:	4770      	bx	lr

08008758 <_init>:
 8008758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875a:	bf00      	nop
 800875c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800875e:	bc08      	pop	{r3}
 8008760:	469e      	mov	lr, r3
 8008762:	4770      	bx	lr

08008764 <_fini>:
 8008764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008766:	bf00      	nop
 8008768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800876a:	bc08      	pop	{r3}
 800876c:	469e      	mov	lr, r3
 800876e:	4770      	bx	lr
