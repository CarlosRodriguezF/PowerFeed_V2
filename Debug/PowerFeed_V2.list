
PowerFeed_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007734  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  080078d4  080078d4  000178d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b50  08007b50  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007b50  08007b50  00017b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b58  08007b58  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b58  08007b58  00017b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b5c  08007b5c  00017b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  20000080  08007be0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  08007be0  0002070c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb0b  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002416  00000000  00000000  0002ebbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00030fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  00031f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a25  00000000  00000000  00032e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117c4  00000000  00000000  0004a86d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000904a8  00000000  00000000  0005c031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec4d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047bc  00000000  00000000  000ec52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080078bc 	.word	0x080078bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080078bc 	.word	0x080078bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__gedf2>:
 800085c:	f04f 3cff 	mov.w	ip, #4294967295
 8000860:	e006      	b.n	8000870 <__cmpdf2+0x4>
 8000862:	bf00      	nop

08000864 <__ledf2>:
 8000864:	f04f 0c01 	mov.w	ip, #1
 8000868:	e002      	b.n	8000870 <__cmpdf2+0x4>
 800086a:	bf00      	nop

0800086c <__cmpdf2>:
 800086c:	f04f 0c01 	mov.w	ip, #1
 8000870:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000874:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000878:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800087c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000880:	bf18      	it	ne
 8000882:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000886:	d01b      	beq.n	80008c0 <__cmpdf2+0x54>
 8000888:	b001      	add	sp, #4
 800088a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800088e:	bf0c      	ite	eq
 8000890:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000894:	ea91 0f03 	teqne	r1, r3
 8000898:	bf02      	ittt	eq
 800089a:	ea90 0f02 	teqeq	r0, r2
 800089e:	2000      	moveq	r0, #0
 80008a0:	4770      	bxeq	lr
 80008a2:	f110 0f00 	cmn.w	r0, #0
 80008a6:	ea91 0f03 	teq	r1, r3
 80008aa:	bf58      	it	pl
 80008ac:	4299      	cmppl	r1, r3
 80008ae:	bf08      	it	eq
 80008b0:	4290      	cmpeq	r0, r2
 80008b2:	bf2c      	ite	cs
 80008b4:	17d8      	asrcs	r0, r3, #31
 80008b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ba:	f040 0001 	orr.w	r0, r0, #1
 80008be:	4770      	bx	lr
 80008c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d102      	bne.n	80008d0 <__cmpdf2+0x64>
 80008ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ce:	d107      	bne.n	80008e0 <__cmpdf2+0x74>
 80008d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d1d6      	bne.n	8000888 <__cmpdf2+0x1c>
 80008da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008de:	d0d3      	beq.n	8000888 <__cmpdf2+0x1c>
 80008e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdrcmple>:
 80008e8:	4684      	mov	ip, r0
 80008ea:	4610      	mov	r0, r2
 80008ec:	4662      	mov	r2, ip
 80008ee:	468c      	mov	ip, r1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4663      	mov	r3, ip
 80008f4:	e000      	b.n	80008f8 <__aeabi_cdcmpeq>
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdcmpeq>:
 80008f8:	b501      	push	{r0, lr}
 80008fa:	f7ff ffb7 	bl	800086c <__cmpdf2>
 80008fe:	2800      	cmp	r0, #0
 8000900:	bf48      	it	mi
 8000902:	f110 0f00 	cmnmi.w	r0, #0
 8000906:	bd01      	pop	{r0, pc}

08000908 <__aeabi_dcmpeq>:
 8000908:	f84d ed08 	str.w	lr, [sp, #-8]!
 800090c:	f7ff fff4 	bl	80008f8 <__aeabi_cdcmpeq>
 8000910:	bf0c      	ite	eq
 8000912:	2001      	moveq	r0, #1
 8000914:	2000      	movne	r0, #0
 8000916:	f85d fb08 	ldr.w	pc, [sp], #8
 800091a:	bf00      	nop

0800091c <__aeabi_dcmplt>:
 800091c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000920:	f7ff ffea 	bl	80008f8 <__aeabi_cdcmpeq>
 8000924:	bf34      	ite	cc
 8000926:	2001      	movcc	r0, #1
 8000928:	2000      	movcs	r0, #0
 800092a:	f85d fb08 	ldr.w	pc, [sp], #8
 800092e:	bf00      	nop

08000930 <__aeabi_dcmple>:
 8000930:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000934:	f7ff ffe0 	bl	80008f8 <__aeabi_cdcmpeq>
 8000938:	bf94      	ite	ls
 800093a:	2001      	movls	r0, #1
 800093c:	2000      	movhi	r0, #0
 800093e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000942:	bf00      	nop

08000944 <__aeabi_dcmpge>:
 8000944:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000948:	f7ff ffce 	bl	80008e8 <__aeabi_cdrcmple>
 800094c:	bf94      	ite	ls
 800094e:	2001      	movls	r0, #1
 8000950:	2000      	movhi	r0, #0
 8000952:	f85d fb08 	ldr.w	pc, [sp], #8
 8000956:	bf00      	nop

08000958 <__aeabi_dcmpgt>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff ffc4 	bl	80008e8 <__aeabi_cdrcmple>
 8000960:	bf34      	ite	cc
 8000962:	2001      	movcc	r0, #1
 8000964:	2000      	movcs	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b974 	b.w	8000d4c <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	468e      	mov	lr, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14d      	bne.n	8000b26 <__udivmoddi4+0xaa>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4694      	mov	ip, r2
 8000a8e:	d969      	bls.n	8000b64 <__udivmoddi4+0xe8>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b152      	cbz	r2, 8000aac <__udivmoddi4+0x30>
 8000a96:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9a:	f1c2 0120 	rsb	r1, r2, #32
 8000a9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000aa2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aaa:	4094      	lsls	r4, r2
 8000aac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab0:	0c21      	lsrs	r1, r4, #16
 8000ab2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ab6:	fa1f f78c 	uxth.w	r7, ip
 8000aba:	fb08 e316 	mls	r3, r8, r6, lr
 8000abe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ac2:	fb06 f107 	mul.w	r1, r6, r7
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x64>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ad2:	f080 811f 	bcs.w	8000d14 <__udivmoddi4+0x298>
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	f240 811c 	bls.w	8000d14 <__udivmoddi4+0x298>
 8000adc:	3e02      	subs	r6, #2
 8000ade:	4463      	add	r3, ip
 8000ae0:	1a5b      	subs	r3, r3, r1
 8000ae2:	b2a4      	uxth	r4, r4
 8000ae4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af0:	fb00 f707 	mul.w	r7, r0, r7
 8000af4:	42a7      	cmp	r7, r4
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x92>
 8000af8:	eb1c 0404 	adds.w	r4, ip, r4
 8000afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b00:	f080 810a 	bcs.w	8000d18 <__udivmoddi4+0x29c>
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	f240 8107 	bls.w	8000d18 <__udivmoddi4+0x29c>
 8000b0a:	4464      	add	r4, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b12:	1be4      	subs	r4, r4, r7
 8000b14:	2600      	movs	r6, #0
 8000b16:	b11d      	cbz	r5, 8000b20 <__udivmoddi4+0xa4>
 8000b18:	40d4      	lsrs	r4, r2
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0xc2>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	f000 80ef 	beq.w	8000d0e <__udivmoddi4+0x292>
 8000b30:	2600      	movs	r6, #0
 8000b32:	e9c5 0100 	strd	r0, r1, [r5]
 8000b36:	4630      	mov	r0, r6
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	fab3 f683 	clz	r6, r3
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d14a      	bne.n	8000bdc <__udivmoddi4+0x160>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xd4>
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	f200 80f9 	bhi.w	8000d42 <__udivmoddi4+0x2c6>
 8000b50:	1a84      	subs	r4, r0, r2
 8000b52:	eb61 0303 	sbc.w	r3, r1, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	469e      	mov	lr, r3
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d0e0      	beq.n	8000b20 <__udivmoddi4+0xa4>
 8000b5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b62:	e7dd      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000b64:	b902      	cbnz	r2, 8000b68 <__udivmoddi4+0xec>
 8000b66:	deff      	udf	#255	; 0xff
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	f040 8092 	bne.w	8000c96 <__udivmoddi4+0x21a>
 8000b72:	eba1 010c 	sub.w	r1, r1, ip
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2601      	movs	r6, #1
 8000b80:	0c20      	lsrs	r0, r4, #16
 8000b82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b86:	fb07 1113 	mls	r1, r7, r3, r1
 8000b8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b8e:	fb0e f003 	mul.w	r0, lr, r3
 8000b92:	4288      	cmp	r0, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x12c>
 8000b96:	eb1c 0101 	adds.w	r1, ip, r1
 8000b9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x12a>
 8000ba0:	4288      	cmp	r0, r1
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2c0>
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	1a09      	subs	r1, r1, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x156>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x154>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2ca>
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bda:	e79c      	b.n	8000b16 <__udivmoddi4+0x9a>
 8000bdc:	f1c6 0720 	rsb	r7, r6, #32
 8000be0:	40b3      	lsls	r3, r6
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa20 f407 	lsr.w	r4, r0, r7
 8000bee:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf2:	431c      	orrs	r4, r3
 8000bf4:	40f9      	lsrs	r1, r7
 8000bf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000bfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c02:	0c20      	lsrs	r0, r4, #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fb09 1118 	mls	r1, r9, r8, r1
 8000c0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c10:	fb08 f00e 	mul.w	r0, r8, lr
 8000c14:	4288      	cmp	r0, r1
 8000c16:	fa02 f206 	lsl.w	r2, r2, r6
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b8>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2bc>
 8000c28:	4288      	cmp	r0, r1
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2bc>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4461      	add	r1, ip
 8000c34:	1a09      	subs	r1, r1, r0
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c48:	458e      	cmp	lr, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1e2>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2b4>
 8000c56:	458e      	cmp	lr, r1
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2b4>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c62:	fba0 9402 	umull	r9, r4, r0, r2
 8000c66:	eba1 010e 	sub.w	r1, r1, lr
 8000c6a:	42a1      	cmp	r1, r4
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46a6      	mov	lr, r4
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x2a4>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x2a0>
 8000c74:	b15d      	cbz	r5, 8000c8e <__udivmoddi4+0x212>
 8000c76:	ebb3 0208 	subs.w	r2, r3, r8
 8000c7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c82:	fa22 f306 	lsr.w	r3, r2, r6
 8000c86:	40f1      	lsrs	r1, r6
 8000c88:	431f      	orrs	r7, r3
 8000c8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c8e:	2600      	movs	r6, #0
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	f1c2 0320 	rsb	r3, r2, #32
 8000c9a:	40d8      	lsrs	r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	4301      	orrs	r1, r0
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb8:	0c0b      	lsrs	r3, r1, #16
 8000cba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x260>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd4:	429e      	cmp	r6, r3
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	b289      	uxth	r1, r1
 8000ce0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ce4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cec:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x28a>
 8000cf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000d02:	3e02      	subs	r6, #2
 8000d04:	4461      	add	r1, ip
 8000d06:	1ac9      	subs	r1, r1, r3
 8000d08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0x104>
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e705      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e3      	b.n	8000ae0 <__udivmoddi4+0x64>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6f8      	b.n	8000b0e <__udivmoddi4+0x92>
 8000d1c:	454b      	cmp	r3, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f8>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f8>
 8000d2c:	4646      	mov	r6, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x28a>
 8000d30:	4620      	mov	r0, r4
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1e2>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x260>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b8>
 8000d3c:	3b02      	subs	r3, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x12c>
 8000d42:	4630      	mov	r0, r6
 8000d44:	e709      	b.n	8000b5a <__udivmoddi4+0xde>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x156>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <LiquidCrystal_I2C>:
}
*/



void LiquidCrystal_I2C(uint8_t lcd_addr, uint8_t lcd_cols, uint8_t lcd_rows) {
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	71bb      	strb	r3, [r7, #6]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	717b      	strb	r3, [r7, #5]
	_addr = lcd_addr;
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <LiquidCrystal_I2C+0x3c>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	7013      	strb	r3, [r2, #0]
	_cols = lcd_cols;
 8000d68:	4a09      	ldr	r2, [pc, #36]	; (8000d90 <LiquidCrystal_I2C+0x40>)
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	7013      	strb	r3, [r2, #0]
	_rows = lcd_rows;
 8000d6e:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <LiquidCrystal_I2C+0x44>)
 8000d70:	797b      	ldrb	r3, [r7, #5]
 8000d72:	7013      	strb	r3, [r2, #0]
	_charsize = LCD_5x8DOTS;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <LiquidCrystal_I2C+0x48>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
	_backlightval = LCD_BACKLIGHT;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <LiquidCrystal_I2C+0x4c>)
 8000d7c:	2208      	movs	r2, #8
 8000d7e:	701a      	strb	r2, [r3, #0]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	2000009c 	.word	0x2000009c
 8000d90:	200000a0 	.word	0x200000a0
 8000d94:	200000a1 	.word	0x200000a1
 8000d98:	200000a2 	.word	0x200000a2
 8000d9c:	200000a3 	.word	0x200000a3

08000da0 <lcdBegin>:

void lcdBegin(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000da4:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <lcdBegin+0xd0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]

	if (_rows > 1) {
 8000daa:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <lcdBegin+0xd4>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d906      	bls.n	8000dc0 <lcdBegin+0x20>
		_displayfunction |= LCD_2LINE;
 8000db2:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <lcdBegin+0xd0>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	f043 0308 	orr.w	r3, r3, #8
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <lcdBegin+0xd0>)
 8000dbe:	701a      	strb	r2, [r3, #0]
	}

	setRowOffsets(0x00, 0x40, 0x00 + _cols, 0x40 + _cols);
 8000dc0:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <lcdBegin+0xd8>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <lcdBegin+0xd8>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	3340      	adds	r3, #64	; 0x40
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f000 f900 	bl	8000fd4 <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((_charsize != 0) && (_rows == 1)) {
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <lcdBegin+0xdc>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d00a      	beq.n	8000df2 <lcdBegin+0x52>
 8000ddc:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <lcdBegin+0xd4>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d106      	bne.n	8000df2 <lcdBegin+0x52>
		_displayfunction |= LCD_5x10DOTS;
 8000de4:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <lcdBegin+0xd0>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <lcdBegin+0xd0>)
 8000df0:	701a      	strb	r2, [r3, #0]
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	HAL_Delay(50);
 8000df2:	2032      	movs	r0, #50	; 0x32
 8000df4:	f003 f8e2 	bl	8003fbc <HAL_Delay>

	// Now we pull both RS and R/W low to begin commands
	write8bits(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <lcdBegin+0xe0>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f959 	bl	80010b4 <write8bits>
	HAL_Delay(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f003 f8da 	bl	8003fbc <HAL_Delay>
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	write4bits(0x03 << 4);
 8000e08:	2030      	movs	r0, #48	; 0x30
 8000e0a:	f000 f941 	bl	8001090 <write4bits>
	HAL_Delay(5); // wait min 4.1ms
 8000e0e:	2005      	movs	r0, #5
 8000e10:	f003 f8d4 	bl	8003fbc <HAL_Delay>

	// second try
	write4bits(0x03 << 4);
 8000e14:	2030      	movs	r0, #48	; 0x30
 8000e16:	f000 f93b 	bl	8001090 <write4bits>
	HAL_Delay(5); // wait min 4.1ms
 8000e1a:	2005      	movs	r0, #5
 8000e1c:	f003 f8ce 	bl	8003fbc <HAL_Delay>

	// third go!
	write4bits(0x03 << 4);
 8000e20:	2030      	movs	r0, #48	; 0x30
 8000e22:	f000 f935 	bl	8001090 <write4bits>
	HAL_Delay(5);
 8000e26:	2005      	movs	r0, #5
 8000e28:	f003 f8c8 	bl	8003fbc <HAL_Delay>

	// finally, set to 4-bit interface
	write4bits(0x02 << 4);
 8000e2c:	2020      	movs	r0, #32
 8000e2e:	f000 f92f 	bl	8001090 <write4bits>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <lcdBegin+0xd0>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	f043 0320 	orr.w	r3, r3, #32
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f8bb 	bl	8000fb8 <command>

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <lcdBegin+0xe4>)
 8000e44:	2204      	movs	r2, #4
 8000e46:	701a      	strb	r2, [r3, #0]
	lcdDisplay();
 8000e48:	f000 f834 	bl	8000eb4 <lcdDisplay>

	// clear it off
	lcdClear();
 8000e4c:	f000 f81e 	bl	8000e8c <lcdClear>

	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <lcdBegin+0xe8>)
 8000e52:	2202      	movs	r2, #2
 8000e54:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <lcdBegin+0xe8>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 f8a9 	bl	8000fb8 <command>

	lcdHome();
 8000e66:	f000 f81b 	bl	8000ea0 <lcdHome>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000009d 	.word	0x2000009d
 8000e74:	200000a1 	.word	0x200000a1
 8000e78:	200000a0 	.word	0x200000a0
 8000e7c:	200000a2 	.word	0x200000a2
 8000e80:	200000a3 	.word	0x200000a3
 8000e84:	2000009e 	.word	0x2000009e
 8000e88:	2000009f 	.word	0x2000009f

08000e8c <lcdClear>:

/********** high level commands, for the user! */
void lcdClear(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 8000e90:	2001      	movs	r0, #1
 8000e92:	f000 f891 	bl	8000fb8 <command>
	HAL_Delay(2);  // this command takes a long time!
 8000e96:	2002      	movs	r0, #2
 8000e98:	f003 f890 	bl	8003fbc <HAL_Delay>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <lcdHome>:

void lcdHome(void) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	command(LCD_RETURNHOME);  // set cursor position to zero
 8000ea4:	2002      	movs	r0, #2
 8000ea6:	f000 f887 	bl	8000fb8 <command>
	HAL_Delay(2);  // this command takes a long time!
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f003 f886 	bl	8003fbc <HAL_Delay>
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <lcdDisplay>:
// Turn the display on/off (quickly)
void lcdNoDisplay(void) {
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void lcdDisplay(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <lcdDisplay+0x28>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <lcdDisplay+0x28>)
 8000ec4:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <lcdDisplay+0x28>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	f043 0308 	orr.w	r3, r3, #8
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f871 	bl	8000fb8 <command>
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000009e 	.word	0x2000009e

08000ee0 <lcdSetCursor>:
	for (int i = 0; i < 8; i++) {
		lcdWrite(charmap[i]);
	}
}

void lcdSetCursor(uint8_t col, uint8_t row) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460a      	mov	r2, r1
 8000eea:	71fb      	strb	r3, [r7, #7]
 8000eec:	4613      	mov	r3, r2
 8000eee:	71bb      	strb	r3, [r7, #6]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 8000ef4:	79bb      	ldrb	r3, [r7, #6]
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d803      	bhi.n	8000f04 <lcdSetCursor+0x24>
		row = max_lines - 1;    // we count rows starting w/0
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	3b01      	subs	r3, #1
 8000f02:	71bb      	strb	r3, [r7, #6]
	}
	if ( row >= _rows ) {
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <lcdSetCursor+0x5c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	79ba      	ldrb	r2, [r7, #6]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d303      	bcc.n	8000f16 <lcdSetCursor+0x36>
		row = _rows - 1;   		// we count rows starting w/0
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <lcdSetCursor+0x5c>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	71bb      	strb	r3, [r7, #6]
	}

	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <lcdSetCursor+0x60>)
 8000f1a:	5cd2      	ldrb	r2, [r2, r3]
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f843 	bl	8000fb8 <command>
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200000a1 	.word	0x200000a1
 8000f40:	200000a4 	.word	0x200000a4

08000f44 <lcdPrint>:

// This will print character string to the LCD
size_t lcdPrint(const char str[]) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	if (str == NULL) return 0;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <lcdPrint+0x12>
 8000f52:	2300      	movs	r3, #0
 8000f54:	e01d      	b.n	8000f92 <lcdPrint+0x4e>

	const uint8_t *buffer = (const uint8_t *)str;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	617b      	str	r3, [r7, #20]
	size_t size = strlen(str);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff f940 	bl	80001e0 <strlen>
 8000f60:	6138      	str	r0, [r7, #16]
	size_t n = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]

	while (size--) {
 8000f66:	e00c      	b.n	8000f82 <lcdPrint+0x3e>
	if (lcdWrite(*buffer++)) n++;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	617a      	str	r2, [r7, #20]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 f812 	bl	8000f9a <lcdWrite>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d008      	beq.n	8000f8e <lcdPrint+0x4a>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	60fb      	str	r3, [r7, #12]
	while (size--) {
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1e5a      	subs	r2, r3, #1
 8000f86:	613a      	str	r2, [r7, #16]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1ed      	bne.n	8000f68 <lcdPrint+0x24>
 8000f8c:	e000      	b.n	8000f90 <lcdPrint+0x4c>
	else break;
 8000f8e:	bf00      	nop
	}
	return n;
 8000f90:	68fb      	ldr	r3, [r7, #12]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <lcdWrite>:

/*********** mid level commands, for sending data/cmds */
size_t lcdWrite(uint8_t value) {
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	71fb      	strb	r3, [r7, #7]
	send(value, Rs);
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 f850 	bl	800104e <send>
	return 1;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <command>:

void command(uint8_t value) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	send(value, 0);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f841 	bl	800104e <send>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <setRowOffsets>:

/************ low level data pushing commands **********/
void setRowOffsets(int row0, int row1, int row2, int row3) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <setRowOffsets+0x3c>)
 8000fe8:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <setRowOffsets+0x3c>)
 8000ff0:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <setRowOffsets+0x3c>)
 8000ff8:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <setRowOffsets+0x3c>)
 8001000:	70da      	strb	r2, [r3, #3]
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200000a4 	.word	0x200000a4

08001014 <pulseEnable>:

void pulseEnable(uint8_t _data) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	write8bits(_data | En);		// En high
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f844 	bl	80010b4 <write8bits>
	HAL_Delay(1);
 800102c:	2001      	movs	r0, #1
 800102e:	f002 ffc5 	bl	8003fbc <HAL_Delay>
	//DWT_Delay_us(5);		// enable pulse must be >450ns //To Be Checked

	write8bits(_data & ~En);	// En low
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f023 0304 	bic.w	r3, r3, #4
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f83a 	bl	80010b4 <write8bits>
	HAL_Delay(1);
 8001040:	2001      	movs	r0, #1
 8001042:	f002 ffbb 	bl	8003fbc <HAL_Delay>
	//DWT_Delay_us(1);		// commands need > 37us to settle //To Be Checked
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <send>:

// write either command or data
void send(uint8_t value, uint8_t mode) {
 800104e:	b580      	push	{r7, lr}
 8001050:	b084      	sub	sp, #16
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	460a      	mov	r2, r1
 8001058:	71fb      	strb	r3, [r7, #7]
 800105a:	4613      	mov	r3, r2
 800105c:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib = value & 0xf0;
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f023 030f 	bic.w	r3, r3, #15
 8001064:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (value << 4) & 0xf0;
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	73bb      	strb	r3, [r7, #14]
	write4bits((highnib) | mode);
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	4313      	orrs	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f000 f80b 	bl	8001090 <write4bits>
	write4bits((lownib) | mode);
 800107a:	7bba      	ldrb	r2, [r7, #14]
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	4313      	orrs	r3, r2
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f804 	bl	8001090 <write4bits>
}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <write4bits>:

void write4bits(uint8_t value) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	write8bits(value);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f809 	bl	80010b4 <write8bits>
	pulseEnable(value);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ffb5 	bl	8001014 <pulseEnable>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <write8bits>:

void write8bits(uint8_t _data){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	uint8_t data_t[1];
	data_t[0] = _data | _backlightval;
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <write8bits+0x34>)
 80010c0:	781a      	ldrb	r2, [r3, #0]
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit (&hi2c1, _addr, (uint8_t *) data_t, 1, 100);
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <write8bits+0x38>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b299      	uxth	r1, r3
 80010d0:	f107 020c 	add.w	r2, r7, #12
 80010d4:	2364      	movs	r3, #100	; 0x64
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <write8bits+0x3c>)
 80010dc:	f003 fe86 	bl	8004dec <HAL_I2C_Master_Transmit>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200000a3 	.word	0x200000a3
 80010ec:	2000009c 	.word	0x2000009c
 80010f0:	200004a8 	.word	0x200004a8

080010f4 <ee_init>:
uint8_t ee_ram[_EE_USE_RAM_BYTE];
#endif

//##########################################################################################################
bool ee_init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  return ee_read(0, _EE_USE_RAM_BYTE, NULL);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 f840 	bl	8001184 <ee_read>
 8001104:	4603      	mov	r3, r0
#else
  return true;
#endif
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <ee_format>:
//##########################################################################################################
bool ee_format(bool keepRamData)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  uint32_t error;
  HAL_FLASH_Unlock();
 8001116:	f003 f8db 	bl	80042d0 <HAL_FLASH_Unlock>
#if _EE_PAGE_OR_SECTOR == PAGE
	flashErase.NbPages = 1;
  flashErase.PageAddress = _EE_ADDR_INUSE;
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
#elif _EE_PAGE_OR_SECTOR == SECTOR
  flashErase.NbSectors = 1;
 800111a:	2301      	movs	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
  //flashErase.Sector =  _EE_ADDR_INUSE;
  flashErase.Sector =  _EE_USE_FLASH_PAGE_OR_SECTOR;
 800111e:	2305      	movs	r3, #5
 8001120:	613b      	str	r3, [r7, #16]
  flashErase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
  flashErase.NbPages = 1;
  flashErase.Page = _EE_USE_FLASH_PAGE_OR_SECTOR;
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
#endif
#ifdef _EE_FLASH_BANK
  flashErase.Banks = _EE_FLASH_BANK;
 8001126:	2301      	movs	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
#endif
#ifdef _EE_VOLTAGE_RANGE
  flashErase.VoltageRange = _EE_VOLTAGE_RANGE;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
#endif
  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 800112e:	f107 021c 	add.w	r2, r7, #28
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f003 fa3b 	bl	80045b4 <HAL_FLASHEx_Erase>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d115      	bne.n	8001170 <ee_format+0x64>
  {
    HAL_FLASH_Lock();
 8001144:	f003 f8e6 	bl	8004314 <HAL_FLASH_Lock>
    if (error != 0xFFFFFFFF)
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114e:	d001      	beq.n	8001154 <ee_format+0x48>
      return false;
 8001150:	2300      	movs	r3, #0
 8001152:	e010      	b.n	8001176 <ee_format+0x6a>
    else
    {
#if (_EE_USE_RAM_BYTE > 0)
      if (keepRamData == false)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f083 0301 	eor.w	r3, r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <ee_format+0x60>
        memset(ee_ram, 0xFF, _EE_USE_RAM_BYTE);
 8001160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001164:	21ff      	movs	r1, #255	; 0xff
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <ee_format+0x74>)
 8001168:	f005 ff40 	bl	8006fec <memset>
#endif
      return true;
 800116c:	2301      	movs	r3, #1
 800116e:	e002      	b.n	8001176 <ee_format+0x6a>
    }
  }
  HAL_FLASH_Lock();
 8001170:	f003 f8d0 	bl	8004314 <HAL_FLASH_Lock>
  return false;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3720      	adds	r7, #32
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200000a8 	.word	0x200000a8

08001184 <ee_read>:
//##########################################################################################################
bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	4413      	add	r3, r2
 8001196:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800119a:	d901      	bls.n	80011a0 <ee_read+0x1c>
    return false;
 800119c:	2300      	movs	r3, #0
 800119e:	e02b      	b.n	80011f8 <ee_read+0x74>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	e021      	b.n	80011ea <ee_read+0x66>
  {
    if (data != NULL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00b      	beq.n	80011c4 <ee_read+0x40>
    {
      *data = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80011b2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	701a      	strb	r2, [r3, #0]
      data++;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3301      	adds	r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
    }
#if (_EE_USE_RAM_BYTE > 0)
    if (i < _EE_USE_RAM_BYTE)
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ca:	d20b      	bcs.n	80011e4 <ee_read+0x60>
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80011d2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b2d9      	uxtb	r1, r3
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <ee_read+0x80>)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	4413      	add	r3, r2
 80011e0:	460a      	mov	r2, r1
 80011e2:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	3301      	adds	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3d7      	bcc.n	80011a6 <ee_read+0x22>
#endif
  }
  return true;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	200000a8 	.word	0x200000a8

08001208 <ee_write>:
//##########################################################################################################
bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 8001208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800120c:	b0a6      	sub	sp, #152	; 0x98
 800120e:	af00      	add	r7, sp, #0
 8001210:	67f8      	str	r0, [r7, #124]	; 0x7c
 8001212:	67b9      	str	r1, [r7, #120]	; 0x78
 8001214:	677a      	str	r2, [r7, #116]	; 0x74
  if ((startVirtualAddress + len) > _EE_SIZE)
 8001216:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001218:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800121a:	4413      	add	r3, r2
 800121c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001220:	d901      	bls.n	8001226 <ee_write+0x1e>
    return false;
 8001222:	2300      	movs	r3, #0
 8001224:	e14f      	b.n	80014c6 <ee_write+0x2be>
  if (data == NULL)
 8001226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <ee_write+0x28>
    return false;
 800122c:	2300      	movs	r3, #0
 800122e:	e14a      	b.n	80014c6 <ee_write+0x2be>
  HAL_FLASH_Unlock();
 8001230:	f003 f84e 	bl	80042d0 <HAL_FLASH_Unlock>
#ifdef FLASH_TYPEPROGRAM_BYTE
  for (uint32_t i = 0; i < len ; i++)
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800123a:	e021      	b.n	8001280 <ee_write+0x78>
  {		
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i])) != HAL_OK)
 800123c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001240:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001242:	4413      	add	r3, r2
 8001244:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8001248:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 800124c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800124e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001252:	4413      	add	r3, r2
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2200      	movs	r2, #0
 800125a:	461c      	mov	r4, r3
 800125c:	4615      	mov	r5, r2
 800125e:	4622      	mov	r2, r4
 8001260:	462b      	mov	r3, r5
 8001262:	2000      	movs	r0, #0
 8001264:	f002 ffe0 	bl	8004228 <HAL_FLASH_Program>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <ee_write+0x6e>
    {
      HAL_FLASH_Lock();
 800126e:	f003 f851 	bl	8004314 <HAL_FLASH_Lock>
      return true;
 8001272:	2301      	movs	r3, #1
 8001274:	e127      	b.n	80014c6 <ee_write+0x2be>
  for (uint32_t i = 0; i < len ; i++)
 8001276:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800127a:	3301      	adds	r3, #1
 800127c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001280:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001286:	429a      	cmp	r2, r3
 8001288:	d3d8      	bcc.n	800123c <ee_write+0x34>
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_HALFWORD
  for (uint32_t i = 0; i < len ; i+=2)
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001290:	e029      	b.n	80012e6 <ee_write+0xde>
  {		
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i] | (data[i+1] << 8))) != HAL_OK)
 8001292:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001296:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001298:	4413      	add	r3, r2
 800129a:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800129e:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 80012a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80012a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012a8:	4413      	add	r3, r2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012b6:	4413      	add	r3, r2
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	4303      	orrs	r3, r0
 80012be:	17da      	asrs	r2, r3, #31
 80012c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80012c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80012c4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80012c8:	2001      	movs	r0, #1
 80012ca:	f002 ffad 	bl	8004228 <HAL_FLASH_Program>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <ee_write+0xd4>
    {
      HAL_FLASH_Lock();
 80012d4:	f003 f81e 	bl	8004314 <HAL_FLASH_Lock>
      return true;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0f4      	b.n	80014c6 <ee_write+0x2be>
  for (uint32_t i = 0; i < len ; i+=2)
 80012dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012e0:	3302      	adds	r3, #2
 80012e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012e6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80012ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d3d0      	bcc.n	8001292 <ee_write+0x8a>
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_DOUBLEWORD
  for (uint32_t i = 0; i < len; i += 8)
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80012f6:	e0dd      	b.n	80014b4 <ee_write+0x2ac>
  {
    uint64_t data64 = data[i];
 80012f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80012fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012fe:	4413      	add	r3, r2
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2200      	movs	r2, #0
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
 8001308:	62fa      	str	r2, [r7, #44]	; 0x2c
 800130a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800130e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 1] * 0x100;
 8001312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800131a:	4413      	add	r3, r2
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	17da      	asrs	r2, r3, #31
 8001322:	663b      	str	r3, [r7, #96]	; 0x60
 8001324:	667a      	str	r2, [r7, #100]	; 0x64
 8001326:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800132a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800132e:	4621      	mov	r1, r4
 8001330:	1851      	adds	r1, r2, r1
 8001332:	6239      	str	r1, [r7, #32]
 8001334:	4629      	mov	r1, r5
 8001336:	414b      	adcs	r3, r1
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
 800133a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800133e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 2] * 0x10000;
 8001342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001346:	1c9a      	adds	r2, r3, #2
 8001348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800134a:	4413      	add	r3, r2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	041b      	lsls	r3, r3, #16
 8001350:	17da      	asrs	r2, r3, #31
 8001352:	65bb      	str	r3, [r7, #88]	; 0x58
 8001354:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001356:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800135a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800135e:	4621      	mov	r1, r4
 8001360:	1851      	adds	r1, r2, r1
 8001362:	61b9      	str	r1, [r7, #24]
 8001364:	4629      	mov	r1, r5
 8001366:	414b      	adcs	r3, r1
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800136e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 3] * 0x1000000;
 8001372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001376:	1cda      	adds	r2, r3, #3
 8001378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	061b      	lsls	r3, r3, #24
 8001380:	17da      	asrs	r2, r3, #31
 8001382:	653b      	str	r3, [r7, #80]	; 0x50
 8001384:	657a      	str	r2, [r7, #84]	; 0x54
 8001386:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800138a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800138e:	4621      	mov	r1, r4
 8001390:	1851      	adds	r1, r2, r1
 8001392:	6139      	str	r1, [r7, #16]
 8001394:	4629      	mov	r1, r5
 8001396:	414b      	adcs	r3, r1
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800139e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 4] * 0x100000000;
 80013a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013a6:	1d1a      	adds	r2, r3, #4
 80013a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2200      	movs	r2, #0
 80013b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80013b4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80013c0:	000b      	movs	r3, r1
 80013c2:	2200      	movs	r2, #0
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80013cc:	1814      	adds	r4, r2, r0
 80013ce:	60bc      	str	r4, [r7, #8]
 80013d0:	414b      	adcs	r3, r1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013d8:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 5] * 0x10000000000;
 80013dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013e0:	1d5a      	adds	r2, r3, #5
 80013e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013e4:	4413      	add	r3, r2
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2200      	movs	r2, #0
 80013ec:	643b      	str	r3, [r7, #64]	; 0x40
 80013ee:	647a      	str	r2, [r7, #68]	; 0x44
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80013fa:	020b      	lsls	r3, r1, #8
 80013fc:	2200      	movs	r2, #0
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001406:	1814      	adds	r4, r2, r0
 8001408:	603c      	str	r4, [r7, #0]
 800140a:	414b      	adcs	r3, r1
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001412:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 6] * 0x1000000000000;
 8001416:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800141a:	1d9a      	adds	r2, r3, #6
 800141c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800141e:	4413      	add	r3, r2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2200      	movs	r2, #0
 8001426:	63bb      	str	r3, [r7, #56]	; 0x38
 8001428:	63fa      	str	r2, [r7, #60]	; 0x3c
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001434:	040b      	lsls	r3, r1, #16
 8001436:	2200      	movs	r2, #0
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001440:	eb12 0a00 	adds.w	sl, r2, r0
 8001444:	eb43 0b01 	adc.w	fp, r3, r1
 8001448:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
    data64 += data[i + 7] * 0x100000000000000;
 800144c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001450:	1dda      	adds	r2, r3, #7
 8001452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001454:	4413      	add	r3, r2
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2200      	movs	r2, #0
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
 800145e:	637a      	str	r2, [r7, #52]	; 0x34
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800146a:	060b      	lsls	r3, r1, #24
 800146c:	2200      	movs	r2, #0
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001476:	eb12 0800 	adds.w	r8, r2, r0
 800147a:	eb43 0901 	adc.w	r9, r3, r1
 800147e:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, data64) != HAL_OK)
 8001482:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001486:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001488:	4413      	add	r3, r2
 800148a:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800148e:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 8001492:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001496:	2003      	movs	r0, #3
 8001498:	f002 fec6 	bl	8004228 <HAL_FLASH_Program>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <ee_write+0x2a2>
    {
      HAL_FLASH_Lock();
 80014a2:	f002 ff37 	bl	8004314 <HAL_FLASH_Lock>
      return true;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00d      	b.n	80014c6 <ee_write+0x2be>
  for (uint32_t i = 0; i < len; i += 8)
 80014aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80014ae:	3308      	adds	r3, #8
 80014b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80014b4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80014b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014ba:	429a      	cmp	r2, r3
 80014bc:	f4ff af1c 	bcc.w	80012f8 <ee_write+0xf0>
    }
  }
#endif
  HAL_FLASH_Lock();
 80014c0:	f002 ff28 	bl	8004314 <HAL_FLASH_Lock>
  return true;
 80014c4:	2301      	movs	r3, #1
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3798      	adds	r7, #152	; 0x98
 80014ca:	46bd      	mov	sp, r7
 80014cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080014d0 <ee_writeToRam>:
//##########################################################################################################
bool ee_writeToRam(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
#if (_EE_USE_RAM_BYTE > 0)
  if ((startVirtualAddress + len) > _EE_USE_RAM_BYTE)
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	4413      	add	r3, r2
 80014e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e6:	d901      	bls.n	80014ec <ee_writeToRam+0x1c>
    return false;
 80014e8:	2300      	movs	r3, #0
 80014ea:	e00d      	b.n	8001508 <ee_writeToRam+0x38>
  if (data == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <ee_writeToRam+0x26>
    return false;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e008      	b.n	8001508 <ee_writeToRam+0x38>
  memcpy(&ee_ram[startVirtualAddress], data, len);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4a05      	ldr	r2, [pc, #20]	; (8001510 <ee_writeToRam+0x40>)
 80014fa:	4413      	add	r3, r2
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	f005 fd65 	bl	8006fd0 <memcpy>
  return true;
 8001506:	2301      	movs	r3, #1
#else
  return false;
#endif
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200000a8 	.word	0x200000a8

08001514 <ee_commit>:
//##########################################################################################################
bool  ee_commit(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  if (ee_format(true) == false)
 8001518:	2001      	movs	r0, #1
 800151a:	f7ff fdf7 	bl	800110c <ee_format>
 800151e:	4603      	mov	r3, r0
 8001520:	f083 0301 	eor.w	r3, r3, #1
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <ee_commit+0x1a>
    return false;
 800152a:	2300      	movs	r3, #0
 800152c:	e006      	b.n	800153c <ee_commit+0x28>
  return ee_write(0, _EE_USE_RAM_BYTE, ee_ram);
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <ee_commit+0x2c>)
 8001530:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001534:	2000      	movs	r0, #0
 8001536:	f7ff fe67 	bl	8001208 <ee_write>
 800153a:	4603      	mov	r3, r0
#else
  return false;
#endif
}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200000a8 	.word	0x200000a8
 8001544:	00000000 	.word	0x00000000

08001548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//Initialization Struct
	parameter.en_invert = 0;
 800154e:	4bb2      	ldr	r3, [pc, #712]	; (8001818 <main+0x2d0>)
 8001550:	2200      	movs	r2, #0
 8001552:	801a      	strh	r2, [r3, #0]
	parameter.dir_invert = 0;
 8001554:	4bb0      	ldr	r3, [pc, #704]	; (8001818 <main+0x2d0>)
 8001556:	2200      	movs	r2, #0
 8001558:	805a      	strh	r2, [r3, #2]
	parameter.motor_stepsrev = 0;
 800155a:	4baf      	ldr	r3, [pc, #700]	; (8001818 <main+0x2d0>)
 800155c:	2200      	movs	r2, #0
 800155e:	809a      	strh	r2, [r3, #4]
	parameter.leadscrew_pitch = 0;
 8001560:	4bad      	ldr	r3, [pc, #692]	; (8001818 <main+0x2d0>)
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	f8c3 2006 	str.w	r2, [r3, #6]
	parameter.max_feedrate = 0;
 800156a:	4bab      	ldr	r3, [pc, #684]	; (8001818 <main+0x2d0>)
 800156c:	2200      	movs	r2, #0
 800156e:	815a      	strh	r2, [r3, #10]
	parameter.fast_movement_feedrate = 0;
 8001570:	4ba9      	ldr	r3, [pc, #676]	; (8001818 <main+0x2d0>)
 8001572:	2200      	movs	r2, #0
 8001574:	819a      	strh	r2, [r3, #12]
	parameter.acc_time = 0;
 8001576:	4ba8      	ldr	r3, [pc, #672]	; (8001818 <main+0x2d0>)
 8001578:	2200      	movs	r2, #0
 800157a:	81da      	strh	r2, [r3, #14]
	parameter.acc_update_ratio = 0;
 800157c:	4ba6      	ldr	r3, [pc, #664]	; (8001818 <main+0x2d0>)
 800157e:	2200      	movs	r2, #0
 8001580:	821a      	strh	r2, [r3, #16]
	parameter.initial_feedrate = 0;
 8001582:	4ba5      	ldr	r3, [pc, #660]	; (8001818 <main+0x2d0>)
 8001584:	2200      	movs	r2, #0
 8001586:	825a      	strh	r2, [r3, #18]
	parameter.first_load = 0;
 8001588:	4ba3      	ldr	r3, [pc, #652]	; (8001818 <main+0x2d0>)
 800158a:	2200      	movs	r2, #0
 800158c:	829a      	strh	r2, [r3, #20]
	//Default values for parameters
	default_parameter.en_invert = 0;
 800158e:	4ba3      	ldr	r3, [pc, #652]	; (800181c <main+0x2d4>)
 8001590:	2200      	movs	r2, #0
 8001592:	801a      	strh	r2, [r3, #0]
	default_parameter.dir_invert = 0;
 8001594:	4ba1      	ldr	r3, [pc, #644]	; (800181c <main+0x2d4>)
 8001596:	2200      	movs	r2, #0
 8001598:	805a      	strh	r2, [r3, #2]
	default_parameter.motor_stepsrev = 1600;
 800159a:	4ba0      	ldr	r3, [pc, #640]	; (800181c <main+0x2d4>)
 800159c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80015a0:	809a      	strh	r2, [r3, #4]
	default_parameter.leadscrew_pitch = 2;
 80015a2:	4b9e      	ldr	r3, [pc, #632]	; (800181c <main+0x2d4>)
 80015a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015a8:	f8c3 2006 	str.w	r2, [r3, #6]
	default_parameter.max_feedrate = 500;
 80015ac:	4b9b      	ldr	r3, [pc, #620]	; (800181c <main+0x2d4>)
 80015ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015b2:	815a      	strh	r2, [r3, #10]
	default_parameter.fast_movement_feedrate = 500;
 80015b4:	4b99      	ldr	r3, [pc, #612]	; (800181c <main+0x2d4>)
 80015b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015ba:	819a      	strh	r2, [r3, #12]
	default_parameter.acc_time = 1000;
 80015bc:	4b97      	ldr	r3, [pc, #604]	; (800181c <main+0x2d4>)
 80015be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015c2:	81da      	strh	r2, [r3, #14]
	default_parameter.acc_update_ratio = 50;
 80015c4:	4b95      	ldr	r3, [pc, #596]	; (800181c <main+0x2d4>)
 80015c6:	2232      	movs	r2, #50	; 0x32
 80015c8:	821a      	strh	r2, [r3, #16]
	default_parameter.initial_feedrate = 50;
 80015ca:	4b94      	ldr	r3, [pc, #592]	; (800181c <main+0x2d4>)
 80015cc:	2232      	movs	r2, #50	; 0x32
 80015ce:	825a      	strh	r2, [r3, #18]
	default_parameter.first_load = 0;
 80015d0:	4b92      	ldr	r3, [pc, #584]	; (800181c <main+0x2d4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	829a      	strh	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d6:	f002 fc7f 	bl	8003ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015da:	f001 f97f 	bl	80028dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015de:	f001 fbb5 	bl	8002d4c <MX_GPIO_Init>
  MX_I2C1_Init();
 80015e2:	f001 f9e5 	bl	80029b0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80015e6:	f001 fa11 	bl	8002a0c <MX_TIM1_Init>
  MX_TIM2_Init();
 80015ea:	f001 fa6f 	bl	8002acc <MX_TIM2_Init>
  MX_TIM11_Init();
 80015ee:	f001 fb75 	bl	8002cdc <MX_TIM11_Init>
  MX_TIM10_Init();
 80015f2:	f001 fb33 	bl	8002c5c <MX_TIM10_Init>
  MX_TIM9_Init();
 80015f6:	f001 fadd 	bl	8002bb4 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  ee_init();
 80015fa:	f7ff fd7b 	bl	80010f4 <ee_init>
  LiquidCrystal_I2C(0x4E, 20, 4);	//Initialization of LCD (Select your LCD address)
 80015fe:	2204      	movs	r2, #4
 8001600:	2114      	movs	r1, #20
 8001602:	204e      	movs	r0, #78	; 0x4e
 8001604:	f7ff fba4 	bl	8000d50 <LiquidCrystal_I2C>
  lcdBegin();
 8001608:	f7ff fbca 	bl	8000da0 <lcdBegin>
  lcdSetCursor(2,1);
 800160c:	2101      	movs	r1, #1
 800160e:	2002      	movs	r0, #2
 8001610:	f7ff fc66 	bl	8000ee0 <lcdSetCursor>
  lcdPrint("Power Feed V2.0");
 8001614:	4882      	ldr	r0, [pc, #520]	; (8001820 <main+0x2d8>)
 8001616:	f7ff fc95 	bl	8000f44 <lcdPrint>
  lcd_update = FALSE;				//LCD has been updated
 800161a:	4b82      	ldr	r3, [pc, #520]	; (8001824 <main+0x2dc>)
 800161c:	2200      	movs	r2, #0
 800161e:	801a      	strh	r2, [r3, #0]

  /* Encoder Initialization */
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001620:	213c      	movs	r1, #60	; 0x3c
 8001622:	4881      	ldr	r0, [pc, #516]	; (8001828 <main+0x2e0>)
 8001624:	f004 fdf4 	bl	8006210 <HAL_TIM_Encoder_Start_IT>
  /* Initialization Timers */
  HAL_TIM_Base_Start_IT(&htim11);	//Timer for debouncing
 8001628:	4880      	ldr	r0, [pc, #512]	; (800182c <main+0x2e4>)
 800162a:	f004 fb7b 	bl	8005d24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);	//Timer for acceleration update
 800162e:	4880      	ldr	r0, [pc, #512]	; (8001830 <main+0x2e8>)
 8001630:	f004 fb78 	bl	8005d24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);	//Timer for general 100ms counter
 8001634:	487f      	ldr	r0, [pc, #508]	; (8001834 <main+0x2ec>)
 8001636:	f004 fb75 	bl	8005d24 <HAL_TIM_Base_Start_IT>

  //Asignation pointers for structures
  struct_ptr = &parameter;
 800163a:	4b7f      	ldr	r3, [pc, #508]	; (8001838 <main+0x2f0>)
 800163c:	4a76      	ldr	r2, [pc, #472]	; (8001818 <main+0x2d0>)
 800163e:	601a      	str	r2, [r3, #0]
  default_struct_ptr = &default_parameter;
 8001640:	4b7e      	ldr	r3, [pc, #504]	; (800183c <main+0x2f4>)
 8001642:	4a76      	ldr	r2, [pc, #472]	; (800181c <main+0x2d4>)
 8001644:	601a      	str	r2, [r3, #0]

  //Delay to show initial screen and meanwhile check if encoder is pressed long
  old_delay100ms_counter = delay100ms_counter; //Update delay counter
 8001646:	4b7e      	ldr	r3, [pc, #504]	; (8001840 <main+0x2f8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a7e      	ldr	r2, [pc, #504]	; (8001844 <main+0x2fc>)
 800164c:	6013      	str	r3, [r2, #0]
  while(old_delay100ms_counter+30 >= delay100ms_counter){
 800164e:	e00e      	b.n	800166e <main+0x126>
	  if (Encoder_Switch_Status_Read() == TRUE_HOLD){	//If encoder is hold entrer in configuration
 8001650:	f002 f8c8 	bl	80037e4 <Encoder_Switch_Status_Read>
 8001654:	4603      	mov	r3, r0
 8001656:	2b03      	cmp	r3, #3
 8001658:	d106      	bne.n	8001668 <main+0x120>
		  state = CONFIGURATION;
 800165a:	4b7b      	ldr	r3, [pc, #492]	; (8001848 <main+0x300>)
 800165c:	2204      	movs	r2, #4
 800165e:	801a      	strh	r2, [r3, #0]
		  lcd_update=TRUE;
 8001660:	4b70      	ldr	r3, [pc, #448]	; (8001824 <main+0x2dc>)
 8001662:	2201      	movs	r2, #1
 8001664:	801a      	strh	r2, [r3, #0]
 8001666:	e002      	b.n	800166e <main+0x126>
	  }else{
		  state = INITIALIZATION;	//If not, enter into Initialization
 8001668:	4b77      	ldr	r3, [pc, #476]	; (8001848 <main+0x300>)
 800166a:	2200      	movs	r2, #0
 800166c:	801a      	strh	r2, [r3, #0]
  while(old_delay100ms_counter+30 >= delay100ms_counter){
 800166e:	4b75      	ldr	r3, [pc, #468]	; (8001844 <main+0x2fc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f103 021e 	add.w	r2, r3, #30
 8001676:	4b72      	ldr	r3, [pc, #456]	; (8001840 <main+0x2f8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d2e8      	bcs.n	8001650 <main+0x108>
	  }
  }
  lcdClear();
 800167e:	f7ff fc05 	bl	8000e8c <lcdClear>

  //Reading parameters from flash memory, if it is first time booting enter into configuration mode
  if (!Read_Parameter_Data(struct_ptr)){	//Read values from Flash (Emulated EEprom), if return is FALSE, then show error loading and load default values
 8001682:	4b6d      	ldr	r3, [pc, #436]	; (8001838 <main+0x2f0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f002 f99f 	bl	80039ca <Read_Parameter_Data>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d123      	bne.n	80016da <main+0x192>
	  lcdSetCursor(1,1);
 8001692:	2101      	movs	r1, #1
 8001694:	2001      	movs	r0, #1
 8001696:	f7ff fc23 	bl	8000ee0 <lcdSetCursor>
	  lcdPrint("ERROR LOADING DATA");
 800169a:	486c      	ldr	r0, [pc, #432]	; (800184c <main+0x304>)
 800169c:	f7ff fc52 	bl	8000f44 <lcdPrint>
	  lcdSetCursor(1,2);
 80016a0:	2102      	movs	r1, #2
 80016a2:	2001      	movs	r0, #1
 80016a4:	f7ff fc1c 	bl	8000ee0 <lcdSetCursor>
	  lcdPrint("LOADING DEFAULT");
 80016a8:	4869      	ldr	r0, [pc, #420]	; (8001850 <main+0x308>)
 80016aa:	f7ff fc4b 	bl	8000f44 <lcdPrint>
	  *struct_ptr = *default_struct_ptr;	//Load default values
 80016ae:	4b63      	ldr	r3, [pc, #396]	; (800183c <main+0x2f4>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b61      	ldr	r3, [pc, #388]	; (8001838 <main+0x2f0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6811      	ldr	r1, [r2, #0]
 80016b8:	6855      	ldr	r5, [r2, #4]
 80016ba:	6894      	ldr	r4, [r2, #8]
 80016bc:	68d0      	ldr	r0, [r2, #12]
 80016be:	6019      	str	r1, [r3, #0]
 80016c0:	605d      	str	r5, [r3, #4]
 80016c2:	609c      	str	r4, [r3, #8]
 80016c4:	60d8      	str	r0, [r3, #12]
 80016c6:	6911      	ldr	r1, [r2, #16]
 80016c8:	6119      	str	r1, [r3, #16]
 80016ca:	8a92      	ldrh	r2, [r2, #20]
 80016cc:	829a      	strh	r2, [r3, #20]
	  HAL_Delay(2000);
 80016ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016d2:	f002 fc73 	bl	8003fbc <HAL_Delay>
	  lcdClear();
 80016d6:	f7ff fbd9 	bl	8000e8c <lcdClear>
  }
  if (parameter.first_load != 0){	//If it is first booting, load default and go to config.
 80016da:	4b4f      	ldr	r3, [pc, #316]	; (8001818 <main+0x2d0>)
 80016dc:	8a9b      	ldrh	r3, [r3, #20]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d015      	beq.n	800170e <main+0x1c6>
	  *struct_ptr = *default_struct_ptr;	//Load default values
 80016e2:	4b56      	ldr	r3, [pc, #344]	; (800183c <main+0x2f4>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b54      	ldr	r3, [pc, #336]	; (8001838 <main+0x2f0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6811      	ldr	r1, [r2, #0]
 80016ec:	6855      	ldr	r5, [r2, #4]
 80016ee:	6894      	ldr	r4, [r2, #8]
 80016f0:	68d0      	ldr	r0, [r2, #12]
 80016f2:	6019      	str	r1, [r3, #0]
 80016f4:	605d      	str	r5, [r3, #4]
 80016f6:	609c      	str	r4, [r3, #8]
 80016f8:	60d8      	str	r0, [r3, #12]
 80016fa:	6911      	ldr	r1, [r2, #16]
 80016fc:	6119      	str	r1, [r3, #16]
 80016fe:	8a92      	ldrh	r2, [r2, #20]
 8001700:	829a      	strh	r2, [r3, #20]
	  state = CONFIGURATION;		//GO to config for initial configuration
 8001702:	4b51      	ldr	r3, [pc, #324]	; (8001848 <main+0x300>)
 8001704:	2204      	movs	r2, #4
 8001706:	801a      	strh	r2, [r3, #0]
	  lcd_update=TRUE;
 8001708:	4b46      	ldr	r3, [pc, #280]	; (8001824 <main+0x2dc>)
 800170a:	2201      	movs	r2, #1
 800170c:	801a      	strh	r2, [r3, #0]
  }

  float TIM11_period_ms_init = (float)parameter.acc_update_ratio/1000;		//Period to load into the timer, calculated from Define
 800170e:	4b42      	ldr	r3, [pc, #264]	; (8001818 <main+0x2d0>)
 8001710:	8a1b      	ldrh	r3, [r3, #16]
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800171a:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001854 <main+0x30c>
 800171e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001722:	edc7 7a01 	vstr	s15, [r7, #4]
  uint16_t TIM11_ARR_init;
  TIM11_ARR_init = ( (float) (CLK_FREQ_T2/(TIM11_preescaler+1))*TIM11_period_ms_init );	//Calculation value for ARR register to set correct period
 8001726:	edd7 7a01 	vldr	s15, [r7, #4]
 800172a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001858 <main+0x310>
 800172e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001736:	ee17 3a90 	vmov	r3, s15
 800173a:	807b      	strh	r3, [r7, #2]
  TIM11->ARR = TIM11_ARR_init;
 800173c:	4a47      	ldr	r2, [pc, #284]	; (800185c <main+0x314>)
 800173e:	887b      	ldrh	r3, [r7, #2]
 8001740:	62d3      	str	r3, [r2, #44]	; 0x2c



  while (1)
  {
	  switch (state)
 8001742:	4b41      	ldr	r3, [pc, #260]	; (8001848 <main+0x300>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	2b04      	cmp	r3, #4
 8001748:	d8fb      	bhi.n	8001742 <main+0x1fa>
 800174a:	a201      	add	r2, pc, #4	; (adr r2, 8001750 <main+0x208>)
 800174c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001750:	08001765 	.word	0x08001765
 8001754:	0800190d 	.word	0x0800190d
 8001758:	08001aaf 	.word	0x08001aaf
 800175c:	080017dd 	.word	0x080017dd
 8001760:	08001c8b 	.word	0x08001c8b
	  {
	  	  case INITIALIZATION:	//Initialization state
	  		  if ( Switch_Status_Read() != MID ){	//If the switch is not in MID state, report error
 8001764:	f001 ffaa 	bl	80036bc <Switch_Status_Read>
 8001768:	4603      	mov	r3, r0
 800176a:	2b02      	cmp	r3, #2
 800176c:	d00f      	beq.n	800178e <main+0x246>
	  			  lcdSetCursor(8,1);				//Print Error message
 800176e:	2101      	movs	r1, #1
 8001770:	2008      	movs	r0, #8
 8001772:	f7ff fbb5 	bl	8000ee0 <lcdSetCursor>
	  			  lcdPrint("ERROR!");
 8001776:	483a      	ldr	r0, [pc, #232]	; (8001860 <main+0x318>)
 8001778:	f7ff fbe4 	bl	8000f44 <lcdPrint>
	  			  lcdSetCursor(3,2);
 800177c:	2102      	movs	r1, #2
 800177e:	2003      	movs	r0, #3
 8001780:	f7ff fbae 	bl	8000ee0 <lcdSetCursor>
	  			  lcdPrint("Release Switch");
 8001784:	4837      	ldr	r0, [pc, #220]	; (8001864 <main+0x31c>)
 8001786:	f7ff fbdd 	bl	8000f44 <lcdPrint>
		  		  target_feedrate = parameter.initial_feedrate;
		  		  display_feedrate = target_feedrate;
				  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
				  state = STANDBY;								//Go to standby
	  		  }
	  		  break;
 800178a:	f001 b889 	b.w	80028a0 <main+0x1358>
	  			  lcdClear();
 800178e:	f7ff fb7d 	bl	8000e8c <lcdClear>
				  lcdSetCursor(0,0);
 8001792:	2100      	movs	r1, #0
 8001794:	2000      	movs	r0, #0
 8001796:	f7ff fba3 	bl	8000ee0 <lcdSetCursor>
				  lcdPrint("Feed Rate:");
 800179a:	4833      	ldr	r0, [pc, #204]	; (8001868 <main+0x320>)
 800179c:	f7ff fbd2 	bl	8000f44 <lcdPrint>
				  lcdSetCursor(0,1);
 80017a0:	2101      	movs	r1, #1
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff fb9c 	bl	8000ee0 <lcdSetCursor>
				  lcdPrint("Mode: STOP ");
 80017a8:	4830      	ldr	r0, [pc, #192]	; (800186c <main+0x324>)
 80017aa:	f7ff fbcb 	bl	8000f44 <lcdPrint>
		  		  target_feedrate = parameter.initial_feedrate;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <main+0x2d0>)
 80017b0:	8a5b      	ldrh	r3, [r3, #18]
 80017b2:	b21a      	sxth	r2, r3
 80017b4:	4b2e      	ldr	r3, [pc, #184]	; (8001870 <main+0x328>)
 80017b6:	801a      	strh	r2, [r3, #0]
		  		  display_feedrate = target_feedrate;
 80017b8:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <main+0x328>)
 80017ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017be:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <main+0x32c>)
 80017c0:	801a      	strh	r2, [r3, #0]
				  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 80017c2:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <main+0x32c>)
 80017c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c8:	2200      	movs	r2, #0
 80017ca:	210b      	movs	r1, #11
 80017cc:	4618      	mov	r0, r3
 80017ce:	f001 ff57 	bl	8003680 <LCD_Write_Feedrate>
				  state = STANDBY;								//Go to standby
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <main+0x300>)
 80017d4:	2203      	movs	r2, #3
 80017d6:	801a      	strh	r2, [r3, #0]
	  		  break;
 80017d8:	f001 b862 	b.w	80028a0 <main+0x1358>
	  	  case STANDBY:		//Standby state (Not movement, switch in the middle)
	  		Update_Feedrate(&target_feedrate);				//Update the feedrate from encoder
 80017dc:	4824      	ldr	r0, [pc, #144]	; (8001870 <main+0x328>)
 80017de:	f001 ffb7 	bl	8003750 <Update_Feedrate>
	  		display_feedrate = target_feedrate;				//Update variable to display the feedrate
 80017e2:	4b23      	ldr	r3, [pc, #140]	; (8001870 <main+0x328>)
 80017e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017e8:	4b22      	ldr	r3, [pc, #136]	; (8001874 <main+0x32c>)
 80017ea:	801a      	strh	r2, [r3, #0]
	  		LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 80017ec:	4b21      	ldr	r3, [pc, #132]	; (8001874 <main+0x32c>)
 80017ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f2:	2200      	movs	r2, #0
 80017f4:	210b      	movs	r1, #11
 80017f6:	4618      	mov	r0, r3
 80017f8:	f001 ff42 	bl	8003680 <LCD_Write_Feedrate>
	  		if ( Encoder_Switch_Status_Read() ){			//Check if the encoder is pressed to change the step mode
 80017fc:	f001 fff2 	bl	80037e4 <Encoder_Switch_Status_Read>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d041      	beq.n	800188a <main+0x342>
	  			if (step_mode == STEP_NORMAL){
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <main+0x330>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d136      	bne.n	800187c <main+0x334>
	  				step_mode = STEP_x10;
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <main+0x330>)
 8001810:	2201      	movs	r2, #1
 8001812:	801a      	strh	r2, [r3, #0]
 8001814:	e039      	b.n	800188a <main+0x342>
 8001816:	bf00      	nop
 8001818:	2000066c 	.word	0x2000066c
 800181c:	20000684 	.word	0x20000684
 8001820:	080078d4 	.word	0x080078d4
 8001824:	200006b8 	.word	0x200006b8
 8001828:	200004fc 	.word	0x200004fc
 800182c:	2000061c 	.word	0x2000061c
 8001830:	200005d4 	.word	0x200005d4
 8001834:	2000058c 	.word	0x2000058c
 8001838:	2000069c 	.word	0x2000069c
 800183c:	200006a0 	.word	0x200006a0
 8001840:	200006ac 	.word	0x200006ac
 8001844:	200006b0 	.word	0x200006b0
 8001848:	20000664 	.word	0x20000664
 800184c:	080078e4 	.word	0x080078e4
 8001850:	080078f8 	.word	0x080078f8
 8001854:	447a0000 	.word	0x447a0000
 8001858:	477f2600 	.word	0x477f2600
 800185c:	40014800 	.word	0x40014800
 8001860:	08007908 	.word	0x08007908
 8001864:	08007910 	.word	0x08007910
 8001868:	08007920 	.word	0x08007920
 800186c:	0800792c 	.word	0x0800792c
 8001870:	20000008 	.word	0x20000008
 8001874:	2000000a 	.word	0x2000000a
 8001878:	2000066a 	.word	0x2000066a
	  			}else if(step_mode == STEP_x10){
 800187c:	4b98      	ldr	r3, [pc, #608]	; (8001ae0 <main+0x598>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d102      	bne.n	800188a <main+0x342>
	  				step_mode = STEP_NORMAL;
 8001884:	4b96      	ldr	r3, [pc, #600]	; (8001ae0 <main+0x598>)
 8001886:	2200      	movs	r2, #0
 8001888:	801a      	strh	r2, [r3, #0]
	  			}
	  		}
	  		if (lcd_update){				//Update the LCD coming from others states
 800188a:	4b96      	ldr	r3, [pc, #600]	; (8001ae4 <main+0x59c>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <main+0x35e>
	  			lcdSetCursor(0,1);
 8001892:	2101      	movs	r1, #1
 8001894:	2000      	movs	r0, #0
 8001896:	f7ff fb23 	bl	8000ee0 <lcdSetCursor>
	  			lcdPrint("Mode: STOP ");
 800189a:	4893      	ldr	r0, [pc, #588]	; (8001ae8 <main+0x5a0>)
 800189c:	f7ff fb52 	bl	8000f44 <lcdPrint>
	  			lcd_update = FALSE;			//Reset flag for LCD Update
 80018a0:	4b90      	ldr	r3, [pc, #576]	; (8001ae4 <main+0x59c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	801a      	strh	r2, [r3, #0]
	  		}
	  		if (previous_state != STANDBY){		//If previous status is Standby the enable motor and direction
 80018a6:	4b91      	ldr	r3, [pc, #580]	; (8001aec <main+0x5a4>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d002      	beq.n	80018b4 <main+0x36c>
	  			previous_state = STANDBY;		//Change previous state to current one
 80018ae:	4b8f      	ldr	r3, [pc, #572]	; (8001aec <main+0x5a4>)
 80018b0:	2203      	movs	r2, #3
 80018b2:	801a      	strh	r2, [r3, #0]
	  		}
	  		if ( ( Switch_Status_Read() == RIGHT ) && ( current_feedrate == 0 ) ){		//Check if the switch is on right mode
 80018b4:	f001 ff02 	bl	80036bc <Switch_Status_Read>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d10f      	bne.n	80018de <main+0x396>
 80018be:	4b8c      	ldr	r3, [pc, #560]	; (8001af0 <main+0x5a8>)
 80018c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10a      	bne.n	80018de <main+0x396>
	  			previous_state = STANDBY;		//Setting previous state to STANDBY
 80018c8:	4b88      	ldr	r3, [pc, #544]	; (8001aec <main+0x5a4>)
 80018ca:	2203      	movs	r2, #3
 80018cc:	801a      	strh	r2, [r3, #0]
	  			state = MOVE_RIGHT;				//Change state to RIGHT
 80018ce:	4b89      	ldr	r3, [pc, #548]	; (8001af4 <main+0x5ac>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	801a      	strh	r2, [r3, #0]
	  			lcd_update = TRUE;				//Set flag for LCD update
 80018d4:	4b83      	ldr	r3, [pc, #524]	; (8001ae4 <main+0x59c>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	801a      	strh	r2, [r3, #0]
	  		}else if ( ( Switch_Status_Read() == LEFT ) && ( current_feedrate == 0 ) ){	//Check if the switch is on left mode
	  			previous_state = STANDBY;		//Setting previous state to STANDBY
	  			state = MOVE_LEFT;				//Change state to RIGHT
	  			lcd_update = TRUE;				//Set flag for LCD update
	  		}
	  		  break;
 80018da:	f000 bfbc 	b.w	8002856 <main+0x130e>
	  		}else if ( ( Switch_Status_Read() == LEFT ) && ( current_feedrate == 0 ) ){	//Check if the switch is on left mode
 80018de:	f001 feed 	bl	80036bc <Switch_Status_Read>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f040 87b6 	bne.w	8002856 <main+0x130e>
 80018ea:	4b81      	ldr	r3, [pc, #516]	; (8001af0 <main+0x5a8>)
 80018ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f040 87b0 	bne.w	8002856 <main+0x130e>
	  			previous_state = STANDBY;		//Setting previous state to STANDBY
 80018f6:	4b7d      	ldr	r3, [pc, #500]	; (8001aec <main+0x5a4>)
 80018f8:	2203      	movs	r2, #3
 80018fa:	801a      	strh	r2, [r3, #0]
	  			state = MOVE_LEFT;				//Change state to RIGHT
 80018fc:	4b7d      	ldr	r3, [pc, #500]	; (8001af4 <main+0x5ac>)
 80018fe:	2202      	movs	r2, #2
 8001900:	801a      	strh	r2, [r3, #0]
	  			lcd_update = TRUE;				//Set flag for LCD update
 8001902:	4b78      	ldr	r3, [pc, #480]	; (8001ae4 <main+0x59c>)
 8001904:	2201      	movs	r2, #1
 8001906:	801a      	strh	r2, [r3, #0]
	  		  break;
 8001908:	f000 bfa5 	b.w	8002856 <main+0x130e>
	  	  case MOVE_RIGHT:	//Right state, movement to the RIGHT
	  		  encoder_sw_status = Encoder_Switch_Status_Read();
 800190c:	f001 ff6a 	bl	80037e4 <Encoder_Switch_Status_Read>
 8001910:	4603      	mov	r3, r0
 8001912:	b29a      	uxth	r2, r3
 8001914:	4b78      	ldr	r3, [pc, #480]	; (8001af8 <main+0x5b0>)
 8001916:	801a      	strh	r2, [r3, #0]
	  		  aux_sw_status = Aux_Switch_Status_Read();
 8001918:	f001 ffc8 	bl	80038ac <Aux_Switch_Status_Read>
 800191c:	4603      	mov	r3, r0
 800191e:	b29a      	uxth	r2, r3
 8001920:	4b76      	ldr	r3, [pc, #472]	; (8001afc <main+0x5b4>)
 8001922:	801a      	strh	r2, [r3, #0]
	  		  if ( encoder_sw_status == TRUE ){	//Check if the encoder is pressed to change the step mode
 8001924:	4b74      	ldr	r3, [pc, #464]	; (8001af8 <main+0x5b0>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d10e      	bne.n	800194a <main+0x402>
	  			  if (step_mode == STEP_NORMAL){
 800192c:	4b6c      	ldr	r3, [pc, #432]	; (8001ae0 <main+0x598>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d103      	bne.n	800193c <main+0x3f4>
	  				  step_mode = STEP_x10;
 8001934:	4b6a      	ldr	r3, [pc, #424]	; (8001ae0 <main+0x598>)
 8001936:	2201      	movs	r2, #1
 8001938:	801a      	strh	r2, [r3, #0]
 800193a:	e006      	b.n	800194a <main+0x402>
	  			  }else if(step_mode == STEP_x10){
 800193c:	4b68      	ldr	r3, [pc, #416]	; (8001ae0 <main+0x598>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d102      	bne.n	800194a <main+0x402>
	  				  step_mode = STEP_NORMAL;
 8001944:	4b66      	ldr	r3, [pc, #408]	; (8001ae0 <main+0x598>)
 8001946:	2200      	movs	r2, #0
 8001948:	801a      	strh	r2, [r3, #0]
	  			  }
	  		  }
	  		  if (  aux_sw_status == TRUE_HOLD ){
 800194a:	4b6c      	ldr	r3, [pc, #432]	; (8001afc <main+0x5b4>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d105      	bne.n	800195e <main+0x416>
		  		target_feedrate = parameter.fast_movement_feedrate;
 8001952:	4b6b      	ldr	r3, [pc, #428]	; (8001b00 <main+0x5b8>)
 8001954:	899b      	ldrh	r3, [r3, #12]
 8001956:	b21a      	sxth	r2, r3
 8001958:	4b6a      	ldr	r3, [pc, #424]	; (8001b04 <main+0x5bc>)
 800195a:	801a      	strh	r2, [r3, #0]
 800195c:	e008      	b.n	8001970 <main+0x428>
	  		  }else if ( aux_sw_status == FALSE ){
 800195e:	4b67      	ldr	r3, [pc, #412]	; (8001afc <main+0x5b4>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d104      	bne.n	8001970 <main+0x428>
		  		target_feedrate = display_feedrate;
 8001966:	4b68      	ldr	r3, [pc, #416]	; (8001b08 <main+0x5c0>)
 8001968:	f9b3 2000 	ldrsh.w	r2, [r3]
 800196c:	4b65      	ldr	r3, [pc, #404]	; (8001b04 <main+0x5bc>)
 800196e:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  sw_status = Switch_Status_Read();		//Read the switch
 8001970:	f001 fea4 	bl	80036bc <Switch_Status_Read>
 8001974:	4603      	mov	r3, r0
 8001976:	b29a      	uxth	r2, r3
 8001978:	4b64      	ldr	r3, [pc, #400]	; (8001b0c <main+0x5c4>)
 800197a:	801a      	strh	r2, [r3, #0]
	  		  if ( sw_status == RIGHT ){			//If it is on right position, update the feedrate target comming from others modes
 800197c:	4b63      	ldr	r3, [pc, #396]	; (8001b0c <main+0x5c4>)
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d126      	bne.n	80019d2 <main+0x48a>
	  			  if (target_feedrate == 0){
 8001984:	4b5f      	ldr	r3, [pc, #380]	; (8001b04 <main+0x5bc>)
 8001986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d104      	bne.n	8001998 <main+0x450>
	  				  target_feedrate = display_feedrate;
 800198e:	4b5e      	ldr	r3, [pc, #376]	; (8001b08 <main+0x5c0>)
 8001990:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001994:	4b5b      	ldr	r3, [pc, #364]	; (8001b04 <main+0x5bc>)
 8001996:	801a      	strh	r2, [r3, #0]
	  			  }
	  			  if ( aux_sw_status != TRUE_HOLD ){
 8001998:	4b58      	ldr	r3, [pc, #352]	; (8001afc <main+0x5b4>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d054      	beq.n	8001a4a <main+0x502>
					  Update_Feedrate(&target_feedrate);				//Update the feedrate from encoder
 80019a0:	4858      	ldr	r0, [pc, #352]	; (8001b04 <main+0x5bc>)
 80019a2:	f001 fed5 	bl	8003750 <Update_Feedrate>
					  if (display_feedrate != target_feedrate){			//Check if the feedrate changed to update LCD
 80019a6:	4b58      	ldr	r3, [pc, #352]	; (8001b08 <main+0x5c0>)
 80019a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019ac:	4b55      	ldr	r3, [pc, #340]	; (8001b04 <main+0x5bc>)
 80019ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d049      	beq.n	8001a4a <main+0x502>
						  display_feedrate = target_feedrate;
 80019b6:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <main+0x5bc>)
 80019b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019bc:	4b52      	ldr	r3, [pc, #328]	; (8001b08 <main+0x5c0>)
 80019be:	801a      	strh	r2, [r3, #0]
						  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 80019c0:	4b51      	ldr	r3, [pc, #324]	; (8001b08 <main+0x5c0>)
 80019c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c6:	2200      	movs	r2, #0
 80019c8:	210b      	movs	r1, #11
 80019ca:	4618      	mov	r0, r3
 80019cc:	f001 fe58 	bl	8003680 <LCD_Write_Feedrate>
 80019d0:	e03b      	b.n	8001a4a <main+0x502>
					  }
	  			  }
	  		  }else if ( sw_status == LEFT){		//If it is on left position, change to left, set feedrate to zero
 80019d2:	4b4e      	ldr	r3, [pc, #312]	; (8001b0c <main+0x5c4>)
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d119      	bne.n	8001a0e <main+0x4c6>
		  		target_feedrate = 0;
 80019da:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <main+0x5bc>)
 80019dc:	2200      	movs	r2, #0
 80019de:	801a      	strh	r2, [r3, #0]
			  	if ( current_feedrate == 0 ){		//If motor is stopped then move to left status
 80019e0:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <main+0x5a8>)
 80019e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d12f      	bne.n	8001a4a <main+0x502>
			  		state = MOVE_LEFT;				//Change state to left
 80019ea:	4b42      	ldr	r3, [pc, #264]	; (8001af4 <main+0x5ac>)
 80019ec:	2202      	movs	r2, #2
 80019ee:	801a      	strh	r2, [r3, #0]
			  		lcd_update = TRUE;				//Set flag to update display
 80019f0:	4b3c      	ldr	r3, [pc, #240]	; (8001ae4 <main+0x59c>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	801a      	strh	r2, [r3, #0]
			  		Motor_Disable(parameter.en_invert);		//Disable Motor
 80019f6:	4b42      	ldr	r3, [pc, #264]	; (8001b00 <main+0x5b8>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f001 fce6 	bl	80033cc <Motor_Disable>
			  		target_feedrate = display_feedrate;	//Update feedrate
 8001a00:	4b41      	ldr	r3, [pc, #260]	; (8001b08 <main+0x5c0>)
 8001a02:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a06:	4b3f      	ldr	r3, [pc, #252]	; (8001b04 <main+0x5bc>)
 8001a08:	801a      	strh	r2, [r3, #0]
			  		break;							//Exit this state
 8001a0a:	f000 bf49 	b.w	80028a0 <main+0x1358>
			  	}
	  		  }else if ( sw_status == MID ){		//If it is on Mid position, change to STOP or STANDBY status
 8001a0e:	4b3f      	ldr	r3, [pc, #252]	; (8001b0c <main+0x5c4>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d119      	bne.n	8001a4a <main+0x502>
	  			target_feedrate = 0;
 8001a16:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <main+0x5bc>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	801a      	strh	r2, [r3, #0]
	  			if ( current_feedrate == 0 ){
 8001a1c:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <main+0x5a8>)
 8001a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d111      	bne.n	8001a4a <main+0x502>
	  				state = STANDBY;				//Change state to standby
 8001a26:	4b33      	ldr	r3, [pc, #204]	; (8001af4 <main+0x5ac>)
 8001a28:	2203      	movs	r2, #3
 8001a2a:	801a      	strh	r2, [r3, #0]
	  				lcd_update = TRUE;				//Set flag to update display
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <main+0x59c>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	801a      	strh	r2, [r3, #0]
	  				Motor_Disable(parameter.en_invert);		//Disable Motor
 8001a32:	4b33      	ldr	r3, [pc, #204]	; (8001b00 <main+0x5b8>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f001 fcc8 	bl	80033cc <Motor_Disable>
	  				target_feedrate = display_feedrate;	//Update feedrate
 8001a3c:	4b32      	ldr	r3, [pc, #200]	; (8001b08 <main+0x5c0>)
 8001a3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a42:	4b30      	ldr	r3, [pc, #192]	; (8001b04 <main+0x5bc>)
 8001a44:	801a      	strh	r2, [r3, #0]
	  				break;							//Exit this state
 8001a46:	f000 bf2b 	b.w	80028a0 <main+0x1358>
	  			}
	  		  }
	  		  if (lcd_update){				//Update the LCD coming from others states
 8001a4a:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <main+0x59c>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <main+0x51e>
	  			  lcdSetCursor(0,1);
 8001a52:	2101      	movs	r1, #1
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7ff fa43 	bl	8000ee0 <lcdSetCursor>
	  			  lcdPrint("Mode: RIGHT");
 8001a5a:	482d      	ldr	r0, [pc, #180]	; (8001b10 <main+0x5c8>)
 8001a5c:	f7ff fa72 	bl	8000f44 <lcdPrint>
	  			  lcd_update = FALSE;			//Reset flag for LCD Update
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <main+0x59c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (previous_state != MOVE_RIGHT){		//If previous status is Standby the enable motor and direcction
 8001a66:	4b21      	ldr	r3, [pc, #132]	; (8001aec <main+0x5a4>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d00d      	beq.n	8001a8a <main+0x542>
				  Motor_Direction(RIGHT, parameter.dir_invert);	//Set direction to right
 8001a6e:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <main+0x5b8>)
 8001a70:	885b      	ldrh	r3, [r3, #2]
 8001a72:	4619      	mov	r1, r3
 8001a74:	2001      	movs	r0, #1
 8001a76:	f001 fcc1 	bl	80033fc <Motor_Direction>
				  Motor_Enable(parameter.en_invert);				//Enable Motor
 8001a7a:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <main+0x5b8>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f001 fc8e 	bl	80033a0 <Motor_Enable>
				  previous_state = MOVE_RIGHT;			//Change previous state to current one
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <main+0x5a4>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (update_speed){					//Update speed if the flag is set
 8001a8a:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <main+0x5cc>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 86e4 	beq.w	800285c <main+0x1314>
	  			  current_feedrate = Motor_Feedrate_Update(&current_feedrate, &target_feedrate);
 8001a94:	491b      	ldr	r1, [pc, #108]	; (8001b04 <main+0x5bc>)
 8001a96:	4816      	ldr	r0, [pc, #88]	; (8001af0 <main+0x5a8>)
 8001a98:	f001 fd22 	bl	80034e0 <Motor_Feedrate_Update>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	b21a      	sxth	r2, r3
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <main+0x5a8>)
 8001aa2:	801a      	strh	r2, [r3, #0]
				  update_speed = 0;					//Reset the update_speed flag
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <main+0x5cc>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  break;
 8001aaa:	f000 bed7 	b.w	800285c <main+0x1314>
	  	  case MOVE_LEFT:	//Left state, movement to the Left
	  		  encoder_sw_status = Encoder_Switch_Status_Read();
 8001aae:	f001 fe99 	bl	80037e4 <Encoder_Switch_Status_Read>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <main+0x5b0>)
 8001ab8:	801a      	strh	r2, [r3, #0]
	  		  aux_sw_status = Aux_Switch_Status_Read();
 8001aba:	f001 fef7 	bl	80038ac <Aux_Switch_Status_Read>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <main+0x5b4>)
 8001ac4:	801a      	strh	r2, [r3, #0]
	  		  if ( encoder_sw_status == TRUE ){	//Check if the encoder is pressed to change the step mode
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <main+0x5b0>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d12b      	bne.n	8001b26 <main+0x5de>
	  			  if (step_mode == STEP_NORMAL){
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <main+0x598>)
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d120      	bne.n	8001b18 <main+0x5d0>
	  				  step_mode = STEP_x10;
 8001ad6:	4b02      	ldr	r3, [pc, #8]	; (8001ae0 <main+0x598>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	801a      	strh	r2, [r3, #0]
 8001adc:	e023      	b.n	8001b26 <main+0x5de>
 8001ade:	bf00      	nop
 8001ae0:	2000066a 	.word	0x2000066a
 8001ae4:	200006b8 	.word	0x200006b8
 8001ae8:	0800792c 	.word	0x0800792c
 8001aec:	20000666 	.word	0x20000666
 8001af0:	200006a4 	.word	0x200006a4
 8001af4:	20000664 	.word	0x20000664
 8001af8:	200006a8 	.word	0x200006a8
 8001afc:	200006aa 	.word	0x200006aa
 8001b00:	2000066c 	.word	0x2000066c
 8001b04:	20000008 	.word	0x20000008
 8001b08:	2000000a 	.word	0x2000000a
 8001b0c:	200006a6 	.word	0x200006a6
 8001b10:	08007938 	.word	0x08007938
 8001b14:	200006b6 	.word	0x200006b6
	  			  }else if(step_mode == STEP_x10){
 8001b18:	4ba2      	ldr	r3, [pc, #648]	; (8001da4 <main+0x85c>)
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d102      	bne.n	8001b26 <main+0x5de>
	  				  step_mode = STEP_NORMAL;
 8001b20:	4ba0      	ldr	r3, [pc, #640]	; (8001da4 <main+0x85c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	801a      	strh	r2, [r3, #0]
	  			  }
	  		  }
	  		  if (  aux_sw_status == TRUE_HOLD ){
 8001b26:	4ba0      	ldr	r3, [pc, #640]	; (8001da8 <main+0x860>)
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d105      	bne.n	8001b3a <main+0x5f2>
	  			  target_feedrate = parameter.fast_movement_feedrate;
 8001b2e:	4b9f      	ldr	r3, [pc, #636]	; (8001dac <main+0x864>)
 8001b30:	899b      	ldrh	r3, [r3, #12]
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	4b9e      	ldr	r3, [pc, #632]	; (8001db0 <main+0x868>)
 8001b36:	801a      	strh	r2, [r3, #0]
 8001b38:	e008      	b.n	8001b4c <main+0x604>
	  		  }else if ( aux_sw_status == FALSE ){
 8001b3a:	4b9b      	ldr	r3, [pc, #620]	; (8001da8 <main+0x860>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d104      	bne.n	8001b4c <main+0x604>
	  			  target_feedrate = display_feedrate;
 8001b42:	4b9c      	ldr	r3, [pc, #624]	; (8001db4 <main+0x86c>)
 8001b44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b48:	4b99      	ldr	r3, [pc, #612]	; (8001db0 <main+0x868>)
 8001b4a:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  sw_status = Switch_Status_Read();		//Read the switch
 8001b4c:	f001 fdb6 	bl	80036bc <Switch_Status_Read>
 8001b50:	4603      	mov	r3, r0
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	4b98      	ldr	r3, [pc, #608]	; (8001db8 <main+0x870>)
 8001b56:	801a      	strh	r2, [r3, #0]
	  		  if ( sw_status == LEFT ){				//If it is on left position, update the feedrate target comming from others modes
 8001b58:	4b97      	ldr	r3, [pc, #604]	; (8001db8 <main+0x870>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d126      	bne.n	8001bae <main+0x666>
	  			  if (target_feedrate == 0){
 8001b60:	4b93      	ldr	r3, [pc, #588]	; (8001db0 <main+0x868>)
 8001b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d104      	bne.n	8001b74 <main+0x62c>
	  				  target_feedrate = display_feedrate;
 8001b6a:	4b92      	ldr	r3, [pc, #584]	; (8001db4 <main+0x86c>)
 8001b6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b70:	4b8f      	ldr	r3, [pc, #572]	; (8001db0 <main+0x868>)
 8001b72:	801a      	strh	r2, [r3, #0]
	  			  }
	  			  if ( aux_sw_status != TRUE_HOLD ){
 8001b74:	4b8c      	ldr	r3, [pc, #560]	; (8001da8 <main+0x860>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d054      	beq.n	8001c26 <main+0x6de>
					  Update_Feedrate(&target_feedrate);				//Update the feedrate from encoder
 8001b7c:	488c      	ldr	r0, [pc, #560]	; (8001db0 <main+0x868>)
 8001b7e:	f001 fde7 	bl	8003750 <Update_Feedrate>
					  if (display_feedrate != target_feedrate){			//Check if the feedrate changed to update LCD
 8001b82:	4b8c      	ldr	r3, [pc, #560]	; (8001db4 <main+0x86c>)
 8001b84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b88:	4b89      	ldr	r3, [pc, #548]	; (8001db0 <main+0x868>)
 8001b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d049      	beq.n	8001c26 <main+0x6de>
						  display_feedrate = target_feedrate;
 8001b92:	4b87      	ldr	r3, [pc, #540]	; (8001db0 <main+0x868>)
 8001b94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b98:	4b86      	ldr	r3, [pc, #536]	; (8001db4 <main+0x86c>)
 8001b9a:	801a      	strh	r2, [r3, #0]
						  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 8001b9c:	4b85      	ldr	r3, [pc, #532]	; (8001db4 <main+0x86c>)
 8001b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	210b      	movs	r1, #11
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f001 fd6a 	bl	8003680 <LCD_Write_Feedrate>
 8001bac:	e03b      	b.n	8001c26 <main+0x6de>
					  }
	  			  }
	  		  }else if ( sw_status == RIGHT){		//If it is on right position, change to right, set feedrate to zero
 8001bae:	4b82      	ldr	r3, [pc, #520]	; (8001db8 <main+0x870>)
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d119      	bne.n	8001bea <main+0x6a2>
		  		target_feedrate = 0;
 8001bb6:	4b7e      	ldr	r3, [pc, #504]	; (8001db0 <main+0x868>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	801a      	strh	r2, [r3, #0]
		  		if ( current_feedrate == 0 ){		//If motor is stopped then move to right status
 8001bbc:	4b7f      	ldr	r3, [pc, #508]	; (8001dbc <main+0x874>)
 8001bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d12f      	bne.n	8001c26 <main+0x6de>
		  			state = MOVE_RIGHT;				//Change state to right
 8001bc6:	4b7e      	ldr	r3, [pc, #504]	; (8001dc0 <main+0x878>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	801a      	strh	r2, [r3, #0]
		  			lcd_update = TRUE;				//Set flag to update display
 8001bcc:	4b7d      	ldr	r3, [pc, #500]	; (8001dc4 <main+0x87c>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	801a      	strh	r2, [r3, #0]
		  			Motor_Disable(parameter.en_invert);		//Disable Motor
 8001bd2:	4b76      	ldr	r3, [pc, #472]	; (8001dac <main+0x864>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f001 fbf8 	bl	80033cc <Motor_Disable>
		  			target_feedrate = display_feedrate;	//Update feedrate
 8001bdc:	4b75      	ldr	r3, [pc, #468]	; (8001db4 <main+0x86c>)
 8001bde:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001be2:	4b73      	ldr	r3, [pc, #460]	; (8001db0 <main+0x868>)
 8001be4:	801a      	strh	r2, [r3, #0]
		  			break;							//Exit this state
 8001be6:	f000 be5b 	b.w	80028a0 <main+0x1358>
		  		}
	  		  }else if ( sw_status == MID ){		//If it is on Mid position, change to STOP or STANDBY status
 8001bea:	4b73      	ldr	r3, [pc, #460]	; (8001db8 <main+0x870>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d119      	bne.n	8001c26 <main+0x6de>
	  			target_feedrate = 0;
 8001bf2:	4b6f      	ldr	r3, [pc, #444]	; (8001db0 <main+0x868>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	801a      	strh	r2, [r3, #0]
	  			if ( current_feedrate == 0 ){
 8001bf8:	4b70      	ldr	r3, [pc, #448]	; (8001dbc <main+0x874>)
 8001bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d111      	bne.n	8001c26 <main+0x6de>
	  				state = STANDBY;				//Change state to standby
 8001c02:	4b6f      	ldr	r3, [pc, #444]	; (8001dc0 <main+0x878>)
 8001c04:	2203      	movs	r2, #3
 8001c06:	801a      	strh	r2, [r3, #0]
	  				lcd_update = TRUE;				//Set flag to update display
 8001c08:	4b6e      	ldr	r3, [pc, #440]	; (8001dc4 <main+0x87c>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	801a      	strh	r2, [r3, #0]
	  				Motor_Disable(parameter.en_invert);		//Disable Motor
 8001c0e:	4b67      	ldr	r3, [pc, #412]	; (8001dac <main+0x864>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f001 fbda 	bl	80033cc <Motor_Disable>
	  				target_feedrate = display_feedrate;	//Update feedrate
 8001c18:	4b66      	ldr	r3, [pc, #408]	; (8001db4 <main+0x86c>)
 8001c1a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c1e:	4b64      	ldr	r3, [pc, #400]	; (8001db0 <main+0x868>)
 8001c20:	801a      	strh	r2, [r3, #0]
	  				break;							//Exit this state
 8001c22:	f000 be3d 	b.w	80028a0 <main+0x1358>
	  			}
	  		  }
	  		  if (lcd_update){				//Update the LCD comming from others states
 8001c26:	4b67      	ldr	r3, [pc, #412]	; (8001dc4 <main+0x87c>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <main+0x6fa>
	  			lcdSetCursor(0,1);
 8001c2e:	2101      	movs	r1, #1
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7ff f955 	bl	8000ee0 <lcdSetCursor>
	  			lcdPrint("Mode: LEFT ");
 8001c36:	4864      	ldr	r0, [pc, #400]	; (8001dc8 <main+0x880>)
 8001c38:	f7ff f984 	bl	8000f44 <lcdPrint>
	  			lcd_update = FALSE;			//Reset flag for LCD Update
 8001c3c:	4b61      	ldr	r3, [pc, #388]	; (8001dc4 <main+0x87c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (previous_state != MOVE_LEFT){		//If previous status is Standby the enable motor and direcction
 8001c42:	4b62      	ldr	r3, [pc, #392]	; (8001dcc <main+0x884>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d00d      	beq.n	8001c66 <main+0x71e>
	  		  Motor_Direction(LEFT, parameter.dir_invert);	//Set direction to left
 8001c4a:	4b58      	ldr	r3, [pc, #352]	; (8001dac <main+0x864>)
 8001c4c:	885b      	ldrh	r3, [r3, #2]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	2000      	movs	r0, #0
 8001c52:	f001 fbd3 	bl	80033fc <Motor_Direction>
	  		  Motor_Enable(parameter.en_invert);				//Enable Motor
 8001c56:	4b55      	ldr	r3, [pc, #340]	; (8001dac <main+0x864>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f001 fba0 	bl	80033a0 <Motor_Enable>
	  		  previous_state = MOVE_LEFT;			//Change previous state to current one
 8001c60:	4b5a      	ldr	r3, [pc, #360]	; (8001dcc <main+0x884>)
 8001c62:	2202      	movs	r2, #2
 8001c64:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (update_speed){					//Update speed if the flag is set
 8001c66:	4b5a      	ldr	r3, [pc, #360]	; (8001dd0 <main+0x888>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 85f9 	beq.w	8002862 <main+0x131a>
	  			  current_feedrate = Motor_Feedrate_Update(&current_feedrate, &target_feedrate);
 8001c70:	494f      	ldr	r1, [pc, #316]	; (8001db0 <main+0x868>)
 8001c72:	4852      	ldr	r0, [pc, #328]	; (8001dbc <main+0x874>)
 8001c74:	f001 fc34 	bl	80034e0 <Motor_Feedrate_Update>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	4b4f      	ldr	r3, [pc, #316]	; (8001dbc <main+0x874>)
 8001c7e:	801a      	strh	r2, [r3, #0]
				  update_speed = 0;					//Reset the update_speed flag
 8001c80:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <main+0x888>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  break;
 8001c86:	f000 bdec 	b.w	8002862 <main+0x131a>
	  	  case CONFIGURATION:	//State for Configuration Menu
	  		  switch (configuration_status)
 8001c8a:	4b52      	ldr	r3, [pc, #328]	; (8001dd4 <main+0x88c>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	2b0a      	cmp	r3, #10
 8001c90:	f63f ad57 	bhi.w	8001742 <main+0x1fa>
 8001c94:	a201      	add	r2, pc, #4	; (adr r2, 8001c9c <main+0x754>)
 8001c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9a:	bf00      	nop
 8001c9c:	08001cc9 	.word	0x08001cc9
 8001ca0:	08001df5 	.word	0x08001df5
 8001ca4:	08001ed1 	.word	0x08001ed1
 8001ca8:	0800200d 	.word	0x0800200d
 8001cac:	0800214d 	.word	0x0800214d
 8001cb0:	08002291 	.word	0x08002291
 8001cb4:	08002397 	.word	0x08002397
 8001cb8:	080024c1 	.word	0x080024c1
 8001cbc:	080025cd 	.word	0x080025cd
 8001cc0:	080026c9 	.word	0x080026c9
 8001cc4:	080027d1 	.word	0x080027d1
	  		  {
				  case 0:	//Enable PIN configuration
					  if (lcd_update){	//Check if is needed to update LCD
 8001cc8:	4b3e      	ldr	r3, [pc, #248]	; (8001dc4 <main+0x87c>)
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d02d      	beq.n	8001d2c <main+0x7e4>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8001cd0:	f001 f8f2 	bl	8002eb8 <Encoder_Read>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b40      	ldr	r3, [pc, #256]	; (8001dd8 <main+0x890>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	4a3e      	ldr	r2, [pc, #248]	; (8001dd8 <main+0x890>)
 8001cde:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8001ce0:	f7ff f8d4 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2003      	movs	r0, #3
 8001ce8:	f7ff f8fa 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8001cec:	483b      	ldr	r0, [pc, #236]	; (8001ddc <main+0x894>)
 8001cee:	f7ff f929 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7ff f8f3 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Enable Pin Inverted:");
 8001cfa:	4839      	ldr	r0, [pc, #228]	; (8001de0 <main+0x898>)
 8001cfc:	f7ff f922 	bl	8000f44 <lcdPrint>
						  if ( parameter.en_invert == FALSE){		//If parameter is FALSE Print not inverted
 8001d00:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <main+0x864>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d107      	bne.n	8001d18 <main+0x7d0>
							lcdSetCursor(0, 2);
 8001d08:	2102      	movs	r1, #2
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f7ff f8e8 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("NON_INVERTED");
 8001d10:	4834      	ldr	r0, [pc, #208]	; (8001de4 <main+0x89c>)
 8001d12:	f7ff f917 	bl	8000f44 <lcdPrint>
 8001d16:	e006      	b.n	8001d26 <main+0x7de>
						  }else{									//If parameter is TRUE Print inverted
							lcdSetCursor(0, 2);
 8001d18:	2102      	movs	r1, #2
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7ff f8e0 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("INVERTED    ");
 8001d20:	4831      	ldr	r0, [pc, #196]	; (8001de8 <main+0x8a0>)
 8001d22:	f7ff f90f 	bl	8000f44 <lcdPrint>
						  }
						lcd_update = FALSE;	//Reset LCD Update flag
 8001d26:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <main+0x87c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8001d2c:	f001 f8c4 	bl	8002eb8 <Encoder_Read>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <main+0x8a4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a2c      	ldr	r2, [pc, #176]	; (8001dec <main+0x8a4>)
 8001d3a:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <main+0x8a4>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <main+0x890>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d01c      	beq.n	8001d82 <main+0x83a>
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8001d48:	4b28      	ldr	r3, [pc, #160]	; (8001dec <main+0x8a4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a22      	ldr	r2, [pc, #136]	; (8001dd8 <main+0x890>)
 8001d4e:	6013      	str	r3, [r2, #0]
						  if (!parameter.en_invert){					//Change the value
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <main+0x864>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10a      	bne.n	8001d6e <main+0x826>
							lcdSetCursor(0, 2);
 8001d58:	2102      	movs	r1, #2
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f7ff f8c0 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("INVERTED    ");
 8001d60:	4821      	ldr	r0, [pc, #132]	; (8001de8 <main+0x8a0>)
 8001d62:	f7ff f8ef 	bl	8000f44 <lcdPrint>
							parameter.en_invert = TRUE;
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <main+0x864>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	801a      	strh	r2, [r3, #0]
 8001d6c:	e009      	b.n	8001d82 <main+0x83a>
						  }else{
							lcdSetCursor(0, 2);
 8001d6e:	2102      	movs	r1, #2
 8001d70:	2000      	movs	r0, #0
 8001d72:	f7ff f8b5 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("NOT_INVERTED");
 8001d76:	481e      	ldr	r0, [pc, #120]	; (8001df0 <main+0x8a8>)
 8001d78:	f7ff f8e4 	bl	8000f44 <lcdPrint>
							parameter.en_invert = FALSE;
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <main+0x864>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	801a      	strh	r2, [r3, #0]
						  }
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8001d82:	f001 fd2f 	bl	80037e4 <Encoder_Switch_Status_Read>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	f040 856d 	bne.w	8002868 <main+0x1320>
						configuration_status += 1;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <main+0x88c>)
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	3301      	adds	r3, #1
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <main+0x88c>)
 8001d98:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <main+0x87c>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8001da0:	f000 bd62 	b.w	8002868 <main+0x1320>
 8001da4:	2000066a 	.word	0x2000066a
 8001da8:	200006aa 	.word	0x200006aa
 8001dac:	2000066c 	.word	0x2000066c
 8001db0:	20000008 	.word	0x20000008
 8001db4:	2000000a 	.word	0x2000000a
 8001db8:	200006a6 	.word	0x200006a6
 8001dbc:	200006a4 	.word	0x200006a4
 8001dc0:	20000664 	.word	0x20000664
 8001dc4:	200006b8 	.word	0x200006b8
 8001dc8:	08007944 	.word	0x08007944
 8001dcc:	20000666 	.word	0x20000666
 8001dd0:	200006b6 	.word	0x200006b6
 8001dd4:	20000668 	.word	0x20000668
 8001dd8:	20000004 	.word	0x20000004
 8001ddc:	08007950 	.word	0x08007950
 8001de0:	08007960 	.word	0x08007960
 8001de4:	08007978 	.word	0x08007978
 8001de8:	08007988 	.word	0x08007988
 8001dec:	20000000 	.word	0x20000000
 8001df0:	08007998 	.word	0x08007998
				  case 1:	//Dir PIN configuration
					  if (lcd_update){
 8001df4:	4b79      	ldr	r3, [pc, #484]	; (8001fdc <main+0xa94>)
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d02d      	beq.n	8001e58 <main+0x910>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8001dfc:	f001 f85c 	bl	8002eb8 <Encoder_Read>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b77      	ldr	r3, [pc, #476]	; (8001fe0 <main+0xa98>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a75      	ldr	r2, [pc, #468]	; (8001fe0 <main+0xa98>)
 8001e0a:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8001e0c:	f7ff f83e 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 8001e10:	2100      	movs	r1, #0
 8001e12:	2003      	movs	r0, #3
 8001e14:	f7ff f864 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8001e18:	4872      	ldr	r0, [pc, #456]	; (8001fe4 <main+0xa9c>)
 8001e1a:	f7ff f893 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 8001e1e:	2101      	movs	r1, #1
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff f85d 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Dir Pin Inverted:");
 8001e26:	4870      	ldr	r0, [pc, #448]	; (8001fe8 <main+0xaa0>)
 8001e28:	f7ff f88c 	bl	8000f44 <lcdPrint>
						  if ( parameter.dir_invert == FALSE){	//If parameter is FALSE Print not inverted
 8001e2c:	4b6f      	ldr	r3, [pc, #444]	; (8001fec <main+0xaa4>)
 8001e2e:	885b      	ldrh	r3, [r3, #2]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d107      	bne.n	8001e44 <main+0x8fc>
							lcdSetCursor(0, 2);
 8001e34:	2102      	movs	r1, #2
 8001e36:	2000      	movs	r0, #0
 8001e38:	f7ff f852 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("NON_INVERTED");
 8001e3c:	486c      	ldr	r0, [pc, #432]	; (8001ff0 <main+0xaa8>)
 8001e3e:	f7ff f881 	bl	8000f44 <lcdPrint>
 8001e42:	e006      	b.n	8001e52 <main+0x90a>
						  }else{									//If parameter is TRUE Print inverted
							lcdSetCursor(0, 2);
 8001e44:	2102      	movs	r1, #2
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff f84a 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("INVERTED    ");
 8001e4c:	4869      	ldr	r0, [pc, #420]	; (8001ff4 <main+0xaac>)
 8001e4e:	f7ff f879 	bl	8000f44 <lcdPrint>
						  }
						lcd_update = FALSE;
 8001e52:	4b62      	ldr	r3, [pc, #392]	; (8001fdc <main+0xa94>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8001e58:	f001 f82e 	bl	8002eb8 <Encoder_Read>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b66      	ldr	r3, [pc, #408]	; (8001ff8 <main+0xab0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	4a64      	ldr	r2, [pc, #400]	; (8001ff8 <main+0xab0>)
 8001e66:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8001e68:	4b63      	ldr	r3, [pc, #396]	; (8001ff8 <main+0xab0>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b5c      	ldr	r3, [pc, #368]	; (8001fe0 <main+0xa98>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d01c      	beq.n	8001eae <main+0x966>
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8001e74:	4b60      	ldr	r3, [pc, #384]	; (8001ff8 <main+0xab0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a59      	ldr	r2, [pc, #356]	; (8001fe0 <main+0xa98>)
 8001e7a:	6013      	str	r3, [r2, #0]
						  if (!parameter.dir_invert){					//Change the value
 8001e7c:	4b5b      	ldr	r3, [pc, #364]	; (8001fec <main+0xaa4>)
 8001e7e:	885b      	ldrh	r3, [r3, #2]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10a      	bne.n	8001e9a <main+0x952>
							lcdSetCursor(0, 2);
 8001e84:	2102      	movs	r1, #2
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7ff f82a 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("INVERTED    ");
 8001e8c:	4859      	ldr	r0, [pc, #356]	; (8001ff4 <main+0xaac>)
 8001e8e:	f7ff f859 	bl	8000f44 <lcdPrint>
							parameter.dir_invert = TRUE;
 8001e92:	4b56      	ldr	r3, [pc, #344]	; (8001fec <main+0xaa4>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	805a      	strh	r2, [r3, #2]
 8001e98:	e009      	b.n	8001eae <main+0x966>
						  }else{
							lcdSetCursor(0, 2);
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff f81f 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("NOT_INVERTED");
 8001ea2:	4856      	ldr	r0, [pc, #344]	; (8001ffc <main+0xab4>)
 8001ea4:	f7ff f84e 	bl	8000f44 <lcdPrint>
							parameter.dir_invert = FALSE;
 8001ea8:	4b50      	ldr	r3, [pc, #320]	; (8001fec <main+0xaa4>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	805a      	strh	r2, [r3, #2]
						  }
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8001eae:	f001 fc99 	bl	80037e4 <Encoder_Switch_Status_Read>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	f040 84da 	bne.w	800286e <main+0x1326>
						configuration_status += 1;
 8001eba:	4b51      	ldr	r3, [pc, #324]	; (8002000 <main+0xab8>)
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	4b4f      	ldr	r3, [pc, #316]	; (8002000 <main+0xab8>)
 8001ec4:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8001ec6:	4b45      	ldr	r3, [pc, #276]	; (8001fdc <main+0xa94>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8001ecc:	f000 bccf 	b.w	800286e <main+0x1326>
				  case 2:
					  if (lcd_update){
 8001ed0:	4b42      	ldr	r3, [pc, #264]	; (8001fdc <main+0xa94>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d028      	beq.n	8001f2a <main+0x9e2>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8001ed8:	f000 ffee 	bl	8002eb8 <Encoder_Read>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b40      	ldr	r3, [pc, #256]	; (8001fe0 <main+0xa98>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	4a3e      	ldr	r2, [pc, #248]	; (8001fe0 <main+0xa98>)
 8001ee6:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8001ee8:	f7fe ffd0 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 8001eec:	2100      	movs	r1, #0
 8001eee:	2003      	movs	r0, #3
 8001ef0:	f7fe fff6 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8001ef4:	483b      	ldr	r0, [pc, #236]	; (8001fe4 <main+0xa9c>)
 8001ef6:	f7ff f825 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 8001efa:	2101      	movs	r1, #1
 8001efc:	2000      	movs	r0, #0
 8001efe:	f7fe ffef 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Motor Steps per Rev:");
 8001f02:	4840      	ldr	r0, [pc, #256]	; (8002004 <main+0xabc>)
 8001f04:	f7ff f81e 	bl	8000f44 <lcdPrint>
						  LCD_Write_Number(parameter.motor_stepsrev, 0, 2);
 8001f08:	4b38      	ldr	r3, [pc, #224]	; (8001fec <main+0xaa4>)
 8001f0a:	889b      	ldrh	r3, [r3, #4]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f001 f811 	bl	8002f38 <LCD_Write_Number>
						  lcdSetCursor(8, 2);
 8001f16:	2102      	movs	r1, #2
 8001f18:	2008      	movs	r0, #8
 8001f1a:	f7fe ffe1 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(pulse/rev)");
 8001f1e:	483a      	ldr	r0, [pc, #232]	; (8002008 <main+0xac0>)
 8001f20:	f7ff f810 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 8001f24:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <main+0xa94>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8001f2a:	f000 ffc5 	bl	8002eb8 <Encoder_Read>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <main+0xab0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4413      	add	r3, r2
 8001f36:	4a30      	ldr	r2, [pc, #192]	; (8001ff8 <main+0xab0>)
 8001f38:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ff8 <main+0xab0>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <main+0xa98>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d038      	beq.n	8001fb8 <main+0xa70>
						  parameter.motor_stepsrev = parameter.motor_stepsrev + ( 100*(current_encoder_value - old_encoder_value) );
 8001f46:	4b29      	ldr	r3, [pc, #164]	; (8001fec <main+0xaa4>)
 8001f48:	889a      	ldrh	r2, [r3, #4]
 8001f4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <main+0xab0>)
 8001f4c:	6819      	ldr	r1, [r3, #0]
 8001f4e:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <main+0xa98>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	1acb      	subs	r3, r1, r3
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4619      	mov	r1, r3
 8001f58:	0089      	lsls	r1, r1, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	0088      	lsls	r0, r1, #2
 8001f60:	4619      	mov	r1, r3
 8001f62:	4603      	mov	r3, r0
 8001f64:	440b      	add	r3, r1
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <main+0xaa4>)
 8001f70:	809a      	strh	r2, [r3, #4]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <main+0xab0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a1a      	ldr	r2, [pc, #104]	; (8001fe0 <main+0xa98>)
 8001f78:	6013      	str	r3, [r2, #0]
						  if ( parameter.motor_stepsrev < 100 || ( parameter.motor_stepsrev >= (MAX_MOTOR_STEPREV + 20000) )){
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <main+0xaa4>)
 8001f7c:	889b      	ldrh	r3, [r3, #4]
 8001f7e:	2b63      	cmp	r3, #99	; 0x63
 8001f80:	d905      	bls.n	8001f8e <main+0xa46>
 8001f82:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <main+0xaa4>)
 8001f84:	889b      	ldrh	r3, [r3, #4]
 8001f86:	f648 02b7 	movw	r2, #34999	; 0x88b7
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d903      	bls.n	8001f96 <main+0xa4e>
							  parameter.motor_stepsrev = 100;
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <main+0xaa4>)
 8001f90:	2264      	movs	r2, #100	; 0x64
 8001f92:	809a      	strh	r2, [r3, #4]
 8001f94:	e009      	b.n	8001faa <main+0xa62>
						  }else if ( parameter.motor_stepsrev > MAX_MOTOR_STEPREV){
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <main+0xaa4>)
 8001f98:	889b      	ldrh	r3, [r3, #4]
 8001f9a:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d903      	bls.n	8001faa <main+0xa62>
							  parameter.motor_stepsrev = MAX_MOTOR_STEPREV;
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <main+0xaa4>)
 8001fa4:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001fa8:	809a      	strh	r2, [r3, #4]
						  }
						  LCD_Write_Number(parameter.motor_stepsrev, 0, 2);
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <main+0xaa4>)
 8001fac:	889b      	ldrh	r3, [r3, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 ffc0 	bl	8002f38 <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8001fb8:	f001 fc14 	bl	80037e4 <Encoder_Switch_Status_Read>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	f040 8458 	bne.w	8002874 <main+0x132c>
						configuration_status += 1;
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <main+0xab8>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <main+0xab8>)
 8001fce:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8001fd0:	4b02      	ldr	r3, [pc, #8]	; (8001fdc <main+0xa94>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8001fd6:	f000 bc4d 	b.w	8002874 <main+0x132c>
 8001fda:	bf00      	nop
 8001fdc:	200006b8 	.word	0x200006b8
 8001fe0:	20000004 	.word	0x20000004
 8001fe4:	08007950 	.word	0x08007950
 8001fe8:	080079a8 	.word	0x080079a8
 8001fec:	2000066c 	.word	0x2000066c
 8001ff0:	08007978 	.word	0x08007978
 8001ff4:	08007988 	.word	0x08007988
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	08007998 	.word	0x08007998
 8002000:	20000668 	.word	0x20000668
 8002004:	080079bc 	.word	0x080079bc
 8002008:	080079d4 	.word	0x080079d4
				  case 3:
					  if (lcd_update){
 800200c:	4b94      	ldr	r3, [pc, #592]	; (8002260 <main+0xd18>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d02a      	beq.n	800206a <main+0xb22>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8002014:	f000 ff50 	bl	8002eb8 <Encoder_Read>
 8002018:	4602      	mov	r2, r0
 800201a:	4b92      	ldr	r3, [pc, #584]	; (8002264 <main+0xd1c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4413      	add	r3, r2
 8002020:	4a90      	ldr	r2, [pc, #576]	; (8002264 <main+0xd1c>)
 8002022:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8002024:	f7fe ff32 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 8002028:	2100      	movs	r1, #0
 800202a:	2003      	movs	r0, #3
 800202c:	f7fe ff58 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8002030:	488d      	ldr	r0, [pc, #564]	; (8002268 <main+0xd20>)
 8002032:	f7fe ff87 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 8002036:	2101      	movs	r1, #1
 8002038:	2000      	movs	r0, #0
 800203a:	f7fe ff51 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Leadscrew Pitch:");
 800203e:	488b      	ldr	r0, [pc, #556]	; (800226c <main+0xd24>)
 8002040:	f7fe ff80 	bl	8000f44 <lcdPrint>
						  LCD_Write_Float_Number(parameter.leadscrew_pitch,0,2);
 8002044:	4b8a      	ldr	r3, [pc, #552]	; (8002270 <main+0xd28>)
 8002046:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800204a:	2102      	movs	r1, #2
 800204c:	2000      	movs	r0, #0
 800204e:	ee00 3a10 	vmov	s0, r3
 8002052:	f001 f95f 	bl	8003314 <LCD_Write_Float_Number>
						  lcdSetCursor(10, 2);
 8002056:	2102      	movs	r1, #2
 8002058:	200a      	movs	r0, #10
 800205a:	f7fe ff41 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(mm/rev)");
 800205e:	4885      	ldr	r0, [pc, #532]	; (8002274 <main+0xd2c>)
 8002060:	f7fe ff70 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 8002064:	4b7e      	ldr	r3, [pc, #504]	; (8002260 <main+0xd18>)
 8002066:	2200      	movs	r2, #0
 8002068:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 800206a:	f000 ff25 	bl	8002eb8 <Encoder_Read>
 800206e:	4602      	mov	r2, r0
 8002070:	4b81      	ldr	r3, [pc, #516]	; (8002278 <main+0xd30>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4413      	add	r3, r2
 8002076:	4a80      	ldr	r2, [pc, #512]	; (8002278 <main+0xd30>)
 8002078:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 800207a:	4b7f      	ldr	r3, [pc, #508]	; (8002278 <main+0xd30>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	4b79      	ldr	r3, [pc, #484]	; (8002264 <main+0xd1c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d052      	beq.n	800212c <main+0xbe4>
						  parameter.leadscrew_pitch = parameter.leadscrew_pitch + (float)( 0.01*(current_encoder_value - old_encoder_value) );
 8002086:	4b7a      	ldr	r3, [pc, #488]	; (8002270 <main+0xd28>)
 8002088:	f8d3 4006 	ldr.w	r4, [r3, #6]
 800208c:	4623      	mov	r3, r4
 800208e:	461c      	mov	r4, r3
 8002090:	4b79      	ldr	r3, [pc, #484]	; (8002278 <main+0xd30>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b73      	ldr	r3, [pc, #460]	; (8002264 <main+0xd1c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fb74 	bl	8000788 <__aeabi_i2d>
 80020a0:	a36d      	add	r3, pc, #436	; (adr r3, 8002258 <main+0xd10>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe f8f3 	bl	8000290 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	f7fe fc7b 	bl	80009ac <__aeabi_d2f>
 80020b6:	ee07 0a90 	vmov	s15, r0
 80020ba:	ee07 4a10 	vmov	s14, r4
 80020be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c2:	4b6b      	ldr	r3, [pc, #428]	; (8002270 <main+0xd28>)
 80020c4:	ee17 2a90 	vmov	r2, s15
 80020c8:	f8c3 2006 	str.w	r2, [r3, #6]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 80020cc:	4b6a      	ldr	r3, [pc, #424]	; (8002278 <main+0xd30>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a64      	ldr	r2, [pc, #400]	; (8002264 <main+0xd1c>)
 80020d2:	6013      	str	r3, [r2, #0]
						  if ( parameter.leadscrew_pitch < 0.01){
 80020d4:	4b66      	ldr	r3, [pc, #408]	; (8002270 <main+0xd28>)
 80020d6:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fb66 	bl	80007ac <__aeabi_f2d>
 80020e0:	a35d      	add	r3, pc, #372	; (adr r3, 8002258 <main+0xd10>)
 80020e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e6:	f7fe fc19 	bl	800091c <__aeabi_dcmplt>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d004      	beq.n	80020fa <main+0xbb2>
							  parameter.leadscrew_pitch = 0.01;
 80020f0:	4b5f      	ldr	r3, [pc, #380]	; (8002270 <main+0xd28>)
 80020f2:	4a62      	ldr	r2, [pc, #392]	; (800227c <main+0xd34>)
 80020f4:	f8c3 2006 	str.w	r2, [r3, #6]
 80020f8:	e00f      	b.n	800211a <main+0xbd2>
						  }else if ( parameter.leadscrew_pitch > MAX_LEADSCREWPITCH){
 80020fa:	4b5d      	ldr	r3, [pc, #372]	; (8002270 <main+0xd28>)
 80020fc:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002100:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002104:	ee07 3a10 	vmov	s14, r3
 8002108:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800210c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002110:	dd03      	ble.n	800211a <main+0xbd2>
							  parameter.leadscrew_pitch = MAX_LEADSCREWPITCH;
 8002112:	4b57      	ldr	r3, [pc, #348]	; (8002270 <main+0xd28>)
 8002114:	4a5a      	ldr	r2, [pc, #360]	; (8002280 <main+0xd38>)
 8002116:	f8c3 2006 	str.w	r2, [r3, #6]
						  }
						  LCD_Write_Float_Number(parameter.leadscrew_pitch,0,2);
 800211a:	4b55      	ldr	r3, [pc, #340]	; (8002270 <main+0xd28>)
 800211c:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002120:	2102      	movs	r1, #2
 8002122:	2000      	movs	r0, #0
 8002124:	ee00 3a10 	vmov	s0, r3
 8002128:	f001 f8f4 	bl	8003314 <LCD_Write_Float_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 800212c:	f001 fb5a 	bl	80037e4 <Encoder_Switch_Status_Read>
 8002130:	4603      	mov	r3, r0
 8002132:	2b01      	cmp	r3, #1
 8002134:	f040 83a1 	bne.w	800287a <main+0x1332>
						configuration_status += 1;
 8002138:	4b52      	ldr	r3, [pc, #328]	; (8002284 <main+0xd3c>)
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	4b50      	ldr	r3, [pc, #320]	; (8002284 <main+0xd3c>)
 8002142:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8002144:	4b46      	ldr	r3, [pc, #280]	; (8002260 <main+0xd18>)
 8002146:	2201      	movs	r2, #1
 8002148:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 800214a:	e396      	b.n	800287a <main+0x1332>
				  case 4:
					  if (lcd_update){
 800214c:	4b44      	ldr	r3, [pc, #272]	; (8002260 <main+0xd18>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d028      	beq.n	80021a6 <main+0xc5e>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8002154:	f000 feb0 	bl	8002eb8 <Encoder_Read>
 8002158:	4602      	mov	r2, r0
 800215a:	4b42      	ldr	r3, [pc, #264]	; (8002264 <main+0xd1c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4413      	add	r3, r2
 8002160:	4a40      	ldr	r2, [pc, #256]	; (8002264 <main+0xd1c>)
 8002162:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8002164:	f7fe fe92 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 8002168:	2100      	movs	r1, #0
 800216a:	2003      	movs	r0, #3
 800216c:	f7fe feb8 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8002170:	483d      	ldr	r0, [pc, #244]	; (8002268 <main+0xd20>)
 8002172:	f7fe fee7 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 8002176:	2101      	movs	r1, #1
 8002178:	2000      	movs	r0, #0
 800217a:	f7fe feb1 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Maximum Feedrate:");
 800217e:	4842      	ldr	r0, [pc, #264]	; (8002288 <main+0xd40>)
 8002180:	f7fe fee0 	bl	8000f44 <lcdPrint>
						  LCD_Write_Number(parameter.max_feedrate, 0, 2);
 8002184:	4b3a      	ldr	r3, [pc, #232]	; (8002270 <main+0xd28>)
 8002186:	895b      	ldrh	r3, [r3, #10]
 8002188:	2202      	movs	r2, #2
 800218a:	2100      	movs	r1, #0
 800218c:	4618      	mov	r0, r3
 800218e:	f000 fed3 	bl	8002f38 <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 8002192:	2102      	movs	r1, #2
 8002194:	200a      	movs	r0, #10
 8002196:	f7fe fea3 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(mm/min)");
 800219a:	483c      	ldr	r0, [pc, #240]	; (800228c <main+0xd44>)
 800219c:	f7fe fed2 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 80021a0:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <main+0xd18>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 80021a6:	f000 fe87 	bl	8002eb8 <Encoder_Read>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b32      	ldr	r3, [pc, #200]	; (8002278 <main+0xd30>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4413      	add	r3, r2
 80021b2:	4a31      	ldr	r2, [pc, #196]	; (8002278 <main+0xd30>)
 80021b4:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 80021b6:	4b30      	ldr	r3, [pc, #192]	; (8002278 <main+0xd30>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <main+0xd1c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d037      	beq.n	8002232 <main+0xcea>
						  parameter.max_feedrate = parameter.max_feedrate + ( 50*(current_encoder_value - old_encoder_value) );
 80021c2:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <main+0xd28>)
 80021c4:	895a      	ldrh	r2, [r3, #10]
 80021c6:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <main+0xd30>)
 80021c8:	6819      	ldr	r1, [r3, #0]
 80021ca:	4b26      	ldr	r3, [pc, #152]	; (8002264 <main+0xd1c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	1acb      	subs	r3, r1, r3
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	4619      	mov	r1, r3
 80021d4:	0089      	lsls	r1, r1, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	4619      	mov	r1, r3
 80021da:	0088      	lsls	r0, r1, #2
 80021dc:	4619      	mov	r1, r3
 80021de:	4603      	mov	r3, r0
 80021e0:	440b      	add	r3, r1
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	4b21      	ldr	r3, [pc, #132]	; (8002270 <main+0xd28>)
 80021ec:	815a      	strh	r2, [r3, #10]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <main+0xd30>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1c      	ldr	r2, [pc, #112]	; (8002264 <main+0xd1c>)
 80021f4:	6013      	str	r3, [r2, #0]
						  if ( parameter.max_feedrate < 100 || ( parameter.max_feedrate >= (MAX_LIMIT_FEEDRATE + 20000) ) ){
 80021f6:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <main+0xd28>)
 80021f8:	895b      	ldrh	r3, [r3, #10]
 80021fa:	2b63      	cmp	r3, #99	; 0x63
 80021fc:	d905      	bls.n	800220a <main+0xcc2>
 80021fe:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <main+0xd28>)
 8002200:	895b      	ldrh	r3, [r3, #10]
 8002202:	f245 02db 	movw	r2, #20699	; 0x50db
 8002206:	4293      	cmp	r3, r2
 8002208:	d903      	bls.n	8002212 <main+0xcca>
							  parameter.max_feedrate = 100;
 800220a:	4b19      	ldr	r3, [pc, #100]	; (8002270 <main+0xd28>)
 800220c:	2264      	movs	r2, #100	; 0x64
 800220e:	815a      	strh	r2, [r3, #10]
 8002210:	e008      	b.n	8002224 <main+0xcdc>
						  }else if ( parameter.max_feedrate > MAX_LIMIT_FEEDRATE){
 8002212:	4b17      	ldr	r3, [pc, #92]	; (8002270 <main+0xd28>)
 8002214:	895b      	ldrh	r3, [r3, #10]
 8002216:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800221a:	d903      	bls.n	8002224 <main+0xcdc>
							  parameter.max_feedrate = MAX_LIMIT_FEEDRATE;
 800221c:	4b14      	ldr	r3, [pc, #80]	; (8002270 <main+0xd28>)
 800221e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002222:	815a      	strh	r2, [r3, #10]
						  }
						  LCD_Write_Number(parameter.max_feedrate, 0, 2);
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <main+0xd28>)
 8002226:	895b      	ldrh	r3, [r3, #10]
 8002228:	2202      	movs	r2, #2
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fe83 	bl	8002f38 <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8002232:	f001 fad7 	bl	80037e4 <Encoder_Switch_Status_Read>
 8002236:	4603      	mov	r3, r0
 8002238:	2b01      	cmp	r3, #1
 800223a:	f040 8321 	bne.w	8002880 <main+0x1338>
						configuration_status += 1;
 800223e:	4b11      	ldr	r3, [pc, #68]	; (8002284 <main+0xd3c>)
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	3301      	adds	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <main+0xd3c>)
 8002248:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 800224a:	4b05      	ldr	r3, [pc, #20]	; (8002260 <main+0xd18>)
 800224c:	2201      	movs	r2, #1
 800224e:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8002250:	e316      	b.n	8002880 <main+0x1338>
 8002252:	bf00      	nop
 8002254:	f3af 8000 	nop.w
 8002258:	47ae147b 	.word	0x47ae147b
 800225c:	3f847ae1 	.word	0x3f847ae1
 8002260:	200006b8 	.word	0x200006b8
 8002264:	20000004 	.word	0x20000004
 8002268:	08007950 	.word	0x08007950
 800226c:	080079e0 	.word	0x080079e0
 8002270:	2000066c 	.word	0x2000066c
 8002274:	080079f4 	.word	0x080079f4
 8002278:	20000000 	.word	0x20000000
 800227c:	3c23d70a 	.word	0x3c23d70a
 8002280:	41200000 	.word	0x41200000
 8002284:	20000668 	.word	0x20000668
 8002288:	08007a00 	.word	0x08007a00
 800228c:	08007a14 	.word	0x08007a14
				  case 5:
					  if (lcd_update){
 8002290:	4b82      	ldr	r3, [pc, #520]	; (800249c <main+0xf54>)
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d028      	beq.n	80022ea <main+0xda2>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8002298:	f000 fe0e 	bl	8002eb8 <Encoder_Read>
 800229c:	4602      	mov	r2, r0
 800229e:	4b80      	ldr	r3, [pc, #512]	; (80024a0 <main+0xf58>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	4a7e      	ldr	r2, [pc, #504]	; (80024a0 <main+0xf58>)
 80022a6:	6013      	str	r3, [r2, #0]
						  lcdClear();
 80022a8:	f7fe fdf0 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 80022ac:	2100      	movs	r1, #0
 80022ae:	2003      	movs	r0, #3
 80022b0:	f7fe fe16 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 80022b4:	487b      	ldr	r0, [pc, #492]	; (80024a4 <main+0xf5c>)
 80022b6:	f7fe fe45 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 80022ba:	2101      	movs	r1, #1
 80022bc:	2000      	movs	r0, #0
 80022be:	f7fe fe0f 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Fast Mov Feedrate:");
 80022c2:	4879      	ldr	r0, [pc, #484]	; (80024a8 <main+0xf60>)
 80022c4:	f7fe fe3e 	bl	8000f44 <lcdPrint>
						  LCD_Write_Number(parameter.fast_movement_feedrate, 0, 2);
 80022c8:	4b78      	ldr	r3, [pc, #480]	; (80024ac <main+0xf64>)
 80022ca:	899b      	ldrh	r3, [r3, #12]
 80022cc:	2202      	movs	r2, #2
 80022ce:	2100      	movs	r1, #0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fe31 	bl	8002f38 <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 80022d6:	2102      	movs	r1, #2
 80022d8:	200a      	movs	r0, #10
 80022da:	f7fe fe01 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(mm/min)");
 80022de:	4874      	ldr	r0, [pc, #464]	; (80024b0 <main+0xf68>)
 80022e0:	f7fe fe30 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 80022e4:	4b6d      	ldr	r3, [pc, #436]	; (800249c <main+0xf54>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 80022ea:	f000 fde5 	bl	8002eb8 <Encoder_Read>
 80022ee:	4602      	mov	r2, r0
 80022f0:	4b70      	ldr	r3, [pc, #448]	; (80024b4 <main+0xf6c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4413      	add	r3, r2
 80022f6:	4a6f      	ldr	r2, [pc, #444]	; (80024b4 <main+0xf6c>)
 80022f8:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 80022fa:	4b6e      	ldr	r3, [pc, #440]	; (80024b4 <main+0xf6c>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4b68      	ldr	r3, [pc, #416]	; (80024a0 <main+0xf58>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d037      	beq.n	8002376 <main+0xe2e>
						  parameter.fast_movement_feedrate = parameter.fast_movement_feedrate + ( 50*(current_encoder_value - old_encoder_value) );
 8002306:	4b69      	ldr	r3, [pc, #420]	; (80024ac <main+0xf64>)
 8002308:	899a      	ldrh	r2, [r3, #12]
 800230a:	4b6a      	ldr	r3, [pc, #424]	; (80024b4 <main+0xf6c>)
 800230c:	6819      	ldr	r1, [r3, #0]
 800230e:	4b64      	ldr	r3, [pc, #400]	; (80024a0 <main+0xf58>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	1acb      	subs	r3, r1, r3
 8002314:	b29b      	uxth	r3, r3
 8002316:	4619      	mov	r1, r3
 8002318:	0089      	lsls	r1, r1, #2
 800231a:	440b      	add	r3, r1
 800231c:	4619      	mov	r1, r3
 800231e:	0088      	lsls	r0, r1, #2
 8002320:	4619      	mov	r1, r3
 8002322:	4603      	mov	r3, r0
 8002324:	440b      	add	r3, r1
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	b29b      	uxth	r3, r3
 800232a:	4413      	add	r3, r2
 800232c:	b29a      	uxth	r2, r3
 800232e:	4b5f      	ldr	r3, [pc, #380]	; (80024ac <main+0xf64>)
 8002330:	819a      	strh	r2, [r3, #12]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8002332:	4b60      	ldr	r3, [pc, #384]	; (80024b4 <main+0xf6c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a5a      	ldr	r2, [pc, #360]	; (80024a0 <main+0xf58>)
 8002338:	6013      	str	r3, [r2, #0]
						  if ( parameter.fast_movement_feedrate < 50 || ( parameter.fast_movement_feedrate >= (MAX_FAST_MOVEMENT_FEEDRATE + 20000) )){
 800233a:	4b5c      	ldr	r3, [pc, #368]	; (80024ac <main+0xf64>)
 800233c:	899b      	ldrh	r3, [r3, #12]
 800233e:	2b31      	cmp	r3, #49	; 0x31
 8002340:	d905      	bls.n	800234e <main+0xe06>
 8002342:	4b5a      	ldr	r3, [pc, #360]	; (80024ac <main+0xf64>)
 8002344:	899b      	ldrh	r3, [r3, #12]
 8002346:	f245 02db 	movw	r2, #20699	; 0x50db
 800234a:	4293      	cmp	r3, r2
 800234c:	d903      	bls.n	8002356 <main+0xe0e>
							  parameter.fast_movement_feedrate = 50;
 800234e:	4b57      	ldr	r3, [pc, #348]	; (80024ac <main+0xf64>)
 8002350:	2232      	movs	r2, #50	; 0x32
 8002352:	819a      	strh	r2, [r3, #12]
 8002354:	e008      	b.n	8002368 <main+0xe20>
						  }else if ( parameter.fast_movement_feedrate > MAX_FAST_MOVEMENT_FEEDRATE){
 8002356:	4b55      	ldr	r3, [pc, #340]	; (80024ac <main+0xf64>)
 8002358:	899b      	ldrh	r3, [r3, #12]
 800235a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800235e:	d903      	bls.n	8002368 <main+0xe20>
							  parameter.fast_movement_feedrate = MAX_FAST_MOVEMENT_FEEDRATE;
 8002360:	4b52      	ldr	r3, [pc, #328]	; (80024ac <main+0xf64>)
 8002362:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002366:	819a      	strh	r2, [r3, #12]
						  }
						  LCD_Write_Number(parameter.fast_movement_feedrate, 0, 2);
 8002368:	4b50      	ldr	r3, [pc, #320]	; (80024ac <main+0xf64>)
 800236a:	899b      	ldrh	r3, [r3, #12]
 800236c:	2202      	movs	r2, #2
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fde1 	bl	8002f38 <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8002376:	f001 fa35 	bl	80037e4 <Encoder_Switch_Status_Read>
 800237a:	4603      	mov	r3, r0
 800237c:	2b01      	cmp	r3, #1
 800237e:	f040 8282 	bne.w	8002886 <main+0x133e>
						configuration_status += 1;
 8002382:	4b4d      	ldr	r3, [pc, #308]	; (80024b8 <main+0xf70>)
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	3301      	adds	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	4b4b      	ldr	r3, [pc, #300]	; (80024b8 <main+0xf70>)
 800238c:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 800238e:	4b43      	ldr	r3, [pc, #268]	; (800249c <main+0xf54>)
 8002390:	2201      	movs	r2, #1
 8002392:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8002394:	e277      	b.n	8002886 <main+0x133e>
				  case 6:
					  if (lcd_update){
 8002396:	4b41      	ldr	r3, [pc, #260]	; (800249c <main+0xf54>)
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d028      	beq.n	80023f0 <main+0xea8>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 800239e:	f000 fd8b 	bl	8002eb8 <Encoder_Read>
 80023a2:	4602      	mov	r2, r0
 80023a4:	4b3e      	ldr	r3, [pc, #248]	; (80024a0 <main+0xf58>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4413      	add	r3, r2
 80023aa:	4a3d      	ldr	r2, [pc, #244]	; (80024a0 <main+0xf58>)
 80023ac:	6013      	str	r3, [r2, #0]
						  lcdClear();
 80023ae:	f7fe fd6d 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 80023b2:	2100      	movs	r1, #0
 80023b4:	2003      	movs	r0, #3
 80023b6:	f7fe fd93 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 80023ba:	483a      	ldr	r0, [pc, #232]	; (80024a4 <main+0xf5c>)
 80023bc:	f7fe fdc2 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 80023c0:	2101      	movs	r1, #1
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7fe fd8c 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Initial Feedrate:");
 80023c8:	483c      	ldr	r0, [pc, #240]	; (80024bc <main+0xf74>)
 80023ca:	f7fe fdbb 	bl	8000f44 <lcdPrint>
						  LCD_Write_Number(parameter.initial_feedrate, 0, 2);
 80023ce:	4b37      	ldr	r3, [pc, #220]	; (80024ac <main+0xf64>)
 80023d0:	8a5b      	ldrh	r3, [r3, #18]
 80023d2:	2202      	movs	r2, #2
 80023d4:	2100      	movs	r1, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fdae 	bl	8002f38 <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 80023dc:	2102      	movs	r1, #2
 80023de:	200a      	movs	r0, #10
 80023e0:	f7fe fd7e 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(mm/min)");
 80023e4:	4832      	ldr	r0, [pc, #200]	; (80024b0 <main+0xf68>)
 80023e6:	f7fe fdad 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 80023ea:	4b2c      	ldr	r3, [pc, #176]	; (800249c <main+0xf54>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 80023f0:	f000 fd62 	bl	8002eb8 <Encoder_Read>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <main+0xf6c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	4a2d      	ldr	r2, [pc, #180]	; (80024b4 <main+0xf6c>)
 80023fe:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8002400:	4b2c      	ldr	r3, [pc, #176]	; (80024b4 <main+0xf6c>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <main+0xf58>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d036      	beq.n	800247a <main+0xf32>
						  parameter.initial_feedrate = parameter.initial_feedrate + ( 10*(current_encoder_value - old_encoder_value) );
 800240c:	4b27      	ldr	r3, [pc, #156]	; (80024ac <main+0xf64>)
 800240e:	8a5a      	ldrh	r2, [r3, #18]
 8002410:	4b28      	ldr	r3, [pc, #160]	; (80024b4 <main+0xf6c>)
 8002412:	6819      	ldr	r1, [r3, #0]
 8002414:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <main+0xf58>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	1acb      	subs	r3, r1, r3
 800241a:	b29b      	uxth	r3, r3
 800241c:	4619      	mov	r1, r3
 800241e:	0089      	lsls	r1, r1, #2
 8002420:	440b      	add	r3, r1
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	b29b      	uxth	r3, r3
 8002426:	4413      	add	r3, r2
 8002428:	b29a      	uxth	r2, r3
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <main+0xf64>)
 800242c:	825a      	strh	r2, [r3, #18]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 800242e:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <main+0xf6c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <main+0xf58>)
 8002434:	6013      	str	r3, [r2, #0]
						  if ( parameter.initial_feedrate < 10 || ( parameter.initial_feedrate >= (parameter.max_feedrate + 20000) )){
 8002436:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <main+0xf64>)
 8002438:	8a5b      	ldrh	r3, [r3, #18]
 800243a:	2b09      	cmp	r3, #9
 800243c:	d908      	bls.n	8002450 <main+0xf08>
 800243e:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <main+0xf64>)
 8002440:	895b      	ldrh	r3, [r3, #10]
 8002442:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8002446:	331f      	adds	r3, #31
 8002448:	4a18      	ldr	r2, [pc, #96]	; (80024ac <main+0xf64>)
 800244a:	8a52      	ldrh	r2, [r2, #18]
 800244c:	4293      	cmp	r3, r2
 800244e:	da03      	bge.n	8002458 <main+0xf10>
							  parameter.initial_feedrate = 10;
 8002450:	4b16      	ldr	r3, [pc, #88]	; (80024ac <main+0xf64>)
 8002452:	220a      	movs	r2, #10
 8002454:	825a      	strh	r2, [r3, #18]
 8002456:	e009      	b.n	800246c <main+0xf24>
						  }else if ( parameter.initial_feedrate > parameter.max_feedrate){
 8002458:	4b14      	ldr	r3, [pc, #80]	; (80024ac <main+0xf64>)
 800245a:	8a5a      	ldrh	r2, [r3, #18]
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <main+0xf64>)
 800245e:	895b      	ldrh	r3, [r3, #10]
 8002460:	429a      	cmp	r2, r3
 8002462:	d903      	bls.n	800246c <main+0xf24>
							  parameter.initial_feedrate = parameter.max_feedrate;
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <main+0xf64>)
 8002466:	895a      	ldrh	r2, [r3, #10]
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <main+0xf64>)
 800246a:	825a      	strh	r2, [r3, #18]
						  }
						  LCD_Write_Number(parameter.initial_feedrate, 0, 2);
 800246c:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <main+0xf64>)
 800246e:	8a5b      	ldrh	r3, [r3, #18]
 8002470:	2202      	movs	r2, #2
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fd5f 	bl	8002f38 <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 800247a:	f001 f9b3 	bl	80037e4 <Encoder_Switch_Status_Read>
 800247e:	4603      	mov	r3, r0
 8002480:	2b01      	cmp	r3, #1
 8002482:	f040 8203 	bne.w	800288c <main+0x1344>
						configuration_status += 1;
 8002486:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <main+0xf70>)
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	3301      	adds	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <main+0xf70>)
 8002490:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8002492:	4b02      	ldr	r3, [pc, #8]	; (800249c <main+0xf54>)
 8002494:	2201      	movs	r2, #1
 8002496:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8002498:	e1f8      	b.n	800288c <main+0x1344>
 800249a:	bf00      	nop
 800249c:	200006b8 	.word	0x200006b8
 80024a0:	20000004 	.word	0x20000004
 80024a4:	08007950 	.word	0x08007950
 80024a8:	08007a20 	.word	0x08007a20
 80024ac:	2000066c 	.word	0x2000066c
 80024b0:	08007a14 	.word	0x08007a14
 80024b4:	20000000 	.word	0x20000000
 80024b8:	20000668 	.word	0x20000668
 80024bc:	08007a34 	.word	0x08007a34
				  case 7:
					  if (lcd_update){
 80024c0:	4b95      	ldr	r3, [pc, #596]	; (8002718 <main+0x11d0>)
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d028      	beq.n	800251a <main+0xfd2>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 80024c8:	f000 fcf6 	bl	8002eb8 <Encoder_Read>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4b93      	ldr	r3, [pc, #588]	; (800271c <main+0x11d4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4413      	add	r3, r2
 80024d4:	4a91      	ldr	r2, [pc, #580]	; (800271c <main+0x11d4>)
 80024d6:	6013      	str	r3, [r2, #0]
						  lcdClear();
 80024d8:	f7fe fcd8 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 80024dc:	2100      	movs	r1, #0
 80024de:	2003      	movs	r0, #3
 80024e0:	f7fe fcfe 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 80024e4:	488e      	ldr	r0, [pc, #568]	; (8002720 <main+0x11d8>)
 80024e6:	f7fe fd2d 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 80024ea:	2101      	movs	r1, #1
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7fe fcf7 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Acc Time:");
 80024f2:	488c      	ldr	r0, [pc, #560]	; (8002724 <main+0x11dc>)
 80024f4:	f7fe fd26 	bl	8000f44 <lcdPrint>
						  LCD_Write_Number(parameter.acc_time, 0, 2);
 80024f8:	4b8b      	ldr	r3, [pc, #556]	; (8002728 <main+0x11e0>)
 80024fa:	89db      	ldrh	r3, [r3, #14]
 80024fc:	2202      	movs	r2, #2
 80024fe:	2100      	movs	r1, #0
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fd19 	bl	8002f38 <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 8002506:	2102      	movs	r1, #2
 8002508:	200a      	movs	r0, #10
 800250a:	f7fe fce9 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(ms)");
 800250e:	4887      	ldr	r0, [pc, #540]	; (800272c <main+0x11e4>)
 8002510:	f7fe fd18 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 8002514:	4b80      	ldr	r3, [pc, #512]	; (8002718 <main+0x11d0>)
 8002516:	2200      	movs	r2, #0
 8002518:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 800251a:	f000 fccd 	bl	8002eb8 <Encoder_Read>
 800251e:	4602      	mov	r2, r0
 8002520:	4b83      	ldr	r3, [pc, #524]	; (8002730 <main+0x11e8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4413      	add	r3, r2
 8002526:	4a82      	ldr	r2, [pc, #520]	; (8002730 <main+0x11e8>)
 8002528:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 800252a:	4b81      	ldr	r3, [pc, #516]	; (8002730 <main+0x11e8>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	4b7b      	ldr	r3, [pc, #492]	; (800271c <main+0x11d4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d03a      	beq.n	80025ac <main+0x1064>
						  parameter.acc_time = parameter.acc_time + ( 100*(current_encoder_value - old_encoder_value) );
 8002536:	4b7c      	ldr	r3, [pc, #496]	; (8002728 <main+0x11e0>)
 8002538:	89da      	ldrh	r2, [r3, #14]
 800253a:	4b7d      	ldr	r3, [pc, #500]	; (8002730 <main+0x11e8>)
 800253c:	6819      	ldr	r1, [r3, #0]
 800253e:	4b77      	ldr	r3, [pc, #476]	; (800271c <main+0x11d4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	1acb      	subs	r3, r1, r3
 8002544:	b29b      	uxth	r3, r3
 8002546:	4619      	mov	r1, r3
 8002548:	0089      	lsls	r1, r1, #2
 800254a:	440b      	add	r3, r1
 800254c:	4619      	mov	r1, r3
 800254e:	0088      	lsls	r0, r1, #2
 8002550:	4619      	mov	r1, r3
 8002552:	4603      	mov	r3, r0
 8002554:	440b      	add	r3, r1
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	b29b      	uxth	r3, r3
 800255a:	4413      	add	r3, r2
 800255c:	b29a      	uxth	r2, r3
 800255e:	4b72      	ldr	r3, [pc, #456]	; (8002728 <main+0x11e0>)
 8002560:	81da      	strh	r2, [r3, #14]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8002562:	4b73      	ldr	r3, [pc, #460]	; (8002730 <main+0x11e8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a6d      	ldr	r2, [pc, #436]	; (800271c <main+0x11d4>)
 8002568:	6013      	str	r3, [r2, #0]
						  if ( ( parameter.acc_time < MIN_ACCELERATION_TIME ) || ( parameter.acc_time >= (MAX_ACCELERATION_TIME + 20000) )){
 800256a:	4b6f      	ldr	r3, [pc, #444]	; (8002728 <main+0x11e0>)
 800256c:	89db      	ldrh	r3, [r3, #14]
 800256e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002572:	d305      	bcc.n	8002580 <main+0x1038>
 8002574:	4b6c      	ldr	r3, [pc, #432]	; (8002728 <main+0x11e0>)
 8002576:	89db      	ldrh	r3, [r3, #14]
 8002578:	f246 12a7 	movw	r2, #24999	; 0x61a7
 800257c:	4293      	cmp	r3, r2
 800257e:	d904      	bls.n	800258a <main+0x1042>
							  parameter.acc_time = MIN_ACCELERATION_TIME;
 8002580:	4b69      	ldr	r3, [pc, #420]	; (8002728 <main+0x11e0>)
 8002582:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002586:	81da      	strh	r2, [r3, #14]
 8002588:	e009      	b.n	800259e <main+0x1056>
						  }else if ( parameter.acc_time > MAX_ACCELERATION_TIME){
 800258a:	4b67      	ldr	r3, [pc, #412]	; (8002728 <main+0x11e0>)
 800258c:	89db      	ldrh	r3, [r3, #14]
 800258e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d903      	bls.n	800259e <main+0x1056>
							  parameter.acc_time = MAX_ACCELERATION_TIME;
 8002596:	4b64      	ldr	r3, [pc, #400]	; (8002728 <main+0x11e0>)
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	81da      	strh	r2, [r3, #14]
						  }
						  LCD_Write_Number(parameter.acc_time, 0, 2);
 800259e:	4b62      	ldr	r3, [pc, #392]	; (8002728 <main+0x11e0>)
 80025a0:	89db      	ldrh	r3, [r3, #14]
 80025a2:	2202      	movs	r2, #2
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fcc6 	bl	8002f38 <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 80025ac:	f001 f91a 	bl	80037e4 <Encoder_Switch_Status_Read>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	f040 816d 	bne.w	8002892 <main+0x134a>
						configuration_status += 1;
 80025b8:	4b5e      	ldr	r3, [pc, #376]	; (8002734 <main+0x11ec>)
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	4b5c      	ldr	r3, [pc, #368]	; (8002734 <main+0x11ec>)
 80025c2:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 80025c4:	4b54      	ldr	r3, [pc, #336]	; (8002718 <main+0x11d0>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 80025ca:	e162      	b.n	8002892 <main+0x134a>
				  case 8:
					  if (lcd_update){
 80025cc:	4b52      	ldr	r3, [pc, #328]	; (8002718 <main+0x11d0>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d028      	beq.n	8002626 <main+0x10de>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 80025d4:	f000 fc70 	bl	8002eb8 <Encoder_Read>
 80025d8:	4602      	mov	r2, r0
 80025da:	4b50      	ldr	r3, [pc, #320]	; (800271c <main+0x11d4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	4a4e      	ldr	r2, [pc, #312]	; (800271c <main+0x11d4>)
 80025e2:	6013      	str	r3, [r2, #0]
						  lcdClear();
 80025e4:	f7fe fc52 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 80025e8:	2100      	movs	r1, #0
 80025ea:	2003      	movs	r0, #3
 80025ec:	f7fe fc78 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 80025f0:	484b      	ldr	r0, [pc, #300]	; (8002720 <main+0x11d8>)
 80025f2:	f7fe fca7 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 80025f6:	2101      	movs	r1, #1
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7fe fc71 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Acc Update Ratio:");
 80025fe:	484e      	ldr	r0, [pc, #312]	; (8002738 <main+0x11f0>)
 8002600:	f7fe fca0 	bl	8000f44 <lcdPrint>
						  LCD_Write_Number(parameter.acc_update_ratio, 0, 2);
 8002604:	4b48      	ldr	r3, [pc, #288]	; (8002728 <main+0x11e0>)
 8002606:	8a1b      	ldrh	r3, [r3, #16]
 8002608:	2202      	movs	r2, #2
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fc93 	bl	8002f38 <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 8002612:	2102      	movs	r1, #2
 8002614:	200a      	movs	r0, #10
 8002616:	f7fe fc63 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(ms)");
 800261a:	4844      	ldr	r0, [pc, #272]	; (800272c <main+0x11e4>)
 800261c:	f7fe fc92 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 8002620:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <main+0x11d0>)
 8002622:	2200      	movs	r2, #0
 8002624:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8002626:	f000 fc47 	bl	8002eb8 <Encoder_Read>
 800262a:	4602      	mov	r2, r0
 800262c:	4b40      	ldr	r3, [pc, #256]	; (8002730 <main+0x11e8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4413      	add	r3, r2
 8002632:	4a3f      	ldr	r2, [pc, #252]	; (8002730 <main+0x11e8>)
 8002634:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8002636:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <main+0x11e8>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	4b38      	ldr	r3, [pc, #224]	; (800271c <main+0x11d4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d032      	beq.n	80026a8 <main+0x1160>
						  parameter.acc_update_ratio = parameter.acc_update_ratio + ( 10*(current_encoder_value - old_encoder_value) );
 8002642:	4b39      	ldr	r3, [pc, #228]	; (8002728 <main+0x11e0>)
 8002644:	8a1a      	ldrh	r2, [r3, #16]
 8002646:	4b3a      	ldr	r3, [pc, #232]	; (8002730 <main+0x11e8>)
 8002648:	6819      	ldr	r1, [r3, #0]
 800264a:	4b34      	ldr	r3, [pc, #208]	; (800271c <main+0x11d4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	1acb      	subs	r3, r1, r3
 8002650:	b29b      	uxth	r3, r3
 8002652:	4619      	mov	r1, r3
 8002654:	0089      	lsls	r1, r1, #2
 8002656:	440b      	add	r3, r1
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	b29b      	uxth	r3, r3
 800265c:	4413      	add	r3, r2
 800265e:	b29a      	uxth	r2, r3
 8002660:	4b31      	ldr	r3, [pc, #196]	; (8002728 <main+0x11e0>)
 8002662:	821a      	strh	r2, [r3, #16]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8002664:	4b32      	ldr	r3, [pc, #200]	; (8002730 <main+0x11e8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a2c      	ldr	r2, [pc, #176]	; (800271c <main+0x11d4>)
 800266a:	6013      	str	r3, [r2, #0]
						  if ( ( parameter.acc_update_ratio < MIN_ACC_UPDATE_RATIO ) || ( parameter.acc_update_ratio >= (MAX_ACC_UPDATE_RATIO + 20000) )){
 800266c:	4b2e      	ldr	r3, [pc, #184]	; (8002728 <main+0x11e0>)
 800266e:	8a1b      	ldrh	r3, [r3, #16]
 8002670:	2b13      	cmp	r3, #19
 8002672:	d905      	bls.n	8002680 <main+0x1138>
 8002674:	4b2c      	ldr	r3, [pc, #176]	; (8002728 <main+0x11e0>)
 8002676:	8a1b      	ldrh	r3, [r3, #16]
 8002678:	f644 724b 	movw	r2, #20299	; 0x4f4b
 800267c:	4293      	cmp	r3, r2
 800267e:	d903      	bls.n	8002688 <main+0x1140>
							  parameter.acc_update_ratio = MIN_ACC_UPDATE_RATIO;
 8002680:	4b29      	ldr	r3, [pc, #164]	; (8002728 <main+0x11e0>)
 8002682:	2214      	movs	r2, #20
 8002684:	821a      	strh	r2, [r3, #16]
 8002686:	e008      	b.n	800269a <main+0x1152>
						  }else if ( parameter.acc_update_ratio > MAX_ACC_UPDATE_RATIO){
 8002688:	4b27      	ldr	r3, [pc, #156]	; (8002728 <main+0x11e0>)
 800268a:	8a1b      	ldrh	r3, [r3, #16]
 800268c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002690:	d903      	bls.n	800269a <main+0x1152>
							  parameter.acc_update_ratio = MAX_ACC_UPDATE_RATIO;
 8002692:	4b25      	ldr	r3, [pc, #148]	; (8002728 <main+0x11e0>)
 8002694:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002698:	821a      	strh	r2, [r3, #16]
						  }
						  LCD_Write_Number(parameter.acc_update_ratio, 0, 2);
 800269a:	4b23      	ldr	r3, [pc, #140]	; (8002728 <main+0x11e0>)
 800269c:	8a1b      	ldrh	r3, [r3, #16]
 800269e:	2202      	movs	r2, #2
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fc48 	bl	8002f38 <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 80026a8:	f001 f89c 	bl	80037e4 <Encoder_Switch_Status_Read>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	f040 80f2 	bne.w	8002898 <main+0x1350>
						configuration_status += 1;
 80026b4:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <main+0x11ec>)
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <main+0x11ec>)
 80026be:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 80026c0:	4b15      	ldr	r3, [pc, #84]	; (8002718 <main+0x11d0>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 80026c6:	e0e7      	b.n	8002898 <main+0x1350>
				  case 9:
					  if (lcd_update){
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <main+0x11d0>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d045      	beq.n	800275c <main+0x1214>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 80026d0:	f000 fbf2 	bl	8002eb8 <Encoder_Read>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <main+0x11d4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4413      	add	r3, r2
 80026dc:	4a0f      	ldr	r2, [pc, #60]	; (800271c <main+0x11d4>)
 80026de:	6013      	str	r3, [r2, #0]
						  lcdClear();
 80026e0:	f7fe fbd4 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 80026e4:	2100      	movs	r1, #0
 80026e6:	2003      	movs	r0, #3
 80026e8:	f7fe fbfa 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 80026ec:	480c      	ldr	r0, [pc, #48]	; (8002720 <main+0x11d8>)
 80026ee:	f7fe fc29 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 80026f2:	2101      	movs	r1, #1
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7fe fbf3 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Save Configuration");
 80026fa:	4810      	ldr	r0, [pc, #64]	; (800273c <main+0x11f4>)
 80026fc:	f7fe fc22 	bl	8000f44 <lcdPrint>
						  if ( save_bool == FALSE){		//If parameter is FALSE Print not inverted
 8002700:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <main+0x11f8>)
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d11f      	bne.n	8002748 <main+0x1200>
							lcdSetCursor(0, 2);
 8002708:	2102      	movs	r1, #2
 800270a:	2000      	movs	r0, #0
 800270c:	f7fe fbe8 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("EXIT WITHOUT SAVE");
 8002710:	480c      	ldr	r0, [pc, #48]	; (8002744 <main+0x11fc>)
 8002712:	f7fe fc17 	bl	8000f44 <lcdPrint>
 8002716:	e01e      	b.n	8002756 <main+0x120e>
 8002718:	200006b8 	.word	0x200006b8
 800271c:	20000004 	.word	0x20000004
 8002720:	08007950 	.word	0x08007950
 8002724:	08007a48 	.word	0x08007a48
 8002728:	2000066c 	.word	0x2000066c
 800272c:	08007a54 	.word	0x08007a54
 8002730:	20000000 	.word	0x20000000
 8002734:	20000668 	.word	0x20000668
 8002738:	08007a5c 	.word	0x08007a5c
 800273c:	08007a70 	.word	0x08007a70
 8002740:	200006b4 	.word	0x200006b4
 8002744:	08007a84 	.word	0x08007a84
						  }else{									//If parameter is TRUE Print inverted
							lcdSetCursor(0, 2);
 8002748:	2102      	movs	r1, #2
 800274a:	2000      	movs	r0, #0
 800274c:	f7fe fbc8 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("SAVE PARAMETERS  ");
 8002750:	4854      	ldr	r0, [pc, #336]	; (80028a4 <main+0x135c>)
 8002752:	f7fe fbf7 	bl	8000f44 <lcdPrint>
						  }
						  lcd_update = FALSE;
 8002756:	4b54      	ldr	r3, [pc, #336]	; (80028a8 <main+0x1360>)
 8002758:	2200      	movs	r2, #0
 800275a:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 800275c:	f000 fbac 	bl	8002eb8 <Encoder_Read>
 8002760:	4602      	mov	r2, r0
 8002762:	4b52      	ldr	r3, [pc, #328]	; (80028ac <main+0x1364>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4413      	add	r3, r2
 8002768:	4a50      	ldr	r2, [pc, #320]	; (80028ac <main+0x1364>)
 800276a:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 800276c:	4b4f      	ldr	r3, [pc, #316]	; (80028ac <main+0x1364>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b4f      	ldr	r3, [pc, #316]	; (80028b0 <main+0x1368>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d01c      	beq.n	80027b2 <main+0x126a>
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8002778:	4b4c      	ldr	r3, [pc, #304]	; (80028ac <main+0x1364>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a4c      	ldr	r2, [pc, #304]	; (80028b0 <main+0x1368>)
 800277e:	6013      	str	r3, [r2, #0]
						  if (save_bool){					//Change the value
 8002780:	4b4c      	ldr	r3, [pc, #304]	; (80028b4 <main+0x136c>)
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <main+0x1256>
							lcdSetCursor(0, 2);
 8002788:	2102      	movs	r1, #2
 800278a:	2000      	movs	r0, #0
 800278c:	f7fe fba8 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("EXIT WITHOUT SAVE");
 8002790:	4849      	ldr	r0, [pc, #292]	; (80028b8 <main+0x1370>)
 8002792:	f7fe fbd7 	bl	8000f44 <lcdPrint>
							save_bool = FALSE;
 8002796:	4b47      	ldr	r3, [pc, #284]	; (80028b4 <main+0x136c>)
 8002798:	2200      	movs	r2, #0
 800279a:	801a      	strh	r2, [r3, #0]
 800279c:	e009      	b.n	80027b2 <main+0x126a>
						  }else{
							lcdSetCursor(0, 2);
 800279e:	2102      	movs	r1, #2
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7fe fb9d 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("SAVE PARAMETERS  ");
 80027a6:	483f      	ldr	r0, [pc, #252]	; (80028a4 <main+0x135c>)
 80027a8:	f7fe fbcc 	bl	8000f44 <lcdPrint>
							save_bool = TRUE;
 80027ac:	4b41      	ldr	r3, [pc, #260]	; (80028b4 <main+0x136c>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	801a      	strh	r2, [r3, #0]
						  }
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 80027b2:	f001 f817 	bl	80037e4 <Encoder_Switch_Status_Read>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d170      	bne.n	800289e <main+0x1356>
						configuration_status += 1;
 80027bc:	4b3f      	ldr	r3, [pc, #252]	; (80028bc <main+0x1374>)
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	3301      	adds	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	4b3d      	ldr	r3, [pc, #244]	; (80028bc <main+0x1374>)
 80027c6:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 80027c8:	4b37      	ldr	r3, [pc, #220]	; (80028a8 <main+0x1360>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 80027ce:	e066      	b.n	800289e <main+0x1356>
				  case 10:
					  if (save_bool == TRUE){
 80027d0:	4b38      	ldr	r3, [pc, #224]	; (80028b4 <main+0x136c>)
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d12d      	bne.n	8002834 <main+0x12ec>
						  parameter.first_load = 0;		//Change byte load to 0 to avoid entering again
 80027d8:	4b39      	ldr	r3, [pc, #228]	; (80028c0 <main+0x1378>)
 80027da:	2200      	movs	r2, #0
 80027dc:	829a      	strh	r2, [r3, #20]
						  if (Save_Parameter_Data(struct_ptr)){
 80027de:	4b39      	ldr	r3, [pc, #228]	; (80028c4 <main+0x137c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f001 f8c6 	bl	8003974 <Save_Parameter_Data>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00d      	beq.n	800280a <main+0x12c2>
							  lcdClear();
 80027ee:	f7fe fb4d 	bl	8000e8c <lcdClear>
							  lcdSetCursor(5,1);
 80027f2:	2101      	movs	r1, #1
 80027f4:	2005      	movs	r0, #5
 80027f6:	f7fe fb73 	bl	8000ee0 <lcdSetCursor>
							  lcdPrint("DATA SAVED");
 80027fa:	4833      	ldr	r0, [pc, #204]	; (80028c8 <main+0x1380>)
 80027fc:	f7fe fba2 	bl	8000f44 <lcdPrint>
							  HAL_Delay(1500);
 8002800:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002804:	f001 fbda 	bl	8003fbc <HAL_Delay>
 8002808:	e021      	b.n	800284e <main+0x1306>
						  }else{
							  lcdClear();
 800280a:	f7fe fb3f 	bl	8000e8c <lcdClear>
							  lcdSetCursor(0,1);
 800280e:	2101      	movs	r1, #1
 8002810:	2000      	movs	r0, #0
 8002812:	f7fe fb65 	bl	8000ee0 <lcdSetCursor>
							  lcdPrint("ERROR DEFAULT VALUES");
 8002816:	482d      	ldr	r0, [pc, #180]	; (80028cc <main+0x1384>)
 8002818:	f7fe fb94 	bl	8000f44 <lcdPrint>
							  lcdSetCursor(7,2);
 800281c:	2102      	movs	r1, #2
 800281e:	2007      	movs	r0, #7
 8002820:	f7fe fb5e 	bl	8000ee0 <lcdSetCursor>
							  lcdPrint("LOADED");
 8002824:	482a      	ldr	r0, [pc, #168]	; (80028d0 <main+0x1388>)
 8002826:	f7fe fb8d 	bl	8000f44 <lcdPrint>
							  HAL_Delay(1500);
 800282a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800282e:	f001 fbc5 	bl	8003fbc <HAL_Delay>
 8002832:	e00c      	b.n	800284e <main+0x1306>
						  }
					  }else{
						  lcdClear();
 8002834:	f7fe fb2a 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 1);
 8002838:	2101      	movs	r1, #1
 800283a:	2003      	movs	r0, #3
 800283c:	f7fe fb50 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("DATA NOT SAVED");
 8002840:	4824      	ldr	r0, [pc, #144]	; (80028d4 <main+0x138c>)
 8002842:	f7fe fb7f 	bl	8000f44 <lcdPrint>
						  HAL_Delay(2000);
 8002846:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800284a:	f001 fbb7 	bl	8003fbc <HAL_Delay>
					  }
					  state = INITIALIZATION;
 800284e:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <main+0x1390>)
 8002850:	2200      	movs	r2, #0
 8002852:	801a      	strh	r2, [r3, #0]
					  break;
 8002854:	e024      	b.n	80028a0 <main+0x1358>
	  		  break;
 8002856:	bf00      	nop
 8002858:	f7fe bf73 	b.w	8001742 <main+0x1fa>
	  		  break;
 800285c:	bf00      	nop
 800285e:	f7fe bf70 	b.w	8001742 <main+0x1fa>
	  		  break;
 8002862:	bf00      	nop
 8002864:	f7fe bf6d 	b.w	8001742 <main+0x1fa>
					  break;
 8002868:	bf00      	nop
 800286a:	f7fe bf6a 	b.w	8001742 <main+0x1fa>
					  break;
 800286e:	bf00      	nop
 8002870:	f7fe bf67 	b.w	8001742 <main+0x1fa>
					  break;
 8002874:	bf00      	nop
 8002876:	f7fe bf64 	b.w	8001742 <main+0x1fa>
					  break;
 800287a:	bf00      	nop
 800287c:	f7fe bf61 	b.w	8001742 <main+0x1fa>
					  break;
 8002880:	bf00      	nop
 8002882:	f7fe bf5e 	b.w	8001742 <main+0x1fa>
					  break;
 8002886:	bf00      	nop
 8002888:	f7fe bf5b 	b.w	8001742 <main+0x1fa>
					  break;
 800288c:	bf00      	nop
 800288e:	f7fe bf58 	b.w	8001742 <main+0x1fa>
					  break;
 8002892:	bf00      	nop
 8002894:	f7fe bf55 	b.w	8001742 <main+0x1fa>
					  break;
 8002898:	bf00      	nop
 800289a:	f7fe bf52 	b.w	8001742 <main+0x1fa>
					  break;
 800289e:	bf00      	nop
	  switch (state)
 80028a0:	f7fe bf4f 	b.w	8001742 <main+0x1fa>
 80028a4:	08007a98 	.word	0x08007a98
 80028a8:	200006b8 	.word	0x200006b8
 80028ac:	20000000 	.word	0x20000000
 80028b0:	20000004 	.word	0x20000004
 80028b4:	200006b4 	.word	0x200006b4
 80028b8:	08007a84 	.word	0x08007a84
 80028bc:	20000668 	.word	0x20000668
 80028c0:	2000066c 	.word	0x2000066c
 80028c4:	2000069c 	.word	0x2000069c
 80028c8:	08007aac 	.word	0x08007aac
 80028cc:	08007ab8 	.word	0x08007ab8
 80028d0:	08007ad0 	.word	0x08007ad0
 80028d4:	08007ad8 	.word	0x08007ad8
 80028d8:	20000664 	.word	0x20000664

080028dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b094      	sub	sp, #80	; 0x50
 80028e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028e2:	f107 0320 	add.w	r3, r7, #32
 80028e6:	2230      	movs	r2, #48	; 0x30
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f004 fb7e 	bl	8006fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028f0:	f107 030c 	add.w	r3, r7, #12
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002900:	2300      	movs	r3, #0
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	4b28      	ldr	r3, [pc, #160]	; (80029a8 <SystemClock_Config+0xcc>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	4a27      	ldr	r2, [pc, #156]	; (80029a8 <SystemClock_Config+0xcc>)
 800290a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290e:	6413      	str	r3, [r2, #64]	; 0x40
 8002910:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <SystemClock_Config+0xcc>)
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800291c:	2300      	movs	r3, #0
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	4b22      	ldr	r3, [pc, #136]	; (80029ac <SystemClock_Config+0xd0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002928:	4a20      	ldr	r2, [pc, #128]	; (80029ac <SystemClock_Config+0xd0>)
 800292a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <SystemClock_Config+0xd0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800293c:	2301      	movs	r3, #1
 800293e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002940:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002946:	2302      	movs	r3, #2
 8002948:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800294a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800294e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002950:	2319      	movs	r3, #25
 8002952:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002954:	23a8      	movs	r3, #168	; 0xa8
 8002956:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002958:	2304      	movs	r3, #4
 800295a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800295c:	2304      	movs	r3, #4
 800295e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002960:	f107 0320 	add.w	r3, r7, #32
 8002964:	4618      	mov	r0, r3
 8002966:	f002 fd49 	bl	80053fc <HAL_RCC_OscConfig>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002970:	f001 f866 	bl	8003a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002974:	230f      	movs	r3, #15
 8002976:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002978:	2302      	movs	r3, #2
 800297a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002980:	2300      	movs	r3, #0
 8002982:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002988:	f107 030c 	add.w	r3, r7, #12
 800298c:	2101      	movs	r1, #1
 800298e:	4618      	mov	r0, r3
 8002990:	f002 ffac 	bl	80058ec <HAL_RCC_ClockConfig>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800299a:	f001 f851 	bl	8003a40 <Error_Handler>
  }
}
 800299e:	bf00      	nop
 80029a0:	3750      	adds	r7, #80	; 0x50
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40007000 	.word	0x40007000

080029b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029b6:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <MX_I2C1_Init+0x54>)
 80029b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029bc:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <MX_I2C1_Init+0x58>)
 80029be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029c6:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029e0:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029ec:	4804      	ldr	r0, [pc, #16]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029ee:	f002 f8b9 	bl	8004b64 <HAL_I2C_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029f8:	f001 f822 	bl	8003a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200004a8 	.word	0x200004a8
 8002a04:	40005400 	.word	0x40005400
 8002a08:	000186a0 	.word	0x000186a0

08002a0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08c      	sub	sp, #48	; 0x30
 8002a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a12:	f107 030c 	add.w	r3, r7, #12
 8002a16:	2224      	movs	r2, #36	; 0x24
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 fae6 	bl	8006fec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a28:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <MX_TIM1_Init+0xb8>)
 8002a2a:	4a27      	ldr	r2, [pc, #156]	; (8002ac8 <MX_TIM1_Init+0xbc>)
 8002a2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a2e:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <MX_TIM1_Init+0xb8>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a34:	4b23      	ldr	r3, [pc, #140]	; (8002ac4 <MX_TIM1_Init+0xb8>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002a3a:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <MX_TIM1_Init+0xb8>)
 8002a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <MX_TIM1_Init+0xb8>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a48:	4b1e      	ldr	r3, [pc, #120]	; (8002ac4 <MX_TIM1_Init+0xb8>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <MX_TIM1_Init+0xb8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a54:	2301      	movs	r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8002a64:	2302      	movs	r3, #2
 8002a66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8002a74:	2302      	movs	r3, #2
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4811      	ldr	r0, [pc, #68]	; (8002ac4 <MX_TIM1_Init+0xb8>)
 8002a80:	f003 fb20 	bl	80060c4 <HAL_TIM_Encoder_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002a8a:	f000 ffd9 	bl	8003a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	480a      	ldr	r0, [pc, #40]	; (8002ac4 <MX_TIM1_Init+0xb8>)
 8002a9c:	f004 f9ec 	bl	8006e78 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002aa6:	f000 ffcb 	bl	8003a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->CNT = 0x7FFF;		//Initialization CNT in middle value to avoid Over/Under flow
 8002aaa:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <MX_TIM1_Init+0xbc>)
 8002aac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24
  TIM1->SR = ~(1UL << 0);	//Clear UIF flag
 8002ab2:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <MX_TIM1_Init+0xbc>)
 8002ab4:	f06f 0201 	mvn.w	r2, #1
 8002ab8:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM1_Init 2 */

}
 8002aba:	bf00      	nop
 8002abc:	3730      	adds	r7, #48	; 0x30
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200004fc 	.word	0x200004fc
 8002ac8:	40010000 	.word	0x40010000

08002acc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08e      	sub	sp, #56	; 0x38
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	609a      	str	r2, [r3, #8]
 8002ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae0:	f107 0320 	add.w	r3, r7, #32
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
 8002af8:	615a      	str	r2, [r3, #20]
 8002afa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002afc:	4b2c      	ldr	r3, [pc, #176]	; (8002bb0 <MX_TIM2_Init+0xe4>)
 8002afe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002b04:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <MX_TIM2_Init+0xe4>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b0a:	4b29      	ldr	r3, [pc, #164]	; (8002bb0 <MX_TIM2_Init+0xe4>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 8002b10:	4b27      	ldr	r3, [pc, #156]	; (8002bb0 <MX_TIM2_Init+0xe4>)
 8002b12:	2202      	movs	r2, #2
 8002b14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b16:	4b26      	ldr	r3, [pc, #152]	; (8002bb0 <MX_TIM2_Init+0xe4>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b1c:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <MX_TIM2_Init+0xe4>)
 8002b1e:	2280      	movs	r2, #128	; 0x80
 8002b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b22:	4823      	ldr	r0, [pc, #140]	; (8002bb0 <MX_TIM2_Init+0xe4>)
 8002b24:	f003 f8ae 	bl	8005c84 <HAL_TIM_Base_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002b2e:	f000 ff87 	bl	8003a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	481c      	ldr	r0, [pc, #112]	; (8002bb0 <MX_TIM2_Init+0xe4>)
 8002b40:	f003 fdde 	bl	8006700 <HAL_TIM_ConfigClockSource>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002b4a:	f000 ff79 	bl	8003a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b4e:	4818      	ldr	r0, [pc, #96]	; (8002bb0 <MX_TIM2_Init+0xe4>)
 8002b50:	f003 f94a 	bl	8005de8 <HAL_TIM_PWM_Init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002b5a:	f000 ff71 	bl	8003a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b66:	f107 0320 	add.w	r3, r7, #32
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4810      	ldr	r0, [pc, #64]	; (8002bb0 <MX_TIM2_Init+0xe4>)
 8002b6e:	f004 f983 	bl	8006e78 <HAL_TIMEx_MasterConfigSynchronization>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002b78:	f000 ff62 	bl	8003a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b7c:	2360      	movs	r3, #96	; 0x60
 8002b7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8002b80:	2301      	movs	r3, #1
 8002b82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002b88:	2304      	movs	r3, #4
 8002b8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b8c:	1d3b      	adds	r3, r7, #4
 8002b8e:	2200      	movs	r2, #0
 8002b90:	4619      	mov	r1, r3
 8002b92:	4807      	ldr	r0, [pc, #28]	; (8002bb0 <MX_TIM2_Init+0xe4>)
 8002b94:	f003 fcf2 	bl	800657c <HAL_TIM_PWM_ConfigChannel>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002b9e:	f000 ff4f 	bl	8003a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002ba2:	4803      	ldr	r0, [pc, #12]	; (8002bb0 <MX_TIM2_Init+0xe4>)
 8002ba4:	f001 f89a 	bl	8003cdc <HAL_TIM_MspPostInit>

}
 8002ba8:	bf00      	nop
 8002baa:	3738      	adds	r7, #56	; 0x38
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000544 	.word	0x20000544

08002bb4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */
	float TIM9_period_ms = (float)TIMER9_PERIOD/1000;		//Period to load into the timer, calculated from Define
 8002bba:	4b24      	ldr	r3, [pc, #144]	; (8002c4c <MX_TIM9_Init+0x98>)
 8002bbc:	617b      	str	r3, [r7, #20]
	uint16_t TIM9_preescaler = 642;							//Preescaler, max 1 second
 8002bbe:	f240 2382 	movw	r3, #642	; 0x282
 8002bc2:	827b      	strh	r3, [r7, #18]
	uint16_t TIM9_ARR;
	TIM9_ARR = ( (float) (CLK_FREQ_T2/(TIM9_preescaler+1))*TIM9_period_ms );	//Calculation value for ARR register to set correct period
 8002bc4:	8a7b      	ldrh	r3, [r7, #18]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	4a21      	ldr	r2, [pc, #132]	; (8002c50 <MX_TIM9_Init+0x9c>)
 8002bca:	fb92 f3f3 	sdiv	r3, r2, r3
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002be2:	ee17 3a90 	vmov	r3, s15
 8002be6:	823b      	strh	r3, [r7, #16]
  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002be8:	463b      	mov	r3, r7
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	605a      	str	r2, [r3, #4]
 8002bf0:	609a      	str	r2, [r3, #8]
 8002bf2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002bf4:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <MX_TIM9_Init+0xa0>)
 8002bf6:	4a18      	ldr	r2, [pc, #96]	; (8002c58 <MX_TIM9_Init+0xa4>)
 8002bf8:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = TIM9_preescaler;
 8002bfa:	8a7b      	ldrh	r3, [r7, #18]
 8002bfc:	4a15      	ldr	r2, [pc, #84]	; (8002c54 <MX_TIM9_Init+0xa0>)
 8002bfe:	6053      	str	r3, [r2, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c00:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <MX_TIM9_Init+0xa0>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = TIM9_ARR;
 8002c06:	8a3b      	ldrh	r3, [r7, #16]
 8002c08:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <MX_TIM9_Init+0xa0>)
 8002c0a:	60d3      	str	r3, [r2, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <MX_TIM9_Init+0xa0>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <MX_TIM9_Init+0xa0>)
 8002c14:	2280      	movs	r2, #128	; 0x80
 8002c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002c18:	480e      	ldr	r0, [pc, #56]	; (8002c54 <MX_TIM9_Init+0xa0>)
 8002c1a:	f003 f833 	bl	8005c84 <HAL_TIM_Base_Init>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8002c24:	f000 ff0c 	bl	8003a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c2c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002c2e:	463b      	mov	r3, r7
 8002c30:	4619      	mov	r1, r3
 8002c32:	4808      	ldr	r0, [pc, #32]	; (8002c54 <MX_TIM9_Init+0xa0>)
 8002c34:	f003 fd64 	bl	8006700 <HAL_TIM_ConfigClockSource>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_TIM9_Init+0x8e>
  {
    Error_Handler();
 8002c3e:	f000 feff 	bl	8003a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002c42:	bf00      	nop
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	3dcccccd 	.word	0x3dcccccd
 8002c50:	0280de80 	.word	0x0280de80
 8002c54:	2000058c 	.word	0x2000058c
 8002c58:	40014000 	.word	0x40014000

08002c5c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */
	float TIM10_period_ms = (float)DEBOUNCING_TIME/1000;		//Period to load into the timer, calculated from Define
 8002c62:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <MX_TIM10_Init+0x70>)
 8002c64:	607b      	str	r3, [r7, #4]
	uint16_t TIM10_preescaler = 642;							//Preescaler, max 1 second
 8002c66:	f240 2382 	movw	r3, #642	; 0x282
 8002c6a:	807b      	strh	r3, [r7, #2]
	uint16_t TIM10_ARR;
	TIM10_ARR = ( (float) (CLK_FREQ_T2/(TIM10_preescaler+1))*TIM10_period_ms );	//Calculation value for ARR register to set correct period
 8002c6c:	887b      	ldrh	r3, [r7, #2]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	4a17      	ldr	r2, [pc, #92]	; (8002cd0 <MX_TIM10_Init+0x74>)
 8002c72:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c76:	ee07 3a90 	vmov	s15, r3
 8002c7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c8a:	ee17 3a90 	vmov	r3, s15
 8002c8e:	803b      	strh	r3, [r7, #0]
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002c90:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <MX_TIM10_Init+0x78>)
 8002c92:	4a11      	ldr	r2, [pc, #68]	; (8002cd8 <MX_TIM10_Init+0x7c>)
 8002c94:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = TIM10_preescaler;
 8002c96:	887b      	ldrh	r3, [r7, #2]
 8002c98:	4a0e      	ldr	r2, [pc, #56]	; (8002cd4 <MX_TIM10_Init+0x78>)
 8002c9a:	6053      	str	r3, [r2, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c9c:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <MX_TIM10_Init+0x78>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = TIM10_ARR;
 8002ca2:	883b      	ldrh	r3, [r7, #0]
 8002ca4:	4a0b      	ldr	r2, [pc, #44]	; (8002cd4 <MX_TIM10_Init+0x78>)
 8002ca6:	60d3      	str	r3, [r2, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <MX_TIM10_Init+0x78>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <MX_TIM10_Init+0x78>)
 8002cb0:	2280      	movs	r2, #128	; 0x80
 8002cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002cb4:	4807      	ldr	r0, [pc, #28]	; (8002cd4 <MX_TIM10_Init+0x78>)
 8002cb6:	f002 ffe5 	bl	8005c84 <HAL_TIM_Base_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_TIM10_Init+0x68>
  {
    Error_Handler();
 8002cc0:	f000 febe 	bl	8003a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	3dcccccd 	.word	0x3dcccccd
 8002cd0:	0280de80 	.word	0x0280de80
 8002cd4:	200005d4 	.word	0x200005d4
 8002cd8:	40014400 	.word	0x40014400

08002cdc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */
  float TIM11_period_ms = (float)ACC_UPDATE_RATIO/1000;		//Period to load into the timer, calculated from Define
 8002ce2:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <MX_TIM11_Init+0x60>)
 8002ce4:	607b      	str	r3, [r7, #4]
  uint16_t TIM11_ARR;
  TIM11_ARR = ( (float) (CLK_FREQ_T2/(TIM11_preescaler+1))*TIM11_period_ms );	//Calculation value for ARR register to set correct period
 8002ce6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cea:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002d40 <MX_TIM11_Init+0x64>
 8002cee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cf6:	ee17 3a90 	vmov	r3, s15
 8002cfa:	807b      	strh	r3, [r7, #2]
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <MX_TIM11_Init+0x68>)
 8002cfe:	4a12      	ldr	r2, [pc, #72]	; (8002d48 <MX_TIM11_Init+0x6c>)
 8002d00:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = TIM11_preescaler;
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <MX_TIM11_Init+0x68>)
 8002d04:	f240 2282 	movw	r2, #642	; 0x282
 8002d08:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <MX_TIM11_Init+0x68>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = TIM11_ARR;
 8002d10:	887b      	ldrh	r3, [r7, #2]
 8002d12:	4a0c      	ldr	r2, [pc, #48]	; (8002d44 <MX_TIM11_Init+0x68>)
 8002d14:	60d3      	str	r3, [r2, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d16:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <MX_TIM11_Init+0x68>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d1c:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <MX_TIM11_Init+0x68>)
 8002d1e:	2280      	movs	r2, #128	; 0x80
 8002d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002d22:	4808      	ldr	r0, [pc, #32]	; (8002d44 <MX_TIM11_Init+0x68>)
 8002d24:	f002 ffae 	bl	8005c84 <HAL_TIM_Base_Init>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_TIM11_Init+0x56>
  {
    Error_Handler();
 8002d2e:	f000 fe87 	bl	8003a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	3d4ccccd 	.word	0x3d4ccccd
 8002d40:	477f2600 	.word	0x477f2600
 8002d44:	2000061c 	.word	0x2000061c
 8002d48:	40014800 	.word	0x40014800

08002d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d52:	f107 030c 	add.w	r3, r7, #12
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
 8002d5e:	60da      	str	r2, [r3, #12]
 8002d60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	4b26      	ldr	r3, [pc, #152]	; (8002e00 <MX_GPIO_Init+0xb4>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	4a25      	ldr	r2, [pc, #148]	; (8002e00 <MX_GPIO_Init+0xb4>)
 8002d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d70:	6313      	str	r3, [r2, #48]	; 0x30
 8002d72:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <MX_GPIO_Init+0xb4>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	607b      	str	r3, [r7, #4]
 8002d82:	4b1f      	ldr	r3, [pc, #124]	; (8002e00 <MX_GPIO_Init+0xb4>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a1e      	ldr	r2, [pc, #120]	; (8002e00 <MX_GPIO_Init+0xb4>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <MX_GPIO_Init+0xb4>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	607b      	str	r3, [r7, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	4b18      	ldr	r3, [pc, #96]	; (8002e00 <MX_GPIO_Init+0xb4>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a17      	ldr	r2, [pc, #92]	; (8002e00 <MX_GPIO_Init+0xb4>)
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <MX_GPIO_Init+0xb4>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	603b      	str	r3, [r7, #0]
 8002db4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_Pin|DIR_Pin, GPIO_PIN_RESET);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2106      	movs	r1, #6
 8002dba:	4812      	ldr	r0, [pc, #72]	; (8002e04 <MX_GPIO_Init+0xb8>)
 8002dbc:	f001 feb8 	bl	8004b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENABLE_Pin DIR_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin|DIR_Pin;
 8002dc0:	2306      	movs	r3, #6
 8002dc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd0:	f107 030c 	add.w	r3, r7, #12
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	480b      	ldr	r0, [pc, #44]	; (8002e04 <MX_GPIO_Init+0xb8>)
 8002dd8:	f001 fd0e 	bl	80047f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_LEFT_Pin SW_RIGHT_Pin SEC_SW_Pin EN_SW_Pin */
  GPIO_InitStruct.Pin = SW_LEFT_Pin|SW_RIGHT_Pin|SEC_SW_Pin|EN_SW_Pin;
 8002ddc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002de0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dea:	f107 030c 	add.w	r3, r7, #12
 8002dee:	4619      	mov	r1, r3
 8002df0:	4805      	ldr	r0, [pc, #20]	; (8002e08 <MX_GPIO_Init+0xbc>)
 8002df2:	f001 fd01 	bl	80047f8 <HAL_GPIO_Init>

}
 8002df6:	bf00      	nop
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40020000 	.word	0x40020000
 8002e08:	40020400 	.word	0x40020400

08002e0c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	if (htim == &htim11 ){		//Checking if the IRQ is from Timer11 Acceleration
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a1f      	ldr	r2, [pc, #124]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d103      	bne.n	8002e24 <HAL_TIM_PeriodElapsedCallback+0x18>
		update_speed = 1;
 8002e1c:	4b1e      	ldr	r3, [pc, #120]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	801a      	strh	r2, [r3, #0]
			aux_debouncing = 0;
		}
	}else if( htim == &htim9 ){
		delay100ms_counter += 1;
	}
}
 8002e22:	e031      	b.n	8002e88 <HAL_TIM_PeriodElapsedCallback+0x7c>
	}else if ( htim == &htim10 ){	//Checking if the IRQ is from Timer10 Debouncing
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a1d      	ldr	r2, [pc, #116]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d124      	bne.n	8002e76 <HAL_TIM_PeriodElapsedCallback+0x6a>
		if (debouncing_en_sw){		//If debouncing enable, increment counter
 8002e2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d006      	beq.n	8002e42 <HAL_TIM_PeriodElapsedCallback+0x36>
			debouncing = debouncing + 1;
 8002e34:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002e3e:	801a      	strh	r2, [r3, #0]
 8002e40:	e006      	b.n	8002e50 <HAL_TIM_PeriodElapsedCallback+0x44>
		}else if (!debouncing_en_sw){	//If debouncing disable reset counter
 8002e42:	4b17      	ldr	r3, [pc, #92]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <HAL_TIM_PeriodElapsedCallback+0x44>
			debouncing = 0;
 8002e4a:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	801a      	strh	r2, [r3, #0]
		if (debouncing_aux_sw){		//If debouncing enable, increment counter
 8002e50:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d006      	beq.n	8002e66 <HAL_TIM_PeriodElapsedCallback+0x5a>
			aux_debouncing = aux_debouncing + 1;
 8002e58:	4b14      	ldr	r3, [pc, #80]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	4b12      	ldr	r3, [pc, #72]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002e62:	801a      	strh	r2, [r3, #0]
}
 8002e64:	e010      	b.n	8002e88 <HAL_TIM_PeriodElapsedCallback+0x7c>
		}else if (!debouncing_aux_sw){	//If debouncing disable reset counter
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10c      	bne.n	8002e88 <HAL_TIM_PeriodElapsedCallback+0x7c>
			aux_debouncing = 0;
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	801a      	strh	r2, [r3, #0]
}
 8002e74:	e008      	b.n	8002e88 <HAL_TIM_PeriodElapsedCallback+0x7c>
	}else if( htim == &htim9 ){
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a0d      	ldr	r2, [pc, #52]	; (8002eb0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d104      	bne.n	8002e88 <HAL_TIM_PeriodElapsedCallback+0x7c>
		delay100ms_counter += 1;
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3301      	adds	r3, #1
 8002e84:	4a0b      	ldr	r2, [pc, #44]	; (8002eb4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002e86:	6013      	str	r3, [r2, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	2000061c 	.word	0x2000061c
 8002e98:	200006b6 	.word	0x200006b6
 8002e9c:	200005d4 	.word	0x200005d4
 8002ea0:	200006ba 	.word	0x200006ba
 8002ea4:	200006be 	.word	0x200006be
 8002ea8:	200006bc 	.word	0x200006bc
 8002eac:	200006c0 	.word	0x200006c0
 8002eb0:	2000058c 	.word	0x2000058c
 8002eb4:	200006ac 	.word	0x200006ac

08002eb8 <Encoder_Read>:
  * @brief Encoder Steps Read Function
  * @param old_value - Pointer to the value storage as latest encoder value
  * @retval encoder_steps - Number of steps increased or decreased on the encoder
  */
int32_t Encoder_Read(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
	int32_t encoder_steps;
	static int32_t old_value = 0x7FFF;		//Initialisation old_value variable

	if (TIM1->SR & (1 << 0)){		//If overflow or underflow occurs reset the CNT value
 8002ebe:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <Encoder_Read+0x78>)
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00d      	beq.n	8002ee6 <Encoder_Read+0x2e>
		TIM1->SR = ~(1UL << 0);		//Reset UIF bit
 8002eca:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <Encoder_Read+0x78>)
 8002ecc:	f06f 0201 	mvn.w	r2, #1
 8002ed0:	611a      	str	r2, [r3, #16]
		TIM1->CNT = 0x7FFF;			//Reload CNT register to ox7FFF
 8002ed2:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <Encoder_Read+0x78>)
 8002ed4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24
		old_value = 0x7FFF;
 8002eda:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <Encoder_Read+0x7c>)
 8002edc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002ee0:	601a      	str	r2, [r3, #0]
		return 0;					//Return 0
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e01d      	b.n	8002f22 <Encoder_Read+0x6a>
	}

	uint16_t encoder_value = TIM1->CNT;		//Variable to storage the CNT register value
 8002ee6:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <Encoder_Read+0x78>)
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	80fb      	strh	r3, [r7, #6]
	if ( ( encoder_value - old_value >= 2 ) || ( encoder_value - old_value <= -2 ) ){		//If the value in the encoder register changed (At least 2, to avoid glitches) calculate increment
 8002eec:	88fa      	ldrh	r2, [r7, #6]
 8002eee:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <Encoder_Read+0x7c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	dc06      	bgt.n	8002f06 <Encoder_Read+0x4e>
 8002ef8:	88fa      	ldrh	r2, [r7, #6]
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <Encoder_Read+0x7c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	da0c      	bge.n	8002f20 <Encoder_Read+0x68>
		encoder_steps = (old_value - encoder_value)/2;	//Divide by 2 is needed due to increments by two on the encoder
 8002f06:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <Encoder_Read+0x7c>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	0fda      	lsrs	r2, r3, #31
 8002f10:	4413      	add	r3, r2
 8002f12:	105b      	asrs	r3, r3, #1
 8002f14:	603b      	str	r3, [r7, #0]
		old_value = encoder_value;			//Reload the old_value
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	4a06      	ldr	r2, [pc, #24]	; (8002f34 <Encoder_Read+0x7c>)
 8002f1a:	6013      	str	r3, [r2, #0]
		return encoder_steps;				//Return the increments, can be positive or negative
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	e000      	b.n	8002f22 <Encoder_Read+0x6a>
	}else{
		return 0;							//Return 0 in case no changes
 8002f20:	2300      	movs	r3, #0
	}
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40010000 	.word	0x40010000
 8002f34:	2000000c 	.word	0x2000000c

08002f38 <LCD_Write_Number>:
  * 		col_pos - column position for the number
  * 		row_pos - raw position for the number
  * @retval
  */
void LCD_Write_Number(int32_t value, int32_t col_pos, int32_t row_pos)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
	char str[10];					//Variable to storage the string
	sprintf(str, "%ld", value);		//Convert number to string
 8002f44:	f107 0314 	add.w	r3, r7, #20
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	498e      	ldr	r1, [pc, #568]	; (8003184 <LCD_Write_Number+0x24c>)
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f004 f855 	bl	8006ffc <siprintf>
	if (value > 0){					//If value is positive
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f340 809b 	ble.w	8003090 <LCD_Write_Number+0x158>
		if (value < 10){			//If value is lower than 10
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b09      	cmp	r3, #9
 8002f5e:	dc1a      	bgt.n	8002f96 <LCD_Write_Number+0x5e>
			lcdSetCursor(col_pos+1,row_pos);
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd ffb6 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(" ");
 8002f74:	4884      	ldr	r0, [pc, #528]	; (8003188 <LCD_Write_Number+0x250>)
 8002f76:	f7fd ffe5 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fd ffab 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 8002f8a:	f107 0314 	add.w	r3, r7, #20
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fd ffd8 	bl	8000f44 <lcdPrint>
		lcdSetCursor(col_pos,row_pos);
		lcdPrint("  ");
		lcdSetCursor(col_pos,row_pos);
		lcdPrint("0");
	}
}
 8002f94:	e0f2      	b.n	800317c <LCD_Write_Number+0x244>
		}else if (value < 100){		//If value is lower than 100
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b63      	cmp	r3, #99	; 0x63
 8002f9a:	dc1a      	bgt.n	8002fd2 <LCD_Write_Number+0x9a>
			lcdSetCursor(col_pos+2,row_pos);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd ff98 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(" ");
 8002fb0:	4875      	ldr	r0, [pc, #468]	; (8003188 <LCD_Write_Number+0x250>)
 8002fb2:	f7fd ffc7 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd ff8d 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 8002fc6:	f107 0314 	add.w	r3, r7, #20
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd ffba 	bl	8000f44 <lcdPrint>
}
 8002fd0:	e0d4      	b.n	800317c <LCD_Write_Number+0x244>
		}else if (value < 1000){	//If value is lower than 1000
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fd8:	da1a      	bge.n	8003010 <LCD_Write_Number+0xd8>
			lcdSetCursor(col_pos+3,row_pos);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	3303      	adds	r3, #3
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd ff79 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(" ");
 8002fee:	4866      	ldr	r0, [pc, #408]	; (8003188 <LCD_Write_Number+0x250>)
 8002ff0:	f7fd ffa8 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd ff6e 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 8003004:	f107 0314 	add.w	r3, r7, #20
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd ff9b 	bl	8000f44 <lcdPrint>
}
 800300e:	e0b5      	b.n	800317c <LCD_Write_Number+0x244>
		}else if (value < 10000){	//If value is lower than 10000
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f242 720f 	movw	r2, #9999	; 0x270f
 8003016:	4293      	cmp	r3, r2
 8003018:	dc1a      	bgt.n	8003050 <LCD_Write_Number+0x118>
			lcdSetCursor(col_pos+4,row_pos);
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	3304      	adds	r3, #4
 8003020:	b2db      	uxtb	r3, r3
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f7fd ff59 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(" ");
 800302e:	4856      	ldr	r0, [pc, #344]	; (8003188 <LCD_Write_Number+0x250>)
 8003030:	f7fd ff88 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	4611      	mov	r1, r2
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd ff4e 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 8003044:	f107 0314 	add.w	r3, r7, #20
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd ff7b 	bl	8000f44 <lcdPrint>
}
 800304e:	e095      	b.n	800317c <LCD_Write_Number+0x244>
		}else if (value < 100000){	//If value is lower than 100000
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a4e      	ldr	r2, [pc, #312]	; (800318c <LCD_Write_Number+0x254>)
 8003054:	4293      	cmp	r3, r2
 8003056:	f300 8091 	bgt.w	800317c <LCD_Write_Number+0x244>
			lcdSetCursor(col_pos+5,row_pos);
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	b2db      	uxtb	r3, r3
 800305e:	3305      	adds	r3, #5
 8003060:	b2db      	uxtb	r3, r3
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd ff39 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(" ");
 800306e:	4846      	ldr	r0, [pc, #280]	; (8003188 <LCD_Write_Number+0x250>)
 8003070:	f7fd ff68 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	4611      	mov	r1, r2
 800307e:	4618      	mov	r0, r3
 8003080:	f7fd ff2e 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 8003084:	f107 0314 	add.w	r3, r7, #20
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd ff5b 	bl	8000f44 <lcdPrint>
}
 800308e:	e075      	b.n	800317c <LCD_Write_Number+0x244>
	}else if (value < 0) {			//If value is negative
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	da5c      	bge.n	8003150 <LCD_Write_Number+0x218>
		if (value > -10){			//If value is higher than -10
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f113 0f09 	cmn.w	r3, #9
 800309c:	db1a      	blt.n	80030d4 <LCD_Write_Number+0x19c>
			lcdSetCursor(col_pos+2,row_pos);
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	3302      	adds	r3, #2
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fd ff17 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(" ");
 80030b2:	4835      	ldr	r0, [pc, #212]	; (8003188 <LCD_Write_Number+0x250>)
 80030b4:	f7fd ff46 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd ff0c 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 80030c8:	f107 0314 	add.w	r3, r7, #20
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fd ff39 	bl	8000f44 <lcdPrint>
}
 80030d2:	e053      	b.n	800317c <LCD_Write_Number+0x244>
		}else if (value > -100){	//If value is higher than -100
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80030da:	db1a      	blt.n	8003112 <LCD_Write_Number+0x1da>
			lcdSetCursor(col_pos+2,row_pos);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	3302      	adds	r3, #2
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd fef8 	bl	8000ee0 <lcdSetCursor>
			lcdPrint("  ");
 80030f0:	4827      	ldr	r0, [pc, #156]	; (8003190 <LCD_Write_Number+0x258>)
 80030f2:	f7fd ff27 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	4611      	mov	r1, r2
 8003100:	4618      	mov	r0, r3
 8003102:	f7fd feed 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 8003106:	f107 0314 	add.w	r3, r7, #20
 800310a:	4618      	mov	r0, r3
 800310c:	f7fd ff1a 	bl	8000f44 <lcdPrint>
}
 8003110:	e034      	b.n	800317c <LCD_Write_Number+0x244>
		}else if (value > -1000){	//If value is higher than -1000
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003118:	dd30      	ble.n	800317c <LCD_Write_Number+0x244>
			lcdSetCursor(col_pos+2,row_pos);
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	3302      	adds	r3, #2
 8003120:	b2db      	uxtb	r3, r3
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f7fd fed9 	bl	8000ee0 <lcdSetCursor>
			lcdPrint("   ");
 800312e:	4819      	ldr	r0, [pc, #100]	; (8003194 <LCD_Write_Number+0x25c>)
 8003130:	f7fd ff08 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f7fd fece 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	4618      	mov	r0, r3
 800314a:	f7fd fefb 	bl	8000f44 <lcdPrint>
}
 800314e:	e015      	b.n	800317c <LCD_Write_Number+0x244>
		lcdSetCursor(col_pos,row_pos);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	b2db      	uxtb	r3, r3
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd fec0 	bl	8000ee0 <lcdSetCursor>
		lcdPrint("  ");
 8003160:	480b      	ldr	r0, [pc, #44]	; (8003190 <LCD_Write_Number+0x258>)
 8003162:	f7fd feef 	bl	8000f44 <lcdPrint>
		lcdSetCursor(col_pos,row_pos);
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f7fd feb5 	bl	8000ee0 <lcdSetCursor>
		lcdPrint("0");
 8003176:	4808      	ldr	r0, [pc, #32]	; (8003198 <LCD_Write_Number+0x260>)
 8003178:	f7fd fee4 	bl	8000f44 <lcdPrint>
}
 800317c:	bf00      	nop
 800317e:	3720      	adds	r7, #32
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	08007ae8 	.word	0x08007ae8
 8003188:	08007aec 	.word	0x08007aec
 800318c:	0001869f 	.word	0x0001869f
 8003190:	08007af0 	.word	0x08007af0
 8003194:	08007af4 	.word	0x08007af4
 8003198:	08007af8 	.word	0x08007af8

0800319c <_float_to_char>:
  * @brief Function to convert float number to char
  * @param 	x - float value which expected to be converted
  * 		p - char used for the conversion
  * @retval Pointer to the char in which the value will be loaded
  */
static char * _float_to_char(float x, char *p) {
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80031a6:	6038      	str	r0, [r7, #0]
    char *s = p + CHAR_BUFF_SIZE; // go to end of buffer
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	3304      	adds	r3, #4
 80031ac:	617b      	str	r3, [r7, #20]
    uint16_t decimals;  // variable to store the decimals
    int units;  // variable to store the units (part to left of decimal place)
    if (x < 0) { // take care of negative numbers
 80031ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80031b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ba:	d51e      	bpl.n	80031fa <_float_to_char+0x5e>
        decimals = (int)(x * -100) % 100; // make 1000 for 3 decimals etc.
 80031bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80031c0:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003300 <_float_to_char+0x164>
 80031c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031cc:	ee17 2a90 	vmov	r2, s15
 80031d0:	4b4c      	ldr	r3, [pc, #304]	; (8003304 <_float_to_char+0x168>)
 80031d2:	fb83 1302 	smull	r1, r3, r3, r2
 80031d6:	1159      	asrs	r1, r3, #5
 80031d8:	17d3      	asrs	r3, r2, #31
 80031da:	1acb      	subs	r3, r1, r3
 80031dc:	2164      	movs	r1, #100	; 0x64
 80031de:	fb01 f303 	mul.w	r3, r1, r3
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	827b      	strh	r3, [r7, #18]
        units = (int)(-1 * x);
 80031e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80031ea:	eef1 7a67 	vneg.f32	s15, s15
 80031ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031f2:	ee17 3a90 	vmov	r3, s15
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	e01b      	b.n	8003232 <_float_to_char+0x96>
    } else { // positive numbers
        decimals = (int)(x * 100) % 100;
 80031fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80031fe:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8003308 <_float_to_char+0x16c>
 8003202:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800320a:	ee17 2a90 	vmov	r2, s15
 800320e:	4b3d      	ldr	r3, [pc, #244]	; (8003304 <_float_to_char+0x168>)
 8003210:	fb83 1302 	smull	r1, r3, r3, r2
 8003214:	1159      	asrs	r1, r3, #5
 8003216:	17d3      	asrs	r3, r2, #31
 8003218:	1acb      	subs	r3, r1, r3
 800321a:	2164      	movs	r1, #100	; 0x64
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	827b      	strh	r3, [r7, #18]
        units = (int)x;
 8003224:	edd7 7a01 	vldr	s15, [r7, #4]
 8003228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800322c:	ee17 3a90 	vmov	r3, s15
 8003230:	60fb      	str	r3, [r7, #12]
    }

    *--s = (decimals % 10) + '0';
 8003232:	8a7a      	ldrh	r2, [r7, #18]
 8003234:	4b35      	ldr	r3, [pc, #212]	; (800330c <_float_to_char+0x170>)
 8003236:	fba3 1302 	umull	r1, r3, r3, r2
 800323a:	08d9      	lsrs	r1, r3, #3
 800323c:	460b      	mov	r3, r1
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	b29b      	uxth	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	3a01      	subs	r2, #1
 800324e:	617a      	str	r2, [r7, #20]
 8003250:	3330      	adds	r3, #48	; 0x30
 8003252:	b2da      	uxtb	r2, r3
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	701a      	strb	r2, [r3, #0]
    decimals /= 10; // repeat for as many decimal places as you need
 8003258:	8a7b      	ldrh	r3, [r7, #18]
 800325a:	4a2c      	ldr	r2, [pc, #176]	; (800330c <_float_to_char+0x170>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	08db      	lsrs	r3, r3, #3
 8003262:	827b      	strh	r3, [r7, #18]
    *--s = (decimals % 10) + '0';
 8003264:	8a7a      	ldrh	r2, [r7, #18]
 8003266:	4b29      	ldr	r3, [pc, #164]	; (800330c <_float_to_char+0x170>)
 8003268:	fba3 1302 	umull	r1, r3, r3, r2
 800326c:	08d9      	lsrs	r1, r3, #3
 800326e:	460b      	mov	r3, r1
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	b29b      	uxth	r3, r3
 800327a:	b2db      	uxtb	r3, r3
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	3a01      	subs	r2, #1
 8003280:	617a      	str	r2, [r7, #20]
 8003282:	3330      	adds	r3, #48	; 0x30
 8003284:	b2da      	uxtb	r2, r3
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	701a      	strb	r2, [r3, #0]
    *--s = '.';
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	3b01      	subs	r3, #1
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	222e      	movs	r2, #46	; 0x2e
 8003294:	701a      	strb	r2, [r3, #0]

    while (units > 0) {
 8003296:	e01b      	b.n	80032d0 <_float_to_char+0x134>
        *--s = (units % 10) + '0';
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <_float_to_char+0x174>)
 800329c:	fb83 1302 	smull	r1, r3, r3, r2
 80032a0:	1099      	asrs	r1, r3, #2
 80032a2:	17d3      	asrs	r3, r2, #31
 80032a4:	1ac9      	subs	r1, r1, r3
 80032a6:	460b      	mov	r3, r1
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	1ad1      	subs	r1, r2, r3
 80032b0:	b2cb      	uxtb	r3, r1
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	3a01      	subs	r2, #1
 80032b6:	617a      	str	r2, [r7, #20]
 80032b8:	3330      	adds	r3, #48	; 0x30
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	701a      	strb	r2, [r3, #0]
        units /= 10;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a13      	ldr	r2, [pc, #76]	; (8003310 <_float_to_char+0x174>)
 80032c4:	fb82 1203 	smull	r1, r2, r2, r3
 80032c8:	1092      	asrs	r2, r2, #2
 80032ca:	17db      	asrs	r3, r3, #31
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	60fb      	str	r3, [r7, #12]
    while (units > 0) {
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	dce0      	bgt.n	8003298 <_float_to_char+0xfc>
    }
    if (x < 0) *--s = '-'; // unary minus sign for negative numbers
 80032d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80032da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e2:	d505      	bpl.n	80032f0 <_float_to_char+0x154>
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	222d      	movs	r2, #45	; 0x2d
 80032ee:	701a      	strb	r2, [r3, #0]
    return s;
 80032f0:	697b      	ldr	r3, [r7, #20]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	371c      	adds	r7, #28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	c2c80000 	.word	0xc2c80000
 8003304:	51eb851f 	.word	0x51eb851f
 8003308:	42c80000 	.word	0x42c80000
 800330c:	cccccccd 	.word	0xcccccccd
 8003310:	66666667 	.word	0x66666667

08003314 <LCD_Write_Float_Number>:
  * @param 	float_char - char expected to be writen
  * 		col_pos - column position for the number
  * 		row_pos - raw position for the number
  * @retval
  */
void LCD_Write_Float_Number(float float_char, int32_t col_pos_float, int32_t row_pos_float){
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	ed87 0a03 	vstr	s0, [r7, #12]
 800331e:	60b8      	str	r0, [r7, #8]
 8003320:	6079      	str	r1, [r7, #4]
	char float2char[CHAR_BUFF_SIZE+1];
	float2char[CHAR_BUFF_SIZE] = '\0';
 8003322:	2300      	movs	r3, #0
 8003324:	763b      	strb	r3, [r7, #24]
	char float1[4];						//Initualization array to save the output
	char *ptr = float1;
 8003326:	f107 0310 	add.w	r3, r7, #16
 800332a:	61fb      	str	r3, [r7, #28]
	if (float_char < 1 ){				//If float is lower than 1 print an extra 0 on the left
 800332c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003330:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333c:	d516      	bpl.n	800336c <LCD_Write_Float_Number+0x58>
		lcdSetCursor(col_pos_float, row_pos_float);
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd fdc9 	bl	8000ee0 <lcdSetCursor>
		lcdPrint("0");
 800334e:	4813      	ldr	r0, [pc, #76]	; (800339c <LCD_Write_Float_Number+0x88>)
 8003350:	f7fd fdf8 	bl	8000f44 <lcdPrint>
		ptr = _float_to_char(float_char,&float2char[0]);
 8003354:	f107 0314 	add.w	r3, r7, #20
 8003358:	4618      	mov	r0, r3
 800335a:	ed97 0a03 	vldr	s0, [r7, #12]
 800335e:	f7ff ff1d 	bl	800319c <_float_to_char>
 8003362:	61f8      	str	r0, [r7, #28]
		lcdPrint(ptr);
 8003364:	69f8      	ldr	r0, [r7, #28]
 8003366:	f7fd fded 	bl	8000f44 <lcdPrint>
	}else{
		ptr = _float_to_char(float_char,&float2char[0]);
		lcdSetCursor(col_pos_float, row_pos_float);
		lcdPrint(ptr);
	}
}
 800336a:	e012      	b.n	8003392 <LCD_Write_Float_Number+0x7e>
		ptr = _float_to_char(float_char,&float2char[0]);
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	4618      	mov	r0, r3
 8003372:	ed97 0a03 	vldr	s0, [r7, #12]
 8003376:	f7ff ff11 	bl	800319c <_float_to_char>
 800337a:	61f8      	str	r0, [r7, #28]
		lcdSetCursor(col_pos_float, row_pos_float);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	b2db      	uxtb	r3, r3
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	4611      	mov	r1, r2
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd fdaa 	bl	8000ee0 <lcdSetCursor>
		lcdPrint(ptr);
 800338c:	69f8      	ldr	r0, [r7, #28]
 800338e:	f7fd fdd9 	bl	8000f44 <lcdPrint>
}
 8003392:	bf00      	nop
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	08007af8 	.word	0x08007af8

080033a0 <Motor_Enable>:
/**
  * @brief Function to Enable EN signal for Motor Driver
  * @param 	invert - variable to invert the EN pin logic
  * @retval
  */
void Motor_Enable(uint16_t invert){
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, ENABLE_Pin, (GPIO_PIN_SET^invert));	//Enable Motor, XOR with SET to invert it if selected
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	f083 0301 	eor.w	r3, r3, #1
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	2102      	movs	r1, #2
 80033b8:	4803      	ldr	r0, [pc, #12]	; (80033c8 <Motor_Enable+0x28>)
 80033ba:	f001 fbb9 	bl	8004b30 <HAL_GPIO_WritePin>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40020000 	.word	0x40020000

080033cc <Motor_Disable>:
/**
  * @brief Function to Disable EN signal for Motor Driver
  * @param 	invert - variable to invert the EN pin logic
  * @retval
  */
void Motor_Disable(uint16_t invert){
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, ENABLE_Pin, (GPIO_PIN_RESET^invert));	//Disable Motor, XOR with SET to invert it if selected
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	2102      	movs	r1, #2
 80033de:	4805      	ldr	r0, [pc, #20]	; (80033f4 <Motor_Disable+0x28>)
 80033e0:	f001 fba6 	bl	8004b30 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80033e4:	2100      	movs	r1, #0
 80033e6:	4804      	ldr	r0, [pc, #16]	; (80033f8 <Motor_Disable+0x2c>)
 80033e8:	f002 fe08 	bl	8005ffc <HAL_TIM_PWM_Stop>
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40020000 	.word	0x40020000
 80033f8:	20000544 	.word	0x20000544

080033fc <Motor_Direction>:
  * @brief Function to select the direction of the motor
  * @param 	direction - variable to set the direction of the motor (RIGHT or LEFT)
  * 		invert - variable to invert the DIR pin logic
  * @retval
  */
void Motor_Direction(uint16_t direction, uint16_t invert){
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	460a      	mov	r2, r1
 8003406:	80fb      	strh	r3, [r7, #6]
 8003408:	4613      	mov	r3, r2
 800340a:	80bb      	strh	r3, [r7, #4]
	if ( direction == RIGHT ){
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d10a      	bne.n	8003428 <Motor_Direction+0x2c>
		HAL_GPIO_WritePin(GPIOA, DIR_Pin, (GPIO_PIN_SET^invert));	//Disable Motor, XOR with SET to invert it if selected
 8003412:	88bb      	ldrh	r3, [r7, #4]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f083 0301 	eor.w	r3, r3, #1
 800341a:	b2db      	uxtb	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	2104      	movs	r1, #4
 8003420:	4808      	ldr	r0, [pc, #32]	; (8003444 <Motor_Direction+0x48>)
 8003422:	f001 fb85 	bl	8004b30 <HAL_GPIO_WritePin>
	}else if (direction == LEFT){
		HAL_GPIO_WritePin(GPIOA, DIR_Pin, (GPIO_PIN_RESET^invert));	//Disable Motor, XOR with SET to invert it if selected
	}

}
 8003426:	e009      	b.n	800343c <Motor_Direction+0x40>
	}else if (direction == LEFT){
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <Motor_Direction+0x40>
		HAL_GPIO_WritePin(GPIOA, DIR_Pin, (GPIO_PIN_RESET^invert));	//Disable Motor, XOR with SET to invert it if selected
 800342e:	88bb      	ldrh	r3, [r7, #4]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	461a      	mov	r2, r3
 8003434:	2104      	movs	r1, #4
 8003436:	4803      	ldr	r0, [pc, #12]	; (8003444 <Motor_Direction+0x48>)
 8003438:	f001 fb7a 	bl	8004b30 <HAL_GPIO_WritePin>
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40020000 	.word	0x40020000

08003448 <Motor_Speed_RPM>:
/**
  * @brief Function to select the speed of the motor in RPM
  * @param 	rpm - Speed value in RPM it is wanted
  * @retval
  */
void Motor_Speed_RPM(uint16_t speed){
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	80fb      	strh	r3, [r7, #6]
	float ARR_value_temp = 0;
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
	uint32_t ARR_value;
	if ((TIM2->CR1 & (1 << 0)) ^ (1 << 0)){			//Checking if the Timer is already enabled, if not, enable it
 8003458:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <Motor_Speed_RPM+0x22>
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <Motor_Speed_RPM+0x24>
 800346a:	2300      	movs	r3, #0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <Motor_Speed_RPM+0x30>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	//Enable Timer2 on PWM Mode
 8003470:	2100      	movs	r1, #0
 8003472:	4818      	ldr	r0, [pc, #96]	; (80034d4 <Motor_Speed_RPM+0x8c>)
 8003474:	f002 fd12 	bl	8005e9c <HAL_TIM_PWM_Start>
	}
	if (speed > 0){
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d021      	beq.n	80034c2 <Motor_Speed_RPM+0x7a>
	ARR_value_temp = ((60 * (float) CLK_FREQ_T2)/(speed*parameter.motor_stepsrev));	//Calculation Value to load in ARR
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	4a15      	ldr	r2, [pc, #84]	; (80034d8 <Motor_Speed_RPM+0x90>)
 8003482:	8892      	ldrh	r2, [r2, #4]
 8003484:	fb02 f303 	mul.w	r3, r2, r3
 8003488:	ee07 3a90 	vmov	s15, r3
 800348c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003490:	eddf 6a12 	vldr	s13, [pc, #72]	; 80034dc <Motor_Speed_RPM+0x94>
 8003494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003498:	edc7 7a03 	vstr	s15, [r7, #12]
	ARR_value = (uint32_t) ARR_value_temp;	//Uint32 casting
 800349c:	edd7 7a03 	vldr	s15, [r7, #12]
 80034a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034a4:	ee17 3a90 	vmov	r3, s15
 80034a8:	60bb      	str	r3, [r7, #8]
	TIM2->ARR = ARR_value+1;				//Load ARR + 1
 80034aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	3301      	adds	r3, #1
 80034b2:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CCR1 = (uint32_t) (ARR_value+1)/2;	//Load CCR1 to have always 50% Duty Cycle
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	3301      	adds	r3, #1
 80034b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034bc:	085b      	lsrs	r3, r3, #1
 80034be:	6353      	str	r3, [r2, #52]	; 0x34
	}else{
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);	//Disable Timer2 on PWM Mode
	}
}
 80034c0:	e003      	b.n	80034ca <Motor_Speed_RPM+0x82>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);	//Disable Timer2 on PWM Mode
 80034c2:	2100      	movs	r1, #0
 80034c4:	4803      	ldr	r0, [pc, #12]	; (80034d4 <Motor_Speed_RPM+0x8c>)
 80034c6:	f002 fd99 	bl	8005ffc <HAL_TIM_PWM_Stop>
}
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000544 	.word	0x20000544
 80034d8:	2000066c 	.word	0x2000066c
 80034dc:	4f163426 	.word	0x4f163426

080034e0 <Motor_Feedrate_Update>:
  * @brief Function to update the feedrate of the motor following the acceleration
  * @param 	current_feedrate - Current feedrate
  * 		target_speed - Target feedrate
  * @retval updated_feedrate - Updated feedrate
  */
uint16_t Motor_Feedrate_Update(int16_t *current_feedrate, int16_t *target_feedrate){
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
	static uint16_t prev_target_feedrate;	//Static Variable to storage the previous target feedrate
	static uint16_t acc_step_increment;		//Static Variable to storage the acceleration step increment
	static uint16_t diff_feedrate;			//Static variable to storage the delta feedrate

	uint16_t acc_step = ceil(parameter.acc_time/parameter.acc_update_ratio);	//Calculation acc_step with the desired time in ms, and the refresh ratio on acc update
 80034ea:	4b61      	ldr	r3, [pc, #388]	; (8003670 <Motor_Feedrate_Update+0x190>)
 80034ec:	89da      	ldrh	r2, [r3, #14]
 80034ee:	4b60      	ldr	r3, [pc, #384]	; (8003670 <Motor_Feedrate_Update+0x190>)
 80034f0:	8a1b      	ldrh	r3, [r3, #16]
 80034f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd f945 	bl	8000788 <__aeabi_i2d>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4610      	mov	r0, r2
 8003504:	4619      	mov	r1, r3
 8003506:	f7fd fa31 	bl	800096c <__aeabi_d2uiz>
 800350a:	4603      	mov	r3, r0
 800350c:	81fb      	strh	r3, [r7, #14]
															//This will provide the number of steps we need to do to accelerate on the desired ACC_TIME

	diff_feedrate = *target_feedrate - *current_feedrate;	//Calculation for the Delta feedrate
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003514:	b29a      	uxth	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800351c:	b29b      	uxth	r3, r3
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	b29a      	uxth	r2, r3
 8003522:	4b54      	ldr	r3, [pc, #336]	; (8003674 <Motor_Feedrate_Update+0x194>)
 8003524:	801a      	strh	r2, [r3, #0]

	if (prev_target_feedrate != *target_feedrate){			//If the storaged feedrate changed since last time
 8003526:	4b54      	ldr	r3, [pc, #336]	; (8003678 <Motor_Feedrate_Update+0x198>)
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003532:	429a      	cmp	r2, r3
 8003534:	d026      	beq.n	8003584 <Motor_Feedrate_Update+0xa4>
		prev_target_feedrate = *target_feedrate;				//Reload the prev_target_feedrate with latest value
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800353c:	b29a      	uxth	r2, r3
 800353e:	4b4e      	ldr	r3, [pc, #312]	; (8003678 <Motor_Feedrate_Update+0x198>)
 8003540:	801a      	strh	r2, [r3, #0]
		diff_feedrate = abs(*target_feedrate - *current_feedrate);	//Re-calculate the delta feedrate
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003548:	461a      	mov	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	bfb8      	it	lt
 8003556:	425b      	neglt	r3, r3
 8003558:	b29a      	uxth	r2, r3
 800355a:	4b46      	ldr	r3, [pc, #280]	; (8003674 <Motor_Feedrate_Update+0x194>)
 800355c:	801a      	strh	r2, [r3, #0]
		acc_step_increment = ceil(diff_feedrate / acc_step);	//Re-calculate the acceleration step increment, so we take the Delta feedrate and divide it by
 800355e:	4b45      	ldr	r3, [pc, #276]	; (8003674 <Motor_Feedrate_Update+0x194>)
 8003560:	881a      	ldrh	r2, [r3, #0]
 8003562:	89fb      	ldrh	r3, [r7, #14]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	b29b      	uxth	r3, r3
 800356a:	4618      	mov	r0, r3
 800356c:	f7fd f90c 	bl	8000788 <__aeabi_i2d>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	f7fd f9f8 	bl	800096c <__aeabi_d2uiz>
 800357c:	4603      	mov	r3, r0
 800357e:	b29a      	uxth	r2, r3
 8003580:	4b3e      	ldr	r3, [pc, #248]	; (800367c <Motor_Feedrate_Update+0x19c>)
 8003582:	801a      	strh	r2, [r3, #0]
																//the numbers of step required to meeting the timing
	}

	if ( *current_feedrate < *target_feedrate){			//If the current feedrate is lower than the target, accelerate
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f9b3 2000 	ldrsh.w	r2, [r3]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003590:	429a      	cmp	r2, r3
 8003592:	da1f      	bge.n	80035d4 <Motor_Feedrate_Update+0xf4>
		if (  (acc_step_increment >= diff_feedrate) || (!acc_step_increment) ){	//If the step increment is lower than the delta feedrate then we increase by one to reach the target
 8003594:	4b39      	ldr	r3, [pc, #228]	; (800367c <Motor_Feedrate_Update+0x19c>)
 8003596:	881a      	ldrh	r2, [r3, #0]
 8003598:	4b36      	ldr	r3, [pc, #216]	; (8003674 <Motor_Feedrate_Update+0x194>)
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d203      	bcs.n	80035a8 <Motor_Feedrate_Update+0xc8>
 80035a0:	4b36      	ldr	r3, [pc, #216]	; (800367c <Motor_Feedrate_Update+0x19c>)
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d109      	bne.n	80035bc <Motor_Feedrate_Update+0xdc>
																				//Or if the acceleration step increment is zero (If the delta feedrate is lower than the acceleration step)
			*current_feedrate = *current_feedrate + 1;	//Increment by one
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3301      	adds	r3, #1
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	b21a      	sxth	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	801a      	strh	r2, [r3, #0]
 80035ba:	e03a      	b.n	8003632 <Motor_Feedrate_Update+0x152>
		}else{											//If the delta feedrate is bigger than acc_step and the the step incrmenet is lower than the delta feedrate the we increase
			*current_feedrate = *current_feedrate + acc_step_increment;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	4b2d      	ldr	r3, [pc, #180]	; (800367c <Motor_Feedrate_Update+0x19c>)
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	4413      	add	r3, r2
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	b21a      	sxth	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	801a      	strh	r2, [r3, #0]
 80035d2:	e02e      	b.n	8003632 <Motor_Feedrate_Update+0x152>
		}
	}else if (*current_feedrate == *target_feedrate){	//If the target is achieved
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d026      	beq.n	8003632 <Motor_Feedrate_Update+0x152>

	}else if ( *current_feedrate > *target_feedrate ){	//If the current feedrate is higher than the target, decelerate
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	dd1e      	ble.n	8003632 <Motor_Feedrate_Update+0x152>
		if (  (acc_step_increment >= diff_feedrate) || (!acc_step_increment) ){	//If the step increment is lower than the delta feedrate then we increase by one to reach the target
 80035f4:	4b21      	ldr	r3, [pc, #132]	; (800367c <Motor_Feedrate_Update+0x19c>)
 80035f6:	881a      	ldrh	r2, [r3, #0]
 80035f8:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <Motor_Feedrate_Update+0x194>)
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d203      	bcs.n	8003608 <Motor_Feedrate_Update+0x128>
 8003600:	4b1e      	ldr	r3, [pc, #120]	; (800367c <Motor_Feedrate_Update+0x19c>)
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d109      	bne.n	800361c <Motor_Feedrate_Update+0x13c>
																						//Or if the acceleration step increment is zero (If the delta feedrate is lower than the acceleration step)
			*current_feedrate = *current_feedrate - 1;	//Decrement by one
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29b      	uxth	r3, r3
 8003614:	b21a      	sxth	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	801a      	strh	r2, [r3, #0]
 800361a:	e00a      	b.n	8003632 <Motor_Feedrate_Update+0x152>
		}else{											//If the delta feedrate is bigger than acc_step and the the step incrmenet is lower than the delta feedrate the we increase
			*current_feedrate = *current_feedrate - acc_step_increment;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003622:	b29a      	uxth	r2, r3
 8003624:	4b15      	ldr	r3, [pc, #84]	; (800367c <Motor_Feedrate_Update+0x19c>)
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	b29b      	uxth	r3, r3
 800362c:	b21a      	sxth	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	801a      	strh	r2, [r3, #0]
		}
	}

	uint16_t rpm = *current_feedrate/parameter.leadscrew_pitch;	//Calculation for RPM with the leadscrew pitch
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003638:	ee07 3a90 	vmov	s15, r3
 800363c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <Motor_Feedrate_Update+0x190>)
 8003642:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800364e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003652:	ee17 3a90 	vmov	r3, s15
 8003656:	81bb      	strh	r3, [r7, #12]
	Motor_Speed_RPM(rpm);	//Set the motor speed
 8003658:	89bb      	ldrh	r3, [r7, #12]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fef4 	bl	8003448 <Motor_Speed_RPM>

	return *current_feedrate;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003666:	b29b      	uxth	r3, r3
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	2000066c 	.word	0x2000066c
 8003674:	200006c2 	.word	0x200006c2
 8003678:	200006c4 	.word	0x200006c4
 800367c:	200006c6 	.word	0x200006c6

08003680 <LCD_Write_Feedrate>:
  * @param 	feedrate - feedrate value which expected to be writen into the LCD
  * 		col_pos - column position for the number
  * 		row_pos - raw position for the number
  * @retval
  */
void LCD_Write_Feedrate(int32_t feedrate, int32_t col_pos, int32_t row_pos){
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
	static int32_t saved_feedrate;
	if ( saved_feedrate != feedrate ){					//Print only if the feedrate changed
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <LCD_Write_Feedrate+0x34>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	429a      	cmp	r2, r3
 8003694:	d00a      	beq.n	80036ac <LCD_Write_Feedrate+0x2c>
		LCD_Write_Number(feedrate,col_pos,row_pos);		//Write the number in the desired position
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f7ff fc4c 	bl	8002f38 <LCD_Write_Number>
		lcdPrint("mm/min ");							//Adding mm/min
 80036a0:	4805      	ldr	r0, [pc, #20]	; (80036b8 <LCD_Write_Feedrate+0x38>)
 80036a2:	f7fd fc4f 	bl	8000f44 <lcdPrint>
		saved_feedrate = feedrate;						//Updating Feedrate Saved
 80036a6:	4a03      	ldr	r2, [pc, #12]	; (80036b4 <LCD_Write_Feedrate+0x34>)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6013      	str	r3, [r2, #0]
	}
}
 80036ac:	bf00      	nop
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	200006c8 	.word	0x200006c8
 80036b8:	08007afc 	.word	0x08007afc

080036bc <Switch_Status_Read>:
/**
  * @brief Function to read the value for the switchs
  * @param	- NONE
  * @retval	- Switch Status RIGHT, LEFT, MID, FAIL
  */
int16_t Switch_Status_Read(void){
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
	int16_t switch_right, switch_left, sw_status;
	switch_right = HAL_GPIO_ReadPin(SW_RIGHT_GPIO_Port, SW_RIGHT_Pin);	//Storage value of RIGHT pin
 80036c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036c6:	4821      	ldr	r0, [pc, #132]	; (800374c <Switch_Status_Read+0x90>)
 80036c8:	f001 fa1a 	bl	8004b00 <HAL_GPIO_ReadPin>
 80036cc:	4603      	mov	r3, r0
 80036ce:	80bb      	strh	r3, [r7, #4]
	switch_left = HAL_GPIO_ReadPin(SW_LEFT_GPIO_Port, SW_LEFT_Pin);		//Storage value of LEFT pin
 80036d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036d4:	481d      	ldr	r0, [pc, #116]	; (800374c <Switch_Status_Read+0x90>)
 80036d6:	f001 fa13 	bl	8004b00 <HAL_GPIO_ReadPin>
 80036da:	4603      	mov	r3, r0
 80036dc:	807b      	strh	r3, [r7, #2]
	if ( !switch_right & !switch_left ){	//If both are enabled at same time, return FAIL
 80036de:	88ba      	ldrh	r2, [r7, #4]
 80036e0:	887b      	ldrh	r3, [r7, #2]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	b21b      	sxth	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <Switch_Status_Read+0x36>
		sw_status = FAIL;
 80036ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036ee:	80fb      	strh	r3, [r7, #6]
 80036f0:	e026      	b.n	8003740 <Switch_Status_Read+0x84>
	}else if( switch_right & switch_left ){	//If none are enabled return MID point
 80036f2:	88ba      	ldrh	r2, [r7, #4]
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	4013      	ands	r3, r2
 80036f8:	b21b      	sxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <Switch_Status_Read+0x48>
		sw_status = MID;
 80036fe:	2302      	movs	r3, #2
 8003700:	80fb      	strh	r3, [r7, #6]
 8003702:	e01d      	b.n	8003740 <Switch_Status_Read+0x84>
	}else if ( ( !switch_right ) & switch_left ){	//If right is enable return RIGHT
 8003704:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003718:	4013      	ands	r3, r2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <Switch_Status_Read+0x68>
		sw_status = RIGHT;
 800371e:	2301      	movs	r3, #1
 8003720:	80fb      	strh	r3, [r7, #6]
 8003722:	e00d      	b.n	8003740 <Switch_Status_Read+0x84>
	}else if ( switch_right & ( !switch_left ) ){	//If left is enable return LEFT
 8003724:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003728:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800372c:	2a00      	cmp	r2, #0
 800372e:	bf0c      	ite	eq
 8003730:	2201      	moveq	r2, #1
 8003732:	2200      	movne	r2, #0
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	4013      	ands	r3, r2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <Switch_Status_Read+0x84>
		sw_status = LEFT;
 800373c:	2300      	movs	r3, #0
 800373e:	80fb      	strh	r3, [r7, #6]
	}
	return sw_status;
 8003740:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40020400 	.word	0x40020400

08003750 <Update_Feedrate>:
/**
  * @brief Update Feedrate Function
  * @param old_value - Pointer to the value storaged as latest feedrate value
  * @retval new_feedrate - Updated Feedrate
  */
void Update_Feedrate(int16_t *feedrate){
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	if (step_mode == STEP_NORMAL){
 8003758:	4b20      	ldr	r3, [pc, #128]	; (80037dc <Update_Feedrate+0x8c>)
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10d      	bne.n	800377c <Update_Feedrate+0x2c>
		*feedrate += Encoder_Read();	//Update Feedrate
 8003760:	f7ff fbaa 	bl	8002eb8 <Encoder_Read>
 8003764:	4601      	mov	r1, r0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800376c:	b29a      	uxth	r2, r3
 800376e:	b28b      	uxth	r3, r1
 8003770:	4413      	add	r3, r2
 8003772:	b29b      	uxth	r3, r3
 8003774:	b21a      	sxth	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	801a      	strh	r2, [r3, #0]
 800377a:	e015      	b.n	80037a8 <Update_Feedrate+0x58>
	}else if (step_mode == STEP_x10){
 800377c:	4b17      	ldr	r3, [pc, #92]	; (80037dc <Update_Feedrate+0x8c>)
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d111      	bne.n	80037a8 <Update_Feedrate+0x58>
		*feedrate += ( 10 * Encoder_Read());	//Update Feedrate
 8003784:	f7ff fb98 	bl	8002eb8 <Encoder_Read>
 8003788:	4602      	mov	r2, r0
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4619      	mov	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800379a:	b29a      	uxth	r2, r3
 800379c:	b28b      	uxth	r3, r1
 800379e:	4413      	add	r3, r2
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	b21a      	sxth	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	801a      	strh	r2, [r3, #0]
	}
	if (*feedrate <= 0 ){	//Limit the min value to zero
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	dc03      	bgt.n	80037ba <Update_Feedrate+0x6a>
		*feedrate = 1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	801a      	strh	r2, [r3, #0]
	}else if (*feedrate > parameter.max_feedrate){
		*feedrate = parameter.max_feedrate;
	}
}
 80037b8:	e00c      	b.n	80037d4 <Update_Feedrate+0x84>
	}else if (*feedrate > parameter.max_feedrate){
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037c0:	461a      	mov	r2, r3
 80037c2:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <Update_Feedrate+0x90>)
 80037c4:	895b      	ldrh	r3, [r3, #10]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	dd04      	ble.n	80037d4 <Update_Feedrate+0x84>
		*feedrate = parameter.max_feedrate;
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <Update_Feedrate+0x90>)
 80037cc:	895b      	ldrh	r3, [r3, #10]
 80037ce:	b21a      	sxth	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	801a      	strh	r2, [r3, #0]
}
 80037d4:	bf00      	nop
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	2000066a 	.word	0x2000066a
 80037e0:	2000066c 	.word	0x2000066c

080037e4 <Encoder_Switch_Status_Read>:
/**
  * @brief Function to read the value for the encoder switch
  * @param	- NONE
  * @retval	- Encoder Switch Status TRUE, FALSE or TRUE_HOLD
  */
int16_t Encoder_Switch_Status_Read(void){
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
	static uint16_t temp_debouncing = 0;	//Temporal variable to storage the debouncing
	static uint16_t previous_en_sw_status;	//Variable to storage the previous status of the encoder switch
	uint16_t en_sw_status;
	uint16_t encoder_sw_read_value;

	encoder_sw_read_value = HAL_GPIO_ReadPin(EN_SW_GPIO_Port, EN_SW_Pin);
 80037ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037ee:	482a      	ldr	r0, [pc, #168]	; (8003898 <Encoder_Switch_Status_Read+0xb4>)
 80037f0:	f001 f986 	bl	8004b00 <HAL_GPIO_ReadPin>
 80037f4:	4603      	mov	r3, r0
 80037f6:	80bb      	strh	r3, [r7, #4]

	if ( ( !encoder_sw_read_value ) && ( !debouncing_en_sw ) ){	//If encoder is pressed and debouncing not enable
 80037f8:	88bb      	ldrh	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10d      	bne.n	800381a <Encoder_Switch_Status_Read+0x36>
 80037fe:	4b27      	ldr	r3, [pc, #156]	; (800389c <Encoder_Switch_Status_Read+0xb8>)
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <Encoder_Switch_Status_Read+0x36>
		debouncing_en_sw = TRUE;	//Enable debouncing
 8003806:	4b25      	ldr	r3, [pc, #148]	; (800389c <Encoder_Switch_Status_Read+0xb8>)
 8003808:	2201      	movs	r2, #1
 800380a:	801a      	strh	r2, [r3, #0]
		temp_debouncing = debouncing;	//Load value from debouncing
 800380c:	4b24      	ldr	r3, [pc, #144]	; (80038a0 <Encoder_Switch_Status_Read+0xbc>)
 800380e:	881a      	ldrh	r2, [r3, #0]
 8003810:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <Encoder_Switch_Status_Read+0xc0>)
 8003812:	801a      	strh	r2, [r3, #0]
		en_sw_status = FALSE;			//SW status still disable waiting debouncing time
 8003814:	2300      	movs	r3, #0
 8003816:	80fb      	strh	r3, [r7, #6]
 8003818:	e037      	b.n	800388a <Encoder_Switch_Status_Read+0xa6>
	}else if ( ( !encoder_sw_read_value ) && ( temp_debouncing+2 <= debouncing )){ //If encoder still pressed and debouncing +2 already passed
 800381a:	88bb      	ldrh	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d118      	bne.n	8003852 <Encoder_Switch_Status_Read+0x6e>
 8003820:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <Encoder_Switch_Status_Read+0xc0>)
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	3301      	adds	r3, #1
 8003826:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <Encoder_Switch_Status_Read+0xbc>)
 8003828:	8812      	ldrh	r2, [r2, #0]
 800382a:	4293      	cmp	r3, r2
 800382c:	da11      	bge.n	8003852 <Encoder_Switch_Status_Read+0x6e>
		en_sw_status = FALSE;	//Status still FALSE
 800382e:	2300      	movs	r3, #0
 8003830:	80fb      	strh	r3, [r7, #6]
		//debouncing_en_sw = FALSE;	//Disable debouncing
		previous_en_sw_status = TRUE;	//Set previous status of enable TRUE
 8003832:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <Encoder_Switch_Status_Read+0xc4>)
 8003834:	2201      	movs	r2, #1
 8003836:	801a      	strh	r2, [r3, #0]
		if ( temp_debouncing+SW_HOLD_TIME <= debouncing ){	//If we keep the button pressed more than the time defines
 8003838:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <Encoder_Switch_Status_Read+0xc0>)
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	3309      	adds	r3, #9
 800383e:	4a18      	ldr	r2, [pc, #96]	; (80038a0 <Encoder_Switch_Status_Read+0xbc>)
 8003840:	8812      	ldrh	r2, [r2, #0]
 8003842:	4293      	cmp	r3, r2
 8003844:	da21      	bge.n	800388a <Encoder_Switch_Status_Read+0xa6>
			en_sw_status = TRUE_HOLD;
 8003846:	2303      	movs	r3, #3
 8003848:	80fb      	strh	r3, [r7, #6]
			previous_en_sw_status = TRUE_HOLD;
 800384a:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <Encoder_Switch_Status_Read+0xc4>)
 800384c:	2203      	movs	r2, #3
 800384e:	801a      	strh	r2, [r3, #0]
		if ( temp_debouncing+SW_HOLD_TIME <= debouncing ){	//If we keep the button pressed more than the time defines
 8003850:	e01b      	b.n	800388a <Encoder_Switch_Status_Read+0xa6>
		}
	}else if( ( encoder_sw_read_value )){
 8003852:	88bb      	ldrh	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d018      	beq.n	800388a <Encoder_Switch_Status_Read+0xa6>
		if ( previous_en_sw_status == TRUE_HOLD ){	//If previous status was HOLD< do not report push
 8003858:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <Encoder_Switch_Status_Read+0xc4>)
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	2b03      	cmp	r3, #3
 800385e:	d102      	bne.n	8003866 <Encoder_Switch_Status_Read+0x82>
			en_sw_status = FALSE;
 8003860:	2300      	movs	r3, #0
 8003862:	80fb      	strh	r3, [r7, #6]
 8003864:	e00e      	b.n	8003884 <Encoder_Switch_Status_Read+0xa0>
		}else if ( previous_en_sw_status == TRUE ){
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <Encoder_Switch_Status_Read+0xc4>)
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d105      	bne.n	800387a <Encoder_Switch_Status_Read+0x96>
			en_sw_status = TRUE;	//If button released then send status TRUE
 800386e:	2301      	movs	r3, #1
 8003870:	80fb      	strh	r3, [r7, #6]
			debouncing_en_sw = FALSE;	//Disable debouncing
 8003872:	4b0a      	ldr	r3, [pc, #40]	; (800389c <Encoder_Switch_Status_Read+0xb8>)
 8003874:	2200      	movs	r2, #0
 8003876:	801a      	strh	r2, [r3, #0]
 8003878:	e004      	b.n	8003884 <Encoder_Switch_Status_Read+0xa0>
		}else{
			en_sw_status = FALSE;
 800387a:	2300      	movs	r3, #0
 800387c:	80fb      	strh	r3, [r7, #6]
			debouncing_en_sw = FALSE;	//Disable debouncing
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <Encoder_Switch_Status_Read+0xb8>)
 8003880:	2200      	movs	r2, #0
 8003882:	801a      	strh	r2, [r3, #0]
		}
		previous_en_sw_status = FALSE;	//Reset variable of previous status
 8003884:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <Encoder_Switch_Status_Read+0xc4>)
 8003886:	2200      	movs	r2, #0
 8003888:	801a      	strh	r2, [r3, #0]
	}else{
		//en_sw_status = FALSE;	//In case other condition, send FALSE
	}
	return en_sw_status;
 800388a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40020400 	.word	0x40020400
 800389c:	200006ba 	.word	0x200006ba
 80038a0:	200006be 	.word	0x200006be
 80038a4:	200006cc 	.word	0x200006cc
 80038a8:	200006ce 	.word	0x200006ce

080038ac <Aux_Switch_Status_Read>:
/**
  * @brief Function to read the value for auxiliary switch
  * @param	- NONE
  * @retval	- Aux Switch Status TRUE, FALSE or TRUE_HOLD
  */
int16_t Aux_Switch_Status_Read(void){
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
	static uint16_t aux_temp_debouncing = 0;	//Temporal variable to storage the debouncing
	static uint16_t previous_aux_sw_status;	//Variable to storage the previous status of the encoder switch
	uint16_t aux_sw_status;
	uint16_t aux_sw_read_value;

	aux_sw_read_value = HAL_GPIO_ReadPin(SEC_SW_GPIO_Port, SEC_SW_Pin);
 80038b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80038b6:	482a      	ldr	r0, [pc, #168]	; (8003960 <Aux_Switch_Status_Read+0xb4>)
 80038b8:	f001 f922 	bl	8004b00 <HAL_GPIO_ReadPin>
 80038bc:	4603      	mov	r3, r0
 80038be:	80bb      	strh	r3, [r7, #4]

	if ( ( !aux_sw_read_value ) && ( !debouncing_aux_sw ) ){	//If encoder is pressed and debouncing not enable
 80038c0:	88bb      	ldrh	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10d      	bne.n	80038e2 <Aux_Switch_Status_Read+0x36>
 80038c6:	4b27      	ldr	r3, [pc, #156]	; (8003964 <Aux_Switch_Status_Read+0xb8>)
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <Aux_Switch_Status_Read+0x36>
		debouncing_aux_sw = TRUE;	//Enable debouncing
 80038ce:	4b25      	ldr	r3, [pc, #148]	; (8003964 <Aux_Switch_Status_Read+0xb8>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	801a      	strh	r2, [r3, #0]
		aux_temp_debouncing = aux_debouncing;	//Load value from debouncing
 80038d4:	4b24      	ldr	r3, [pc, #144]	; (8003968 <Aux_Switch_Status_Read+0xbc>)
 80038d6:	881a      	ldrh	r2, [r3, #0]
 80038d8:	4b24      	ldr	r3, [pc, #144]	; (800396c <Aux_Switch_Status_Read+0xc0>)
 80038da:	801a      	strh	r2, [r3, #0]
		aux_sw_status = FALSE;			//SW status still disable waiting debouncing time
 80038dc:	2300      	movs	r3, #0
 80038de:	80fb      	strh	r3, [r7, #6]
 80038e0:	e037      	b.n	8003952 <Aux_Switch_Status_Read+0xa6>
	}else if ( ( !aux_sw_read_value ) && ( aux_temp_debouncing+2 <= aux_debouncing )){ //If encoder still pressed and debouncing +2 already passed
 80038e2:	88bb      	ldrh	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d118      	bne.n	800391a <Aux_Switch_Status_Read+0x6e>
 80038e8:	4b20      	ldr	r3, [pc, #128]	; (800396c <Aux_Switch_Status_Read+0xc0>)
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	3301      	adds	r3, #1
 80038ee:	4a1e      	ldr	r2, [pc, #120]	; (8003968 <Aux_Switch_Status_Read+0xbc>)
 80038f0:	8812      	ldrh	r2, [r2, #0]
 80038f2:	4293      	cmp	r3, r2
 80038f4:	da11      	bge.n	800391a <Aux_Switch_Status_Read+0x6e>
		aux_sw_status = FALSE;	//Status still FALSE
 80038f6:	2300      	movs	r3, #0
 80038f8:	80fb      	strh	r3, [r7, #6]
		//debouncing_aux_sw = FALSE;	//Disable debouncing
		previous_aux_sw_status = TRUE;	//Set previous status of enable TRUE
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <Aux_Switch_Status_Read+0xc4>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	801a      	strh	r2, [r3, #0]
		if ( aux_temp_debouncing+SW_HOLD_TIME <= aux_debouncing ){	//If we keep the button pressed more than the time defines
 8003900:	4b1a      	ldr	r3, [pc, #104]	; (800396c <Aux_Switch_Status_Read+0xc0>)
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	3309      	adds	r3, #9
 8003906:	4a18      	ldr	r2, [pc, #96]	; (8003968 <Aux_Switch_Status_Read+0xbc>)
 8003908:	8812      	ldrh	r2, [r2, #0]
 800390a:	4293      	cmp	r3, r2
 800390c:	da21      	bge.n	8003952 <Aux_Switch_Status_Read+0xa6>
			aux_sw_status = TRUE_HOLD;
 800390e:	2303      	movs	r3, #3
 8003910:	80fb      	strh	r3, [r7, #6]
			previous_aux_sw_status = TRUE_HOLD;
 8003912:	4b17      	ldr	r3, [pc, #92]	; (8003970 <Aux_Switch_Status_Read+0xc4>)
 8003914:	2203      	movs	r2, #3
 8003916:	801a      	strh	r2, [r3, #0]
		if ( aux_temp_debouncing+SW_HOLD_TIME <= aux_debouncing ){	//If we keep the button pressed more than the time defines
 8003918:	e01b      	b.n	8003952 <Aux_Switch_Status_Read+0xa6>
		}
	}else if( ( aux_sw_read_value )){
 800391a:	88bb      	ldrh	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d018      	beq.n	8003952 <Aux_Switch_Status_Read+0xa6>
		if ( previous_aux_sw_status == TRUE_HOLD ){	//If previous status was HOLD< do not report push
 8003920:	4b13      	ldr	r3, [pc, #76]	; (8003970 <Aux_Switch_Status_Read+0xc4>)
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	2b03      	cmp	r3, #3
 8003926:	d102      	bne.n	800392e <Aux_Switch_Status_Read+0x82>
			aux_sw_status = FALSE;
 8003928:	2300      	movs	r3, #0
 800392a:	80fb      	strh	r3, [r7, #6]
 800392c:	e00e      	b.n	800394c <Aux_Switch_Status_Read+0xa0>
		}else if ( previous_aux_sw_status == TRUE ){
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <Aux_Switch_Status_Read+0xc4>)
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d105      	bne.n	8003942 <Aux_Switch_Status_Read+0x96>
			aux_sw_status = TRUE;	//If button released then send status TRUE
 8003936:	2301      	movs	r3, #1
 8003938:	80fb      	strh	r3, [r7, #6]
			debouncing_aux_sw = FALSE;	//Disable debouncing
 800393a:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <Aux_Switch_Status_Read+0xb8>)
 800393c:	2200      	movs	r2, #0
 800393e:	801a      	strh	r2, [r3, #0]
 8003940:	e004      	b.n	800394c <Aux_Switch_Status_Read+0xa0>
		}else{
			aux_sw_status = FALSE;
 8003942:	2300      	movs	r3, #0
 8003944:	80fb      	strh	r3, [r7, #6]
			debouncing_aux_sw = FALSE;	//Disable debouncing
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <Aux_Switch_Status_Read+0xb8>)
 8003948:	2200      	movs	r2, #0
 800394a:	801a      	strh	r2, [r3, #0]
		}
		previous_aux_sw_status = FALSE;	//Reset variable of previous status
 800394c:	4b08      	ldr	r3, [pc, #32]	; (8003970 <Aux_Switch_Status_Read+0xc4>)
 800394e:	2200      	movs	r2, #0
 8003950:	801a      	strh	r2, [r3, #0]
	}else{
		//aux_sw_status = FALSE;	//In case other condition, send FALSE
	}
	return aux_sw_status;
 8003952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40020400 	.word	0x40020400
 8003964:	200006bc 	.word	0x200006bc
 8003968:	200006c0 	.word	0x200006c0
 800396c:	200006d0 	.word	0x200006d0
 8003970:	200006d2 	.word	0x200006d2

08003974 <Save_Parameter_Data>:
/**
  * @brief Function to save the data into flash (EEPROM Emulation)
  * @param	- Pointer to the struct to be saved
  * @retval
  */
uint16_t Save_Parameter_Data(str_parameters *struct_ptr){
 8003974:	b5b0      	push	{r4, r5, r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
	  {
	    str_parameters temp;
	    uint8_t bytes[sizeof(*struct_ptr)];
	  }save_union_par;

	  save_union_par.temp = *struct_ptr; //Copy values from value struct to uniun
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f107 0408 	add.w	r4, r7, #8
 8003982:	461d      	mov	r5, r3
 8003984:	6828      	ldr	r0, [r5, #0]
 8003986:	6869      	ldr	r1, [r5, #4]
 8003988:	68aa      	ldr	r2, [r5, #8]
 800398a:	68eb      	ldr	r3, [r5, #12]
 800398c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800398e:	6928      	ldr	r0, [r5, #16]
 8003990:	6020      	str	r0, [r4, #0]
 8003992:	8aab      	ldrh	r3, [r5, #20]
 8003994:	80a3      	strh	r3, [r4, #4]

	  for (uint8_t i=0; i<sizeof(*struct_ptr); i++)  //Transfers values to Union
 8003996:	2300      	movs	r3, #0
 8003998:	77fb      	strb	r3, [r7, #31]
 800399a:	e00b      	b.n	80039b4 <Save_Parameter_Data+0x40>
	  {
	    ee_writeToRam(i, 1, &save_union_par.bytes[i]);
 800399c:	7ff8      	ldrb	r0, [r7, #31]
 800399e:	7ffb      	ldrb	r3, [r7, #31]
 80039a0:	f107 0208 	add.w	r2, r7, #8
 80039a4:	4413      	add	r3, r2
 80039a6:	461a      	mov	r2, r3
 80039a8:	2101      	movs	r1, #1
 80039aa:	f7fd fd91 	bl	80014d0 <ee_writeToRam>
	  for (uint8_t i=0; i<sizeof(*struct_ptr); i++)  //Transfers values to Union
 80039ae:	7ffb      	ldrb	r3, [r7, #31]
 80039b0:	3301      	adds	r3, #1
 80039b2:	77fb      	strb	r3, [r7, #31]
 80039b4:	7ffb      	ldrb	r3, [r7, #31]
 80039b6:	2b15      	cmp	r3, #21
 80039b8:	d9f0      	bls.n	800399c <Save_Parameter_Data+0x28>
	  }
	  return ee_commit();
 80039ba:	f7fd fdab 	bl	8001514 <ee_commit>
 80039be:	4603      	mov	r3, r0
 80039c0:	b29b      	uxth	r3, r3
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3720      	adds	r7, #32
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bdb0      	pop	{r4, r5, r7, pc}

080039ca <Read_Parameter_Data>:
/**
  * @brief Function to read the data from flash (EEPROM Emulation)
  * @param	- Pointer to the struct in which the data needs to be loaded
  * @retval
  */
uint16_t Read_Parameter_Data(str_parameters *struct_ptr){
 80039ca:	b5b0      	push	{r4, r5, r7, lr}
 80039cc:	b08a      	sub	sp, #40	; 0x28
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
		str_parameters temp;
		uint8_t bytes[sizeof(*struct_ptr)];
	}save_union_par;

	uint16_t status_read;
	uint16_t read_fail = 1;
 80039d2:	2301      	movs	r3, #1
 80039d4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t data;             //Temporal variable to copy each data from EEPROM to Union
	for (uint8_t i=0; i<sizeof(*struct_ptr); i++)  //Transfers values to Union
 80039d6:	2300      	movs	r3, #0
 80039d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80039dc:	e01a      	b.n	8003a14 <Read_Parameter_Data+0x4a>
	{
		status_read = ee_read(i, 1, &data);
 80039de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80039e2:	f107 020b 	add.w	r2, r7, #11
 80039e6:	2101      	movs	r1, #1
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fd fbcb 	bl	8001184 <ee_read>
 80039ee:	4603      	mov	r3, r0
 80039f0:	847b      	strh	r3, [r7, #34]	; 0x22
		save_union_par.bytes[i] = data;   //Save data on union
 80039f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80039f6:	7afa      	ldrb	r2, [r7, #11]
 80039f8:	3328      	adds	r3, #40	; 0x28
 80039fa:	443b      	add	r3, r7
 80039fc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		if (!status_read){
 8003a00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <Read_Parameter_Data+0x40>
			read_fail = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (uint8_t i=0; i<sizeof(*struct_ptr); i++)  //Transfers values to Union
 8003a0a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003a14:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003a18:	2b15      	cmp	r3, #21
 8003a1a:	d9e0      	bls.n	80039de <Read_Parameter_Data+0x14>
		}
	}
	*struct_ptr = save_union_par.temp;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	461d      	mov	r5, r3
 8003a20:	f107 040c 	add.w	r4, r7, #12
 8003a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a26:	6028      	str	r0, [r5, #0]
 8003a28:	6069      	str	r1, [r5, #4]
 8003a2a:	60aa      	str	r2, [r5, #8]
 8003a2c:	60eb      	str	r3, [r5, #12]
 8003a2e:	6820      	ldr	r0, [r4, #0]
 8003a30:	6128      	str	r0, [r5, #16]
 8003a32:	88a3      	ldrh	r3, [r4, #4]
 8003a34:	82ab      	strh	r3, [r5, #20]
	return read_fail;
 8003a36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3728      	adds	r7, #40	; 0x28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bdb0      	pop	{r4, r5, r7, pc}

08003a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a44:	b672      	cpsid	i
}
 8003a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a48:	e7fe      	b.n	8003a48 <Error_Handler+0x8>
	...

08003a4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]
 8003a56:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <HAL_MspInit+0x4c>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	4a0f      	ldr	r2, [pc, #60]	; (8003a98 <HAL_MspInit+0x4c>)
 8003a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a60:	6453      	str	r3, [r2, #68]	; 0x44
 8003a62:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <HAL_MspInit+0x4c>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a6a:	607b      	str	r3, [r7, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a6e:	2300      	movs	r3, #0
 8003a70:	603b      	str	r3, [r7, #0]
 8003a72:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <HAL_MspInit+0x4c>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <HAL_MspInit+0x4c>)
 8003a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a7e:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <HAL_MspInit+0x4c>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40023800 	.word	0x40023800

08003a9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08a      	sub	sp, #40	; 0x28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa4:	f107 0314 	add.w	r3, r7, #20
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	605a      	str	r2, [r3, #4]
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	60da      	str	r2, [r3, #12]
 8003ab2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a19      	ldr	r2, [pc, #100]	; (8003b20 <HAL_I2C_MspInit+0x84>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d12b      	bne.n	8003b16 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	4b18      	ldr	r3, [pc, #96]	; (8003b24 <HAL_I2C_MspInit+0x88>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	4a17      	ldr	r2, [pc, #92]	; (8003b24 <HAL_I2C_MspInit+0x88>)
 8003ac8:	f043 0302 	orr.w	r3, r3, #2
 8003acc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ace:	4b15      	ldr	r3, [pc, #84]	; (8003b24 <HAL_I2C_MspInit+0x88>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ada:	23c0      	movs	r3, #192	; 0xc0
 8003adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ade:	2312      	movs	r3, #18
 8003ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003aea:	2304      	movs	r3, #4
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aee:	f107 0314 	add.w	r3, r7, #20
 8003af2:	4619      	mov	r1, r3
 8003af4:	480c      	ldr	r0, [pc, #48]	; (8003b28 <HAL_I2C_MspInit+0x8c>)
 8003af6:	f000 fe7f 	bl	80047f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <HAL_I2C_MspInit+0x88>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	4a08      	ldr	r2, [pc, #32]	; (8003b24 <HAL_I2C_MspInit+0x88>)
 8003b04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b08:	6413      	str	r3, [r2, #64]	; 0x40
 8003b0a:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <HAL_I2C_MspInit+0x88>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b16:	bf00      	nop
 8003b18:	3728      	adds	r7, #40	; 0x28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40005400 	.word	0x40005400
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40020400 	.word	0x40020400

08003b2c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08a      	sub	sp, #40	; 0x28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	609a      	str	r2, [r3, #8]
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a25      	ldr	r2, [pc, #148]	; (8003be0 <HAL_TIM_Encoder_MspInit+0xb4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d144      	bne.n	8003bd8 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	4a23      	ldr	r2, [pc, #140]	; (8003be4 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b5e:	4b21      	ldr	r3, [pc, #132]	; (8003be4 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	4b1d      	ldr	r3, [pc, #116]	; (8003be4 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	4a1c      	ldr	r2, [pc, #112]	; (8003be4 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7a:	4b1a      	ldr	r3, [pc, #104]	; (8003be4 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN_A_Pin|EN_B_Pin;
 8003b86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b94:	2300      	movs	r3, #0
 8003b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9c:	f107 0314 	add.w	r3, r7, #20
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4811      	ldr	r0, [pc, #68]	; (8003be8 <HAL_TIM_Encoder_MspInit+0xbc>)
 8003ba4:	f000 fe28 	bl	80047f8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2100      	movs	r1, #0
 8003bac:	2018      	movs	r0, #24
 8003bae:	f000 fb04 	bl	80041ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003bb2:	2018      	movs	r0, #24
 8003bb4:	f000 fb1d 	bl	80041f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2100      	movs	r1, #0
 8003bbc:	2019      	movs	r0, #25
 8003bbe:	f000 fafc 	bl	80041ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003bc2:	2019      	movs	r0, #25
 8003bc4:	f000 fb15 	bl	80041f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2100      	movs	r1, #0
 8003bcc:	201a      	movs	r0, #26
 8003bce:	f000 faf4 	bl	80041ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003bd2:	201a      	movs	r0, #26
 8003bd4:	f000 fb0d 	bl	80041f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003bd8:	bf00      	nop
 8003bda:	3728      	adds	r7, #40	; 0x28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40010000 	.word	0x40010000
 8003be4:	40023800 	.word	0x40023800
 8003be8:	40020000 	.word	0x40020000

08003bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfc:	d10e      	bne.n	8003c1c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	4b32      	ldr	r3, [pc, #200]	; (8003ccc <HAL_TIM_Base_MspInit+0xe0>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	4a31      	ldr	r2, [pc, #196]	; (8003ccc <HAL_TIM_Base_MspInit+0xe0>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c0e:	4b2f      	ldr	r3, [pc, #188]	; (8003ccc <HAL_TIM_Base_MspInit+0xe0>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003c1a:	e052      	b.n	8003cc2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM9)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2b      	ldr	r2, [pc, #172]	; (8003cd0 <HAL_TIM_Base_MspInit+0xe4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d116      	bne.n	8003c54 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	4b28      	ldr	r3, [pc, #160]	; (8003ccc <HAL_TIM_Base_MspInit+0xe0>)
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	4a27      	ldr	r2, [pc, #156]	; (8003ccc <HAL_TIM_Base_MspInit+0xe0>)
 8003c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c34:	6453      	str	r3, [r2, #68]	; 0x44
 8003c36:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <HAL_TIM_Base_MspInit+0xe0>)
 8003c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003c42:	2200      	movs	r2, #0
 8003c44:	2100      	movs	r1, #0
 8003c46:	2018      	movs	r0, #24
 8003c48:	f000 fab7 	bl	80041ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003c4c:	2018      	movs	r0, #24
 8003c4e:	f000 fad0 	bl	80041f2 <HAL_NVIC_EnableIRQ>
}
 8003c52:	e036      	b.n	8003cc2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a1e      	ldr	r2, [pc, #120]	; (8003cd4 <HAL_TIM_Base_MspInit+0xe8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d116      	bne.n	8003c8c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <HAL_TIM_Base_MspInit+0xe0>)
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	4a19      	ldr	r2, [pc, #100]	; (8003ccc <HAL_TIM_Base_MspInit+0xe0>)
 8003c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c6e:	4b17      	ldr	r3, [pc, #92]	; (8003ccc <HAL_TIM_Base_MspInit+0xe0>)
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	2019      	movs	r0, #25
 8003c80:	f000 fa9b 	bl	80041ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003c84:	2019      	movs	r0, #25
 8003c86:	f000 fab4 	bl	80041f2 <HAL_NVIC_EnableIRQ>
}
 8003c8a:	e01a      	b.n	8003cc2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a11      	ldr	r2, [pc, #68]	; (8003cd8 <HAL_TIM_Base_MspInit+0xec>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d115      	bne.n	8003cc2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <HAL_TIM_Base_MspInit+0xe0>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	4a0b      	ldr	r2, [pc, #44]	; (8003ccc <HAL_TIM_Base_MspInit+0xe0>)
 8003ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ca6:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <HAL_TIM_Base_MspInit+0xe0>)
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	201a      	movs	r0, #26
 8003cb8:	f000 fa7f 	bl	80041ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003cbc:	201a      	movs	r0, #26
 8003cbe:	f000 fa98 	bl	80041f2 <HAL_NVIC_EnableIRQ>
}
 8003cc2:	bf00      	nop
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	40014000 	.word	0x40014000
 8003cd4:	40014400 	.word	0x40014400
 8003cd8:	40014800 	.word	0x40014800

08003cdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce4:	f107 030c 	add.w	r3, r7, #12
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	605a      	str	r2, [r3, #4]
 8003cee:	609a      	str	r2, [r3, #8]
 8003cf0:	60da      	str	r2, [r3, #12]
 8003cf2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfc:	d11d      	bne.n	8003d3a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <HAL_TIM_MspPostInit+0x68>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	4a0f      	ldr	r2, [pc, #60]	; (8003d44 <HAL_TIM_MspPostInit+0x68>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <HAL_TIM_MspPostInit+0x68>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PULSE_Pin;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1e:	2302      	movs	r3, #2
 8003d20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d26:	2302      	movs	r3, #2
 8003d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PULSE_GPIO_Port, &GPIO_InitStruct);
 8003d2e:	f107 030c 	add.w	r3, r7, #12
 8003d32:	4619      	mov	r1, r3
 8003d34:	4804      	ldr	r0, [pc, #16]	; (8003d48 <HAL_TIM_MspPostInit+0x6c>)
 8003d36:	f000 fd5f 	bl	80047f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003d3a:	bf00      	nop
 8003d3c:	3720      	adds	r7, #32
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800
 8003d48:	40020000 	.word	0x40020000

08003d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d50:	e7fe      	b.n	8003d50 <NMI_Handler+0x4>

08003d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d52:	b480      	push	{r7}
 8003d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d56:	e7fe      	b.n	8003d56 <HardFault_Handler+0x4>

08003d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d5c:	e7fe      	b.n	8003d5c <MemManage_Handler+0x4>

08003d5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d62:	e7fe      	b.n	8003d62 <BusFault_Handler+0x4>

08003d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d68:	e7fe      	b.n	8003d68 <UsageFault_Handler+0x4>

08003d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d6e:	bf00      	nop
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d7c:	bf00      	nop
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d86:	b480      	push	{r7}
 8003d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d98:	f000 f8f0 	bl	8003f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d9c:	bf00      	nop
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003da4:	4803      	ldr	r0, [pc, #12]	; (8003db4 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8003da6:	f002 fae1 	bl	800636c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8003daa:	4803      	ldr	r0, [pc, #12]	; (8003db8 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003dac:	f002 fade 	bl	800636c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003db0:	bf00      	nop
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	200004fc 	.word	0x200004fc
 8003db8:	2000058c 	.word	0x2000058c

08003dbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003dc0:	4803      	ldr	r0, [pc, #12]	; (8003dd0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003dc2:	f002 fad3 	bl	800636c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003dc6:	4803      	ldr	r0, [pc, #12]	; (8003dd4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003dc8:	f002 fad0 	bl	800636c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003dcc:	bf00      	nop
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	200004fc 	.word	0x200004fc
 8003dd4:	200005d4 	.word	0x200005d4

08003dd8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ddc:	4803      	ldr	r0, [pc, #12]	; (8003dec <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003dde:	f002 fac5 	bl	800636c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003de2:	4803      	ldr	r0, [pc, #12]	; (8003df0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003de4:	f002 fac2 	bl	800636c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003de8:	bf00      	nop
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	200004fc 	.word	0x200004fc
 8003df0:	2000061c 	.word	0x2000061c

08003df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dfc:	4a14      	ldr	r2, [pc, #80]	; (8003e50 <_sbrk+0x5c>)
 8003dfe:	4b15      	ldr	r3, [pc, #84]	; (8003e54 <_sbrk+0x60>)
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e08:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <_sbrk+0x64>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d102      	bne.n	8003e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e10:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <_sbrk+0x64>)
 8003e12:	4a12      	ldr	r2, [pc, #72]	; (8003e5c <_sbrk+0x68>)
 8003e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e16:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <_sbrk+0x64>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d207      	bcs.n	8003e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e24:	f003 f8aa 	bl	8006f7c <__errno>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	220c      	movs	r2, #12
 8003e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e32:	e009      	b.n	8003e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e34:	4b08      	ldr	r3, [pc, #32]	; (8003e58 <_sbrk+0x64>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e3a:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <_sbrk+0x64>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4413      	add	r3, r2
 8003e42:	4a05      	ldr	r2, [pc, #20]	; (8003e58 <_sbrk+0x64>)
 8003e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e46:	68fb      	ldr	r3, [r7, #12]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	20010000 	.word	0x20010000
 8003e54:	00000400 	.word	0x00000400
 8003e58:	200006d4 	.word	0x200006d4
 8003e5c:	20000710 	.word	0x20000710

08003e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <SystemInit+0x20>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6a:	4a05      	ldr	r2, [pc, #20]	; (8003e80 <SystemInit+0x20>)
 8003e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <Reset_Handler>:
 8003e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ebc <LoopFillZerobss+0x12>
 8003e88:	480d      	ldr	r0, [pc, #52]	; (8003ec0 <LoopFillZerobss+0x16>)
 8003e8a:	490e      	ldr	r1, [pc, #56]	; (8003ec4 <LoopFillZerobss+0x1a>)
 8003e8c:	4a0e      	ldr	r2, [pc, #56]	; (8003ec8 <LoopFillZerobss+0x1e>)
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e002      	b.n	8003e98 <LoopCopyDataInit>

08003e92 <CopyDataInit>:
 8003e92:	58d4      	ldr	r4, [r2, r3]
 8003e94:	50c4      	str	r4, [r0, r3]
 8003e96:	3304      	adds	r3, #4

08003e98 <LoopCopyDataInit>:
 8003e98:	18c4      	adds	r4, r0, r3
 8003e9a:	428c      	cmp	r4, r1
 8003e9c:	d3f9      	bcc.n	8003e92 <CopyDataInit>
 8003e9e:	4a0b      	ldr	r2, [pc, #44]	; (8003ecc <LoopFillZerobss+0x22>)
 8003ea0:	4c0b      	ldr	r4, [pc, #44]	; (8003ed0 <LoopFillZerobss+0x26>)
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	e001      	b.n	8003eaa <LoopFillZerobss>

08003ea6 <FillZerobss>:
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	3204      	adds	r2, #4

08003eaa <LoopFillZerobss>:
 8003eaa:	42a2      	cmp	r2, r4
 8003eac:	d3fb      	bcc.n	8003ea6 <FillZerobss>
 8003eae:	f7ff ffd7 	bl	8003e60 <SystemInit>
 8003eb2:	f003 f869 	bl	8006f88 <__libc_init_array>
 8003eb6:	f7fd fb47 	bl	8001548 <main>
 8003eba:	4770      	bx	lr
 8003ebc:	20010000 	.word	0x20010000
 8003ec0:	20000000 	.word	0x20000000
 8003ec4:	20000080 	.word	0x20000080
 8003ec8:	08007b60 	.word	0x08007b60
 8003ecc:	20000080 	.word	0x20000080
 8003ed0:	2000070c 	.word	0x2000070c

08003ed4 <ADC_IRQHandler>:
 8003ed4:	e7fe      	b.n	8003ed4 <ADC_IRQHandler>
	...

08003ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003edc:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <HAL_Init+0x40>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a0d      	ldr	r2, [pc, #52]	; (8003f18 <HAL_Init+0x40>)
 8003ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <HAL_Init+0x40>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <HAL_Init+0x40>)
 8003eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ef4:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <HAL_Init+0x40>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a07      	ldr	r2, [pc, #28]	; (8003f18 <HAL_Init+0x40>)
 8003efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f00:	2003      	movs	r0, #3
 8003f02:	f000 f94f 	bl	80041a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f06:	200f      	movs	r0, #15
 8003f08:	f000 f808 	bl	8003f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f0c:	f7ff fd9e 	bl	8003a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40023c00 	.word	0x40023c00

08003f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f24:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <HAL_InitTick+0x54>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <HAL_InitTick+0x58>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f967 	bl	800420e <HAL_SYSTICK_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e00e      	b.n	8003f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b0f      	cmp	r3, #15
 8003f4e:	d80a      	bhi.n	8003f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f50:	2200      	movs	r2, #0
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	f04f 30ff 	mov.w	r0, #4294967295
 8003f58:	f000 f92f 	bl	80041ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f5c:	4a06      	ldr	r2, [pc, #24]	; (8003f78 <HAL_InitTick+0x5c>)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e000      	b.n	8003f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000010 	.word	0x20000010
 8003f74:	20000018 	.word	0x20000018
 8003f78:	20000014 	.word	0x20000014

08003f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_IncTick+0x20>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_IncTick+0x24>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	4a04      	ldr	r2, [pc, #16]	; (8003fa0 <HAL_IncTick+0x24>)
 8003f8e:	6013      	str	r3, [r2, #0]
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	20000018 	.word	0x20000018
 8003fa0:	200006d8 	.word	0x200006d8

08003fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8003fa8:	4b03      	ldr	r3, [pc, #12]	; (8003fb8 <HAL_GetTick+0x14>)
 8003faa:	681b      	ldr	r3, [r3, #0]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	200006d8 	.word	0x200006d8

08003fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fc4:	f7ff ffee 	bl	8003fa4 <HAL_GetTick>
 8003fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d005      	beq.n	8003fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <HAL_Delay+0x44>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fe2:	bf00      	nop
 8003fe4:	f7ff ffde 	bl	8003fa4 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d8f7      	bhi.n	8003fe4 <HAL_Delay+0x28>
  {
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000018 	.word	0x20000018

08004004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004014:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <__NVIC_SetPriorityGrouping+0x44>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004020:	4013      	ands	r3, r2
 8004022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800402c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004036:	4a04      	ldr	r2, [pc, #16]	; (8004048 <__NVIC_SetPriorityGrouping+0x44>)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	60d3      	str	r3, [r2, #12]
}
 800403c:	bf00      	nop
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	e000ed00 	.word	0xe000ed00

0800404c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004050:	4b04      	ldr	r3, [pc, #16]	; (8004064 <__NVIC_GetPriorityGrouping+0x18>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	0a1b      	lsrs	r3, r3, #8
 8004056:	f003 0307 	and.w	r3, r3, #7
}
 800405a:	4618      	mov	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	e000ed00 	.word	0xe000ed00

08004068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004076:	2b00      	cmp	r3, #0
 8004078:	db0b      	blt.n	8004092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	f003 021f 	and.w	r2, r3, #31
 8004080:	4907      	ldr	r1, [pc, #28]	; (80040a0 <__NVIC_EnableIRQ+0x38>)
 8004082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	2001      	movs	r0, #1
 800408a:	fa00 f202 	lsl.w	r2, r0, r2
 800408e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	e000e100 	.word	0xe000e100

080040a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	6039      	str	r1, [r7, #0]
 80040ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	db0a      	blt.n	80040ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	490c      	ldr	r1, [pc, #48]	; (80040f0 <__NVIC_SetPriority+0x4c>)
 80040be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c2:	0112      	lsls	r2, r2, #4
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	440b      	add	r3, r1
 80040c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040cc:	e00a      	b.n	80040e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	4908      	ldr	r1, [pc, #32]	; (80040f4 <__NVIC_SetPriority+0x50>)
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	3b04      	subs	r3, #4
 80040dc:	0112      	lsls	r2, r2, #4
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	440b      	add	r3, r1
 80040e2:	761a      	strb	r2, [r3, #24]
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	e000e100 	.word	0xe000e100
 80040f4:	e000ed00 	.word	0xe000ed00

080040f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b089      	sub	sp, #36	; 0x24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f1c3 0307 	rsb	r3, r3, #7
 8004112:	2b04      	cmp	r3, #4
 8004114:	bf28      	it	cs
 8004116:	2304      	movcs	r3, #4
 8004118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3304      	adds	r3, #4
 800411e:	2b06      	cmp	r3, #6
 8004120:	d902      	bls.n	8004128 <NVIC_EncodePriority+0x30>
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	3b03      	subs	r3, #3
 8004126:	e000      	b.n	800412a <NVIC_EncodePriority+0x32>
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800412c:	f04f 32ff 	mov.w	r2, #4294967295
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43da      	mvns	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	401a      	ands	r2, r3
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004140:	f04f 31ff 	mov.w	r1, #4294967295
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	fa01 f303 	lsl.w	r3, r1, r3
 800414a:	43d9      	mvns	r1, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004150:	4313      	orrs	r3, r2
         );
}
 8004152:	4618      	mov	r0, r3
 8004154:	3724      	adds	r7, #36	; 0x24
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
	...

08004160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3b01      	subs	r3, #1
 800416c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004170:	d301      	bcc.n	8004176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004172:	2301      	movs	r3, #1
 8004174:	e00f      	b.n	8004196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004176:	4a0a      	ldr	r2, [pc, #40]	; (80041a0 <SysTick_Config+0x40>)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3b01      	subs	r3, #1
 800417c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800417e:	210f      	movs	r1, #15
 8004180:	f04f 30ff 	mov.w	r0, #4294967295
 8004184:	f7ff ff8e 	bl	80040a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <SysTick_Config+0x40>)
 800418a:	2200      	movs	r2, #0
 800418c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800418e:	4b04      	ldr	r3, [pc, #16]	; (80041a0 <SysTick_Config+0x40>)
 8004190:	2207      	movs	r2, #7
 8004192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	e000e010 	.word	0xe000e010

080041a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ff29 	bl	8004004 <__NVIC_SetPriorityGrouping>
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b086      	sub	sp, #24
 80041be:	af00      	add	r7, sp, #0
 80041c0:	4603      	mov	r3, r0
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041cc:	f7ff ff3e 	bl	800404c <__NVIC_GetPriorityGrouping>
 80041d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	6978      	ldr	r0, [r7, #20]
 80041d8:	f7ff ff8e 	bl	80040f8 <NVIC_EncodePriority>
 80041dc:	4602      	mov	r2, r0
 80041de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e2:	4611      	mov	r1, r2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff ff5d 	bl	80040a4 <__NVIC_SetPriority>
}
 80041ea:	bf00      	nop
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	4603      	mov	r3, r0
 80041fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff ff31 	bl	8004068 <__NVIC_EnableIRQ>
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7ff ffa2 	bl	8004160 <SysTick_Config>
 800421c:	4603      	mov	r3, r0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800423a:	4b23      	ldr	r3, [pc, #140]	; (80042c8 <HAL_FLASH_Program+0xa0>)
 800423c:	7e1b      	ldrb	r3, [r3, #24]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_FLASH_Program+0x1e>
 8004242:	2302      	movs	r3, #2
 8004244:	e03b      	b.n	80042be <HAL_FLASH_Program+0x96>
 8004246:	4b20      	ldr	r3, [pc, #128]	; (80042c8 <HAL_FLASH_Program+0xa0>)
 8004248:	2201      	movs	r2, #1
 800424a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800424c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004250:	f000 f870 	bl	8004334 <FLASH_WaitForLastOperation>
 8004254:	4603      	mov	r3, r0
 8004256:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004258:	7dfb      	ldrb	r3, [r7, #23]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d12b      	bne.n	80042b6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d105      	bne.n	8004270 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004264:	783b      	ldrb	r3, [r7, #0]
 8004266:	4619      	mov	r1, r3
 8004268:	68b8      	ldr	r0, [r7, #8]
 800426a:	f000 f91b 	bl	80044a4 <FLASH_Program_Byte>
 800426e:	e016      	b.n	800429e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d105      	bne.n	8004282 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004276:	883b      	ldrh	r3, [r7, #0]
 8004278:	4619      	mov	r1, r3
 800427a:	68b8      	ldr	r0, [r7, #8]
 800427c:	f000 f8ee 	bl	800445c <FLASH_Program_HalfWord>
 8004280:	e00d      	b.n	800429e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d105      	bne.n	8004294 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	4619      	mov	r1, r3
 800428c:	68b8      	ldr	r0, [r7, #8]
 800428e:	f000 f8c3 	bl	8004418 <FLASH_Program_Word>
 8004292:	e004      	b.n	800429e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004294:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004298:	68b8      	ldr	r0, [r7, #8]
 800429a:	f000 f88b 	bl	80043b4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800429e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80042a2:	f000 f847 	bl	8004334 <FLASH_WaitForLastOperation>
 80042a6:	4603      	mov	r3, r0
 80042a8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80042aa:	4b08      	ldr	r3, [pc, #32]	; (80042cc <HAL_FLASH_Program+0xa4>)
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	4a07      	ldr	r2, [pc, #28]	; (80042cc <HAL_FLASH_Program+0xa4>)
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80042b6:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <HAL_FLASH_Program+0xa0>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	761a      	strb	r2, [r3, #24]
  
  return status;
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	200006dc 	.word	0x200006dc
 80042cc:	40023c00 	.word	0x40023c00

080042d0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80042da:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_FLASH_Unlock+0x38>)
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	da0b      	bge.n	80042fa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80042e2:	4b09      	ldr	r3, [pc, #36]	; (8004308 <HAL_FLASH_Unlock+0x38>)
 80042e4:	4a09      	ldr	r2, [pc, #36]	; (800430c <HAL_FLASH_Unlock+0x3c>)
 80042e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80042e8:	4b07      	ldr	r3, [pc, #28]	; (8004308 <HAL_FLASH_Unlock+0x38>)
 80042ea:	4a09      	ldr	r2, [pc, #36]	; (8004310 <HAL_FLASH_Unlock+0x40>)
 80042ec:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80042ee:	4b06      	ldr	r3, [pc, #24]	; (8004308 <HAL_FLASH_Unlock+0x38>)
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	da01      	bge.n	80042fa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80042fa:	79fb      	ldrb	r3, [r7, #7]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	40023c00 	.word	0x40023c00
 800430c:	45670123 	.word	0x45670123
 8004310:	cdef89ab 	.word	0xcdef89ab

08004314 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004318:	4b05      	ldr	r3, [pc, #20]	; (8004330 <HAL_FLASH_Lock+0x1c>)
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	4a04      	ldr	r2, [pc, #16]	; (8004330 <HAL_FLASH_Lock+0x1c>)
 800431e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004322:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	40023c00 	.word	0x40023c00

08004334 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004340:	4b1a      	ldr	r3, [pc, #104]	; (80043ac <FLASH_WaitForLastOperation+0x78>)
 8004342:	2200      	movs	r2, #0
 8004344:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004346:	f7ff fe2d 	bl	8003fa4 <HAL_GetTick>
 800434a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800434c:	e010      	b.n	8004370 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004354:	d00c      	beq.n	8004370 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d007      	beq.n	800436c <FLASH_WaitForLastOperation+0x38>
 800435c:	f7ff fe22 	bl	8003fa4 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	429a      	cmp	r2, r3
 800436a:	d201      	bcs.n	8004370 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e019      	b.n	80043a4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004370:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <FLASH_WaitForLastOperation+0x7c>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e8      	bne.n	800434e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800437c:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <FLASH_WaitForLastOperation+0x7c>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004388:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <FLASH_WaitForLastOperation+0x7c>)
 800438a:	2201      	movs	r2, #1
 800438c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800438e:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <FLASH_WaitForLastOperation+0x7c>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800439a:	f000 f8a5 	bl	80044e8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
  
}  
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	200006dc 	.word	0x200006dc
 80043b0:	40023c00 	.word	0x40023c00

080043b4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80043c0:	4b14      	ldr	r3, [pc, #80]	; (8004414 <FLASH_Program_DoubleWord+0x60>)
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	4a13      	ldr	r2, [pc, #76]	; (8004414 <FLASH_Program_DoubleWord+0x60>)
 80043c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80043cc:	4b11      	ldr	r3, [pc, #68]	; (8004414 <FLASH_Program_DoubleWord+0x60>)
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	4a10      	ldr	r2, [pc, #64]	; (8004414 <FLASH_Program_DoubleWord+0x60>)
 80043d2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80043d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <FLASH_Program_DoubleWord+0x60>)
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	4a0d      	ldr	r2, [pc, #52]	; (8004414 <FLASH_Program_DoubleWord+0x60>)
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80043ea:	f3bf 8f6f 	isb	sy
}
 80043ee:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80043f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	000a      	movs	r2, r1
 80043fe:	2300      	movs	r3, #0
 8004400:	68f9      	ldr	r1, [r7, #12]
 8004402:	3104      	adds	r1, #4
 8004404:	4613      	mov	r3, r2
 8004406:	600b      	str	r3, [r1, #0]
}
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	40023c00 	.word	0x40023c00

08004418 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004422:	4b0d      	ldr	r3, [pc, #52]	; (8004458 <FLASH_Program_Word+0x40>)
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	4a0c      	ldr	r2, [pc, #48]	; (8004458 <FLASH_Program_Word+0x40>)
 8004428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800442e:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <FLASH_Program_Word+0x40>)
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	4a09      	ldr	r2, [pc, #36]	; (8004458 <FLASH_Program_Word+0x40>)
 8004434:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004438:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800443a:	4b07      	ldr	r3, [pc, #28]	; (8004458 <FLASH_Program_Word+0x40>)
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	4a06      	ldr	r2, [pc, #24]	; (8004458 <FLASH_Program_Word+0x40>)
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	601a      	str	r2, [r3, #0]
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	40023c00 	.word	0x40023c00

0800445c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004468:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <FLASH_Program_HalfWord+0x44>)
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	4a0c      	ldr	r2, [pc, #48]	; (80044a0 <FLASH_Program_HalfWord+0x44>)
 800446e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004472:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004474:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <FLASH_Program_HalfWord+0x44>)
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	4a09      	ldr	r2, [pc, #36]	; (80044a0 <FLASH_Program_HalfWord+0x44>)
 800447a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800447e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <FLASH_Program_HalfWord+0x44>)
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	4a06      	ldr	r2, [pc, #24]	; (80044a0 <FLASH_Program_HalfWord+0x44>)
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	887a      	ldrh	r2, [r7, #2]
 8004490:	801a      	strh	r2, [r3, #0]
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40023c00 	.word	0x40023c00

080044a4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80044b0:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <FLASH_Program_Byte+0x40>)
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	4a0b      	ldr	r2, [pc, #44]	; (80044e4 <FLASH_Program_Byte+0x40>)
 80044b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80044bc:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <FLASH_Program_Byte+0x40>)
 80044be:	4a09      	ldr	r2, [pc, #36]	; (80044e4 <FLASH_Program_Byte+0x40>)
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80044c4:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <FLASH_Program_Byte+0x40>)
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	4a06      	ldr	r2, [pc, #24]	; (80044e4 <FLASH_Program_Byte+0x40>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	78fa      	ldrb	r2, [r7, #3]
 80044d4:	701a      	strb	r2, [r3, #0]
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40023c00 	.word	0x40023c00

080044e8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80044ec:	4b2f      	ldr	r3, [pc, #188]	; (80045ac <FLASH_SetErrorCode+0xc4>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 0310 	and.w	r3, r3, #16
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d008      	beq.n	800450a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80044f8:	4b2d      	ldr	r3, [pc, #180]	; (80045b0 <FLASH_SetErrorCode+0xc8>)
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	f043 0310 	orr.w	r3, r3, #16
 8004500:	4a2b      	ldr	r2, [pc, #172]	; (80045b0 <FLASH_SetErrorCode+0xc8>)
 8004502:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004504:	4b29      	ldr	r3, [pc, #164]	; (80045ac <FLASH_SetErrorCode+0xc4>)
 8004506:	2210      	movs	r2, #16
 8004508:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800450a:	4b28      	ldr	r3, [pc, #160]	; (80045ac <FLASH_SetErrorCode+0xc4>)
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	2b00      	cmp	r3, #0
 8004514:	d008      	beq.n	8004528 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004516:	4b26      	ldr	r3, [pc, #152]	; (80045b0 <FLASH_SetErrorCode+0xc8>)
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f043 0308 	orr.w	r3, r3, #8
 800451e:	4a24      	ldr	r2, [pc, #144]	; (80045b0 <FLASH_SetErrorCode+0xc8>)
 8004520:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004522:	4b22      	ldr	r3, [pc, #136]	; (80045ac <FLASH_SetErrorCode+0xc4>)
 8004524:	2220      	movs	r2, #32
 8004526:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004528:	4b20      	ldr	r3, [pc, #128]	; (80045ac <FLASH_SetErrorCode+0xc4>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d008      	beq.n	8004546 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004534:	4b1e      	ldr	r3, [pc, #120]	; (80045b0 <FLASH_SetErrorCode+0xc8>)
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	f043 0304 	orr.w	r3, r3, #4
 800453c:	4a1c      	ldr	r2, [pc, #112]	; (80045b0 <FLASH_SetErrorCode+0xc8>)
 800453e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004540:	4b1a      	ldr	r3, [pc, #104]	; (80045ac <FLASH_SetErrorCode+0xc4>)
 8004542:	2240      	movs	r2, #64	; 0x40
 8004544:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004546:	4b19      	ldr	r3, [pc, #100]	; (80045ac <FLASH_SetErrorCode+0xc4>)
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454e:	2b00      	cmp	r3, #0
 8004550:	d008      	beq.n	8004564 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004552:	4b17      	ldr	r3, [pc, #92]	; (80045b0 <FLASH_SetErrorCode+0xc8>)
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f043 0302 	orr.w	r3, r3, #2
 800455a:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <FLASH_SetErrorCode+0xc8>)
 800455c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800455e:	4b13      	ldr	r3, [pc, #76]	; (80045ac <FLASH_SetErrorCode+0xc4>)
 8004560:	2280      	movs	r2, #128	; 0x80
 8004562:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004564:	4b11      	ldr	r3, [pc, #68]	; (80045ac <FLASH_SetErrorCode+0xc4>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456c:	2b00      	cmp	r3, #0
 800456e:	d009      	beq.n	8004584 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004570:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <FLASH_SetErrorCode+0xc8>)
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	f043 0301 	orr.w	r3, r3, #1
 8004578:	4a0d      	ldr	r2, [pc, #52]	; (80045b0 <FLASH_SetErrorCode+0xc8>)
 800457a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800457c:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <FLASH_SetErrorCode+0xc4>)
 800457e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004582:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004584:	4b09      	ldr	r3, [pc, #36]	; (80045ac <FLASH_SetErrorCode+0xc4>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004590:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <FLASH_SetErrorCode+0xc8>)
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f043 0320 	orr.w	r3, r3, #32
 8004598:	4a05      	ldr	r2, [pc, #20]	; (80045b0 <FLASH_SetErrorCode+0xc8>)
 800459a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800459c:	4b03      	ldr	r3, [pc, #12]	; (80045ac <FLASH_SetErrorCode+0xc4>)
 800459e:	2202      	movs	r2, #2
 80045a0:	60da      	str	r2, [r3, #12]
  }
}
 80045a2:	bf00      	nop
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	40023c00 	.word	0x40023c00
 80045b0:	200006dc 	.word	0x200006dc

080045b4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80045c6:	4b31      	ldr	r3, [pc, #196]	; (800468c <HAL_FLASHEx_Erase+0xd8>)
 80045c8:	7e1b      	ldrb	r3, [r3, #24]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <HAL_FLASHEx_Erase+0x1e>
 80045ce:	2302      	movs	r3, #2
 80045d0:	e058      	b.n	8004684 <HAL_FLASHEx_Erase+0xd0>
 80045d2:	4b2e      	ldr	r3, [pc, #184]	; (800468c <HAL_FLASHEx_Erase+0xd8>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80045d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80045dc:	f7ff feaa 	bl	8004334 <FLASH_WaitForLastOperation>
 80045e0:	4603      	mov	r3, r0
 80045e2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d148      	bne.n	800467c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	f04f 32ff 	mov.w	r2, #4294967295
 80045f0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d115      	bne.n	8004626 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	4619      	mov	r1, r3
 8004606:	4610      	mov	r0, r2
 8004608:	f000 f844 	bl	8004694 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800460c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004610:	f7ff fe90 	bl	8004334 <FLASH_WaitForLastOperation>
 8004614:	4603      	mov	r3, r0
 8004616:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004618:	4b1d      	ldr	r3, [pc, #116]	; (8004690 <HAL_FLASHEx_Erase+0xdc>)
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	4a1c      	ldr	r2, [pc, #112]	; (8004690 <HAL_FLASHEx_Erase+0xdc>)
 800461e:	f023 0304 	bic.w	r3, r3, #4
 8004622:	6113      	str	r3, [r2, #16]
 8004624:	e028      	b.n	8004678 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	60bb      	str	r3, [r7, #8]
 800462c:	e01c      	b.n	8004668 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	4619      	mov	r1, r3
 8004636:	68b8      	ldr	r0, [r7, #8]
 8004638:	f000 f850 	bl	80046dc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800463c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004640:	f7ff fe78 	bl	8004334 <FLASH_WaitForLastOperation>
 8004644:	4603      	mov	r3, r0
 8004646:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004648:	4b11      	ldr	r3, [pc, #68]	; (8004690 <HAL_FLASHEx_Erase+0xdc>)
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	4a10      	ldr	r2, [pc, #64]	; (8004690 <HAL_FLASHEx_Erase+0xdc>)
 800464e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004652:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	601a      	str	r2, [r3, #0]
          break;
 8004660:	e00a      	b.n	8004678 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	3301      	adds	r3, #1
 8004666:	60bb      	str	r3, [r7, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	4413      	add	r3, r2
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	429a      	cmp	r2, r3
 8004676:	d3da      	bcc.n	800462e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004678:	f000 f878 	bl	800476c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800467c:	4b03      	ldr	r3, [pc, #12]	; (800468c <HAL_FLASHEx_Erase+0xd8>)
 800467e:	2200      	movs	r2, #0
 8004680:	761a      	strb	r2, [r3, #24]

  return status;
 8004682:	7bfb      	ldrb	r3, [r7, #15]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	200006dc 	.word	0x200006dc
 8004690:	40023c00 	.word	0x40023c00

08004694 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	6039      	str	r1, [r7, #0]
 800469e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80046a0:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <FLASH_MassErase+0x44>)
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	4a0c      	ldr	r2, [pc, #48]	; (80046d8 <FLASH_MassErase+0x44>)
 80046a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80046ac:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <FLASH_MassErase+0x44>)
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	4a09      	ldr	r2, [pc, #36]	; (80046d8 <FLASH_MassErase+0x44>)
 80046b2:	f043 0304 	orr.w	r3, r3, #4
 80046b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80046b8:	4b07      	ldr	r3, [pc, #28]	; (80046d8 <FLASH_MassErase+0x44>)
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	021b      	lsls	r3, r3, #8
 80046c0:	4313      	orrs	r3, r2
 80046c2:	4a05      	ldr	r2, [pc, #20]	; (80046d8 <FLASH_MassErase+0x44>)
 80046c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c8:	6113      	str	r3, [r2, #16]
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40023c00 	.word	0x40023c00

080046dc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d102      	bne.n	80046f8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	e010      	b.n	800471a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d103      	bne.n	8004706 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80046fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e009      	b.n	800471a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004706:	78fb      	ldrb	r3, [r7, #3]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d103      	bne.n	8004714 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800470c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	e002      	b.n	800471a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004714:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004718:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800471a:	4b13      	ldr	r3, [pc, #76]	; (8004768 <FLASH_Erase_Sector+0x8c>)
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	4a12      	ldr	r2, [pc, #72]	; (8004768 <FLASH_Erase_Sector+0x8c>)
 8004720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004724:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004726:	4b10      	ldr	r3, [pc, #64]	; (8004768 <FLASH_Erase_Sector+0x8c>)
 8004728:	691a      	ldr	r2, [r3, #16]
 800472a:	490f      	ldr	r1, [pc, #60]	; (8004768 <FLASH_Erase_Sector+0x8c>)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004732:	4b0d      	ldr	r3, [pc, #52]	; (8004768 <FLASH_Erase_Sector+0x8c>)
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	4a0c      	ldr	r2, [pc, #48]	; (8004768 <FLASH_Erase_Sector+0x8c>)
 8004738:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800473c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800473e:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <FLASH_Erase_Sector+0x8c>)
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	4313      	orrs	r3, r2
 8004748:	4a07      	ldr	r2, [pc, #28]	; (8004768 <FLASH_Erase_Sector+0x8c>)
 800474a:	f043 0302 	orr.w	r3, r3, #2
 800474e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004750:	4b05      	ldr	r3, [pc, #20]	; (8004768 <FLASH_Erase_Sector+0x8c>)
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	4a04      	ldr	r2, [pc, #16]	; (8004768 <FLASH_Erase_Sector+0x8c>)
 8004756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800475a:	6113      	str	r3, [r2, #16]
}
 800475c:	bf00      	nop
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	40023c00 	.word	0x40023c00

0800476c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004770:	4b20      	ldr	r3, [pc, #128]	; (80047f4 <FLASH_FlushCaches+0x88>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004778:	2b00      	cmp	r3, #0
 800477a:	d017      	beq.n	80047ac <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800477c:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <FLASH_FlushCaches+0x88>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <FLASH_FlushCaches+0x88>)
 8004782:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004786:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004788:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <FLASH_FlushCaches+0x88>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a19      	ldr	r2, [pc, #100]	; (80047f4 <FLASH_FlushCaches+0x88>)
 800478e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	4b17      	ldr	r3, [pc, #92]	; (80047f4 <FLASH_FlushCaches+0x88>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a16      	ldr	r2, [pc, #88]	; (80047f4 <FLASH_FlushCaches+0x88>)
 800479a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800479e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047a0:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <FLASH_FlushCaches+0x88>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a13      	ldr	r2, [pc, #76]	; (80047f4 <FLASH_FlushCaches+0x88>)
 80047a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047aa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80047ac:	4b11      	ldr	r3, [pc, #68]	; (80047f4 <FLASH_FlushCaches+0x88>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d017      	beq.n	80047e8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80047b8:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <FLASH_FlushCaches+0x88>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a0d      	ldr	r2, [pc, #52]	; (80047f4 <FLASH_FlushCaches+0x88>)
 80047be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047c2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80047c4:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <FLASH_FlushCaches+0x88>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a0a      	ldr	r2, [pc, #40]	; (80047f4 <FLASH_FlushCaches+0x88>)
 80047ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <FLASH_FlushCaches+0x88>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a07      	ldr	r2, [pc, #28]	; (80047f4 <FLASH_FlushCaches+0x88>)
 80047d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047da:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <FLASH_FlushCaches+0x88>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a04      	ldr	r2, [pc, #16]	; (80047f4 <FLASH_FlushCaches+0x88>)
 80047e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047e6:	6013      	str	r3, [r2, #0]
  }
}
 80047e8:	bf00      	nop
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40023c00 	.word	0x40023c00

080047f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b089      	sub	sp, #36	; 0x24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004802:	2300      	movs	r3, #0
 8004804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004806:	2300      	movs	r3, #0
 8004808:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800480a:	2300      	movs	r3, #0
 800480c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]
 8004812:	e159      	b.n	8004ac8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004814:	2201      	movs	r2, #1
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4013      	ands	r3, r2
 8004826:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	429a      	cmp	r2, r3
 800482e:	f040 8148 	bne.w	8004ac2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b01      	cmp	r3, #1
 800483c:	d005      	beq.n	800484a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004846:	2b02      	cmp	r3, #2
 8004848:	d130      	bne.n	80048ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	2203      	movs	r2, #3
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	43db      	mvns	r3, r3
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	4013      	ands	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	4313      	orrs	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004880:	2201      	movs	r2, #1
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	43db      	mvns	r3, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4013      	ands	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	091b      	lsrs	r3, r3, #4
 8004896:	f003 0201 	and.w	r2, r3, #1
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d017      	beq.n	80048e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	2203      	movs	r2, #3
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	43db      	mvns	r3, r3
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d123      	bne.n	800493c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	08da      	lsrs	r2, r3, #3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3208      	adds	r2, #8
 80048fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004900:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	220f      	movs	r2, #15
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	43db      	mvns	r3, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	4313      	orrs	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	08da      	lsrs	r2, r3, #3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3208      	adds	r2, #8
 8004936:	69b9      	ldr	r1, [r7, #24]
 8004938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	2203      	movs	r2, #3
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4013      	ands	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 0203 	and.w	r2, r3, #3
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 80a2 	beq.w	8004ac2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	4b57      	ldr	r3, [pc, #348]	; (8004ae0 <HAL_GPIO_Init+0x2e8>)
 8004984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004986:	4a56      	ldr	r2, [pc, #344]	; (8004ae0 <HAL_GPIO_Init+0x2e8>)
 8004988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800498c:	6453      	str	r3, [r2, #68]	; 0x44
 800498e:	4b54      	ldr	r3, [pc, #336]	; (8004ae0 <HAL_GPIO_Init+0x2e8>)
 8004990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800499a:	4a52      	ldr	r2, [pc, #328]	; (8004ae4 <HAL_GPIO_Init+0x2ec>)
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	089b      	lsrs	r3, r3, #2
 80049a0:	3302      	adds	r3, #2
 80049a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	220f      	movs	r2, #15
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	43db      	mvns	r3, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4013      	ands	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a49      	ldr	r2, [pc, #292]	; (8004ae8 <HAL_GPIO_Init+0x2f0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d019      	beq.n	80049fa <HAL_GPIO_Init+0x202>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a48      	ldr	r2, [pc, #288]	; (8004aec <HAL_GPIO_Init+0x2f4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d013      	beq.n	80049f6 <HAL_GPIO_Init+0x1fe>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a47      	ldr	r2, [pc, #284]	; (8004af0 <HAL_GPIO_Init+0x2f8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00d      	beq.n	80049f2 <HAL_GPIO_Init+0x1fa>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a46      	ldr	r2, [pc, #280]	; (8004af4 <HAL_GPIO_Init+0x2fc>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d007      	beq.n	80049ee <HAL_GPIO_Init+0x1f6>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a45      	ldr	r2, [pc, #276]	; (8004af8 <HAL_GPIO_Init+0x300>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d101      	bne.n	80049ea <HAL_GPIO_Init+0x1f2>
 80049e6:	2304      	movs	r3, #4
 80049e8:	e008      	b.n	80049fc <HAL_GPIO_Init+0x204>
 80049ea:	2307      	movs	r3, #7
 80049ec:	e006      	b.n	80049fc <HAL_GPIO_Init+0x204>
 80049ee:	2303      	movs	r3, #3
 80049f0:	e004      	b.n	80049fc <HAL_GPIO_Init+0x204>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e002      	b.n	80049fc <HAL_GPIO_Init+0x204>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <HAL_GPIO_Init+0x204>
 80049fa:	2300      	movs	r3, #0
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	f002 0203 	and.w	r2, r2, #3
 8004a02:	0092      	lsls	r2, r2, #2
 8004a04:	4093      	lsls	r3, r2
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a0c:	4935      	ldr	r1, [pc, #212]	; (8004ae4 <HAL_GPIO_Init+0x2ec>)
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	089b      	lsrs	r3, r3, #2
 8004a12:	3302      	adds	r3, #2
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a1a:	4b38      	ldr	r3, [pc, #224]	; (8004afc <HAL_GPIO_Init+0x304>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	43db      	mvns	r3, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4013      	ands	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a3e:	4a2f      	ldr	r2, [pc, #188]	; (8004afc <HAL_GPIO_Init+0x304>)
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a44:	4b2d      	ldr	r3, [pc, #180]	; (8004afc <HAL_GPIO_Init+0x304>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4013      	ands	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a68:	4a24      	ldr	r2, [pc, #144]	; (8004afc <HAL_GPIO_Init+0x304>)
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a6e:	4b23      	ldr	r3, [pc, #140]	; (8004afc <HAL_GPIO_Init+0x304>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	43db      	mvns	r3, r3
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a92:	4a1a      	ldr	r2, [pc, #104]	; (8004afc <HAL_GPIO_Init+0x304>)
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a98:	4b18      	ldr	r3, [pc, #96]	; (8004afc <HAL_GPIO_Init+0x304>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004abc:	4a0f      	ldr	r2, [pc, #60]	; (8004afc <HAL_GPIO_Init+0x304>)
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	61fb      	str	r3, [r7, #28]
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	2b0f      	cmp	r3, #15
 8004acc:	f67f aea2 	bls.w	8004814 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ad0:	bf00      	nop
 8004ad2:	bf00      	nop
 8004ad4:	3724      	adds	r7, #36	; 0x24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	40013800 	.word	0x40013800
 8004ae8:	40020000 	.word	0x40020000
 8004aec:	40020400 	.word	0x40020400
 8004af0:	40020800 	.word	0x40020800
 8004af4:	40020c00 	.word	0x40020c00
 8004af8:	40021000 	.word	0x40021000
 8004afc:	40013c00 	.word	0x40013c00

08004b00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	887b      	ldrh	r3, [r7, #2]
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
 8004b1c:	e001      	b.n	8004b22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	807b      	strh	r3, [r7, #2]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b40:	787b      	ldrb	r3, [r7, #1]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b46:	887a      	ldrh	r2, [r7, #2]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b4c:	e003      	b.n	8004b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b4e:	887b      	ldrh	r3, [r7, #2]
 8004b50:	041a      	lsls	r2, r3, #16
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	619a      	str	r2, [r3, #24]
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e12b      	b.n	8004dce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fe ff86 	bl	8003a9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2224      	movs	r2, #36	; 0x24
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0201 	bic.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bc8:	f001 f848 	bl	8005c5c <HAL_RCC_GetPCLK1Freq>
 8004bcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4a81      	ldr	r2, [pc, #516]	; (8004dd8 <HAL_I2C_Init+0x274>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d807      	bhi.n	8004be8 <HAL_I2C_Init+0x84>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4a80      	ldr	r2, [pc, #512]	; (8004ddc <HAL_I2C_Init+0x278>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	bf94      	ite	ls
 8004be0:	2301      	movls	r3, #1
 8004be2:	2300      	movhi	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	e006      	b.n	8004bf6 <HAL_I2C_Init+0x92>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4a7d      	ldr	r2, [pc, #500]	; (8004de0 <HAL_I2C_Init+0x27c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	bf94      	ite	ls
 8004bf0:	2301      	movls	r3, #1
 8004bf2:	2300      	movhi	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e0e7      	b.n	8004dce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4a78      	ldr	r2, [pc, #480]	; (8004de4 <HAL_I2C_Init+0x280>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	0c9b      	lsrs	r3, r3, #18
 8004c08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4a6a      	ldr	r2, [pc, #424]	; (8004dd8 <HAL_I2C_Init+0x274>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d802      	bhi.n	8004c38 <HAL_I2C_Init+0xd4>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	3301      	adds	r3, #1
 8004c36:	e009      	b.n	8004c4c <HAL_I2C_Init+0xe8>
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c3e:	fb02 f303 	mul.w	r3, r2, r3
 8004c42:	4a69      	ldr	r2, [pc, #420]	; (8004de8 <HAL_I2C_Init+0x284>)
 8004c44:	fba2 2303 	umull	r2, r3, r2, r3
 8004c48:	099b      	lsrs	r3, r3, #6
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6812      	ldr	r2, [r2, #0]
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	495c      	ldr	r1, [pc, #368]	; (8004dd8 <HAL_I2C_Init+0x274>)
 8004c68:	428b      	cmp	r3, r1
 8004c6a:	d819      	bhi.n	8004ca0 <HAL_I2C_Init+0x13c>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	1e59      	subs	r1, r3, #1
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c7a:	1c59      	adds	r1, r3, #1
 8004c7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c80:	400b      	ands	r3, r1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_I2C_Init+0x138>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1e59      	subs	r1, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c94:	3301      	adds	r3, #1
 8004c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c9a:	e051      	b.n	8004d40 <HAL_I2C_Init+0x1dc>
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	e04f      	b.n	8004d40 <HAL_I2C_Init+0x1dc>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d111      	bne.n	8004ccc <HAL_I2C_Init+0x168>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	1e58      	subs	r0, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6859      	ldr	r1, [r3, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	440b      	add	r3, r1
 8004cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cba:	3301      	adds	r3, #1
 8004cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	e012      	b.n	8004cf2 <HAL_I2C_Init+0x18e>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	1e58      	subs	r0, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6859      	ldr	r1, [r3, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	0099      	lsls	r1, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bf0c      	ite	eq
 8004cec:	2301      	moveq	r3, #1
 8004cee:	2300      	movne	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_I2C_Init+0x196>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e022      	b.n	8004d40 <HAL_I2C_Init+0x1dc>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10e      	bne.n	8004d20 <HAL_I2C_Init+0x1bc>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1e58      	subs	r0, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6859      	ldr	r1, [r3, #4]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	440b      	add	r3, r1
 8004d10:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d14:	3301      	adds	r3, #1
 8004d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d1e:	e00f      	b.n	8004d40 <HAL_I2C_Init+0x1dc>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	1e58      	subs	r0, r3, #1
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6859      	ldr	r1, [r3, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	0099      	lsls	r1, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d36:	3301      	adds	r3, #1
 8004d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	6809      	ldr	r1, [r1, #0]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69da      	ldr	r2, [r3, #28]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6911      	ldr	r1, [r2, #16]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68d2      	ldr	r2, [r2, #12]
 8004d7a:	4311      	orrs	r1, r2
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	430b      	orrs	r3, r1
 8004d82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695a      	ldr	r2, [r3, #20]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	000186a0 	.word	0x000186a0
 8004ddc:	001e847f 	.word	0x001e847f
 8004de0:	003d08ff 	.word	0x003d08ff
 8004de4:	431bde83 	.word	0x431bde83
 8004de8:	10624dd3 	.word	0x10624dd3

08004dec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	607a      	str	r2, [r7, #4]
 8004df6:	461a      	mov	r2, r3
 8004df8:	460b      	mov	r3, r1
 8004dfa:	817b      	strh	r3, [r7, #10]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e00:	f7ff f8d0 	bl	8003fa4 <HAL_GetTick>
 8004e04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	f040 80e0 	bne.w	8004fd4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	2319      	movs	r3, #25
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	4970      	ldr	r1, [pc, #448]	; (8004fe0 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f964 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	e0d3      	b.n	8004fd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_I2C_Master_Transmit+0x50>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e0cc      	b.n	8004fd6 <HAL_I2C_Master_Transmit+0x1ea>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d007      	beq.n	8004e62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 0201 	orr.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2221      	movs	r2, #33	; 0x21
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2210      	movs	r2, #16
 8004e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	893a      	ldrh	r2, [r7, #8]
 8004e92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a50      	ldr	r2, [pc, #320]	; (8004fe4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004ea2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ea4:	8979      	ldrh	r1, [r7, #10]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	6a3a      	ldr	r2, [r7, #32]
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 f89c 	bl	8004fe8 <I2C_MasterRequestWrite>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e08d      	b.n	8004fd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ed0:	e066      	b.n	8004fa0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	6a39      	ldr	r1, [r7, #32]
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f9de 	bl	8005298 <I2C_WaitOnTXEFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00d      	beq.n	8004efe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d107      	bne.n	8004efa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e06b      	b.n	8004fd6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	781a      	ldrb	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d11b      	bne.n	8004f74 <HAL_I2C_Master_Transmit+0x188>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d017      	beq.n	8004f74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	781a      	ldrb	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	6a39      	ldr	r1, [r7, #32]
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f9ce 	bl	800531a <I2C_WaitOnBTFFlagUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00d      	beq.n	8004fa0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d107      	bne.n	8004f9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e01a      	b.n	8004fd6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d194      	bne.n	8004ed2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e000      	b.n	8004fd6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004fd4:	2302      	movs	r3, #2
  }
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	00100002 	.word	0x00100002
 8004fe4:	ffff0000 	.word	0xffff0000

08004fe8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	607a      	str	r2, [r7, #4]
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2b08      	cmp	r3, #8
 8005002:	d006      	beq.n	8005012 <I2C_MasterRequestWrite+0x2a>
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d003      	beq.n	8005012 <I2C_MasterRequestWrite+0x2a>
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005010:	d108      	bne.n	8005024 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	e00b      	b.n	800503c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005028:	2b12      	cmp	r3, #18
 800502a:	d107      	bne.n	800503c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800503a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f84f 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00d      	beq.n	8005070 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005062:	d103      	bne.n	800506c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800506a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e035      	b.n	80050dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005078:	d108      	bne.n	800508c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800507a:	897b      	ldrh	r3, [r7, #10]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	461a      	mov	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005088:	611a      	str	r2, [r3, #16]
 800508a:	e01b      	b.n	80050c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800508c:	897b      	ldrh	r3, [r7, #10]
 800508e:	11db      	asrs	r3, r3, #7
 8005090:	b2db      	uxtb	r3, r3
 8005092:	f003 0306 	and.w	r3, r3, #6
 8005096:	b2db      	uxtb	r3, r3
 8005098:	f063 030f 	orn	r3, r3, #15
 800509c:	b2da      	uxtb	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	490e      	ldr	r1, [pc, #56]	; (80050e4 <I2C_MasterRequestWrite+0xfc>)
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 f875 	bl	800519a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e010      	b.n	80050dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050ba:	897b      	ldrh	r3, [r7, #10]
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	4907      	ldr	r1, [pc, #28]	; (80050e8 <I2C_MasterRequestWrite+0x100>)
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 f865 	bl	800519a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	00010008 	.word	0x00010008
 80050e8:	00010002 	.word	0x00010002

080050ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	4613      	mov	r3, r2
 80050fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050fc:	e025      	b.n	800514a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005104:	d021      	beq.n	800514a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005106:	f7fe ff4d 	bl	8003fa4 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d302      	bcc.n	800511c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d116      	bne.n	800514a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2220      	movs	r2, #32
 8005126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	f043 0220 	orr.w	r2, r3, #32
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e023      	b.n	8005192 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	0c1b      	lsrs	r3, r3, #16
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	d10d      	bne.n	8005170 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	43da      	mvns	r2, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4013      	ands	r3, r2
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	bf0c      	ite	eq
 8005166:	2301      	moveq	r3, #1
 8005168:	2300      	movne	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	e00c      	b.n	800518a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	43da      	mvns	r2, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4013      	ands	r3, r2
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	bf0c      	ite	eq
 8005182:	2301      	moveq	r3, #1
 8005184:	2300      	movne	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	429a      	cmp	r2, r3
 800518e:	d0b6      	beq.n	80050fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b084      	sub	sp, #16
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	607a      	str	r2, [r7, #4]
 80051a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051a8:	e051      	b.n	800524e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b8:	d123      	bne.n	8005202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f043 0204 	orr.w	r2, r3, #4
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e046      	b.n	8005290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d021      	beq.n	800524e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520a:	f7fe fecb 	bl	8003fa4 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	d302      	bcc.n	8005220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d116      	bne.n	800524e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	f043 0220 	orr.w	r2, r3, #32
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e020      	b.n	8005290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	0c1b      	lsrs	r3, r3, #16
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	d10c      	bne.n	8005272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	43da      	mvns	r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4013      	ands	r3, r2
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	bf14      	ite	ne
 800526a:	2301      	movne	r3, #1
 800526c:	2300      	moveq	r3, #0
 800526e:	b2db      	uxtb	r3, r3
 8005270:	e00b      	b.n	800528a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	43da      	mvns	r2, r3
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	4013      	ands	r3, r2
 800527e:	b29b      	uxth	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	bf14      	ite	ne
 8005284:	2301      	movne	r3, #1
 8005286:	2300      	moveq	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d18d      	bne.n	80051aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052a4:	e02d      	b.n	8005302 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 f878 	bl	800539c <I2C_IsAcknowledgeFailed>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e02d      	b.n	8005312 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d021      	beq.n	8005302 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052be:	f7fe fe71 	bl	8003fa4 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d302      	bcc.n	80052d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d116      	bne.n	8005302 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f043 0220 	orr.w	r2, r3, #32
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e007      	b.n	8005312 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530c:	2b80      	cmp	r3, #128	; 0x80
 800530e:	d1ca      	bne.n	80052a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005326:	e02d      	b.n	8005384 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f837 	bl	800539c <I2C_IsAcknowledgeFailed>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e02d      	b.n	8005394 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533e:	d021      	beq.n	8005384 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005340:	f7fe fe30 	bl	8003fa4 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	429a      	cmp	r2, r3
 800534e:	d302      	bcc.n	8005356 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d116      	bne.n	8005384 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	f043 0220 	orr.w	r2, r3, #32
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e007      	b.n	8005394 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	2b04      	cmp	r3, #4
 8005390:	d1ca      	bne.n	8005328 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b2:	d11b      	bne.n	80053ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	f043 0204 	orr.w	r2, r3, #4
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e000      	b.n	80053ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
	...

080053fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e267      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d075      	beq.n	8005506 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800541a:	4b88      	ldr	r3, [pc, #544]	; (800563c <HAL_RCC_OscConfig+0x240>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 030c 	and.w	r3, r3, #12
 8005422:	2b04      	cmp	r3, #4
 8005424:	d00c      	beq.n	8005440 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005426:	4b85      	ldr	r3, [pc, #532]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800542e:	2b08      	cmp	r3, #8
 8005430:	d112      	bne.n	8005458 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005432:	4b82      	ldr	r3, [pc, #520]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800543a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800543e:	d10b      	bne.n	8005458 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005440:	4b7e      	ldr	r3, [pc, #504]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d05b      	beq.n	8005504 <HAL_RCC_OscConfig+0x108>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d157      	bne.n	8005504 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e242      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005460:	d106      	bne.n	8005470 <HAL_RCC_OscConfig+0x74>
 8005462:	4b76      	ldr	r3, [pc, #472]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a75      	ldr	r2, [pc, #468]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	e01d      	b.n	80054ac <HAL_RCC_OscConfig+0xb0>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005478:	d10c      	bne.n	8005494 <HAL_RCC_OscConfig+0x98>
 800547a:	4b70      	ldr	r3, [pc, #448]	; (800563c <HAL_RCC_OscConfig+0x240>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a6f      	ldr	r2, [pc, #444]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	4b6d      	ldr	r3, [pc, #436]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a6c      	ldr	r2, [pc, #432]	; (800563c <HAL_RCC_OscConfig+0x240>)
 800548c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	e00b      	b.n	80054ac <HAL_RCC_OscConfig+0xb0>
 8005494:	4b69      	ldr	r3, [pc, #420]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a68      	ldr	r2, [pc, #416]	; (800563c <HAL_RCC_OscConfig+0x240>)
 800549a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	4b66      	ldr	r3, [pc, #408]	; (800563c <HAL_RCC_OscConfig+0x240>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a65      	ldr	r2, [pc, #404]	; (800563c <HAL_RCC_OscConfig+0x240>)
 80054a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d013      	beq.n	80054dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b4:	f7fe fd76 	bl	8003fa4 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054bc:	f7fe fd72 	bl	8003fa4 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b64      	cmp	r3, #100	; 0x64
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e207      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ce:	4b5b      	ldr	r3, [pc, #364]	; (800563c <HAL_RCC_OscConfig+0x240>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0f0      	beq.n	80054bc <HAL_RCC_OscConfig+0xc0>
 80054da:	e014      	b.n	8005506 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054dc:	f7fe fd62 	bl	8003fa4 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054e4:	f7fe fd5e 	bl	8003fa4 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b64      	cmp	r3, #100	; 0x64
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e1f3      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054f6:	4b51      	ldr	r3, [pc, #324]	; (800563c <HAL_RCC_OscConfig+0x240>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1f0      	bne.n	80054e4 <HAL_RCC_OscConfig+0xe8>
 8005502:	e000      	b.n	8005506 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d063      	beq.n	80055da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005512:	4b4a      	ldr	r3, [pc, #296]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 030c 	and.w	r3, r3, #12
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00b      	beq.n	8005536 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800551e:	4b47      	ldr	r3, [pc, #284]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005526:	2b08      	cmp	r3, #8
 8005528:	d11c      	bne.n	8005564 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800552a:	4b44      	ldr	r3, [pc, #272]	; (800563c <HAL_RCC_OscConfig+0x240>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d116      	bne.n	8005564 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005536:	4b41      	ldr	r3, [pc, #260]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d005      	beq.n	800554e <HAL_RCC_OscConfig+0x152>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d001      	beq.n	800554e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e1c7      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800554e:	4b3b      	ldr	r3, [pc, #236]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	4937      	ldr	r1, [pc, #220]	; (800563c <HAL_RCC_OscConfig+0x240>)
 800555e:	4313      	orrs	r3, r2
 8005560:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005562:	e03a      	b.n	80055da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d020      	beq.n	80055ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800556c:	4b34      	ldr	r3, [pc, #208]	; (8005640 <HAL_RCC_OscConfig+0x244>)
 800556e:	2201      	movs	r2, #1
 8005570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005572:	f7fe fd17 	bl	8003fa4 <HAL_GetTick>
 8005576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005578:	e008      	b.n	800558c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800557a:	f7fe fd13 	bl	8003fa4 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d901      	bls.n	800558c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e1a8      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800558c:	4b2b      	ldr	r3, [pc, #172]	; (800563c <HAL_RCC_OscConfig+0x240>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0f0      	beq.n	800557a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005598:	4b28      	ldr	r3, [pc, #160]	; (800563c <HAL_RCC_OscConfig+0x240>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	4925      	ldr	r1, [pc, #148]	; (800563c <HAL_RCC_OscConfig+0x240>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	600b      	str	r3, [r1, #0]
 80055ac:	e015      	b.n	80055da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ae:	4b24      	ldr	r3, [pc, #144]	; (8005640 <HAL_RCC_OscConfig+0x244>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b4:	f7fe fcf6 	bl	8003fa4 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055bc:	f7fe fcf2 	bl	8003fa4 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e187      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ce:	4b1b      	ldr	r3, [pc, #108]	; (800563c <HAL_RCC_OscConfig+0x240>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1f0      	bne.n	80055bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d036      	beq.n	8005654 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d016      	beq.n	800561c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ee:	4b15      	ldr	r3, [pc, #84]	; (8005644 <HAL_RCC_OscConfig+0x248>)
 80055f0:	2201      	movs	r2, #1
 80055f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f4:	f7fe fcd6 	bl	8003fa4 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055fc:	f7fe fcd2 	bl	8003fa4 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e167      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800560e:	4b0b      	ldr	r3, [pc, #44]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0f0      	beq.n	80055fc <HAL_RCC_OscConfig+0x200>
 800561a:	e01b      	b.n	8005654 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800561c:	4b09      	ldr	r3, [pc, #36]	; (8005644 <HAL_RCC_OscConfig+0x248>)
 800561e:	2200      	movs	r2, #0
 8005620:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005622:	f7fe fcbf 	bl	8003fa4 <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005628:	e00e      	b.n	8005648 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800562a:	f7fe fcbb 	bl	8003fa4 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d907      	bls.n	8005648 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e150      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
 800563c:	40023800 	.word	0x40023800
 8005640:	42470000 	.word	0x42470000
 8005644:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005648:	4b88      	ldr	r3, [pc, #544]	; (800586c <HAL_RCC_OscConfig+0x470>)
 800564a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1ea      	bne.n	800562a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 8097 	beq.w	8005790 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005662:	2300      	movs	r3, #0
 8005664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005666:	4b81      	ldr	r3, [pc, #516]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10f      	bne.n	8005692 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005672:	2300      	movs	r3, #0
 8005674:	60bb      	str	r3, [r7, #8]
 8005676:	4b7d      	ldr	r3, [pc, #500]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	4a7c      	ldr	r2, [pc, #496]	; (800586c <HAL_RCC_OscConfig+0x470>)
 800567c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005680:	6413      	str	r3, [r2, #64]	; 0x40
 8005682:	4b7a      	ldr	r3, [pc, #488]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800568a:	60bb      	str	r3, [r7, #8]
 800568c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800568e:	2301      	movs	r3, #1
 8005690:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005692:	4b77      	ldr	r3, [pc, #476]	; (8005870 <HAL_RCC_OscConfig+0x474>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569a:	2b00      	cmp	r3, #0
 800569c:	d118      	bne.n	80056d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800569e:	4b74      	ldr	r3, [pc, #464]	; (8005870 <HAL_RCC_OscConfig+0x474>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a73      	ldr	r2, [pc, #460]	; (8005870 <HAL_RCC_OscConfig+0x474>)
 80056a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056aa:	f7fe fc7b 	bl	8003fa4 <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b0:	e008      	b.n	80056c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b2:	f7fe fc77 	bl	8003fa4 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e10c      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c4:	4b6a      	ldr	r3, [pc, #424]	; (8005870 <HAL_RCC_OscConfig+0x474>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0f0      	beq.n	80056b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d106      	bne.n	80056e6 <HAL_RCC_OscConfig+0x2ea>
 80056d8:	4b64      	ldr	r3, [pc, #400]	; (800586c <HAL_RCC_OscConfig+0x470>)
 80056da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056dc:	4a63      	ldr	r2, [pc, #396]	; (800586c <HAL_RCC_OscConfig+0x470>)
 80056de:	f043 0301 	orr.w	r3, r3, #1
 80056e2:	6713      	str	r3, [r2, #112]	; 0x70
 80056e4:	e01c      	b.n	8005720 <HAL_RCC_OscConfig+0x324>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	2b05      	cmp	r3, #5
 80056ec:	d10c      	bne.n	8005708 <HAL_RCC_OscConfig+0x30c>
 80056ee:	4b5f      	ldr	r3, [pc, #380]	; (800586c <HAL_RCC_OscConfig+0x470>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f2:	4a5e      	ldr	r2, [pc, #376]	; (800586c <HAL_RCC_OscConfig+0x470>)
 80056f4:	f043 0304 	orr.w	r3, r3, #4
 80056f8:	6713      	str	r3, [r2, #112]	; 0x70
 80056fa:	4b5c      	ldr	r3, [pc, #368]	; (800586c <HAL_RCC_OscConfig+0x470>)
 80056fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fe:	4a5b      	ldr	r2, [pc, #364]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005700:	f043 0301 	orr.w	r3, r3, #1
 8005704:	6713      	str	r3, [r2, #112]	; 0x70
 8005706:	e00b      	b.n	8005720 <HAL_RCC_OscConfig+0x324>
 8005708:	4b58      	ldr	r3, [pc, #352]	; (800586c <HAL_RCC_OscConfig+0x470>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570c:	4a57      	ldr	r2, [pc, #348]	; (800586c <HAL_RCC_OscConfig+0x470>)
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	6713      	str	r3, [r2, #112]	; 0x70
 8005714:	4b55      	ldr	r3, [pc, #340]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005718:	4a54      	ldr	r2, [pc, #336]	; (800586c <HAL_RCC_OscConfig+0x470>)
 800571a:	f023 0304 	bic.w	r3, r3, #4
 800571e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d015      	beq.n	8005754 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005728:	f7fe fc3c 	bl	8003fa4 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800572e:	e00a      	b.n	8005746 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005730:	f7fe fc38 	bl	8003fa4 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	f241 3288 	movw	r2, #5000	; 0x1388
 800573e:	4293      	cmp	r3, r2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e0cb      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005746:	4b49      	ldr	r3, [pc, #292]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0ee      	beq.n	8005730 <HAL_RCC_OscConfig+0x334>
 8005752:	e014      	b.n	800577e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005754:	f7fe fc26 	bl	8003fa4 <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800575a:	e00a      	b.n	8005772 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800575c:	f7fe fc22 	bl	8003fa4 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	f241 3288 	movw	r2, #5000	; 0x1388
 800576a:	4293      	cmp	r3, r2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e0b5      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005772:	4b3e      	ldr	r3, [pc, #248]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1ee      	bne.n	800575c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800577e:	7dfb      	ldrb	r3, [r7, #23]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d105      	bne.n	8005790 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005784:	4b39      	ldr	r3, [pc, #228]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	4a38      	ldr	r2, [pc, #224]	; (800586c <HAL_RCC_OscConfig+0x470>)
 800578a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800578e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 80a1 	beq.w	80058dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800579a:	4b34      	ldr	r3, [pc, #208]	; (800586c <HAL_RCC_OscConfig+0x470>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 030c 	and.w	r3, r3, #12
 80057a2:	2b08      	cmp	r3, #8
 80057a4:	d05c      	beq.n	8005860 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d141      	bne.n	8005832 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ae:	4b31      	ldr	r3, [pc, #196]	; (8005874 <HAL_RCC_OscConfig+0x478>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b4:	f7fe fbf6 	bl	8003fa4 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057bc:	f7fe fbf2 	bl	8003fa4 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e087      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ce:	4b27      	ldr	r3, [pc, #156]	; (800586c <HAL_RCC_OscConfig+0x470>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f0      	bne.n	80057bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69da      	ldr	r2, [r3, #28]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	019b      	lsls	r3, r3, #6
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f0:	085b      	lsrs	r3, r3, #1
 80057f2:	3b01      	subs	r3, #1
 80057f4:	041b      	lsls	r3, r3, #16
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	061b      	lsls	r3, r3, #24
 80057fe:	491b      	ldr	r1, [pc, #108]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005800:	4313      	orrs	r3, r2
 8005802:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005804:	4b1b      	ldr	r3, [pc, #108]	; (8005874 <HAL_RCC_OscConfig+0x478>)
 8005806:	2201      	movs	r2, #1
 8005808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580a:	f7fe fbcb 	bl	8003fa4 <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005812:	f7fe fbc7 	bl	8003fa4 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e05c      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005824:	4b11      	ldr	r3, [pc, #68]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0f0      	beq.n	8005812 <HAL_RCC_OscConfig+0x416>
 8005830:	e054      	b.n	80058dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005832:	4b10      	ldr	r3, [pc, #64]	; (8005874 <HAL_RCC_OscConfig+0x478>)
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005838:	f7fe fbb4 	bl	8003fa4 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005840:	f7fe fbb0 	bl	8003fa4 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e045      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005852:	4b06      	ldr	r3, [pc, #24]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1f0      	bne.n	8005840 <HAL_RCC_OscConfig+0x444>
 800585e:	e03d      	b.n	80058dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d107      	bne.n	8005878 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e038      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
 800586c:	40023800 	.word	0x40023800
 8005870:	40007000 	.word	0x40007000
 8005874:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005878:	4b1b      	ldr	r3, [pc, #108]	; (80058e8 <HAL_RCC_OscConfig+0x4ec>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d028      	beq.n	80058d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005890:	429a      	cmp	r2, r3
 8005892:	d121      	bne.n	80058d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800589e:	429a      	cmp	r2, r3
 80058a0:	d11a      	bne.n	80058d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058a8:	4013      	ands	r3, r2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d111      	bne.n	80058d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	3b01      	subs	r3, #1
 80058c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d107      	bne.n	80058d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d001      	beq.n	80058dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e000      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40023800 	.word	0x40023800

080058ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e0cc      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005900:	4b68      	ldr	r3, [pc, #416]	; (8005aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d90c      	bls.n	8005928 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800590e:	4b65      	ldr	r3, [pc, #404]	; (8005aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005916:	4b63      	ldr	r3, [pc, #396]	; (8005aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d001      	beq.n	8005928 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e0b8      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d020      	beq.n	8005976 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005940:	4b59      	ldr	r3, [pc, #356]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	4a58      	ldr	r2, [pc, #352]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800594a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005958:	4b53      	ldr	r3, [pc, #332]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	4a52      	ldr	r2, [pc, #328]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800595e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005962:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005964:	4b50      	ldr	r3, [pc, #320]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	494d      	ldr	r1, [pc, #308]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	4313      	orrs	r3, r2
 8005974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d044      	beq.n	8005a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d107      	bne.n	800599a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800598a:	4b47      	ldr	r3, [pc, #284]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d119      	bne.n	80059ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e07f      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d003      	beq.n	80059aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d107      	bne.n	80059ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059aa:	4b3f      	ldr	r3, [pc, #252]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d109      	bne.n	80059ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e06f      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ba:	4b3b      	ldr	r3, [pc, #236]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e067      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ca:	4b37      	ldr	r3, [pc, #220]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f023 0203 	bic.w	r2, r3, #3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	4934      	ldr	r1, [pc, #208]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059dc:	f7fe fae2 	bl	8003fa4 <HAL_GetTick>
 80059e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e2:	e00a      	b.n	80059fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059e4:	f7fe fade 	bl	8003fa4 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e04f      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fa:	4b2b      	ldr	r3, [pc, #172]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f003 020c 	and.w	r2, r3, #12
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d1eb      	bne.n	80059e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a0c:	4b25      	ldr	r3, [pc, #148]	; (8005aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d20c      	bcs.n	8005a34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a1a:	4b22      	ldr	r3, [pc, #136]	; (8005aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a22:	4b20      	ldr	r3, [pc, #128]	; (8005aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d001      	beq.n	8005a34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e032      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d008      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a40:	4b19      	ldr	r3, [pc, #100]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	4916      	ldr	r1, [pc, #88]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0308 	and.w	r3, r3, #8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d009      	beq.n	8005a72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a5e:	4b12      	ldr	r3, [pc, #72]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	490e      	ldr	r1, [pc, #56]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a72:	f000 f821 	bl	8005ab8 <HAL_RCC_GetSysClockFreq>
 8005a76:	4602      	mov	r2, r0
 8005a78:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	091b      	lsrs	r3, r3, #4
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	490a      	ldr	r1, [pc, #40]	; (8005aac <HAL_RCC_ClockConfig+0x1c0>)
 8005a84:	5ccb      	ldrb	r3, [r1, r3]
 8005a86:	fa22 f303 	lsr.w	r3, r2, r3
 8005a8a:	4a09      	ldr	r2, [pc, #36]	; (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a8e:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fe fa42 	bl	8003f1c <HAL_InitTick>

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40023c00 	.word	0x40023c00
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	08007b04 	.word	0x08007b04
 8005ab0:	20000010 	.word	0x20000010
 8005ab4:	20000014 	.word	0x20000014

08005ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005abc:	b090      	sub	sp, #64	; 0x40
 8005abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ac8:	2300      	movs	r3, #0
 8005aca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ad0:	4b59      	ldr	r3, [pc, #356]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 030c 	and.w	r3, r3, #12
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d00d      	beq.n	8005af8 <HAL_RCC_GetSysClockFreq+0x40>
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	f200 80a1 	bhi.w	8005c24 <HAL_RCC_GetSysClockFreq+0x16c>
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <HAL_RCC_GetSysClockFreq+0x34>
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d003      	beq.n	8005af2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005aea:	e09b      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005aec:	4b53      	ldr	r3, [pc, #332]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x184>)
 8005aee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005af0:	e09b      	b.n	8005c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005af2:	4b53      	ldr	r3, [pc, #332]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8005af4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005af6:	e098      	b.n	8005c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005af8:	4b4f      	ldr	r3, [pc, #316]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b00:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b02:	4b4d      	ldr	r3, [pc, #308]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d028      	beq.n	8005b60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b0e:	4b4a      	ldr	r3, [pc, #296]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	099b      	lsrs	r3, r3, #6
 8005b14:	2200      	movs	r2, #0
 8005b16:	623b      	str	r3, [r7, #32]
 8005b18:	627a      	str	r2, [r7, #36]	; 0x24
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005b20:	2100      	movs	r1, #0
 8005b22:	4b47      	ldr	r3, [pc, #284]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b24:	fb03 f201 	mul.w	r2, r3, r1
 8005b28:	2300      	movs	r3, #0
 8005b2a:	fb00 f303 	mul.w	r3, r0, r3
 8005b2e:	4413      	add	r3, r2
 8005b30:	4a43      	ldr	r2, [pc, #268]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b32:	fba0 1202 	umull	r1, r2, r0, r2
 8005b36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b38:	460a      	mov	r2, r1
 8005b3a:	62ba      	str	r2, [r7, #40]	; 0x28
 8005b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b3e:	4413      	add	r3, r2
 8005b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b44:	2200      	movs	r2, #0
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	61fa      	str	r2, [r7, #28]
 8005b4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005b52:	f7fa ff7b 	bl	8000a4c <__aeabi_uldivmod>
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b5e:	e053      	b.n	8005c08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b60:	4b35      	ldr	r3, [pc, #212]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	099b      	lsrs	r3, r3, #6
 8005b66:	2200      	movs	r2, #0
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	617a      	str	r2, [r7, #20]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005b72:	f04f 0b00 	mov.w	fp, #0
 8005b76:	4652      	mov	r2, sl
 8005b78:	465b      	mov	r3, fp
 8005b7a:	f04f 0000 	mov.w	r0, #0
 8005b7e:	f04f 0100 	mov.w	r1, #0
 8005b82:	0159      	lsls	r1, r3, #5
 8005b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b88:	0150      	lsls	r0, r2, #5
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	ebb2 080a 	subs.w	r8, r2, sl
 8005b92:	eb63 090b 	sbc.w	r9, r3, fp
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005ba2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005ba6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005baa:	ebb2 0408 	subs.w	r4, r2, r8
 8005bae:	eb63 0509 	sbc.w	r5, r3, r9
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	f04f 0300 	mov.w	r3, #0
 8005bba:	00eb      	lsls	r3, r5, #3
 8005bbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bc0:	00e2      	lsls	r2, r4, #3
 8005bc2:	4614      	mov	r4, r2
 8005bc4:	461d      	mov	r5, r3
 8005bc6:	eb14 030a 	adds.w	r3, r4, sl
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	eb45 030b 	adc.w	r3, r5, fp
 8005bd0:	607b      	str	r3, [r7, #4]
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	f04f 0300 	mov.w	r3, #0
 8005bda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bde:	4629      	mov	r1, r5
 8005be0:	028b      	lsls	r3, r1, #10
 8005be2:	4621      	mov	r1, r4
 8005be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005be8:	4621      	mov	r1, r4
 8005bea:	028a      	lsls	r2, r1, #10
 8005bec:	4610      	mov	r0, r2
 8005bee:	4619      	mov	r1, r3
 8005bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	60fa      	str	r2, [r7, #12]
 8005bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bfc:	f7fa ff26 	bl	8000a4c <__aeabi_uldivmod>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4613      	mov	r3, r2
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c08:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	0c1b      	lsrs	r3, r3, #16
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	3301      	adds	r3, #1
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005c18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c22:	e002      	b.n	8005c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c24:	4b05      	ldr	r3, [pc, #20]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x184>)
 8005c26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3740      	adds	r7, #64	; 0x40
 8005c30:	46bd      	mov	sp, r7
 8005c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c36:	bf00      	nop
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	00f42400 	.word	0x00f42400
 8005c40:	017d7840 	.word	0x017d7840

08005c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c48:	4b03      	ldr	r3, [pc, #12]	; (8005c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	20000010 	.word	0x20000010

08005c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c60:	f7ff fff0 	bl	8005c44 <HAL_RCC_GetHCLKFreq>
 8005c64:	4602      	mov	r2, r0
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	0a9b      	lsrs	r3, r3, #10
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	4903      	ldr	r1, [pc, #12]	; (8005c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c72:	5ccb      	ldrb	r3, [r1, r3]
 8005c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	08007b14 	.word	0x08007b14

08005c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e041      	b.n	8005d1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d106      	bne.n	8005cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fd ff9e 	bl	8003bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	f000 fe0c 	bl	80068e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d001      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e044      	b.n	8005dc6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0201 	orr.w	r2, r2, #1
 8005d52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a1e      	ldr	r2, [pc, #120]	; (8005dd4 <HAL_TIM_Base_Start_IT+0xb0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d018      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x6c>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d66:	d013      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x6c>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1a      	ldr	r2, [pc, #104]	; (8005dd8 <HAL_TIM_Base_Start_IT+0xb4>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d00e      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x6c>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a19      	ldr	r2, [pc, #100]	; (8005ddc <HAL_TIM_Base_Start_IT+0xb8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d009      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x6c>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a17      	ldr	r2, [pc, #92]	; (8005de0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d004      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x6c>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a16      	ldr	r2, [pc, #88]	; (8005de4 <HAL_TIM_Base_Start_IT+0xc0>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d111      	bne.n	8005db4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b06      	cmp	r3, #6
 8005da0:	d010      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0201 	orr.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db2:	e007      	b.n	8005dc4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0201 	orr.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40010000 	.word	0x40010000
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800
 8005de0:	40000c00 	.word	0x40000c00
 8005de4:	40014000 	.word	0x40014000

08005de8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e041      	b.n	8005e7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d106      	bne.n	8005e14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f839 	bl	8005e86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3304      	adds	r3, #4
 8005e24:	4619      	mov	r1, r3
 8005e26:	4610      	mov	r0, r2
 8005e28:	f000 fd5a 	bl	80068e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d109      	bne.n	8005ec0 <HAL_TIM_PWM_Start+0x24>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	bf14      	ite	ne
 8005eb8:	2301      	movne	r3, #1
 8005eba:	2300      	moveq	r3, #0
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	e022      	b.n	8005f06 <HAL_TIM_PWM_Start+0x6a>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d109      	bne.n	8005eda <HAL_TIM_PWM_Start+0x3e>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	bf14      	ite	ne
 8005ed2:	2301      	movne	r3, #1
 8005ed4:	2300      	moveq	r3, #0
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	e015      	b.n	8005f06 <HAL_TIM_PWM_Start+0x6a>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d109      	bne.n	8005ef4 <HAL_TIM_PWM_Start+0x58>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	bf14      	ite	ne
 8005eec:	2301      	movne	r3, #1
 8005eee:	2300      	moveq	r3, #0
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	e008      	b.n	8005f06 <HAL_TIM_PWM_Start+0x6a>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	bf14      	ite	ne
 8005f00:	2301      	movne	r3, #1
 8005f02:	2300      	moveq	r3, #0
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e068      	b.n	8005fe0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d104      	bne.n	8005f1e <HAL_TIM_PWM_Start+0x82>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f1c:	e013      	b.n	8005f46 <HAL_TIM_PWM_Start+0xaa>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d104      	bne.n	8005f2e <HAL_TIM_PWM_Start+0x92>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f2c:	e00b      	b.n	8005f46 <HAL_TIM_PWM_Start+0xaa>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d104      	bne.n	8005f3e <HAL_TIM_PWM_Start+0xa2>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f3c:	e003      	b.n	8005f46 <HAL_TIM_PWM_Start+0xaa>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2202      	movs	r2, #2
 8005f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	6839      	ldr	r1, [r7, #0]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 ff6c 	bl	8006e2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a23      	ldr	r2, [pc, #140]	; (8005fe8 <HAL_TIM_PWM_Start+0x14c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d107      	bne.n	8005f6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a1d      	ldr	r2, [pc, #116]	; (8005fe8 <HAL_TIM_PWM_Start+0x14c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d018      	beq.n	8005faa <HAL_TIM_PWM_Start+0x10e>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f80:	d013      	beq.n	8005faa <HAL_TIM_PWM_Start+0x10e>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a19      	ldr	r2, [pc, #100]	; (8005fec <HAL_TIM_PWM_Start+0x150>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d00e      	beq.n	8005faa <HAL_TIM_PWM_Start+0x10e>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a17      	ldr	r2, [pc, #92]	; (8005ff0 <HAL_TIM_PWM_Start+0x154>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d009      	beq.n	8005faa <HAL_TIM_PWM_Start+0x10e>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a16      	ldr	r2, [pc, #88]	; (8005ff4 <HAL_TIM_PWM_Start+0x158>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d004      	beq.n	8005faa <HAL_TIM_PWM_Start+0x10e>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a14      	ldr	r2, [pc, #80]	; (8005ff8 <HAL_TIM_PWM_Start+0x15c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d111      	bne.n	8005fce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2b06      	cmp	r3, #6
 8005fba:	d010      	beq.n	8005fde <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0201 	orr.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fcc:	e007      	b.n	8005fde <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f042 0201 	orr.w	r2, r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	40010000 	.word	0x40010000
 8005fec:	40000400 	.word	0x40000400
 8005ff0:	40000800 	.word	0x40000800
 8005ff4:	40000c00 	.word	0x40000c00
 8005ff8:	40014000 	.word	0x40014000

08005ffc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2200      	movs	r2, #0
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f000 ff0c 	bl	8006e2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a29      	ldr	r2, [pc, #164]	; (80060c0 <HAL_TIM_PWM_Stop+0xc4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d117      	bne.n	800604e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6a1a      	ldr	r2, [r3, #32]
 8006024:	f241 1311 	movw	r3, #4369	; 0x1111
 8006028:	4013      	ands	r3, r2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10f      	bne.n	800604e <HAL_TIM_PWM_Stop+0x52>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6a1a      	ldr	r2, [r3, #32]
 8006034:	f240 4344 	movw	r3, #1092	; 0x444
 8006038:	4013      	ands	r3, r2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d107      	bne.n	800604e <HAL_TIM_PWM_Stop+0x52>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800604c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6a1a      	ldr	r2, [r3, #32]
 8006054:	f241 1311 	movw	r3, #4369	; 0x1111
 8006058:	4013      	ands	r3, r2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10f      	bne.n	800607e <HAL_TIM_PWM_Stop+0x82>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6a1a      	ldr	r2, [r3, #32]
 8006064:	f240 4344 	movw	r3, #1092	; 0x444
 8006068:	4013      	ands	r3, r2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d107      	bne.n	800607e <HAL_TIM_PWM_Stop+0x82>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0201 	bic.w	r2, r2, #1
 800607c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d104      	bne.n	800608e <HAL_TIM_PWM_Stop+0x92>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800608c:	e013      	b.n	80060b6 <HAL_TIM_PWM_Stop+0xba>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b04      	cmp	r3, #4
 8006092:	d104      	bne.n	800609e <HAL_TIM_PWM_Stop+0xa2>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800609c:	e00b      	b.n	80060b6 <HAL_TIM_PWM_Stop+0xba>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d104      	bne.n	80060ae <HAL_TIM_PWM_Stop+0xb2>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060ac:	e003      	b.n	80060b6 <HAL_TIM_PWM_Stop+0xba>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40010000 	.word	0x40010000

080060c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e097      	b.n	8006208 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d106      	bne.n	80060f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7fd fd1d 	bl	8003b2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2202      	movs	r2, #2
 80060f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6812      	ldr	r2, [r2, #0]
 8006104:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006108:	f023 0307 	bic.w	r3, r3, #7
 800610c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3304      	adds	r3, #4
 8006116:	4619      	mov	r1, r3
 8006118:	4610      	mov	r0, r2
 800611a:	f000 fbe1 	bl	80068e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	4313      	orrs	r3, r2
 800613e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006146:	f023 0303 	bic.w	r3, r3, #3
 800614a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	021b      	lsls	r3, r3, #8
 8006156:	4313      	orrs	r3, r2
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006164:	f023 030c 	bic.w	r3, r3, #12
 8006168:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006170:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	021b      	lsls	r3, r3, #8
 8006180:	4313      	orrs	r3, r2
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	011a      	lsls	r2, r3, #4
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	031b      	lsls	r3, r3, #12
 8006194:	4313      	orrs	r3, r2
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	4313      	orrs	r3, r2
 800619a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80061a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80061aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	4313      	orrs	r3, r2
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006220:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006228:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006230:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006238:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d110      	bne.n	8006262 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006240:	7bfb      	ldrb	r3, [r7, #15]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d102      	bne.n	800624c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006246:	7b7b      	ldrb	r3, [r7, #13]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d001      	beq.n	8006250 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e089      	b.n	8006364 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006260:	e031      	b.n	80062c6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b04      	cmp	r3, #4
 8006266:	d110      	bne.n	800628a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006268:	7bbb      	ldrb	r3, [r7, #14]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d102      	bne.n	8006274 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800626e:	7b3b      	ldrb	r3, [r7, #12]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d001      	beq.n	8006278 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e075      	b.n	8006364 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006288:	e01d      	b.n	80062c6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d108      	bne.n	80062a2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006290:	7bbb      	ldrb	r3, [r7, #14]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d105      	bne.n	80062a2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006296:	7b7b      	ldrb	r3, [r7, #13]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d102      	bne.n	80062a2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800629c:	7b3b      	ldrb	r3, [r7, #12]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d001      	beq.n	80062a6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e05e      	b.n	8006364 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2202      	movs	r2, #2
 80062aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2202      	movs	r2, #2
 80062b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2202      	movs	r2, #2
 80062ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2202      	movs	r2, #2
 80062c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <HAL_TIM_Encoder_Start_IT+0xc4>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	d010      	beq.n	80062f4 <HAL_TIM_Encoder_Start_IT+0xe4>
 80062d2:	e01f      	b.n	8006314 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2201      	movs	r2, #1
 80062da:	2100      	movs	r1, #0
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 fda5 	bl	8006e2c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0202 	orr.w	r2, r2, #2
 80062f0:	60da      	str	r2, [r3, #12]
      break;
 80062f2:	e02e      	b.n	8006352 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2201      	movs	r2, #1
 80062fa:	2104      	movs	r1, #4
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fd95 	bl	8006e2c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0204 	orr.w	r2, r2, #4
 8006310:	60da      	str	r2, [r3, #12]
      break;
 8006312:	e01e      	b.n	8006352 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2201      	movs	r2, #1
 800631a:	2100      	movs	r1, #0
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fd85 	bl	8006e2c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2201      	movs	r2, #1
 8006328:	2104      	movs	r1, #4
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fd7e 	bl	8006e2c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68da      	ldr	r2, [r3, #12]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f042 0202 	orr.w	r2, r2, #2
 800633e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0204 	orr.w	r2, r2, #4
 800634e:	60da      	str	r2, [r3, #12]
      break;
 8006350:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f042 0201 	orr.w	r2, r2, #1
 8006360:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b02      	cmp	r3, #2
 8006380:	d122      	bne.n	80063c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b02      	cmp	r3, #2
 800638e:	d11b      	bne.n	80063c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f06f 0202 	mvn.w	r2, #2
 8006398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	f003 0303 	and.w	r3, r3, #3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fa77 	bl	80068a2 <HAL_TIM_IC_CaptureCallback>
 80063b4:	e005      	b.n	80063c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fa69 	bl	800688e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fa7a 	bl	80068b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f003 0304 	and.w	r3, r3, #4
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	d122      	bne.n	800641c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b04      	cmp	r3, #4
 80063e2:	d11b      	bne.n	800641c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f06f 0204 	mvn.w	r2, #4
 80063ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2202      	movs	r2, #2
 80063f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fa4d 	bl	80068a2 <HAL_TIM_IC_CaptureCallback>
 8006408:	e005      	b.n	8006416 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fa3f 	bl	800688e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fa50 	bl	80068b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	f003 0308 	and.w	r3, r3, #8
 8006426:	2b08      	cmp	r3, #8
 8006428:	d122      	bne.n	8006470 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f003 0308 	and.w	r3, r3, #8
 8006434:	2b08      	cmp	r3, #8
 8006436:	d11b      	bne.n	8006470 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f06f 0208 	mvn.w	r2, #8
 8006440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2204      	movs	r2, #4
 8006446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fa23 	bl	80068a2 <HAL_TIM_IC_CaptureCallback>
 800645c:	e005      	b.n	800646a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fa15 	bl	800688e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fa26 	bl	80068b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0310 	and.w	r3, r3, #16
 800647a:	2b10      	cmp	r3, #16
 800647c:	d122      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f003 0310 	and.w	r3, r3, #16
 8006488:	2b10      	cmp	r3, #16
 800648a:	d11b      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f06f 0210 	mvn.w	r2, #16
 8006494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2208      	movs	r2, #8
 800649a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f9f9 	bl	80068a2 <HAL_TIM_IC_CaptureCallback>
 80064b0:	e005      	b.n	80064be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f9eb 	bl	800688e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f9fc 	bl	80068b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d10e      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d107      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f06f 0201 	mvn.w	r2, #1
 80064e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fc fc8e 	bl	8002e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fa:	2b80      	cmp	r3, #128	; 0x80
 80064fc:	d10e      	bne.n	800651c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006508:	2b80      	cmp	r3, #128	; 0x80
 800650a:	d107      	bne.n	800651c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fd26 	bl	8006f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006526:	2b40      	cmp	r3, #64	; 0x40
 8006528:	d10e      	bne.n	8006548 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006534:	2b40      	cmp	r3, #64	; 0x40
 8006536:	d107      	bne.n	8006548 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f9c1 	bl	80068ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b20      	cmp	r3, #32
 8006554:	d10e      	bne.n	8006574 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f003 0320 	and.w	r3, r3, #32
 8006560:	2b20      	cmp	r3, #32
 8006562:	d107      	bne.n	8006574 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f06f 0220 	mvn.w	r2, #32
 800656c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fcf0 	bl	8006f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006574:	bf00      	nop
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006592:	2b01      	cmp	r3, #1
 8006594:	d101      	bne.n	800659a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006596:	2302      	movs	r3, #2
 8006598:	e0ae      	b.n	80066f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b0c      	cmp	r3, #12
 80065a6:	f200 809f 	bhi.w	80066e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80065aa:	a201      	add	r2, pc, #4	; (adr r2, 80065b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b0:	080065e5 	.word	0x080065e5
 80065b4:	080066e9 	.word	0x080066e9
 80065b8:	080066e9 	.word	0x080066e9
 80065bc:	080066e9 	.word	0x080066e9
 80065c0:	08006625 	.word	0x08006625
 80065c4:	080066e9 	.word	0x080066e9
 80065c8:	080066e9 	.word	0x080066e9
 80065cc:	080066e9 	.word	0x080066e9
 80065d0:	08006667 	.word	0x08006667
 80065d4:	080066e9 	.word	0x080066e9
 80065d8:	080066e9 	.word	0x080066e9
 80065dc:	080066e9 	.word	0x080066e9
 80065e0:	080066a7 	.word	0x080066a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68b9      	ldr	r1, [r7, #8]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 f9f8 	bl	80069e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699a      	ldr	r2, [r3, #24]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0208 	orr.w	r2, r2, #8
 80065fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699a      	ldr	r2, [r3, #24]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0204 	bic.w	r2, r2, #4
 800660e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6999      	ldr	r1, [r3, #24]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	691a      	ldr	r2, [r3, #16]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	619a      	str	r2, [r3, #24]
      break;
 8006622:	e064      	b.n	80066ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fa3e 	bl	8006aac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699a      	ldr	r2, [r3, #24]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800663e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699a      	ldr	r2, [r3, #24]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800664e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6999      	ldr	r1, [r3, #24]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	021a      	lsls	r2, r3, #8
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	619a      	str	r2, [r3, #24]
      break;
 8006664:	e043      	b.n	80066ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68b9      	ldr	r1, [r7, #8]
 800666c:	4618      	mov	r0, r3
 800666e:	f000 fa89 	bl	8006b84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69da      	ldr	r2, [r3, #28]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f042 0208 	orr.w	r2, r2, #8
 8006680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69da      	ldr	r2, [r3, #28]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 0204 	bic.w	r2, r2, #4
 8006690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69d9      	ldr	r1, [r3, #28]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	61da      	str	r2, [r3, #28]
      break;
 80066a4:	e023      	b.n	80066ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fad3 	bl	8006c58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69da      	ldr	r2, [r3, #28]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69da      	ldr	r2, [r3, #28]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69d9      	ldr	r1, [r3, #28]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	021a      	lsls	r2, r3, #8
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	61da      	str	r2, [r3, #28]
      break;
 80066e6:	e002      	b.n	80066ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	75fb      	strb	r3, [r7, #23]
      break;
 80066ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006714:	2b01      	cmp	r3, #1
 8006716:	d101      	bne.n	800671c <HAL_TIM_ConfigClockSource+0x1c>
 8006718:	2302      	movs	r3, #2
 800671a:	e0b4      	b.n	8006886 <HAL_TIM_ConfigClockSource+0x186>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800673a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006742:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006754:	d03e      	beq.n	80067d4 <HAL_TIM_ConfigClockSource+0xd4>
 8006756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800675a:	f200 8087 	bhi.w	800686c <HAL_TIM_ConfigClockSource+0x16c>
 800675e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006762:	f000 8086 	beq.w	8006872 <HAL_TIM_ConfigClockSource+0x172>
 8006766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800676a:	d87f      	bhi.n	800686c <HAL_TIM_ConfigClockSource+0x16c>
 800676c:	2b70      	cmp	r3, #112	; 0x70
 800676e:	d01a      	beq.n	80067a6 <HAL_TIM_ConfigClockSource+0xa6>
 8006770:	2b70      	cmp	r3, #112	; 0x70
 8006772:	d87b      	bhi.n	800686c <HAL_TIM_ConfigClockSource+0x16c>
 8006774:	2b60      	cmp	r3, #96	; 0x60
 8006776:	d050      	beq.n	800681a <HAL_TIM_ConfigClockSource+0x11a>
 8006778:	2b60      	cmp	r3, #96	; 0x60
 800677a:	d877      	bhi.n	800686c <HAL_TIM_ConfigClockSource+0x16c>
 800677c:	2b50      	cmp	r3, #80	; 0x50
 800677e:	d03c      	beq.n	80067fa <HAL_TIM_ConfigClockSource+0xfa>
 8006780:	2b50      	cmp	r3, #80	; 0x50
 8006782:	d873      	bhi.n	800686c <HAL_TIM_ConfigClockSource+0x16c>
 8006784:	2b40      	cmp	r3, #64	; 0x40
 8006786:	d058      	beq.n	800683a <HAL_TIM_ConfigClockSource+0x13a>
 8006788:	2b40      	cmp	r3, #64	; 0x40
 800678a:	d86f      	bhi.n	800686c <HAL_TIM_ConfigClockSource+0x16c>
 800678c:	2b30      	cmp	r3, #48	; 0x30
 800678e:	d064      	beq.n	800685a <HAL_TIM_ConfigClockSource+0x15a>
 8006790:	2b30      	cmp	r3, #48	; 0x30
 8006792:	d86b      	bhi.n	800686c <HAL_TIM_ConfigClockSource+0x16c>
 8006794:	2b20      	cmp	r3, #32
 8006796:	d060      	beq.n	800685a <HAL_TIM_ConfigClockSource+0x15a>
 8006798:	2b20      	cmp	r3, #32
 800679a:	d867      	bhi.n	800686c <HAL_TIM_ConfigClockSource+0x16c>
 800679c:	2b00      	cmp	r3, #0
 800679e:	d05c      	beq.n	800685a <HAL_TIM_ConfigClockSource+0x15a>
 80067a0:	2b10      	cmp	r3, #16
 80067a2:	d05a      	beq.n	800685a <HAL_TIM_ConfigClockSource+0x15a>
 80067a4:	e062      	b.n	800686c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6899      	ldr	r1, [r3, #8]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f000 fb19 	bl	8006dec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	609a      	str	r2, [r3, #8]
      break;
 80067d2:	e04f      	b.n	8006874 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6818      	ldr	r0, [r3, #0]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	6899      	ldr	r1, [r3, #8]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f000 fb02 	bl	8006dec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689a      	ldr	r2, [r3, #8]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067f6:	609a      	str	r2, [r3, #8]
      break;
 80067f8:	e03c      	b.n	8006874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6818      	ldr	r0, [r3, #0]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	6859      	ldr	r1, [r3, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	461a      	mov	r2, r3
 8006808:	f000 fa76 	bl	8006cf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2150      	movs	r1, #80	; 0x50
 8006812:	4618      	mov	r0, r3
 8006814:	f000 facf 	bl	8006db6 <TIM_ITRx_SetConfig>
      break;
 8006818:	e02c      	b.n	8006874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6818      	ldr	r0, [r3, #0]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	6859      	ldr	r1, [r3, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	461a      	mov	r2, r3
 8006828:	f000 fa95 	bl	8006d56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2160      	movs	r1, #96	; 0x60
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fabf 	bl	8006db6 <TIM_ITRx_SetConfig>
      break;
 8006838:	e01c      	b.n	8006874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6818      	ldr	r0, [r3, #0]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	6859      	ldr	r1, [r3, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	461a      	mov	r2, r3
 8006848:	f000 fa56 	bl	8006cf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2140      	movs	r1, #64	; 0x40
 8006852:	4618      	mov	r0, r3
 8006854:	f000 faaf 	bl	8006db6 <TIM_ITRx_SetConfig>
      break;
 8006858:	e00c      	b.n	8006874 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4619      	mov	r1, r3
 8006864:	4610      	mov	r0, r2
 8006866:	f000 faa6 	bl	8006db6 <TIM_ITRx_SetConfig>
      break;
 800686a:	e003      	b.n	8006874 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	73fb      	strb	r3, [r7, #15]
      break;
 8006870:	e000      	b.n	8006874 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006884:	7bfb      	ldrb	r3, [r7, #15]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068aa:	bf00      	nop
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b083      	sub	sp, #12
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068d2:	bf00      	nop
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
	...

080068e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a34      	ldr	r2, [pc, #208]	; (80069c4 <TIM_Base_SetConfig+0xe4>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d00f      	beq.n	8006918 <TIM_Base_SetConfig+0x38>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068fe:	d00b      	beq.n	8006918 <TIM_Base_SetConfig+0x38>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a31      	ldr	r2, [pc, #196]	; (80069c8 <TIM_Base_SetConfig+0xe8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d007      	beq.n	8006918 <TIM_Base_SetConfig+0x38>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a30      	ldr	r2, [pc, #192]	; (80069cc <TIM_Base_SetConfig+0xec>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d003      	beq.n	8006918 <TIM_Base_SetConfig+0x38>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a2f      	ldr	r2, [pc, #188]	; (80069d0 <TIM_Base_SetConfig+0xf0>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d108      	bne.n	800692a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a25      	ldr	r2, [pc, #148]	; (80069c4 <TIM_Base_SetConfig+0xe4>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d01b      	beq.n	800696a <TIM_Base_SetConfig+0x8a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006938:	d017      	beq.n	800696a <TIM_Base_SetConfig+0x8a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a22      	ldr	r2, [pc, #136]	; (80069c8 <TIM_Base_SetConfig+0xe8>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d013      	beq.n	800696a <TIM_Base_SetConfig+0x8a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a21      	ldr	r2, [pc, #132]	; (80069cc <TIM_Base_SetConfig+0xec>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00f      	beq.n	800696a <TIM_Base_SetConfig+0x8a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a20      	ldr	r2, [pc, #128]	; (80069d0 <TIM_Base_SetConfig+0xf0>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00b      	beq.n	800696a <TIM_Base_SetConfig+0x8a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a1f      	ldr	r2, [pc, #124]	; (80069d4 <TIM_Base_SetConfig+0xf4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d007      	beq.n	800696a <TIM_Base_SetConfig+0x8a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a1e      	ldr	r2, [pc, #120]	; (80069d8 <TIM_Base_SetConfig+0xf8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d003      	beq.n	800696a <TIM_Base_SetConfig+0x8a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a1d      	ldr	r2, [pc, #116]	; (80069dc <TIM_Base_SetConfig+0xfc>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d108      	bne.n	800697c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a08      	ldr	r2, [pc, #32]	; (80069c4 <TIM_Base_SetConfig+0xe4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d103      	bne.n	80069b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	615a      	str	r2, [r3, #20]
}
 80069b6:	bf00      	nop
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40000400 	.word	0x40000400
 80069cc:	40000800 	.word	0x40000800
 80069d0:	40000c00 	.word	0x40000c00
 80069d4:	40014000 	.word	0x40014000
 80069d8:	40014400 	.word	0x40014400
 80069dc:	40014800 	.word	0x40014800

080069e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	f023 0201 	bic.w	r2, r3, #1
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 0303 	bic.w	r3, r3, #3
 8006a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f023 0302 	bic.w	r3, r3, #2
 8006a28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a1c      	ldr	r2, [pc, #112]	; (8006aa8 <TIM_OC1_SetConfig+0xc8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d10c      	bne.n	8006a56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f023 0308 	bic.w	r3, r3, #8
 8006a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f023 0304 	bic.w	r3, r3, #4
 8006a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a13      	ldr	r2, [pc, #76]	; (8006aa8 <TIM_OC1_SetConfig+0xc8>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d111      	bne.n	8006a82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	621a      	str	r2, [r3, #32]
}
 8006a9c:	bf00      	nop
 8006a9e:	371c      	adds	r7, #28
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	40010000 	.word	0x40010000

08006aac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	f023 0210 	bic.w	r2, r3, #16
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f023 0320 	bic.w	r3, r3, #32
 8006af6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	011b      	lsls	r3, r3, #4
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a1e      	ldr	r2, [pc, #120]	; (8006b80 <TIM_OC2_SetConfig+0xd4>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d10d      	bne.n	8006b28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	011b      	lsls	r3, r3, #4
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a15      	ldr	r2, [pc, #84]	; (8006b80 <TIM_OC2_SetConfig+0xd4>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d113      	bne.n	8006b58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	621a      	str	r2, [r3, #32]
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40010000 	.word	0x40010000

08006b84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 0303 	bic.w	r3, r3, #3
 8006bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	021b      	lsls	r3, r3, #8
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a1d      	ldr	r2, [pc, #116]	; (8006c54 <TIM_OC3_SetConfig+0xd0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d10d      	bne.n	8006bfe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006be8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	021b      	lsls	r3, r3, #8
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a14      	ldr	r2, [pc, #80]	; (8006c54 <TIM_OC3_SetConfig+0xd0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d113      	bne.n	8006c2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	011b      	lsls	r3, r3, #4
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	621a      	str	r2, [r3, #32]
}
 8006c48:	bf00      	nop
 8006c4a:	371c      	adds	r7, #28
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	40010000 	.word	0x40010000

08006c58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	021b      	lsls	r3, r3, #8
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	031b      	lsls	r3, r3, #12
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a10      	ldr	r2, [pc, #64]	; (8006cf4 <TIM_OC4_SetConfig+0x9c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d109      	bne.n	8006ccc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	019b      	lsls	r3, r3, #6
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	621a      	str	r2, [r3, #32]
}
 8006ce6:	bf00      	nop
 8006ce8:	371c      	adds	r7, #28
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	40010000 	.word	0x40010000

08006cf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	f023 0201 	bic.w	r2, r3, #1
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f023 030a 	bic.w	r3, r3, #10
 8006d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	621a      	str	r2, [r3, #32]
}
 8006d4a:	bf00      	nop
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b087      	sub	sp, #28
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	f023 0210 	bic.w	r2, r3, #16
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	031b      	lsls	r3, r3, #12
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	011b      	lsls	r3, r3, #4
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	621a      	str	r2, [r3, #32]
}
 8006daa:	bf00      	nop
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b085      	sub	sp, #20
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	f043 0307 	orr.w	r3, r3, #7
 8006dd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	609a      	str	r2, [r3, #8]
}
 8006de0:	bf00      	nop
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	021a      	lsls	r2, r3, #8
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	609a      	str	r2, [r3, #8]
}
 8006e20:	bf00      	nop
 8006e22:	371c      	adds	r7, #28
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f003 031f 	and.w	r3, r3, #31
 8006e3e:	2201      	movs	r2, #1
 8006e40:	fa02 f303 	lsl.w	r3, r2, r3
 8006e44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6a1a      	ldr	r2, [r3, #32]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	43db      	mvns	r3, r3
 8006e4e:	401a      	ands	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a1a      	ldr	r2, [r3, #32]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f003 031f 	and.w	r3, r3, #31
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	fa01 f303 	lsl.w	r3, r1, r3
 8006e64:	431a      	orrs	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	621a      	str	r2, [r3, #32]
}
 8006e6a:	bf00      	nop
 8006e6c:	371c      	adds	r7, #28
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
	...

08006e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d101      	bne.n	8006e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	e050      	b.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a1c      	ldr	r2, [pc, #112]	; (8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d018      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006edc:	d013      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a18      	ldr	r2, [pc, #96]	; (8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d00e      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a16      	ldr	r2, [pc, #88]	; (8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d009      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a15      	ldr	r2, [pc, #84]	; (8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d004      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a13      	ldr	r2, [pc, #76]	; (8006f50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d10c      	bne.n	8006f20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	40010000 	.word	0x40010000
 8006f44:	40000400 	.word	0x40000400
 8006f48:	40000800 	.word	0x40000800
 8006f4c:	40000c00 	.word	0x40000c00
 8006f50:	40014000 	.word	0x40014000

08006f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <__errno>:
 8006f7c:	4b01      	ldr	r3, [pc, #4]	; (8006f84 <__errno+0x8>)
 8006f7e:	6818      	ldr	r0, [r3, #0]
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	2000001c 	.word	0x2000001c

08006f88 <__libc_init_array>:
 8006f88:	b570      	push	{r4, r5, r6, lr}
 8006f8a:	4d0d      	ldr	r5, [pc, #52]	; (8006fc0 <__libc_init_array+0x38>)
 8006f8c:	4c0d      	ldr	r4, [pc, #52]	; (8006fc4 <__libc_init_array+0x3c>)
 8006f8e:	1b64      	subs	r4, r4, r5
 8006f90:	10a4      	asrs	r4, r4, #2
 8006f92:	2600      	movs	r6, #0
 8006f94:	42a6      	cmp	r6, r4
 8006f96:	d109      	bne.n	8006fac <__libc_init_array+0x24>
 8006f98:	4d0b      	ldr	r5, [pc, #44]	; (8006fc8 <__libc_init_array+0x40>)
 8006f9a:	4c0c      	ldr	r4, [pc, #48]	; (8006fcc <__libc_init_array+0x44>)
 8006f9c:	f000 fc8e 	bl	80078bc <_init>
 8006fa0:	1b64      	subs	r4, r4, r5
 8006fa2:	10a4      	asrs	r4, r4, #2
 8006fa4:	2600      	movs	r6, #0
 8006fa6:	42a6      	cmp	r6, r4
 8006fa8:	d105      	bne.n	8006fb6 <__libc_init_array+0x2e>
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
 8006fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb0:	4798      	blx	r3
 8006fb2:	3601      	adds	r6, #1
 8006fb4:	e7ee      	b.n	8006f94 <__libc_init_array+0xc>
 8006fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fba:	4798      	blx	r3
 8006fbc:	3601      	adds	r6, #1
 8006fbe:	e7f2      	b.n	8006fa6 <__libc_init_array+0x1e>
 8006fc0:	08007b58 	.word	0x08007b58
 8006fc4:	08007b58 	.word	0x08007b58
 8006fc8:	08007b58 	.word	0x08007b58
 8006fcc:	08007b5c 	.word	0x08007b5c

08006fd0 <memcpy>:
 8006fd0:	440a      	add	r2, r1
 8006fd2:	4291      	cmp	r1, r2
 8006fd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fd8:	d100      	bne.n	8006fdc <memcpy+0xc>
 8006fda:	4770      	bx	lr
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fe6:	4291      	cmp	r1, r2
 8006fe8:	d1f9      	bne.n	8006fde <memcpy+0xe>
 8006fea:	bd10      	pop	{r4, pc}

08006fec <memset>:
 8006fec:	4402      	add	r2, r0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d100      	bne.n	8006ff6 <memset+0xa>
 8006ff4:	4770      	bx	lr
 8006ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8006ffa:	e7f9      	b.n	8006ff0 <memset+0x4>

08006ffc <siprintf>:
 8006ffc:	b40e      	push	{r1, r2, r3}
 8006ffe:	b500      	push	{lr}
 8007000:	b09c      	sub	sp, #112	; 0x70
 8007002:	ab1d      	add	r3, sp, #116	; 0x74
 8007004:	9002      	str	r0, [sp, #8]
 8007006:	9006      	str	r0, [sp, #24]
 8007008:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800700c:	4809      	ldr	r0, [pc, #36]	; (8007034 <siprintf+0x38>)
 800700e:	9107      	str	r1, [sp, #28]
 8007010:	9104      	str	r1, [sp, #16]
 8007012:	4909      	ldr	r1, [pc, #36]	; (8007038 <siprintf+0x3c>)
 8007014:	f853 2b04 	ldr.w	r2, [r3], #4
 8007018:	9105      	str	r1, [sp, #20]
 800701a:	6800      	ldr	r0, [r0, #0]
 800701c:	9301      	str	r3, [sp, #4]
 800701e:	a902      	add	r1, sp, #8
 8007020:	f000 f868 	bl	80070f4 <_svfiprintf_r>
 8007024:	9b02      	ldr	r3, [sp, #8]
 8007026:	2200      	movs	r2, #0
 8007028:	701a      	strb	r2, [r3, #0]
 800702a:	b01c      	add	sp, #112	; 0x70
 800702c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007030:	b003      	add	sp, #12
 8007032:	4770      	bx	lr
 8007034:	2000001c 	.word	0x2000001c
 8007038:	ffff0208 	.word	0xffff0208

0800703c <__ssputs_r>:
 800703c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007040:	688e      	ldr	r6, [r1, #8]
 8007042:	429e      	cmp	r6, r3
 8007044:	4682      	mov	sl, r0
 8007046:	460c      	mov	r4, r1
 8007048:	4690      	mov	r8, r2
 800704a:	461f      	mov	r7, r3
 800704c:	d838      	bhi.n	80070c0 <__ssputs_r+0x84>
 800704e:	898a      	ldrh	r2, [r1, #12]
 8007050:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007054:	d032      	beq.n	80070bc <__ssputs_r+0x80>
 8007056:	6825      	ldr	r5, [r4, #0]
 8007058:	6909      	ldr	r1, [r1, #16]
 800705a:	eba5 0901 	sub.w	r9, r5, r1
 800705e:	6965      	ldr	r5, [r4, #20]
 8007060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007064:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007068:	3301      	adds	r3, #1
 800706a:	444b      	add	r3, r9
 800706c:	106d      	asrs	r5, r5, #1
 800706e:	429d      	cmp	r5, r3
 8007070:	bf38      	it	cc
 8007072:	461d      	movcc	r5, r3
 8007074:	0553      	lsls	r3, r2, #21
 8007076:	d531      	bpl.n	80070dc <__ssputs_r+0xa0>
 8007078:	4629      	mov	r1, r5
 800707a:	f000 fb55 	bl	8007728 <_malloc_r>
 800707e:	4606      	mov	r6, r0
 8007080:	b950      	cbnz	r0, 8007098 <__ssputs_r+0x5c>
 8007082:	230c      	movs	r3, #12
 8007084:	f8ca 3000 	str.w	r3, [sl]
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800708e:	81a3      	strh	r3, [r4, #12]
 8007090:	f04f 30ff 	mov.w	r0, #4294967295
 8007094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007098:	6921      	ldr	r1, [r4, #16]
 800709a:	464a      	mov	r2, r9
 800709c:	f7ff ff98 	bl	8006fd0 <memcpy>
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070aa:	81a3      	strh	r3, [r4, #12]
 80070ac:	6126      	str	r6, [r4, #16]
 80070ae:	6165      	str	r5, [r4, #20]
 80070b0:	444e      	add	r6, r9
 80070b2:	eba5 0509 	sub.w	r5, r5, r9
 80070b6:	6026      	str	r6, [r4, #0]
 80070b8:	60a5      	str	r5, [r4, #8]
 80070ba:	463e      	mov	r6, r7
 80070bc:	42be      	cmp	r6, r7
 80070be:	d900      	bls.n	80070c2 <__ssputs_r+0x86>
 80070c0:	463e      	mov	r6, r7
 80070c2:	6820      	ldr	r0, [r4, #0]
 80070c4:	4632      	mov	r2, r6
 80070c6:	4641      	mov	r1, r8
 80070c8:	f000 faa8 	bl	800761c <memmove>
 80070cc:	68a3      	ldr	r3, [r4, #8]
 80070ce:	1b9b      	subs	r3, r3, r6
 80070d0:	60a3      	str	r3, [r4, #8]
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	4433      	add	r3, r6
 80070d6:	6023      	str	r3, [r4, #0]
 80070d8:	2000      	movs	r0, #0
 80070da:	e7db      	b.n	8007094 <__ssputs_r+0x58>
 80070dc:	462a      	mov	r2, r5
 80070de:	f000 fb97 	bl	8007810 <_realloc_r>
 80070e2:	4606      	mov	r6, r0
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d1e1      	bne.n	80070ac <__ssputs_r+0x70>
 80070e8:	6921      	ldr	r1, [r4, #16]
 80070ea:	4650      	mov	r0, sl
 80070ec:	f000 fab0 	bl	8007650 <_free_r>
 80070f0:	e7c7      	b.n	8007082 <__ssputs_r+0x46>
	...

080070f4 <_svfiprintf_r>:
 80070f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f8:	4698      	mov	r8, r3
 80070fa:	898b      	ldrh	r3, [r1, #12]
 80070fc:	061b      	lsls	r3, r3, #24
 80070fe:	b09d      	sub	sp, #116	; 0x74
 8007100:	4607      	mov	r7, r0
 8007102:	460d      	mov	r5, r1
 8007104:	4614      	mov	r4, r2
 8007106:	d50e      	bpl.n	8007126 <_svfiprintf_r+0x32>
 8007108:	690b      	ldr	r3, [r1, #16]
 800710a:	b963      	cbnz	r3, 8007126 <_svfiprintf_r+0x32>
 800710c:	2140      	movs	r1, #64	; 0x40
 800710e:	f000 fb0b 	bl	8007728 <_malloc_r>
 8007112:	6028      	str	r0, [r5, #0]
 8007114:	6128      	str	r0, [r5, #16]
 8007116:	b920      	cbnz	r0, 8007122 <_svfiprintf_r+0x2e>
 8007118:	230c      	movs	r3, #12
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	f04f 30ff 	mov.w	r0, #4294967295
 8007120:	e0d1      	b.n	80072c6 <_svfiprintf_r+0x1d2>
 8007122:	2340      	movs	r3, #64	; 0x40
 8007124:	616b      	str	r3, [r5, #20]
 8007126:	2300      	movs	r3, #0
 8007128:	9309      	str	r3, [sp, #36]	; 0x24
 800712a:	2320      	movs	r3, #32
 800712c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007130:	f8cd 800c 	str.w	r8, [sp, #12]
 8007134:	2330      	movs	r3, #48	; 0x30
 8007136:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80072e0 <_svfiprintf_r+0x1ec>
 800713a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800713e:	f04f 0901 	mov.w	r9, #1
 8007142:	4623      	mov	r3, r4
 8007144:	469a      	mov	sl, r3
 8007146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800714a:	b10a      	cbz	r2, 8007150 <_svfiprintf_r+0x5c>
 800714c:	2a25      	cmp	r2, #37	; 0x25
 800714e:	d1f9      	bne.n	8007144 <_svfiprintf_r+0x50>
 8007150:	ebba 0b04 	subs.w	fp, sl, r4
 8007154:	d00b      	beq.n	800716e <_svfiprintf_r+0x7a>
 8007156:	465b      	mov	r3, fp
 8007158:	4622      	mov	r2, r4
 800715a:	4629      	mov	r1, r5
 800715c:	4638      	mov	r0, r7
 800715e:	f7ff ff6d 	bl	800703c <__ssputs_r>
 8007162:	3001      	adds	r0, #1
 8007164:	f000 80aa 	beq.w	80072bc <_svfiprintf_r+0x1c8>
 8007168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800716a:	445a      	add	r2, fp
 800716c:	9209      	str	r2, [sp, #36]	; 0x24
 800716e:	f89a 3000 	ldrb.w	r3, [sl]
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 80a2 	beq.w	80072bc <_svfiprintf_r+0x1c8>
 8007178:	2300      	movs	r3, #0
 800717a:	f04f 32ff 	mov.w	r2, #4294967295
 800717e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007182:	f10a 0a01 	add.w	sl, sl, #1
 8007186:	9304      	str	r3, [sp, #16]
 8007188:	9307      	str	r3, [sp, #28]
 800718a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800718e:	931a      	str	r3, [sp, #104]	; 0x68
 8007190:	4654      	mov	r4, sl
 8007192:	2205      	movs	r2, #5
 8007194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007198:	4851      	ldr	r0, [pc, #324]	; (80072e0 <_svfiprintf_r+0x1ec>)
 800719a:	f7f9 f829 	bl	80001f0 <memchr>
 800719e:	9a04      	ldr	r2, [sp, #16]
 80071a0:	b9d8      	cbnz	r0, 80071da <_svfiprintf_r+0xe6>
 80071a2:	06d0      	lsls	r0, r2, #27
 80071a4:	bf44      	itt	mi
 80071a6:	2320      	movmi	r3, #32
 80071a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071ac:	0711      	lsls	r1, r2, #28
 80071ae:	bf44      	itt	mi
 80071b0:	232b      	movmi	r3, #43	; 0x2b
 80071b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071b6:	f89a 3000 	ldrb.w	r3, [sl]
 80071ba:	2b2a      	cmp	r3, #42	; 0x2a
 80071bc:	d015      	beq.n	80071ea <_svfiprintf_r+0xf6>
 80071be:	9a07      	ldr	r2, [sp, #28]
 80071c0:	4654      	mov	r4, sl
 80071c2:	2000      	movs	r0, #0
 80071c4:	f04f 0c0a 	mov.w	ip, #10
 80071c8:	4621      	mov	r1, r4
 80071ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071ce:	3b30      	subs	r3, #48	; 0x30
 80071d0:	2b09      	cmp	r3, #9
 80071d2:	d94e      	bls.n	8007272 <_svfiprintf_r+0x17e>
 80071d4:	b1b0      	cbz	r0, 8007204 <_svfiprintf_r+0x110>
 80071d6:	9207      	str	r2, [sp, #28]
 80071d8:	e014      	b.n	8007204 <_svfiprintf_r+0x110>
 80071da:	eba0 0308 	sub.w	r3, r0, r8
 80071de:	fa09 f303 	lsl.w	r3, r9, r3
 80071e2:	4313      	orrs	r3, r2
 80071e4:	9304      	str	r3, [sp, #16]
 80071e6:	46a2      	mov	sl, r4
 80071e8:	e7d2      	b.n	8007190 <_svfiprintf_r+0x9c>
 80071ea:	9b03      	ldr	r3, [sp, #12]
 80071ec:	1d19      	adds	r1, r3, #4
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	9103      	str	r1, [sp, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	bfbb      	ittet	lt
 80071f6:	425b      	neglt	r3, r3
 80071f8:	f042 0202 	orrlt.w	r2, r2, #2
 80071fc:	9307      	strge	r3, [sp, #28]
 80071fe:	9307      	strlt	r3, [sp, #28]
 8007200:	bfb8      	it	lt
 8007202:	9204      	strlt	r2, [sp, #16]
 8007204:	7823      	ldrb	r3, [r4, #0]
 8007206:	2b2e      	cmp	r3, #46	; 0x2e
 8007208:	d10c      	bne.n	8007224 <_svfiprintf_r+0x130>
 800720a:	7863      	ldrb	r3, [r4, #1]
 800720c:	2b2a      	cmp	r3, #42	; 0x2a
 800720e:	d135      	bne.n	800727c <_svfiprintf_r+0x188>
 8007210:	9b03      	ldr	r3, [sp, #12]
 8007212:	1d1a      	adds	r2, r3, #4
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	9203      	str	r2, [sp, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	bfb8      	it	lt
 800721c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007220:	3402      	adds	r4, #2
 8007222:	9305      	str	r3, [sp, #20]
 8007224:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80072f0 <_svfiprintf_r+0x1fc>
 8007228:	7821      	ldrb	r1, [r4, #0]
 800722a:	2203      	movs	r2, #3
 800722c:	4650      	mov	r0, sl
 800722e:	f7f8 ffdf 	bl	80001f0 <memchr>
 8007232:	b140      	cbz	r0, 8007246 <_svfiprintf_r+0x152>
 8007234:	2340      	movs	r3, #64	; 0x40
 8007236:	eba0 000a 	sub.w	r0, r0, sl
 800723a:	fa03 f000 	lsl.w	r0, r3, r0
 800723e:	9b04      	ldr	r3, [sp, #16]
 8007240:	4303      	orrs	r3, r0
 8007242:	3401      	adds	r4, #1
 8007244:	9304      	str	r3, [sp, #16]
 8007246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800724a:	4826      	ldr	r0, [pc, #152]	; (80072e4 <_svfiprintf_r+0x1f0>)
 800724c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007250:	2206      	movs	r2, #6
 8007252:	f7f8 ffcd 	bl	80001f0 <memchr>
 8007256:	2800      	cmp	r0, #0
 8007258:	d038      	beq.n	80072cc <_svfiprintf_r+0x1d8>
 800725a:	4b23      	ldr	r3, [pc, #140]	; (80072e8 <_svfiprintf_r+0x1f4>)
 800725c:	bb1b      	cbnz	r3, 80072a6 <_svfiprintf_r+0x1b2>
 800725e:	9b03      	ldr	r3, [sp, #12]
 8007260:	3307      	adds	r3, #7
 8007262:	f023 0307 	bic.w	r3, r3, #7
 8007266:	3308      	adds	r3, #8
 8007268:	9303      	str	r3, [sp, #12]
 800726a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800726c:	4433      	add	r3, r6
 800726e:	9309      	str	r3, [sp, #36]	; 0x24
 8007270:	e767      	b.n	8007142 <_svfiprintf_r+0x4e>
 8007272:	fb0c 3202 	mla	r2, ip, r2, r3
 8007276:	460c      	mov	r4, r1
 8007278:	2001      	movs	r0, #1
 800727a:	e7a5      	b.n	80071c8 <_svfiprintf_r+0xd4>
 800727c:	2300      	movs	r3, #0
 800727e:	3401      	adds	r4, #1
 8007280:	9305      	str	r3, [sp, #20]
 8007282:	4619      	mov	r1, r3
 8007284:	f04f 0c0a 	mov.w	ip, #10
 8007288:	4620      	mov	r0, r4
 800728a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800728e:	3a30      	subs	r2, #48	; 0x30
 8007290:	2a09      	cmp	r2, #9
 8007292:	d903      	bls.n	800729c <_svfiprintf_r+0x1a8>
 8007294:	2b00      	cmp	r3, #0
 8007296:	d0c5      	beq.n	8007224 <_svfiprintf_r+0x130>
 8007298:	9105      	str	r1, [sp, #20]
 800729a:	e7c3      	b.n	8007224 <_svfiprintf_r+0x130>
 800729c:	fb0c 2101 	mla	r1, ip, r1, r2
 80072a0:	4604      	mov	r4, r0
 80072a2:	2301      	movs	r3, #1
 80072a4:	e7f0      	b.n	8007288 <_svfiprintf_r+0x194>
 80072a6:	ab03      	add	r3, sp, #12
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	462a      	mov	r2, r5
 80072ac:	4b0f      	ldr	r3, [pc, #60]	; (80072ec <_svfiprintf_r+0x1f8>)
 80072ae:	a904      	add	r1, sp, #16
 80072b0:	4638      	mov	r0, r7
 80072b2:	f3af 8000 	nop.w
 80072b6:	1c42      	adds	r2, r0, #1
 80072b8:	4606      	mov	r6, r0
 80072ba:	d1d6      	bne.n	800726a <_svfiprintf_r+0x176>
 80072bc:	89ab      	ldrh	r3, [r5, #12]
 80072be:	065b      	lsls	r3, r3, #25
 80072c0:	f53f af2c 	bmi.w	800711c <_svfiprintf_r+0x28>
 80072c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072c6:	b01d      	add	sp, #116	; 0x74
 80072c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072cc:	ab03      	add	r3, sp, #12
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	462a      	mov	r2, r5
 80072d2:	4b06      	ldr	r3, [pc, #24]	; (80072ec <_svfiprintf_r+0x1f8>)
 80072d4:	a904      	add	r1, sp, #16
 80072d6:	4638      	mov	r0, r7
 80072d8:	f000 f87a 	bl	80073d0 <_printf_i>
 80072dc:	e7eb      	b.n	80072b6 <_svfiprintf_r+0x1c2>
 80072de:	bf00      	nop
 80072e0:	08007b1c 	.word	0x08007b1c
 80072e4:	08007b26 	.word	0x08007b26
 80072e8:	00000000 	.word	0x00000000
 80072ec:	0800703d 	.word	0x0800703d
 80072f0:	08007b22 	.word	0x08007b22

080072f4 <_printf_common>:
 80072f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f8:	4616      	mov	r6, r2
 80072fa:	4699      	mov	r9, r3
 80072fc:	688a      	ldr	r2, [r1, #8]
 80072fe:	690b      	ldr	r3, [r1, #16]
 8007300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007304:	4293      	cmp	r3, r2
 8007306:	bfb8      	it	lt
 8007308:	4613      	movlt	r3, r2
 800730a:	6033      	str	r3, [r6, #0]
 800730c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007310:	4607      	mov	r7, r0
 8007312:	460c      	mov	r4, r1
 8007314:	b10a      	cbz	r2, 800731a <_printf_common+0x26>
 8007316:	3301      	adds	r3, #1
 8007318:	6033      	str	r3, [r6, #0]
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	0699      	lsls	r1, r3, #26
 800731e:	bf42      	ittt	mi
 8007320:	6833      	ldrmi	r3, [r6, #0]
 8007322:	3302      	addmi	r3, #2
 8007324:	6033      	strmi	r3, [r6, #0]
 8007326:	6825      	ldr	r5, [r4, #0]
 8007328:	f015 0506 	ands.w	r5, r5, #6
 800732c:	d106      	bne.n	800733c <_printf_common+0x48>
 800732e:	f104 0a19 	add.w	sl, r4, #25
 8007332:	68e3      	ldr	r3, [r4, #12]
 8007334:	6832      	ldr	r2, [r6, #0]
 8007336:	1a9b      	subs	r3, r3, r2
 8007338:	42ab      	cmp	r3, r5
 800733a:	dc26      	bgt.n	800738a <_printf_common+0x96>
 800733c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007340:	1e13      	subs	r3, r2, #0
 8007342:	6822      	ldr	r2, [r4, #0]
 8007344:	bf18      	it	ne
 8007346:	2301      	movne	r3, #1
 8007348:	0692      	lsls	r2, r2, #26
 800734a:	d42b      	bmi.n	80073a4 <_printf_common+0xb0>
 800734c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007350:	4649      	mov	r1, r9
 8007352:	4638      	mov	r0, r7
 8007354:	47c0      	blx	r8
 8007356:	3001      	adds	r0, #1
 8007358:	d01e      	beq.n	8007398 <_printf_common+0xa4>
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	68e5      	ldr	r5, [r4, #12]
 800735e:	6832      	ldr	r2, [r6, #0]
 8007360:	f003 0306 	and.w	r3, r3, #6
 8007364:	2b04      	cmp	r3, #4
 8007366:	bf08      	it	eq
 8007368:	1aad      	subeq	r5, r5, r2
 800736a:	68a3      	ldr	r3, [r4, #8]
 800736c:	6922      	ldr	r2, [r4, #16]
 800736e:	bf0c      	ite	eq
 8007370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007374:	2500      	movne	r5, #0
 8007376:	4293      	cmp	r3, r2
 8007378:	bfc4      	itt	gt
 800737a:	1a9b      	subgt	r3, r3, r2
 800737c:	18ed      	addgt	r5, r5, r3
 800737e:	2600      	movs	r6, #0
 8007380:	341a      	adds	r4, #26
 8007382:	42b5      	cmp	r5, r6
 8007384:	d11a      	bne.n	80073bc <_printf_common+0xc8>
 8007386:	2000      	movs	r0, #0
 8007388:	e008      	b.n	800739c <_printf_common+0xa8>
 800738a:	2301      	movs	r3, #1
 800738c:	4652      	mov	r2, sl
 800738e:	4649      	mov	r1, r9
 8007390:	4638      	mov	r0, r7
 8007392:	47c0      	blx	r8
 8007394:	3001      	adds	r0, #1
 8007396:	d103      	bne.n	80073a0 <_printf_common+0xac>
 8007398:	f04f 30ff 	mov.w	r0, #4294967295
 800739c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a0:	3501      	adds	r5, #1
 80073a2:	e7c6      	b.n	8007332 <_printf_common+0x3e>
 80073a4:	18e1      	adds	r1, r4, r3
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	2030      	movs	r0, #48	; 0x30
 80073aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073ae:	4422      	add	r2, r4
 80073b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073b8:	3302      	adds	r3, #2
 80073ba:	e7c7      	b.n	800734c <_printf_common+0x58>
 80073bc:	2301      	movs	r3, #1
 80073be:	4622      	mov	r2, r4
 80073c0:	4649      	mov	r1, r9
 80073c2:	4638      	mov	r0, r7
 80073c4:	47c0      	blx	r8
 80073c6:	3001      	adds	r0, #1
 80073c8:	d0e6      	beq.n	8007398 <_printf_common+0xa4>
 80073ca:	3601      	adds	r6, #1
 80073cc:	e7d9      	b.n	8007382 <_printf_common+0x8e>
	...

080073d0 <_printf_i>:
 80073d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073d4:	7e0f      	ldrb	r7, [r1, #24]
 80073d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073d8:	2f78      	cmp	r7, #120	; 0x78
 80073da:	4691      	mov	r9, r2
 80073dc:	4680      	mov	r8, r0
 80073de:	460c      	mov	r4, r1
 80073e0:	469a      	mov	sl, r3
 80073e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073e6:	d807      	bhi.n	80073f8 <_printf_i+0x28>
 80073e8:	2f62      	cmp	r7, #98	; 0x62
 80073ea:	d80a      	bhi.n	8007402 <_printf_i+0x32>
 80073ec:	2f00      	cmp	r7, #0
 80073ee:	f000 80d8 	beq.w	80075a2 <_printf_i+0x1d2>
 80073f2:	2f58      	cmp	r7, #88	; 0x58
 80073f4:	f000 80a3 	beq.w	800753e <_printf_i+0x16e>
 80073f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007400:	e03a      	b.n	8007478 <_printf_i+0xa8>
 8007402:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007406:	2b15      	cmp	r3, #21
 8007408:	d8f6      	bhi.n	80073f8 <_printf_i+0x28>
 800740a:	a101      	add	r1, pc, #4	; (adr r1, 8007410 <_printf_i+0x40>)
 800740c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007410:	08007469 	.word	0x08007469
 8007414:	0800747d 	.word	0x0800747d
 8007418:	080073f9 	.word	0x080073f9
 800741c:	080073f9 	.word	0x080073f9
 8007420:	080073f9 	.word	0x080073f9
 8007424:	080073f9 	.word	0x080073f9
 8007428:	0800747d 	.word	0x0800747d
 800742c:	080073f9 	.word	0x080073f9
 8007430:	080073f9 	.word	0x080073f9
 8007434:	080073f9 	.word	0x080073f9
 8007438:	080073f9 	.word	0x080073f9
 800743c:	08007589 	.word	0x08007589
 8007440:	080074ad 	.word	0x080074ad
 8007444:	0800756b 	.word	0x0800756b
 8007448:	080073f9 	.word	0x080073f9
 800744c:	080073f9 	.word	0x080073f9
 8007450:	080075ab 	.word	0x080075ab
 8007454:	080073f9 	.word	0x080073f9
 8007458:	080074ad 	.word	0x080074ad
 800745c:	080073f9 	.word	0x080073f9
 8007460:	080073f9 	.word	0x080073f9
 8007464:	08007573 	.word	0x08007573
 8007468:	682b      	ldr	r3, [r5, #0]
 800746a:	1d1a      	adds	r2, r3, #4
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	602a      	str	r2, [r5, #0]
 8007470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007478:	2301      	movs	r3, #1
 800747a:	e0a3      	b.n	80075c4 <_printf_i+0x1f4>
 800747c:	6820      	ldr	r0, [r4, #0]
 800747e:	6829      	ldr	r1, [r5, #0]
 8007480:	0606      	lsls	r6, r0, #24
 8007482:	f101 0304 	add.w	r3, r1, #4
 8007486:	d50a      	bpl.n	800749e <_printf_i+0xce>
 8007488:	680e      	ldr	r6, [r1, #0]
 800748a:	602b      	str	r3, [r5, #0]
 800748c:	2e00      	cmp	r6, #0
 800748e:	da03      	bge.n	8007498 <_printf_i+0xc8>
 8007490:	232d      	movs	r3, #45	; 0x2d
 8007492:	4276      	negs	r6, r6
 8007494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007498:	485e      	ldr	r0, [pc, #376]	; (8007614 <_printf_i+0x244>)
 800749a:	230a      	movs	r3, #10
 800749c:	e019      	b.n	80074d2 <_printf_i+0x102>
 800749e:	680e      	ldr	r6, [r1, #0]
 80074a0:	602b      	str	r3, [r5, #0]
 80074a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074a6:	bf18      	it	ne
 80074a8:	b236      	sxthne	r6, r6
 80074aa:	e7ef      	b.n	800748c <_printf_i+0xbc>
 80074ac:	682b      	ldr	r3, [r5, #0]
 80074ae:	6820      	ldr	r0, [r4, #0]
 80074b0:	1d19      	adds	r1, r3, #4
 80074b2:	6029      	str	r1, [r5, #0]
 80074b4:	0601      	lsls	r1, r0, #24
 80074b6:	d501      	bpl.n	80074bc <_printf_i+0xec>
 80074b8:	681e      	ldr	r6, [r3, #0]
 80074ba:	e002      	b.n	80074c2 <_printf_i+0xf2>
 80074bc:	0646      	lsls	r6, r0, #25
 80074be:	d5fb      	bpl.n	80074b8 <_printf_i+0xe8>
 80074c0:	881e      	ldrh	r6, [r3, #0]
 80074c2:	4854      	ldr	r0, [pc, #336]	; (8007614 <_printf_i+0x244>)
 80074c4:	2f6f      	cmp	r7, #111	; 0x6f
 80074c6:	bf0c      	ite	eq
 80074c8:	2308      	moveq	r3, #8
 80074ca:	230a      	movne	r3, #10
 80074cc:	2100      	movs	r1, #0
 80074ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074d2:	6865      	ldr	r5, [r4, #4]
 80074d4:	60a5      	str	r5, [r4, #8]
 80074d6:	2d00      	cmp	r5, #0
 80074d8:	bfa2      	ittt	ge
 80074da:	6821      	ldrge	r1, [r4, #0]
 80074dc:	f021 0104 	bicge.w	r1, r1, #4
 80074e0:	6021      	strge	r1, [r4, #0]
 80074e2:	b90e      	cbnz	r6, 80074e8 <_printf_i+0x118>
 80074e4:	2d00      	cmp	r5, #0
 80074e6:	d04d      	beq.n	8007584 <_printf_i+0x1b4>
 80074e8:	4615      	mov	r5, r2
 80074ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80074ee:	fb03 6711 	mls	r7, r3, r1, r6
 80074f2:	5dc7      	ldrb	r7, [r0, r7]
 80074f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074f8:	4637      	mov	r7, r6
 80074fa:	42bb      	cmp	r3, r7
 80074fc:	460e      	mov	r6, r1
 80074fe:	d9f4      	bls.n	80074ea <_printf_i+0x11a>
 8007500:	2b08      	cmp	r3, #8
 8007502:	d10b      	bne.n	800751c <_printf_i+0x14c>
 8007504:	6823      	ldr	r3, [r4, #0]
 8007506:	07de      	lsls	r6, r3, #31
 8007508:	d508      	bpl.n	800751c <_printf_i+0x14c>
 800750a:	6923      	ldr	r3, [r4, #16]
 800750c:	6861      	ldr	r1, [r4, #4]
 800750e:	4299      	cmp	r1, r3
 8007510:	bfde      	ittt	le
 8007512:	2330      	movle	r3, #48	; 0x30
 8007514:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007518:	f105 35ff 	addle.w	r5, r5, #4294967295
 800751c:	1b52      	subs	r2, r2, r5
 800751e:	6122      	str	r2, [r4, #16]
 8007520:	f8cd a000 	str.w	sl, [sp]
 8007524:	464b      	mov	r3, r9
 8007526:	aa03      	add	r2, sp, #12
 8007528:	4621      	mov	r1, r4
 800752a:	4640      	mov	r0, r8
 800752c:	f7ff fee2 	bl	80072f4 <_printf_common>
 8007530:	3001      	adds	r0, #1
 8007532:	d14c      	bne.n	80075ce <_printf_i+0x1fe>
 8007534:	f04f 30ff 	mov.w	r0, #4294967295
 8007538:	b004      	add	sp, #16
 800753a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800753e:	4835      	ldr	r0, [pc, #212]	; (8007614 <_printf_i+0x244>)
 8007540:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007544:	6829      	ldr	r1, [r5, #0]
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	f851 6b04 	ldr.w	r6, [r1], #4
 800754c:	6029      	str	r1, [r5, #0]
 800754e:	061d      	lsls	r5, r3, #24
 8007550:	d514      	bpl.n	800757c <_printf_i+0x1ac>
 8007552:	07df      	lsls	r7, r3, #31
 8007554:	bf44      	itt	mi
 8007556:	f043 0320 	orrmi.w	r3, r3, #32
 800755a:	6023      	strmi	r3, [r4, #0]
 800755c:	b91e      	cbnz	r6, 8007566 <_printf_i+0x196>
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	f023 0320 	bic.w	r3, r3, #32
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	2310      	movs	r3, #16
 8007568:	e7b0      	b.n	80074cc <_printf_i+0xfc>
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	f043 0320 	orr.w	r3, r3, #32
 8007570:	6023      	str	r3, [r4, #0]
 8007572:	2378      	movs	r3, #120	; 0x78
 8007574:	4828      	ldr	r0, [pc, #160]	; (8007618 <_printf_i+0x248>)
 8007576:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800757a:	e7e3      	b.n	8007544 <_printf_i+0x174>
 800757c:	0659      	lsls	r1, r3, #25
 800757e:	bf48      	it	mi
 8007580:	b2b6      	uxthmi	r6, r6
 8007582:	e7e6      	b.n	8007552 <_printf_i+0x182>
 8007584:	4615      	mov	r5, r2
 8007586:	e7bb      	b.n	8007500 <_printf_i+0x130>
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	6826      	ldr	r6, [r4, #0]
 800758c:	6961      	ldr	r1, [r4, #20]
 800758e:	1d18      	adds	r0, r3, #4
 8007590:	6028      	str	r0, [r5, #0]
 8007592:	0635      	lsls	r5, r6, #24
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	d501      	bpl.n	800759c <_printf_i+0x1cc>
 8007598:	6019      	str	r1, [r3, #0]
 800759a:	e002      	b.n	80075a2 <_printf_i+0x1d2>
 800759c:	0670      	lsls	r0, r6, #25
 800759e:	d5fb      	bpl.n	8007598 <_printf_i+0x1c8>
 80075a0:	8019      	strh	r1, [r3, #0]
 80075a2:	2300      	movs	r3, #0
 80075a4:	6123      	str	r3, [r4, #16]
 80075a6:	4615      	mov	r5, r2
 80075a8:	e7ba      	b.n	8007520 <_printf_i+0x150>
 80075aa:	682b      	ldr	r3, [r5, #0]
 80075ac:	1d1a      	adds	r2, r3, #4
 80075ae:	602a      	str	r2, [r5, #0]
 80075b0:	681d      	ldr	r5, [r3, #0]
 80075b2:	6862      	ldr	r2, [r4, #4]
 80075b4:	2100      	movs	r1, #0
 80075b6:	4628      	mov	r0, r5
 80075b8:	f7f8 fe1a 	bl	80001f0 <memchr>
 80075bc:	b108      	cbz	r0, 80075c2 <_printf_i+0x1f2>
 80075be:	1b40      	subs	r0, r0, r5
 80075c0:	6060      	str	r0, [r4, #4]
 80075c2:	6863      	ldr	r3, [r4, #4]
 80075c4:	6123      	str	r3, [r4, #16]
 80075c6:	2300      	movs	r3, #0
 80075c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075cc:	e7a8      	b.n	8007520 <_printf_i+0x150>
 80075ce:	6923      	ldr	r3, [r4, #16]
 80075d0:	462a      	mov	r2, r5
 80075d2:	4649      	mov	r1, r9
 80075d4:	4640      	mov	r0, r8
 80075d6:	47d0      	blx	sl
 80075d8:	3001      	adds	r0, #1
 80075da:	d0ab      	beq.n	8007534 <_printf_i+0x164>
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	079b      	lsls	r3, r3, #30
 80075e0:	d413      	bmi.n	800760a <_printf_i+0x23a>
 80075e2:	68e0      	ldr	r0, [r4, #12]
 80075e4:	9b03      	ldr	r3, [sp, #12]
 80075e6:	4298      	cmp	r0, r3
 80075e8:	bfb8      	it	lt
 80075ea:	4618      	movlt	r0, r3
 80075ec:	e7a4      	b.n	8007538 <_printf_i+0x168>
 80075ee:	2301      	movs	r3, #1
 80075f0:	4632      	mov	r2, r6
 80075f2:	4649      	mov	r1, r9
 80075f4:	4640      	mov	r0, r8
 80075f6:	47d0      	blx	sl
 80075f8:	3001      	adds	r0, #1
 80075fa:	d09b      	beq.n	8007534 <_printf_i+0x164>
 80075fc:	3501      	adds	r5, #1
 80075fe:	68e3      	ldr	r3, [r4, #12]
 8007600:	9903      	ldr	r1, [sp, #12]
 8007602:	1a5b      	subs	r3, r3, r1
 8007604:	42ab      	cmp	r3, r5
 8007606:	dcf2      	bgt.n	80075ee <_printf_i+0x21e>
 8007608:	e7eb      	b.n	80075e2 <_printf_i+0x212>
 800760a:	2500      	movs	r5, #0
 800760c:	f104 0619 	add.w	r6, r4, #25
 8007610:	e7f5      	b.n	80075fe <_printf_i+0x22e>
 8007612:	bf00      	nop
 8007614:	08007b2d 	.word	0x08007b2d
 8007618:	08007b3e 	.word	0x08007b3e

0800761c <memmove>:
 800761c:	4288      	cmp	r0, r1
 800761e:	b510      	push	{r4, lr}
 8007620:	eb01 0402 	add.w	r4, r1, r2
 8007624:	d902      	bls.n	800762c <memmove+0x10>
 8007626:	4284      	cmp	r4, r0
 8007628:	4623      	mov	r3, r4
 800762a:	d807      	bhi.n	800763c <memmove+0x20>
 800762c:	1e43      	subs	r3, r0, #1
 800762e:	42a1      	cmp	r1, r4
 8007630:	d008      	beq.n	8007644 <memmove+0x28>
 8007632:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007636:	f803 2f01 	strb.w	r2, [r3, #1]!
 800763a:	e7f8      	b.n	800762e <memmove+0x12>
 800763c:	4402      	add	r2, r0
 800763e:	4601      	mov	r1, r0
 8007640:	428a      	cmp	r2, r1
 8007642:	d100      	bne.n	8007646 <memmove+0x2a>
 8007644:	bd10      	pop	{r4, pc}
 8007646:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800764a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800764e:	e7f7      	b.n	8007640 <memmove+0x24>

08007650 <_free_r>:
 8007650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007652:	2900      	cmp	r1, #0
 8007654:	d044      	beq.n	80076e0 <_free_r+0x90>
 8007656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800765a:	9001      	str	r0, [sp, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	f1a1 0404 	sub.w	r4, r1, #4
 8007662:	bfb8      	it	lt
 8007664:	18e4      	addlt	r4, r4, r3
 8007666:	f000 f913 	bl	8007890 <__malloc_lock>
 800766a:	4a1e      	ldr	r2, [pc, #120]	; (80076e4 <_free_r+0x94>)
 800766c:	9801      	ldr	r0, [sp, #4]
 800766e:	6813      	ldr	r3, [r2, #0]
 8007670:	b933      	cbnz	r3, 8007680 <_free_r+0x30>
 8007672:	6063      	str	r3, [r4, #4]
 8007674:	6014      	str	r4, [r2, #0]
 8007676:	b003      	add	sp, #12
 8007678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800767c:	f000 b90e 	b.w	800789c <__malloc_unlock>
 8007680:	42a3      	cmp	r3, r4
 8007682:	d908      	bls.n	8007696 <_free_r+0x46>
 8007684:	6825      	ldr	r5, [r4, #0]
 8007686:	1961      	adds	r1, r4, r5
 8007688:	428b      	cmp	r3, r1
 800768a:	bf01      	itttt	eq
 800768c:	6819      	ldreq	r1, [r3, #0]
 800768e:	685b      	ldreq	r3, [r3, #4]
 8007690:	1949      	addeq	r1, r1, r5
 8007692:	6021      	streq	r1, [r4, #0]
 8007694:	e7ed      	b.n	8007672 <_free_r+0x22>
 8007696:	461a      	mov	r2, r3
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	b10b      	cbz	r3, 80076a0 <_free_r+0x50>
 800769c:	42a3      	cmp	r3, r4
 800769e:	d9fa      	bls.n	8007696 <_free_r+0x46>
 80076a0:	6811      	ldr	r1, [r2, #0]
 80076a2:	1855      	adds	r5, r2, r1
 80076a4:	42a5      	cmp	r5, r4
 80076a6:	d10b      	bne.n	80076c0 <_free_r+0x70>
 80076a8:	6824      	ldr	r4, [r4, #0]
 80076aa:	4421      	add	r1, r4
 80076ac:	1854      	adds	r4, r2, r1
 80076ae:	42a3      	cmp	r3, r4
 80076b0:	6011      	str	r1, [r2, #0]
 80076b2:	d1e0      	bne.n	8007676 <_free_r+0x26>
 80076b4:	681c      	ldr	r4, [r3, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	6053      	str	r3, [r2, #4]
 80076ba:	4421      	add	r1, r4
 80076bc:	6011      	str	r1, [r2, #0]
 80076be:	e7da      	b.n	8007676 <_free_r+0x26>
 80076c0:	d902      	bls.n	80076c8 <_free_r+0x78>
 80076c2:	230c      	movs	r3, #12
 80076c4:	6003      	str	r3, [r0, #0]
 80076c6:	e7d6      	b.n	8007676 <_free_r+0x26>
 80076c8:	6825      	ldr	r5, [r4, #0]
 80076ca:	1961      	adds	r1, r4, r5
 80076cc:	428b      	cmp	r3, r1
 80076ce:	bf04      	itt	eq
 80076d0:	6819      	ldreq	r1, [r3, #0]
 80076d2:	685b      	ldreq	r3, [r3, #4]
 80076d4:	6063      	str	r3, [r4, #4]
 80076d6:	bf04      	itt	eq
 80076d8:	1949      	addeq	r1, r1, r5
 80076da:	6021      	streq	r1, [r4, #0]
 80076dc:	6054      	str	r4, [r2, #4]
 80076de:	e7ca      	b.n	8007676 <_free_r+0x26>
 80076e0:	b003      	add	sp, #12
 80076e2:	bd30      	pop	{r4, r5, pc}
 80076e4:	200006fc 	.word	0x200006fc

080076e8 <sbrk_aligned>:
 80076e8:	b570      	push	{r4, r5, r6, lr}
 80076ea:	4e0e      	ldr	r6, [pc, #56]	; (8007724 <sbrk_aligned+0x3c>)
 80076ec:	460c      	mov	r4, r1
 80076ee:	6831      	ldr	r1, [r6, #0]
 80076f0:	4605      	mov	r5, r0
 80076f2:	b911      	cbnz	r1, 80076fa <sbrk_aligned+0x12>
 80076f4:	f000 f8bc 	bl	8007870 <_sbrk_r>
 80076f8:	6030      	str	r0, [r6, #0]
 80076fa:	4621      	mov	r1, r4
 80076fc:	4628      	mov	r0, r5
 80076fe:	f000 f8b7 	bl	8007870 <_sbrk_r>
 8007702:	1c43      	adds	r3, r0, #1
 8007704:	d00a      	beq.n	800771c <sbrk_aligned+0x34>
 8007706:	1cc4      	adds	r4, r0, #3
 8007708:	f024 0403 	bic.w	r4, r4, #3
 800770c:	42a0      	cmp	r0, r4
 800770e:	d007      	beq.n	8007720 <sbrk_aligned+0x38>
 8007710:	1a21      	subs	r1, r4, r0
 8007712:	4628      	mov	r0, r5
 8007714:	f000 f8ac 	bl	8007870 <_sbrk_r>
 8007718:	3001      	adds	r0, #1
 800771a:	d101      	bne.n	8007720 <sbrk_aligned+0x38>
 800771c:	f04f 34ff 	mov.w	r4, #4294967295
 8007720:	4620      	mov	r0, r4
 8007722:	bd70      	pop	{r4, r5, r6, pc}
 8007724:	20000700 	.word	0x20000700

08007728 <_malloc_r>:
 8007728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800772c:	1ccd      	adds	r5, r1, #3
 800772e:	f025 0503 	bic.w	r5, r5, #3
 8007732:	3508      	adds	r5, #8
 8007734:	2d0c      	cmp	r5, #12
 8007736:	bf38      	it	cc
 8007738:	250c      	movcc	r5, #12
 800773a:	2d00      	cmp	r5, #0
 800773c:	4607      	mov	r7, r0
 800773e:	db01      	blt.n	8007744 <_malloc_r+0x1c>
 8007740:	42a9      	cmp	r1, r5
 8007742:	d905      	bls.n	8007750 <_malloc_r+0x28>
 8007744:	230c      	movs	r3, #12
 8007746:	603b      	str	r3, [r7, #0]
 8007748:	2600      	movs	r6, #0
 800774a:	4630      	mov	r0, r6
 800774c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007750:	4e2e      	ldr	r6, [pc, #184]	; (800780c <_malloc_r+0xe4>)
 8007752:	f000 f89d 	bl	8007890 <__malloc_lock>
 8007756:	6833      	ldr	r3, [r6, #0]
 8007758:	461c      	mov	r4, r3
 800775a:	bb34      	cbnz	r4, 80077aa <_malloc_r+0x82>
 800775c:	4629      	mov	r1, r5
 800775e:	4638      	mov	r0, r7
 8007760:	f7ff ffc2 	bl	80076e8 <sbrk_aligned>
 8007764:	1c43      	adds	r3, r0, #1
 8007766:	4604      	mov	r4, r0
 8007768:	d14d      	bne.n	8007806 <_malloc_r+0xde>
 800776a:	6834      	ldr	r4, [r6, #0]
 800776c:	4626      	mov	r6, r4
 800776e:	2e00      	cmp	r6, #0
 8007770:	d140      	bne.n	80077f4 <_malloc_r+0xcc>
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	4631      	mov	r1, r6
 8007776:	4638      	mov	r0, r7
 8007778:	eb04 0803 	add.w	r8, r4, r3
 800777c:	f000 f878 	bl	8007870 <_sbrk_r>
 8007780:	4580      	cmp	r8, r0
 8007782:	d13a      	bne.n	80077fa <_malloc_r+0xd2>
 8007784:	6821      	ldr	r1, [r4, #0]
 8007786:	3503      	adds	r5, #3
 8007788:	1a6d      	subs	r5, r5, r1
 800778a:	f025 0503 	bic.w	r5, r5, #3
 800778e:	3508      	adds	r5, #8
 8007790:	2d0c      	cmp	r5, #12
 8007792:	bf38      	it	cc
 8007794:	250c      	movcc	r5, #12
 8007796:	4629      	mov	r1, r5
 8007798:	4638      	mov	r0, r7
 800779a:	f7ff ffa5 	bl	80076e8 <sbrk_aligned>
 800779e:	3001      	adds	r0, #1
 80077a0:	d02b      	beq.n	80077fa <_malloc_r+0xd2>
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	442b      	add	r3, r5
 80077a6:	6023      	str	r3, [r4, #0]
 80077a8:	e00e      	b.n	80077c8 <_malloc_r+0xa0>
 80077aa:	6822      	ldr	r2, [r4, #0]
 80077ac:	1b52      	subs	r2, r2, r5
 80077ae:	d41e      	bmi.n	80077ee <_malloc_r+0xc6>
 80077b0:	2a0b      	cmp	r2, #11
 80077b2:	d916      	bls.n	80077e2 <_malloc_r+0xba>
 80077b4:	1961      	adds	r1, r4, r5
 80077b6:	42a3      	cmp	r3, r4
 80077b8:	6025      	str	r5, [r4, #0]
 80077ba:	bf18      	it	ne
 80077bc:	6059      	strne	r1, [r3, #4]
 80077be:	6863      	ldr	r3, [r4, #4]
 80077c0:	bf08      	it	eq
 80077c2:	6031      	streq	r1, [r6, #0]
 80077c4:	5162      	str	r2, [r4, r5]
 80077c6:	604b      	str	r3, [r1, #4]
 80077c8:	4638      	mov	r0, r7
 80077ca:	f104 060b 	add.w	r6, r4, #11
 80077ce:	f000 f865 	bl	800789c <__malloc_unlock>
 80077d2:	f026 0607 	bic.w	r6, r6, #7
 80077d6:	1d23      	adds	r3, r4, #4
 80077d8:	1af2      	subs	r2, r6, r3
 80077da:	d0b6      	beq.n	800774a <_malloc_r+0x22>
 80077dc:	1b9b      	subs	r3, r3, r6
 80077de:	50a3      	str	r3, [r4, r2]
 80077e0:	e7b3      	b.n	800774a <_malloc_r+0x22>
 80077e2:	6862      	ldr	r2, [r4, #4]
 80077e4:	42a3      	cmp	r3, r4
 80077e6:	bf0c      	ite	eq
 80077e8:	6032      	streq	r2, [r6, #0]
 80077ea:	605a      	strne	r2, [r3, #4]
 80077ec:	e7ec      	b.n	80077c8 <_malloc_r+0xa0>
 80077ee:	4623      	mov	r3, r4
 80077f0:	6864      	ldr	r4, [r4, #4]
 80077f2:	e7b2      	b.n	800775a <_malloc_r+0x32>
 80077f4:	4634      	mov	r4, r6
 80077f6:	6876      	ldr	r6, [r6, #4]
 80077f8:	e7b9      	b.n	800776e <_malloc_r+0x46>
 80077fa:	230c      	movs	r3, #12
 80077fc:	603b      	str	r3, [r7, #0]
 80077fe:	4638      	mov	r0, r7
 8007800:	f000 f84c 	bl	800789c <__malloc_unlock>
 8007804:	e7a1      	b.n	800774a <_malloc_r+0x22>
 8007806:	6025      	str	r5, [r4, #0]
 8007808:	e7de      	b.n	80077c8 <_malloc_r+0xa0>
 800780a:	bf00      	nop
 800780c:	200006fc 	.word	0x200006fc

08007810 <_realloc_r>:
 8007810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007814:	4680      	mov	r8, r0
 8007816:	4614      	mov	r4, r2
 8007818:	460e      	mov	r6, r1
 800781a:	b921      	cbnz	r1, 8007826 <_realloc_r+0x16>
 800781c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007820:	4611      	mov	r1, r2
 8007822:	f7ff bf81 	b.w	8007728 <_malloc_r>
 8007826:	b92a      	cbnz	r2, 8007834 <_realloc_r+0x24>
 8007828:	f7ff ff12 	bl	8007650 <_free_r>
 800782c:	4625      	mov	r5, r4
 800782e:	4628      	mov	r0, r5
 8007830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007834:	f000 f838 	bl	80078a8 <_malloc_usable_size_r>
 8007838:	4284      	cmp	r4, r0
 800783a:	4607      	mov	r7, r0
 800783c:	d802      	bhi.n	8007844 <_realloc_r+0x34>
 800783e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007842:	d812      	bhi.n	800786a <_realloc_r+0x5a>
 8007844:	4621      	mov	r1, r4
 8007846:	4640      	mov	r0, r8
 8007848:	f7ff ff6e 	bl	8007728 <_malloc_r>
 800784c:	4605      	mov	r5, r0
 800784e:	2800      	cmp	r0, #0
 8007850:	d0ed      	beq.n	800782e <_realloc_r+0x1e>
 8007852:	42bc      	cmp	r4, r7
 8007854:	4622      	mov	r2, r4
 8007856:	4631      	mov	r1, r6
 8007858:	bf28      	it	cs
 800785a:	463a      	movcs	r2, r7
 800785c:	f7ff fbb8 	bl	8006fd0 <memcpy>
 8007860:	4631      	mov	r1, r6
 8007862:	4640      	mov	r0, r8
 8007864:	f7ff fef4 	bl	8007650 <_free_r>
 8007868:	e7e1      	b.n	800782e <_realloc_r+0x1e>
 800786a:	4635      	mov	r5, r6
 800786c:	e7df      	b.n	800782e <_realloc_r+0x1e>
	...

08007870 <_sbrk_r>:
 8007870:	b538      	push	{r3, r4, r5, lr}
 8007872:	4d06      	ldr	r5, [pc, #24]	; (800788c <_sbrk_r+0x1c>)
 8007874:	2300      	movs	r3, #0
 8007876:	4604      	mov	r4, r0
 8007878:	4608      	mov	r0, r1
 800787a:	602b      	str	r3, [r5, #0]
 800787c:	f7fc faba 	bl	8003df4 <_sbrk>
 8007880:	1c43      	adds	r3, r0, #1
 8007882:	d102      	bne.n	800788a <_sbrk_r+0x1a>
 8007884:	682b      	ldr	r3, [r5, #0]
 8007886:	b103      	cbz	r3, 800788a <_sbrk_r+0x1a>
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	bd38      	pop	{r3, r4, r5, pc}
 800788c:	20000704 	.word	0x20000704

08007890 <__malloc_lock>:
 8007890:	4801      	ldr	r0, [pc, #4]	; (8007898 <__malloc_lock+0x8>)
 8007892:	f000 b811 	b.w	80078b8 <__retarget_lock_acquire_recursive>
 8007896:	bf00      	nop
 8007898:	20000708 	.word	0x20000708

0800789c <__malloc_unlock>:
 800789c:	4801      	ldr	r0, [pc, #4]	; (80078a4 <__malloc_unlock+0x8>)
 800789e:	f000 b80c 	b.w	80078ba <__retarget_lock_release_recursive>
 80078a2:	bf00      	nop
 80078a4:	20000708 	.word	0x20000708

080078a8 <_malloc_usable_size_r>:
 80078a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078ac:	1f18      	subs	r0, r3, #4
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	bfbc      	itt	lt
 80078b2:	580b      	ldrlt	r3, [r1, r0]
 80078b4:	18c0      	addlt	r0, r0, r3
 80078b6:	4770      	bx	lr

080078b8 <__retarget_lock_acquire_recursive>:
 80078b8:	4770      	bx	lr

080078ba <__retarget_lock_release_recursive>:
 80078ba:	4770      	bx	lr

080078bc <_init>:
 80078bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078be:	bf00      	nop
 80078c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c2:	bc08      	pop	{r3}
 80078c4:	469e      	mov	lr, r3
 80078c6:	4770      	bx	lr

080078c8 <_fini>:
 80078c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ca:	bf00      	nop
 80078cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ce:	bc08      	pop	{r3}
 80078d0:	469e      	mov	lr, r3
 80078d2:	4770      	bx	lr
