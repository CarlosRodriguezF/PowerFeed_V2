
PowerFeed_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005704  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080058a4  080058a4  000158a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005964  08005964  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005964  08005964  00015964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800596c  0800596c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800596c  0800596c  0001596c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005970  08005970  00015970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  20000084  080059f8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000668  080059f8  00020668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8fa  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ebc  00000000  00000000  0002d9ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0002f870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00030688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001761d  00000000  00000000  000313d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb0a  00000000  00000000  000489ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fc92  00000000  00000000  000584f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8189  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004014  00000000  00000000  000e81dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800588c 	.word	0x0800588c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	0800588c 	.word	0x0800588c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2uiz>:
 8000608:	004a      	lsls	r2, r1, #1
 800060a:	d211      	bcs.n	8000630 <__aeabi_d2uiz+0x28>
 800060c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000610:	d211      	bcs.n	8000636 <__aeabi_d2uiz+0x2e>
 8000612:	d50d      	bpl.n	8000630 <__aeabi_d2uiz+0x28>
 8000614:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000618:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800061c:	d40e      	bmi.n	800063c <__aeabi_d2uiz+0x34>
 800061e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000626:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800062a:	fa23 f002 	lsr.w	r0, r3, r2
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800063a:	d102      	bne.n	8000642 <__aeabi_d2uiz+0x3a>
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b974 	b.w	8000948 <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	4604      	mov	r4, r0
 8000680:	468e      	mov	lr, r1
 8000682:	2b00      	cmp	r3, #0
 8000684:	d14d      	bne.n	8000722 <__udivmoddi4+0xaa>
 8000686:	428a      	cmp	r2, r1
 8000688:	4694      	mov	ip, r2
 800068a:	d969      	bls.n	8000760 <__udivmoddi4+0xe8>
 800068c:	fab2 f282 	clz	r2, r2
 8000690:	b152      	cbz	r2, 80006a8 <__udivmoddi4+0x30>
 8000692:	fa01 f302 	lsl.w	r3, r1, r2
 8000696:	f1c2 0120 	rsb	r1, r2, #32
 800069a:	fa20 f101 	lsr.w	r1, r0, r1
 800069e:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a2:	ea41 0e03 	orr.w	lr, r1, r3
 80006a6:	4094      	lsls	r4, r2
 80006a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006ac:	0c21      	lsrs	r1, r4, #16
 80006ae:	fbbe f6f8 	udiv	r6, lr, r8
 80006b2:	fa1f f78c 	uxth.w	r7, ip
 80006b6:	fb08 e316 	mls	r3, r8, r6, lr
 80006ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006be:	fb06 f107 	mul.w	r1, r6, r7
 80006c2:	4299      	cmp	r1, r3
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x64>
 80006c6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ce:	f080 811f 	bcs.w	8000910 <__udivmoddi4+0x298>
 80006d2:	4299      	cmp	r1, r3
 80006d4:	f240 811c 	bls.w	8000910 <__udivmoddi4+0x298>
 80006d8:	3e02      	subs	r6, #2
 80006da:	4463      	add	r3, ip
 80006dc:	1a5b      	subs	r3, r3, r1
 80006de:	b2a4      	uxth	r4, r4
 80006e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006e4:	fb08 3310 	mls	r3, r8, r0, r3
 80006e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006ec:	fb00 f707 	mul.w	r7, r0, r7
 80006f0:	42a7      	cmp	r7, r4
 80006f2:	d90a      	bls.n	800070a <__udivmoddi4+0x92>
 80006f4:	eb1c 0404 	adds.w	r4, ip, r4
 80006f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006fc:	f080 810a 	bcs.w	8000914 <__udivmoddi4+0x29c>
 8000700:	42a7      	cmp	r7, r4
 8000702:	f240 8107 	bls.w	8000914 <__udivmoddi4+0x29c>
 8000706:	4464      	add	r4, ip
 8000708:	3802      	subs	r0, #2
 800070a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800070e:	1be4      	subs	r4, r4, r7
 8000710:	2600      	movs	r6, #0
 8000712:	b11d      	cbz	r5, 800071c <__udivmoddi4+0xa4>
 8000714:	40d4      	lsrs	r4, r2
 8000716:	2300      	movs	r3, #0
 8000718:	e9c5 4300 	strd	r4, r3, [r5]
 800071c:	4631      	mov	r1, r6
 800071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000722:	428b      	cmp	r3, r1
 8000724:	d909      	bls.n	800073a <__udivmoddi4+0xc2>
 8000726:	2d00      	cmp	r5, #0
 8000728:	f000 80ef 	beq.w	800090a <__udivmoddi4+0x292>
 800072c:	2600      	movs	r6, #0
 800072e:	e9c5 0100 	strd	r0, r1, [r5]
 8000732:	4630      	mov	r0, r6
 8000734:	4631      	mov	r1, r6
 8000736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073a:	fab3 f683 	clz	r6, r3
 800073e:	2e00      	cmp	r6, #0
 8000740:	d14a      	bne.n	80007d8 <__udivmoddi4+0x160>
 8000742:	428b      	cmp	r3, r1
 8000744:	d302      	bcc.n	800074c <__udivmoddi4+0xd4>
 8000746:	4282      	cmp	r2, r0
 8000748:	f200 80f9 	bhi.w	800093e <__udivmoddi4+0x2c6>
 800074c:	1a84      	subs	r4, r0, r2
 800074e:	eb61 0303 	sbc.w	r3, r1, r3
 8000752:	2001      	movs	r0, #1
 8000754:	469e      	mov	lr, r3
 8000756:	2d00      	cmp	r5, #0
 8000758:	d0e0      	beq.n	800071c <__udivmoddi4+0xa4>
 800075a:	e9c5 4e00 	strd	r4, lr, [r5]
 800075e:	e7dd      	b.n	800071c <__udivmoddi4+0xa4>
 8000760:	b902      	cbnz	r2, 8000764 <__udivmoddi4+0xec>
 8000762:	deff      	udf	#255	; 0xff
 8000764:	fab2 f282 	clz	r2, r2
 8000768:	2a00      	cmp	r2, #0
 800076a:	f040 8092 	bne.w	8000892 <__udivmoddi4+0x21a>
 800076e:	eba1 010c 	sub.w	r1, r1, ip
 8000772:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000776:	fa1f fe8c 	uxth.w	lr, ip
 800077a:	2601      	movs	r6, #1
 800077c:	0c20      	lsrs	r0, r4, #16
 800077e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000782:	fb07 1113 	mls	r1, r7, r3, r1
 8000786:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800078a:	fb0e f003 	mul.w	r0, lr, r3
 800078e:	4288      	cmp	r0, r1
 8000790:	d908      	bls.n	80007a4 <__udivmoddi4+0x12c>
 8000792:	eb1c 0101 	adds.w	r1, ip, r1
 8000796:	f103 38ff 	add.w	r8, r3, #4294967295
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x12a>
 800079c:	4288      	cmp	r0, r1
 800079e:	f200 80cb 	bhi.w	8000938 <__udivmoddi4+0x2c0>
 80007a2:	4643      	mov	r3, r8
 80007a4:	1a09      	subs	r1, r1, r0
 80007a6:	b2a4      	uxth	r4, r4
 80007a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007ac:	fb07 1110 	mls	r1, r7, r0, r1
 80007b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007b4:	fb0e fe00 	mul.w	lr, lr, r0
 80007b8:	45a6      	cmp	lr, r4
 80007ba:	d908      	bls.n	80007ce <__udivmoddi4+0x156>
 80007bc:	eb1c 0404 	adds.w	r4, ip, r4
 80007c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007c4:	d202      	bcs.n	80007cc <__udivmoddi4+0x154>
 80007c6:	45a6      	cmp	lr, r4
 80007c8:	f200 80bb 	bhi.w	8000942 <__udivmoddi4+0x2ca>
 80007cc:	4608      	mov	r0, r1
 80007ce:	eba4 040e 	sub.w	r4, r4, lr
 80007d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007d6:	e79c      	b.n	8000712 <__udivmoddi4+0x9a>
 80007d8:	f1c6 0720 	rsb	r7, r6, #32
 80007dc:	40b3      	lsls	r3, r6
 80007de:	fa22 fc07 	lsr.w	ip, r2, r7
 80007e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007e6:	fa20 f407 	lsr.w	r4, r0, r7
 80007ea:	fa01 f306 	lsl.w	r3, r1, r6
 80007ee:	431c      	orrs	r4, r3
 80007f0:	40f9      	lsrs	r1, r7
 80007f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007f6:	fa00 f306 	lsl.w	r3, r0, r6
 80007fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80007fe:	0c20      	lsrs	r0, r4, #16
 8000800:	fa1f fe8c 	uxth.w	lr, ip
 8000804:	fb09 1118 	mls	r1, r9, r8, r1
 8000808:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800080c:	fb08 f00e 	mul.w	r0, r8, lr
 8000810:	4288      	cmp	r0, r1
 8000812:	fa02 f206 	lsl.w	r2, r2, r6
 8000816:	d90b      	bls.n	8000830 <__udivmoddi4+0x1b8>
 8000818:	eb1c 0101 	adds.w	r1, ip, r1
 800081c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000820:	f080 8088 	bcs.w	8000934 <__udivmoddi4+0x2bc>
 8000824:	4288      	cmp	r0, r1
 8000826:	f240 8085 	bls.w	8000934 <__udivmoddi4+0x2bc>
 800082a:	f1a8 0802 	sub.w	r8, r8, #2
 800082e:	4461      	add	r1, ip
 8000830:	1a09      	subs	r1, r1, r0
 8000832:	b2a4      	uxth	r4, r4
 8000834:	fbb1 f0f9 	udiv	r0, r1, r9
 8000838:	fb09 1110 	mls	r1, r9, r0, r1
 800083c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000840:	fb00 fe0e 	mul.w	lr, r0, lr
 8000844:	458e      	cmp	lr, r1
 8000846:	d908      	bls.n	800085a <__udivmoddi4+0x1e2>
 8000848:	eb1c 0101 	adds.w	r1, ip, r1
 800084c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000850:	d26c      	bcs.n	800092c <__udivmoddi4+0x2b4>
 8000852:	458e      	cmp	lr, r1
 8000854:	d96a      	bls.n	800092c <__udivmoddi4+0x2b4>
 8000856:	3802      	subs	r0, #2
 8000858:	4461      	add	r1, ip
 800085a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800085e:	fba0 9402 	umull	r9, r4, r0, r2
 8000862:	eba1 010e 	sub.w	r1, r1, lr
 8000866:	42a1      	cmp	r1, r4
 8000868:	46c8      	mov	r8, r9
 800086a:	46a6      	mov	lr, r4
 800086c:	d356      	bcc.n	800091c <__udivmoddi4+0x2a4>
 800086e:	d053      	beq.n	8000918 <__udivmoddi4+0x2a0>
 8000870:	b15d      	cbz	r5, 800088a <__udivmoddi4+0x212>
 8000872:	ebb3 0208 	subs.w	r2, r3, r8
 8000876:	eb61 010e 	sbc.w	r1, r1, lr
 800087a:	fa01 f707 	lsl.w	r7, r1, r7
 800087e:	fa22 f306 	lsr.w	r3, r2, r6
 8000882:	40f1      	lsrs	r1, r6
 8000884:	431f      	orrs	r7, r3
 8000886:	e9c5 7100 	strd	r7, r1, [r5]
 800088a:	2600      	movs	r6, #0
 800088c:	4631      	mov	r1, r6
 800088e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000892:	f1c2 0320 	rsb	r3, r2, #32
 8000896:	40d8      	lsrs	r0, r3
 8000898:	fa0c fc02 	lsl.w	ip, ip, r2
 800089c:	fa21 f303 	lsr.w	r3, r1, r3
 80008a0:	4091      	lsls	r1, r2
 80008a2:	4301      	orrs	r1, r0
 80008a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a8:	fa1f fe8c 	uxth.w	lr, ip
 80008ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80008b0:	fb07 3610 	mls	r6, r7, r0, r3
 80008b4:	0c0b      	lsrs	r3, r1, #16
 80008b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008ba:	fb00 f60e 	mul.w	r6, r0, lr
 80008be:	429e      	cmp	r6, r3
 80008c0:	fa04 f402 	lsl.w	r4, r4, r2
 80008c4:	d908      	bls.n	80008d8 <__udivmoddi4+0x260>
 80008c6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ce:	d22f      	bcs.n	8000930 <__udivmoddi4+0x2b8>
 80008d0:	429e      	cmp	r6, r3
 80008d2:	d92d      	bls.n	8000930 <__udivmoddi4+0x2b8>
 80008d4:	3802      	subs	r0, #2
 80008d6:	4463      	add	r3, ip
 80008d8:	1b9b      	subs	r3, r3, r6
 80008da:	b289      	uxth	r1, r1
 80008dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80008e0:	fb07 3316 	mls	r3, r7, r6, r3
 80008e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e8:	fb06 f30e 	mul.w	r3, r6, lr
 80008ec:	428b      	cmp	r3, r1
 80008ee:	d908      	bls.n	8000902 <__udivmoddi4+0x28a>
 80008f0:	eb1c 0101 	adds.w	r1, ip, r1
 80008f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008f8:	d216      	bcs.n	8000928 <__udivmoddi4+0x2b0>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d914      	bls.n	8000928 <__udivmoddi4+0x2b0>
 80008fe:	3e02      	subs	r6, #2
 8000900:	4461      	add	r1, ip
 8000902:	1ac9      	subs	r1, r1, r3
 8000904:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000908:	e738      	b.n	800077c <__udivmoddi4+0x104>
 800090a:	462e      	mov	r6, r5
 800090c:	4628      	mov	r0, r5
 800090e:	e705      	b.n	800071c <__udivmoddi4+0xa4>
 8000910:	4606      	mov	r6, r0
 8000912:	e6e3      	b.n	80006dc <__udivmoddi4+0x64>
 8000914:	4618      	mov	r0, r3
 8000916:	e6f8      	b.n	800070a <__udivmoddi4+0x92>
 8000918:	454b      	cmp	r3, r9
 800091a:	d2a9      	bcs.n	8000870 <__udivmoddi4+0x1f8>
 800091c:	ebb9 0802 	subs.w	r8, r9, r2
 8000920:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000924:	3801      	subs	r0, #1
 8000926:	e7a3      	b.n	8000870 <__udivmoddi4+0x1f8>
 8000928:	4646      	mov	r6, r8
 800092a:	e7ea      	b.n	8000902 <__udivmoddi4+0x28a>
 800092c:	4620      	mov	r0, r4
 800092e:	e794      	b.n	800085a <__udivmoddi4+0x1e2>
 8000930:	4640      	mov	r0, r8
 8000932:	e7d1      	b.n	80008d8 <__udivmoddi4+0x260>
 8000934:	46d0      	mov	r8, sl
 8000936:	e77b      	b.n	8000830 <__udivmoddi4+0x1b8>
 8000938:	3b02      	subs	r3, #2
 800093a:	4461      	add	r1, ip
 800093c:	e732      	b.n	80007a4 <__udivmoddi4+0x12c>
 800093e:	4630      	mov	r0, r6
 8000940:	e709      	b.n	8000756 <__udivmoddi4+0xde>
 8000942:	4464      	add	r4, ip
 8000944:	3802      	subs	r0, #2
 8000946:	e742      	b.n	80007ce <__udivmoddi4+0x156>

08000948 <__aeabi_idiv0>:
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <LiquidCrystal_I2C>:
}
*/



void LiquidCrystal_I2C(uint8_t lcd_addr, uint8_t lcd_cols, uint8_t lcd_rows) {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
 8000956:	460b      	mov	r3, r1
 8000958:	71bb      	strb	r3, [r7, #6]
 800095a:	4613      	mov	r3, r2
 800095c:	717b      	strb	r3, [r7, #5]
	_addr = lcd_addr;
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <LiquidCrystal_I2C+0x3c>)
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	7013      	strb	r3, [r2, #0]
	_cols = lcd_cols;
 8000964:	4a09      	ldr	r2, [pc, #36]	; (800098c <LiquidCrystal_I2C+0x40>)
 8000966:	79bb      	ldrb	r3, [r7, #6]
 8000968:	7013      	strb	r3, [r2, #0]
	_rows = lcd_rows;
 800096a:	4a09      	ldr	r2, [pc, #36]	; (8000990 <LiquidCrystal_I2C+0x44>)
 800096c:	797b      	ldrb	r3, [r7, #5]
 800096e:	7013      	strb	r3, [r2, #0]
	_charsize = LCD_5x8DOTS;
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <LiquidCrystal_I2C+0x48>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
	_backlightval = LCD_BACKLIGHT;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <LiquidCrystal_I2C+0x4c>)
 8000978:	2208      	movs	r2, #8
 800097a:	701a      	strb	r2, [r3, #0]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	200000a0 	.word	0x200000a0
 800098c:	200000a4 	.word	0x200000a4
 8000990:	200000a5 	.word	0x200000a5
 8000994:	200000a6 	.word	0x200000a6
 8000998:	200000a7 	.word	0x200000a7

0800099c <lcdBegin>:

void lcdBegin(void) {
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80009a0:	4b32      	ldr	r3, [pc, #200]	; (8000a6c <lcdBegin+0xd0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]

	if (_rows > 1) {
 80009a6:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <lcdBegin+0xd4>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d906      	bls.n	80009bc <lcdBegin+0x20>
		_displayfunction |= LCD_2LINE;
 80009ae:	4b2f      	ldr	r3, [pc, #188]	; (8000a6c <lcdBegin+0xd0>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	f043 0308 	orr.w	r3, r3, #8
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <lcdBegin+0xd0>)
 80009ba:	701a      	strb	r2, [r3, #0]
	}

	setRowOffsets(0x00, 0x40, 0x00 + _cols, 0x40 + _cols);
 80009bc:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <lcdBegin+0xd8>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <lcdBegin+0xd8>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	3340      	adds	r3, #64	; 0x40
 80009c8:	2140      	movs	r1, #64	; 0x40
 80009ca:	2000      	movs	r0, #0
 80009cc:	f000 f900 	bl	8000bd0 <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((_charsize != 0) && (_rows == 1)) {
 80009d0:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <lcdBegin+0xdc>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d00a      	beq.n	80009ee <lcdBegin+0x52>
 80009d8:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <lcdBegin+0xd4>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d106      	bne.n	80009ee <lcdBegin+0x52>
		_displayfunction |= LCD_5x10DOTS;
 80009e0:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <lcdBegin+0xd0>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <lcdBegin+0xd0>)
 80009ec:	701a      	strb	r2, [r3, #0]
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	HAL_Delay(50);
 80009ee:	2032      	movs	r0, #50	; 0x32
 80009f0:	f001 fdb4 	bl	800255c <HAL_Delay>

	// Now we pull both RS and R/W low to begin commands
	write8bits(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
 80009f4:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <lcdBegin+0xe0>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 f959 	bl	8000cb0 <write8bits>
	HAL_Delay(1);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f001 fdac 	bl	800255c <HAL_Delay>
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	write4bits(0x03 << 4);
 8000a04:	2030      	movs	r0, #48	; 0x30
 8000a06:	f000 f941 	bl	8000c8c <write4bits>
	HAL_Delay(5); // wait min 4.1ms
 8000a0a:	2005      	movs	r0, #5
 8000a0c:	f001 fda6 	bl	800255c <HAL_Delay>

	// second try
	write4bits(0x03 << 4);
 8000a10:	2030      	movs	r0, #48	; 0x30
 8000a12:	f000 f93b 	bl	8000c8c <write4bits>
	HAL_Delay(5); // wait min 4.1ms
 8000a16:	2005      	movs	r0, #5
 8000a18:	f001 fda0 	bl	800255c <HAL_Delay>

	// third go!
	write4bits(0x03 << 4);
 8000a1c:	2030      	movs	r0, #48	; 0x30
 8000a1e:	f000 f935 	bl	8000c8c <write4bits>
	HAL_Delay(5);
 8000a22:	2005      	movs	r0, #5
 8000a24:	f001 fd9a 	bl	800255c <HAL_Delay>

	// finally, set to 4-bit interface
	write4bits(0x02 << 4);
 8000a28:	2020      	movs	r0, #32
 8000a2a:	f000 f92f 	bl	8000c8c <write4bits>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <lcdBegin+0xd0>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	f043 0320 	orr.w	r3, r3, #32
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 f8bb 	bl	8000bb4 <command>

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <lcdBegin+0xe4>)
 8000a40:	2204      	movs	r2, #4
 8000a42:	701a      	strb	r2, [r3, #0]
	lcdDisplay();
 8000a44:	f000 f834 	bl	8000ab0 <lcdDisplay>

	// clear it off
	lcdClear();
 8000a48:	f000 f81e 	bl	8000a88 <lcdClear>

	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <lcdBegin+0xe8>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <lcdBegin+0xe8>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f8a9 	bl	8000bb4 <command>

	lcdHome();
 8000a62:	f000 f81b 	bl	8000a9c <lcdHome>
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200000a1 	.word	0x200000a1
 8000a70:	200000a5 	.word	0x200000a5
 8000a74:	200000a4 	.word	0x200000a4
 8000a78:	200000a6 	.word	0x200000a6
 8000a7c:	200000a7 	.word	0x200000a7
 8000a80:	200000a2 	.word	0x200000a2
 8000a84:	200000a3 	.word	0x200000a3

08000a88 <lcdClear>:

/********** high level commands, for the user! */
void lcdClear(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f000 f891 	bl	8000bb4 <command>
	HAL_Delay(2);  // this command takes a long time!
 8000a92:	2002      	movs	r0, #2
 8000a94:	f001 fd62 	bl	800255c <HAL_Delay>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <lcdHome>:

void lcdHome(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	command(LCD_RETURNHOME);  // set cursor position to zero
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f000 f887 	bl	8000bb4 <command>
	HAL_Delay(2);  // this command takes a long time!
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f001 fd58 	bl	800255c <HAL_Delay>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <lcdDisplay>:
// Turn the display on/off (quickly)
void lcdNoDisplay(void) {
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void lcdDisplay(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <lcdDisplay+0x28>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <lcdDisplay+0x28>)
 8000ac0:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <lcdDisplay+0x28>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	f043 0308 	orr.w	r3, r3, #8
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 f871 	bl	8000bb4 <command>
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000a2 	.word	0x200000a2

08000adc <lcdSetCursor>:
	for (int i = 0; i < 8; i++) {
		lcdWrite(charmap[i]);
	}
}

void lcdSetCursor(uint8_t col, uint8_t row) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	460a      	mov	r2, r1
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	71bb      	strb	r3, [r7, #6]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8000aec:	2304      	movs	r3, #4
 8000aee:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 8000af0:	79bb      	ldrb	r3, [r7, #6]
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d803      	bhi.n	8000b00 <lcdSetCursor+0x24>
		row = max_lines - 1;    // we count rows starting w/0
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	3b01      	subs	r3, #1
 8000afe:	71bb      	strb	r3, [r7, #6]
	}
	if ( row >= _rows ) {
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <lcdSetCursor+0x5c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	79ba      	ldrb	r2, [r7, #6]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d303      	bcc.n	8000b12 <lcdSetCursor+0x36>
		row = _rows - 1;   		// we count rows starting w/0
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <lcdSetCursor+0x5c>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	71bb      	strb	r3, [r7, #6]
	}

	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000b12:	79bb      	ldrb	r3, [r7, #6]
 8000b14:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <lcdSetCursor+0x60>)
 8000b16:	5cd2      	ldrb	r2, [r2, r3]
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f843 	bl	8000bb4 <command>
}
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000a5 	.word	0x200000a5
 8000b3c:	200000a8 	.word	0x200000a8

08000b40 <lcdPrint>:

// This will print character string to the LCD
size_t lcdPrint(const char str[]) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	if (str == NULL) return 0;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d101      	bne.n	8000b52 <lcdPrint+0x12>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e01d      	b.n	8000b8e <lcdPrint+0x4e>

	const uint8_t *buffer = (const uint8_t *)str;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	617b      	str	r3, [r7, #20]
	size_t size = strlen(str);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff fb42 	bl	80001e0 <strlen>
 8000b5c:	6138      	str	r0, [r7, #16]
	size_t n = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]

	while (size--) {
 8000b62:	e00c      	b.n	8000b7e <lcdPrint+0x3e>
	if (lcdWrite(*buffer++)) n++;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	617a      	str	r2, [r7, #20]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 f812 	bl	8000b96 <lcdWrite>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d008      	beq.n	8000b8a <lcdPrint+0x4a>
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
	while (size--) {
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	1e5a      	subs	r2, r3, #1
 8000b82:	613a      	str	r2, [r7, #16]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1ed      	bne.n	8000b64 <lcdPrint+0x24>
 8000b88:	e000      	b.n	8000b8c <lcdPrint+0x4c>
	else break;
 8000b8a:	bf00      	nop
	}
	return n;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <lcdWrite>:

/*********** mid level commands, for sending data/cmds */
size_t lcdWrite(uint8_t value) {
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71fb      	strb	r3, [r7, #7]
	send(value, Rs);
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 f850 	bl	8000c4a <send>
	return 1;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <command>:

void command(uint8_t value) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	send(value, 0);
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f841 	bl	8000c4a <send>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <setRowOffsets>:

/************ low level data pushing commands **********/
void setRowOffsets(int row0, int row1, int row2, int row3) {
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <setRowOffsets+0x3c>)
 8000be4:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <setRowOffsets+0x3c>)
 8000bec:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <setRowOffsets+0x3c>)
 8000bf4:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <setRowOffsets+0x3c>)
 8000bfc:	70da      	strb	r2, [r3, #3]
}
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	200000a8 	.word	0x200000a8

08000c10 <pulseEnable>:

void pulseEnable(uint8_t _data) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
	write8bits(_data | En);		// En high
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f844 	bl	8000cb0 <write8bits>
	HAL_Delay(1);
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f001 fc97 	bl	800255c <HAL_Delay>
	//DWT_Delay_us(5);		// enable pulse must be >450ns //To Be Checked

	write8bits(_data & ~En);	// En low
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f023 0304 	bic.w	r3, r3, #4
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 f83a 	bl	8000cb0 <write8bits>
	HAL_Delay(1);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f001 fc8d 	bl	800255c <HAL_Delay>
	//DWT_Delay_us(1);		// commands need > 37us to settle //To Be Checked
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <send>:

// write either command or data
void send(uint8_t value, uint8_t mode) {
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b084      	sub	sp, #16
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	460a      	mov	r2, r1
 8000c54:	71fb      	strb	r3, [r7, #7]
 8000c56:	4613      	mov	r3, r2
 8000c58:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib = value & 0xf0;
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f023 030f 	bic.w	r3, r3, #15
 8000c60:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (value << 4) & 0xf0;
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	011b      	lsls	r3, r3, #4
 8000c66:	73bb      	strb	r3, [r7, #14]
	write4bits((highnib) | mode);
 8000c68:	7bfa      	ldrb	r2, [r7, #15]
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 f80b 	bl	8000c8c <write4bits>
	write4bits((lownib) | mode);
 8000c76:	7bba      	ldrb	r2, [r7, #14]
 8000c78:	79bb      	ldrb	r3, [r7, #6]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f804 	bl	8000c8c <write4bits>
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <write4bits>:

void write4bits(uint8_t value) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
	write8bits(value);
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f809 	bl	8000cb0 <write8bits>
	pulseEnable(value);
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ffb5 	bl	8000c10 <pulseEnable>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <write8bits>:

void write8bits(uint8_t _data){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af02      	add	r7, sp, #8
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	uint8_t data_t[1];
	data_t[0] = _data | _backlightval;
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <write8bits+0x34>)
 8000cbc:	781a      	ldrb	r2, [r3, #0]
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit (&hi2c1, _addr, (uint8_t *) data_t, 1, 100);
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <write8bits+0x38>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	b299      	uxth	r1, r3
 8000ccc:	f107 020c 	add.w	r2, r7, #12
 8000cd0:	2364      	movs	r3, #100	; 0x64
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <write8bits+0x3c>)
 8000cd8:	f002 f870 	bl	8002dbc <HAL_I2C_Master_Transmit>
}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200000a7 	.word	0x200000a7
 8000ce8:	200000a0 	.word	0x200000a0
 8000cec:	200004ac 	.word	0x200004ac

08000cf0 <ee_init>:
uint8_t ee_ram[_EE_USE_RAM_BYTE];
#endif

//##########################################################################################################
bool ee_init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  return ee_read(0, _EE_USE_RAM_BYTE, NULL);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 f804 	bl	8000d08 <ee_read>
 8000d00:	4603      	mov	r3, r0
#else
  return true;
#endif
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <ee_read>:
  HAL_FLASH_Lock();
  return false;
}
//##########################################################################################################
bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b087      	sub	sp, #28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 8000d14:	68fa      	ldr	r2, [r7, #12]
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	4413      	add	r3, r2
 8000d1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d1e:	d901      	bls.n	8000d24 <ee_read+0x1c>
    return false;
 8000d20:	2300      	movs	r3, #0
 8000d22:	e02b      	b.n	8000d7c <ee_read+0x74>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	e021      	b.n	8000d6e <ee_read+0x66>
  {
    if (data != NULL)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d00b      	beq.n	8000d48 <ee_read+0x40>
    {
      *data = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000d36:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	701a      	strb	r2, [r3, #0]
      data++;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3301      	adds	r3, #1
 8000d46:	607b      	str	r3, [r7, #4]
    }
#if (_EE_USE_RAM_BYTE > 0)
    if (i < _EE_USE_RAM_BYTE)
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d4e:	d20b      	bcs.n	8000d68 <ee_read+0x60>
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000d56:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b2d9      	uxtb	r1, r3
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <ee_read+0x80>)
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	4413      	add	r3, r2
 8000d64:	460a      	mov	r2, r1
 8000d66:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d3d7      	bcc.n	8000d2a <ee_read+0x22>
#endif
  }
  return true;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	371c      	adds	r7, #28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	200000ac 	.word	0x200000ac

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d90:	f001 fb72 	bl	8002478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d94:	f000 fabc 	bl	8001310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d98:	f000 fca6 	bl	80016e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d9c:	f000 fb22 	bl	80013e4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000da0:	f000 fb4e 	bl	8001440 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000da4:	f000 fbac 	bl	8001500 <MX_TIM2_Init>
  MX_TIM11_Init();
 8000da8:	f000 fc5e 	bl	8001668 <MX_TIM11_Init>
  MX_TIM10_Init();
 8000dac:	f000 fc1c 	bl	80015e8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  ee_init();
 8000db0:	f7ff ff9e 	bl	8000cf0 <ee_init>

  //static uint8_t data_saved[4] = {1,2,3,4};
  //ee_writeToRam(0, 4, data_saved);
  //ee_commit();

  LiquidCrystal_I2C(0x4E, 20, 4);	//Initialization of LCD (Select your LCD address)
 8000db4:	2204      	movs	r2, #4
 8000db6:	2114      	movs	r1, #20
 8000db8:	204e      	movs	r0, #78	; 0x4e
 8000dba:	f7ff fdc7 	bl	800094c <LiquidCrystal_I2C>
  lcdBegin();
 8000dbe:	f7ff fded 	bl	800099c <lcdBegin>
  lcdSetCursor(2,1);
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	2002      	movs	r0, #2
 8000dc6:	f7ff fe89 	bl	8000adc <lcdSetCursor>
  lcdPrint("Power Feed V2.0");
 8000dca:	489c      	ldr	r0, [pc, #624]	; (800103c <main+0x2b0>)
 8000dcc:	f7ff feb8 	bl	8000b40 <lcdPrint>
  HAL_Delay(2000);
 8000dd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dd4:	f001 fbc2 	bl	800255c <HAL_Delay>
  lcdClear();
 8000dd8:	f7ff fe56 	bl	8000a88 <lcdClear>
  lcd_update = FALSE;				//LCD has been updated
 8000ddc:	4b98      	ldr	r3, [pc, #608]	; (8001040 <main+0x2b4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	801a      	strh	r2, [r3, #0]

  /* Encoder Initialization */
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000de2:	213c      	movs	r1, #60	; 0x3c
 8000de4:	4897      	ldr	r0, [pc, #604]	; (8001044 <main+0x2b8>)
 8000de6:	f003 f9fb 	bl	80041e0 <HAL_TIM_Encoder_Start_IT>
  /* Initialization Timers */
  HAL_TIM_Base_Start_IT(&htim11);	//Timer for debouncing
 8000dea:	4897      	ldr	r0, [pc, #604]	; (8001048 <main+0x2bc>)
 8000dec:	f002 ff82 	bl	8003cf4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);	//Timer for acceleration update
 8000df0:	4896      	ldr	r0, [pc, #600]	; (800104c <main+0x2c0>)
 8000df2:	f002 ff7f 	bl	8003cf4 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  switch (state)
 8000df6:	4b96      	ldr	r3, [pc, #600]	; (8001050 <main+0x2c4>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d8fb      	bhi.n	8000df6 <main+0x6a>
 8000dfe:	a201      	add	r2, pc, #4	; (adr r2, 8000e04 <main+0x78>)
 8000e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e04:	08000e15 	.word	0x08000e15
 8000e08:	08000f3b 	.word	0x08000f3b
 8000e0c:	08001129 	.word	0x08001129
 8000e10:	08000e75 	.word	0x08000e75
	  {
	  	  case INITIALIZATION:	//Initialization state
	  		  if ( Switch_Status_Read() != MID ){	//If the switch is not in MID state, report error
 8000e14:	f000 ffbc 	bl	8001d90 <Switch_Status_Read>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d00e      	beq.n	8000e3c <main+0xb0>
	  			  lcdSetCursor(8,1);				//Print Error message
 8000e1e:	2101      	movs	r1, #1
 8000e20:	2008      	movs	r0, #8
 8000e22:	f7ff fe5b 	bl	8000adc <lcdSetCursor>
	  			  lcdPrint("ERROR!");
 8000e26:	488b      	ldr	r0, [pc, #556]	; (8001054 <main+0x2c8>)
 8000e28:	f7ff fe8a 	bl	8000b40 <lcdPrint>
	  			  lcdSetCursor(3,2);
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f7ff fe54 	bl	8000adc <lcdSetCursor>
	  			  lcdPrint("Release Switch");
 8000e34:	4888      	ldr	r0, [pc, #544]	; (8001058 <main+0x2cc>)
 8000e36:	f7ff fe83 	bl	8000b40 <lcdPrint>
				  lcdSetCursor(0,1);
				  lcdPrint("Mode: STOP ");
				  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
				  state = STANDBY;								//Go to standby
	  		  }
	  		  break;
 8000e3a:	e247      	b.n	80012cc <main+0x540>
	  			  lcdClear();
 8000e3c:	f7ff fe24 	bl	8000a88 <lcdClear>
				  lcdSetCursor(0,0);
 8000e40:	2100      	movs	r1, #0
 8000e42:	2000      	movs	r0, #0
 8000e44:	f7ff fe4a 	bl	8000adc <lcdSetCursor>
				  lcdPrint("Feed Rate:");
 8000e48:	4884      	ldr	r0, [pc, #528]	; (800105c <main+0x2d0>)
 8000e4a:	f7ff fe79 	bl	8000b40 <lcdPrint>
				  lcdSetCursor(0,1);
 8000e4e:	2101      	movs	r1, #1
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff fe43 	bl	8000adc <lcdSetCursor>
				  lcdPrint("Mode: STOP ");
 8000e56:	4882      	ldr	r0, [pc, #520]	; (8001060 <main+0x2d4>)
 8000e58:	f7ff fe72 	bl	8000b40 <lcdPrint>
				  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 8000e5c:	4b81      	ldr	r3, [pc, #516]	; (8001064 <main+0x2d8>)
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	2200      	movs	r2, #0
 8000e64:	210b      	movs	r1, #11
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 ff74 	bl	8001d54 <LCD_Write_Feedrate>
				  state = STANDBY;								//Go to standby
 8000e6c:	4b78      	ldr	r3, [pc, #480]	; (8001050 <main+0x2c4>)
 8000e6e:	2203      	movs	r2, #3
 8000e70:	801a      	strh	r2, [r3, #0]
	  		  break;
 8000e72:	e22b      	b.n	80012cc <main+0x540>
	  	  case STANDBY:		//Standby state (Not movement, switch in the middle)
	  		Update_Feedrate(&target_feedrate);				//Update the feedrate from encoder
 8000e74:	487c      	ldr	r0, [pc, #496]	; (8001068 <main+0x2dc>)
 8000e76:	f000 ffd5 	bl	8001e24 <Update_Feedrate>
	  		display_feedrate = target_feedrate;				//Update variable to display the feedrate
 8000e7a:	4b7b      	ldr	r3, [pc, #492]	; (8001068 <main+0x2dc>)
 8000e7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e80:	4b78      	ldr	r3, [pc, #480]	; (8001064 <main+0x2d8>)
 8000e82:	801a      	strh	r2, [r3, #0]
	  		LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 8000e84:	4b77      	ldr	r3, [pc, #476]	; (8001064 <main+0x2d8>)
 8000e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	210b      	movs	r1, #11
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 ff60 	bl	8001d54 <LCD_Write_Feedrate>
	  		if ( Encoder_Switch_Status_Read() ){			//Check if the encoder is pressed to change the step mode
 8000e94:	f001 f810 	bl	8001eb8 <Encoder_Switch_Status_Read>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00e      	beq.n	8000ebc <main+0x130>
	  			if (step_mode == STEP_NORMAL){
 8000e9e:	4b73      	ldr	r3, [pc, #460]	; (800106c <main+0x2e0>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d103      	bne.n	8000eae <main+0x122>
	  				step_mode = STEP_x10;
 8000ea6:	4b71      	ldr	r3, [pc, #452]	; (800106c <main+0x2e0>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	801a      	strh	r2, [r3, #0]
 8000eac:	e006      	b.n	8000ebc <main+0x130>
	  			}else if(step_mode == STEP_x10){
 8000eae:	4b6f      	ldr	r3, [pc, #444]	; (800106c <main+0x2e0>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d102      	bne.n	8000ebc <main+0x130>
	  				step_mode = STEP_NORMAL;
 8000eb6:	4b6d      	ldr	r3, [pc, #436]	; (800106c <main+0x2e0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	801a      	strh	r2, [r3, #0]
	  			}
	  		}
	  		if (lcd_update){				//Update the LCD coming from others states
 8000ebc:	4b60      	ldr	r3, [pc, #384]	; (8001040 <main+0x2b4>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d009      	beq.n	8000ed8 <main+0x14c>
	  			lcdSetCursor(0,1);
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff fe08 	bl	8000adc <lcdSetCursor>
	  			lcdPrint("Mode: STOP ");
 8000ecc:	4864      	ldr	r0, [pc, #400]	; (8001060 <main+0x2d4>)
 8000ece:	f7ff fe37 	bl	8000b40 <lcdPrint>
	  			lcd_update = FALSE;			//Reset flag for LCD Update
 8000ed2:	4b5b      	ldr	r3, [pc, #364]	; (8001040 <main+0x2b4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	801a      	strh	r2, [r3, #0]
	  		}
	  		if (previous_state != STANDBY){		//If previous status is Standby the enable motor and direction
 8000ed8:	4b65      	ldr	r3, [pc, #404]	; (8001070 <main+0x2e4>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	d002      	beq.n	8000ee6 <main+0x15a>
	  			previous_state = STANDBY;		//Change previous state to current one
 8000ee0:	4b63      	ldr	r3, [pc, #396]	; (8001070 <main+0x2e4>)
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	801a      	strh	r2, [r3, #0]
	  		}
	  		if ( ( Switch_Status_Read() == RIGHT ) && ( current_feedrate == 0 ) ){		//Check if the switch is on right mode
 8000ee6:	f000 ff53 	bl	8001d90 <Switch_Status_Read>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d10e      	bne.n	8000f0e <main+0x182>
 8000ef0:	4b60      	ldr	r3, [pc, #384]	; (8001074 <main+0x2e8>)
 8000ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d109      	bne.n	8000f0e <main+0x182>
	  			previous_state = STANDBY;		//Setting previous state to STANDBY
 8000efa:	4b5d      	ldr	r3, [pc, #372]	; (8001070 <main+0x2e4>)
 8000efc:	2203      	movs	r2, #3
 8000efe:	801a      	strh	r2, [r3, #0]
	  			state = MOVE_RIGHT;				//Change state to RIGHT
 8000f00:	4b53      	ldr	r3, [pc, #332]	; (8001050 <main+0x2c4>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	801a      	strh	r2, [r3, #0]
	  			lcd_update = TRUE;				//Set flag for LCD update
 8000f06:	4b4e      	ldr	r3, [pc, #312]	; (8001040 <main+0x2b4>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	801a      	strh	r2, [r3, #0]
	  		}else if ( ( Switch_Status_Read() == LEFT ) && ( current_feedrate == 0 ) ){	//Check if the switch is on left mode
	  			previous_state = STANDBY;		//Setting previous state to STANDBY
	  			state = MOVE_LEFT;				//Change state to RIGHT
	  			lcd_update = TRUE;				//Set flag for LCD update
	  		}
	  		  break;
 8000f0c:	e1d9      	b.n	80012c2 <main+0x536>
	  		}else if ( ( Switch_Status_Read() == LEFT ) && ( current_feedrate == 0 ) ){	//Check if the switch is on left mode
 8000f0e:	f000 ff3f 	bl	8001d90 <Switch_Status_Read>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f040 81d4 	bne.w	80012c2 <main+0x536>
 8000f1a:	4b56      	ldr	r3, [pc, #344]	; (8001074 <main+0x2e8>)
 8000f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f040 81ce 	bne.w	80012c2 <main+0x536>
	  			previous_state = STANDBY;		//Setting previous state to STANDBY
 8000f26:	4b52      	ldr	r3, [pc, #328]	; (8001070 <main+0x2e4>)
 8000f28:	2203      	movs	r2, #3
 8000f2a:	801a      	strh	r2, [r3, #0]
	  			state = MOVE_LEFT;				//Change state to RIGHT
 8000f2c:	4b48      	ldr	r3, [pc, #288]	; (8001050 <main+0x2c4>)
 8000f2e:	2202      	movs	r2, #2
 8000f30:	801a      	strh	r2, [r3, #0]
	  			lcd_update = TRUE;				//Set flag for LCD update
 8000f32:	4b43      	ldr	r3, [pc, #268]	; (8001040 <main+0x2b4>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	801a      	strh	r2, [r3, #0]
	  		  break;
 8000f38:	e1c3      	b.n	80012c2 <main+0x536>
	  	  case MOVE_RIGHT:	//Right state, movement to the RIGHT
	  		  encoder_sw_status = Encoder_Switch_Status_Read();
 8000f3a:	f000 ffbd 	bl	8001eb8 <Encoder_Switch_Status_Read>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	4b4d      	ldr	r3, [pc, #308]	; (8001078 <main+0x2ec>)
 8000f44:	801a      	strh	r2, [r3, #0]
	  		  aux_sw_status = Aux_Switch_Status_Read();
 8000f46:	f001 f81b 	bl	8001f80 <Aux_Switch_Status_Read>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	4b4b      	ldr	r3, [pc, #300]	; (800107c <main+0x2f0>)
 8000f50:	801a      	strh	r2, [r3, #0]
	  		  if ( encoder_sw_status == TRUE ){	//Check if the encoder is pressed to change the step mode
 8000f52:	4b49      	ldr	r3, [pc, #292]	; (8001078 <main+0x2ec>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d10e      	bne.n	8000f78 <main+0x1ec>
	  			  if (step_mode == STEP_NORMAL){
 8000f5a:	4b44      	ldr	r3, [pc, #272]	; (800106c <main+0x2e0>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d103      	bne.n	8000f6a <main+0x1de>
	  				  step_mode = STEP_x10;
 8000f62:	4b42      	ldr	r3, [pc, #264]	; (800106c <main+0x2e0>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	801a      	strh	r2, [r3, #0]
 8000f68:	e006      	b.n	8000f78 <main+0x1ec>
	  			  }else if(step_mode == STEP_x10){
 8000f6a:	4b40      	ldr	r3, [pc, #256]	; (800106c <main+0x2e0>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d102      	bne.n	8000f78 <main+0x1ec>
	  				  step_mode = STEP_NORMAL;
 8000f72:	4b3e      	ldr	r3, [pc, #248]	; (800106c <main+0x2e0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	801a      	strh	r2, [r3, #0]
	  			  }
	  		  }
	  		  if (  aux_sw_status == TRUE_HOLD ){
 8000f78:	4b40      	ldr	r3, [pc, #256]	; (800107c <main+0x2f0>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d105      	bne.n	8000f8c <main+0x200>
		  		target_feedrate = FAST_MOVEMENT_FEEDRATE;
 8000f80:	4b3f      	ldr	r3, [pc, #252]	; (8001080 <main+0x2f4>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	4b38      	ldr	r3, [pc, #224]	; (8001068 <main+0x2dc>)
 8000f88:	801a      	strh	r2, [r3, #0]
 8000f8a:	e008      	b.n	8000f9e <main+0x212>
	  		  }else if ( aux_sw_status == FALSE ){
 8000f8c:	4b3b      	ldr	r3, [pc, #236]	; (800107c <main+0x2f0>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d104      	bne.n	8000f9e <main+0x212>
		  		target_feedrate = display_feedrate;
 8000f94:	4b33      	ldr	r3, [pc, #204]	; (8001064 <main+0x2d8>)
 8000f96:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f9a:	4b33      	ldr	r3, [pc, #204]	; (8001068 <main+0x2dc>)
 8000f9c:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  sw_status = Switch_Status_Read();		//Read the switch
 8000f9e:	f000 fef7 	bl	8001d90 <Switch_Status_Read>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b37      	ldr	r3, [pc, #220]	; (8001084 <main+0x2f8>)
 8000fa8:	801a      	strh	r2, [r3, #0]
	  		  if ( sw_status == RIGHT ){			//If it is on right position, update the feedrate target comming from others modes
 8000faa:	4b36      	ldr	r3, [pc, #216]	; (8001084 <main+0x2f8>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d126      	bne.n	8001000 <main+0x274>
	  			  if (target_feedrate == 0){
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <main+0x2dc>)
 8000fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d104      	bne.n	8000fc6 <main+0x23a>
	  				  target_feedrate = display_feedrate;
 8000fbc:	4b29      	ldr	r3, [pc, #164]	; (8001064 <main+0x2d8>)
 8000fbe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fc2:	4b29      	ldr	r3, [pc, #164]	; (8001068 <main+0x2dc>)
 8000fc4:	801a      	strh	r2, [r3, #0]
	  			  }
	  			  if ( aux_sw_status != TRUE_HOLD ){
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	; (800107c <main+0x2f0>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d07b      	beq.n	80010c6 <main+0x33a>
					  Update_Feedrate(&target_feedrate);				//Update the feedrate from encoder
 8000fce:	4826      	ldr	r0, [pc, #152]	; (8001068 <main+0x2dc>)
 8000fd0:	f000 ff28 	bl	8001e24 <Update_Feedrate>
					  if (display_feedrate != target_feedrate){			//Check if the feedrate changed to update LCD
 8000fd4:	4b23      	ldr	r3, [pc, #140]	; (8001064 <main+0x2d8>)
 8000fd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fda:	4b23      	ldr	r3, [pc, #140]	; (8001068 <main+0x2dc>)
 8000fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d070      	beq.n	80010c6 <main+0x33a>
						  display_feedrate = target_feedrate;
 8000fe4:	4b20      	ldr	r3, [pc, #128]	; (8001068 <main+0x2dc>)
 8000fe6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fea:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <main+0x2d8>)
 8000fec:	801a      	strh	r2, [r3, #0]
						  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <main+0x2d8>)
 8000ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	210b      	movs	r1, #11
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 feab 	bl	8001d54 <LCD_Write_Feedrate>
 8000ffe:	e062      	b.n	80010c6 <main+0x33a>
					  }
	  			  }
	  		  }else if ( sw_status == LEFT){		//If it is on left position, change to left, set feedrate to zero
 8001000:	4b20      	ldr	r3, [pc, #128]	; (8001084 <main+0x2f8>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d141      	bne.n	800108c <main+0x300>
		  		target_feedrate = 0;
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <main+0x2dc>)
 800100a:	2200      	movs	r2, #0
 800100c:	801a      	strh	r2, [r3, #0]
			  	if ( current_feedrate == 0 ){		//If motor is stopped then move to left status
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <main+0x2e8>)
 8001010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d156      	bne.n	80010c6 <main+0x33a>
			  		state = MOVE_LEFT;				//Change state to left
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <main+0x2c4>)
 800101a:	2202      	movs	r2, #2
 800101c:	801a      	strh	r2, [r3, #0]
			  		lcd_update = TRUE;				//Set flag to update display
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <main+0x2b4>)
 8001020:	2201      	movs	r2, #1
 8001022:	801a      	strh	r2, [r3, #0]
			  		Motor_Disable(en_invert);		//Disable Motor
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <main+0x2fc>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fd4b 	bl	8001ac4 <Motor_Disable>
			  		target_feedrate = display_feedrate;	//Update feedrate
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <main+0x2d8>)
 8001030:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <main+0x2dc>)
 8001036:	801a      	strh	r2, [r3, #0]
			  		break;							//Exit this state
 8001038:	e148      	b.n	80012cc <main+0x540>
 800103a:	bf00      	nop
 800103c:	080058a4 	.word	0x080058a4
 8001040:	20000634 	.word	0x20000634
 8001044:	20000500 	.word	0x20000500
 8001048:	200005d8 	.word	0x200005d8
 800104c:	20000590 	.word	0x20000590
 8001050:	20000620 	.word	0x20000620
 8001054:	080058b4 	.word	0x080058b4
 8001058:	080058bc 	.word	0x080058bc
 800105c:	080058cc 	.word	0x080058cc
 8001060:	080058d8 	.word	0x080058d8
 8001064:	2000000e 	.word	0x2000000e
 8001068:	2000000c 	.word	0x2000000c
 800106c:	20000624 	.word	0x20000624
 8001070:	20000622 	.word	0x20000622
 8001074:	2000062a 	.word	0x2000062a
 8001078:	2000062e 	.word	0x2000062e
 800107c:	20000630 	.word	0x20000630
 8001080:	2000000a 	.word	0x2000000a
 8001084:	2000062c 	.word	0x2000062c
 8001088:	20000626 	.word	0x20000626
			  	}
	  		  }else if ( sw_status == MID ){		//If it is on Mid position, change to STOP or STANDBY status
 800108c:	4b90      	ldr	r3, [pc, #576]	; (80012d0 <main+0x544>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d118      	bne.n	80010c6 <main+0x33a>
	  			target_feedrate = 0;
 8001094:	4b8f      	ldr	r3, [pc, #572]	; (80012d4 <main+0x548>)
 8001096:	2200      	movs	r2, #0
 8001098:	801a      	strh	r2, [r3, #0]
	  			if ( current_feedrate == 0 ){
 800109a:	4b8f      	ldr	r3, [pc, #572]	; (80012d8 <main+0x54c>)
 800109c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d110      	bne.n	80010c6 <main+0x33a>
	  				state = STANDBY;				//Change state to standby
 80010a4:	4b8d      	ldr	r3, [pc, #564]	; (80012dc <main+0x550>)
 80010a6:	2203      	movs	r2, #3
 80010a8:	801a      	strh	r2, [r3, #0]
	  				lcd_update = TRUE;				//Set flag to update display
 80010aa:	4b8d      	ldr	r3, [pc, #564]	; (80012e0 <main+0x554>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	801a      	strh	r2, [r3, #0]
	  				Motor_Disable(en_invert);		//Disable Motor
 80010b0:	4b8c      	ldr	r3, [pc, #560]	; (80012e4 <main+0x558>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fd05 	bl	8001ac4 <Motor_Disable>
	  				target_feedrate = display_feedrate;	//Update feedrate
 80010ba:	4b8b      	ldr	r3, [pc, #556]	; (80012e8 <main+0x55c>)
 80010bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010c0:	4b84      	ldr	r3, [pc, #528]	; (80012d4 <main+0x548>)
 80010c2:	801a      	strh	r2, [r3, #0]
	  				break;							//Exit this state
 80010c4:	e102      	b.n	80012cc <main+0x540>
	  			}
	  		  }
	  		  if (lcd_update){				//Update the LCD coming from others states
 80010c6:	4b86      	ldr	r3, [pc, #536]	; (80012e0 <main+0x554>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d009      	beq.n	80010e2 <main+0x356>
	  			  lcdSetCursor(0,1);
 80010ce:	2101      	movs	r1, #1
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fd03 	bl	8000adc <lcdSetCursor>
	  			  lcdPrint("Mode: RIGHT");
 80010d6:	4885      	ldr	r0, [pc, #532]	; (80012ec <main+0x560>)
 80010d8:	f7ff fd32 	bl	8000b40 <lcdPrint>
	  			  lcd_update = FALSE;			//Reset flag for LCD Update
 80010dc:	4b80      	ldr	r3, [pc, #512]	; (80012e0 <main+0x554>)
 80010de:	2200      	movs	r2, #0
 80010e0:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (previous_state != MOVE_RIGHT){		//If previous status is Standby the enable motor and direcction
 80010e2:	4b83      	ldr	r3, [pc, #524]	; (80012f0 <main+0x564>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d00d      	beq.n	8001106 <main+0x37a>
				  Motor_Direction(RIGHT, dir_invert);	//Set direction to right
 80010ea:	4b82      	ldr	r3, [pc, #520]	; (80012f4 <main+0x568>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	4619      	mov	r1, r3
 80010f0:	2001      	movs	r0, #1
 80010f2:	f000 fcff 	bl	8001af4 <Motor_Direction>
				  Motor_Enable(en_invert);				//Enable Motor
 80010f6:	4b7b      	ldr	r3, [pc, #492]	; (80012e4 <main+0x558>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fccc 	bl	8001a98 <Motor_Enable>
				  previous_state = MOVE_RIGHT;			//Change previous state to current one
 8001100:	4b7b      	ldr	r3, [pc, #492]	; (80012f0 <main+0x564>)
 8001102:	2201      	movs	r2, #1
 8001104:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (update_speed){					//Update speed if the flag is set
 8001106:	4b7c      	ldr	r3, [pc, #496]	; (80012f8 <main+0x56c>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 80db 	beq.w	80012c6 <main+0x53a>
	  			  current_feedrate = Motor_Feedrate_Update(&current_feedrate, &target_feedrate);
 8001110:	4970      	ldr	r1, [pc, #448]	; (80012d4 <main+0x548>)
 8001112:	4871      	ldr	r0, [pc, #452]	; (80012d8 <main+0x54c>)
 8001114:	f000 fd60 	bl	8001bd8 <Motor_Feedrate_Update>
 8001118:	4603      	mov	r3, r0
 800111a:	b21a      	sxth	r2, r3
 800111c:	4b6e      	ldr	r3, [pc, #440]	; (80012d8 <main+0x54c>)
 800111e:	801a      	strh	r2, [r3, #0]
				  update_speed = 0;					//Reset the update_speed flag
 8001120:	4b75      	ldr	r3, [pc, #468]	; (80012f8 <main+0x56c>)
 8001122:	2200      	movs	r2, #0
 8001124:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  break;
 8001126:	e0ce      	b.n	80012c6 <main+0x53a>
	  	  case MOVE_LEFT:
	  		  encoder_sw_status = Encoder_Switch_Status_Read();
 8001128:	f000 fec6 	bl	8001eb8 <Encoder_Switch_Status_Read>
 800112c:	4603      	mov	r3, r0
 800112e:	b29a      	uxth	r2, r3
 8001130:	4b72      	ldr	r3, [pc, #456]	; (80012fc <main+0x570>)
 8001132:	801a      	strh	r2, [r3, #0]
	  		  aux_sw_status = Aux_Switch_Status_Read();
 8001134:	f000 ff24 	bl	8001f80 <Aux_Switch_Status_Read>
 8001138:	4603      	mov	r3, r0
 800113a:	b29a      	uxth	r2, r3
 800113c:	4b70      	ldr	r3, [pc, #448]	; (8001300 <main+0x574>)
 800113e:	801a      	strh	r2, [r3, #0]
	  		  if ( encoder_sw_status == TRUE ){	//Check if the encoder is pressed to change the step mode
 8001140:	4b6e      	ldr	r3, [pc, #440]	; (80012fc <main+0x570>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d10e      	bne.n	8001166 <main+0x3da>
	  			  if (step_mode == STEP_NORMAL){
 8001148:	4b6e      	ldr	r3, [pc, #440]	; (8001304 <main+0x578>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d103      	bne.n	8001158 <main+0x3cc>
	  				  step_mode = STEP_x10;
 8001150:	4b6c      	ldr	r3, [pc, #432]	; (8001304 <main+0x578>)
 8001152:	2201      	movs	r2, #1
 8001154:	801a      	strh	r2, [r3, #0]
 8001156:	e006      	b.n	8001166 <main+0x3da>
	  			  }else if(step_mode == STEP_x10){
 8001158:	4b6a      	ldr	r3, [pc, #424]	; (8001304 <main+0x578>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d102      	bne.n	8001166 <main+0x3da>
	  				  step_mode = STEP_NORMAL;
 8001160:	4b68      	ldr	r3, [pc, #416]	; (8001304 <main+0x578>)
 8001162:	2200      	movs	r2, #0
 8001164:	801a      	strh	r2, [r3, #0]
	  			  }
	  		  }
	  		  if (  aux_sw_status == TRUE_HOLD ){
 8001166:	4b66      	ldr	r3, [pc, #408]	; (8001300 <main+0x574>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d105      	bne.n	800117a <main+0x3ee>
	  			  target_feedrate = FAST_MOVEMENT_FEEDRATE;
 800116e:	4b66      	ldr	r3, [pc, #408]	; (8001308 <main+0x57c>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b57      	ldr	r3, [pc, #348]	; (80012d4 <main+0x548>)
 8001176:	801a      	strh	r2, [r3, #0]
 8001178:	e008      	b.n	800118c <main+0x400>
	  		  }else if ( aux_sw_status == FALSE ){
 800117a:	4b61      	ldr	r3, [pc, #388]	; (8001300 <main+0x574>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d104      	bne.n	800118c <main+0x400>
	  			  target_feedrate = display_feedrate;
 8001182:	4b59      	ldr	r3, [pc, #356]	; (80012e8 <main+0x55c>)
 8001184:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001188:	4b52      	ldr	r3, [pc, #328]	; (80012d4 <main+0x548>)
 800118a:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  sw_status = Switch_Status_Read();		//Read the switch
 800118c:	f000 fe00 	bl	8001d90 <Switch_Status_Read>
 8001190:	4603      	mov	r3, r0
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b4e      	ldr	r3, [pc, #312]	; (80012d0 <main+0x544>)
 8001196:	801a      	strh	r2, [r3, #0]
	  		  if ( sw_status == LEFT ){				//If it is on left position, update the feedrate target comming from others modes
 8001198:	4b4d      	ldr	r3, [pc, #308]	; (80012d0 <main+0x544>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d126      	bne.n	80011ee <main+0x462>
	  			  if (target_feedrate == 0){
 80011a0:	4b4c      	ldr	r3, [pc, #304]	; (80012d4 <main+0x548>)
 80011a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d104      	bne.n	80011b4 <main+0x428>
	  				  target_feedrate = display_feedrate;
 80011aa:	4b4f      	ldr	r3, [pc, #316]	; (80012e8 <main+0x55c>)
 80011ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011b0:	4b48      	ldr	r3, [pc, #288]	; (80012d4 <main+0x548>)
 80011b2:	801a      	strh	r2, [r3, #0]
	  			  }
	  			  if ( aux_sw_status != TRUE_HOLD ){
 80011b4:	4b52      	ldr	r3, [pc, #328]	; (8001300 <main+0x574>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d052      	beq.n	8001262 <main+0x4d6>
					  Update_Feedrate(&target_feedrate);				//Update the feedrate from encoder
 80011bc:	4845      	ldr	r0, [pc, #276]	; (80012d4 <main+0x548>)
 80011be:	f000 fe31 	bl	8001e24 <Update_Feedrate>
					  if (display_feedrate != target_feedrate){			//Check if the feedrate changed to update LCD
 80011c2:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <main+0x55c>)
 80011c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011c8:	4b42      	ldr	r3, [pc, #264]	; (80012d4 <main+0x548>)
 80011ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d047      	beq.n	8001262 <main+0x4d6>
						  display_feedrate = target_feedrate;
 80011d2:	4b40      	ldr	r3, [pc, #256]	; (80012d4 <main+0x548>)
 80011d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011d8:	4b43      	ldr	r3, [pc, #268]	; (80012e8 <main+0x55c>)
 80011da:	801a      	strh	r2, [r3, #0]
						  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 80011dc:	4b42      	ldr	r3, [pc, #264]	; (80012e8 <main+0x55c>)
 80011de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e2:	2200      	movs	r2, #0
 80011e4:	210b      	movs	r1, #11
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fdb4 	bl	8001d54 <LCD_Write_Feedrate>
 80011ec:	e039      	b.n	8001262 <main+0x4d6>
					  }
	  			  }
	  		  }else if ( sw_status == RIGHT){		//If it is on right position, change to right, set feedrate to zero
 80011ee:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <main+0x544>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d118      	bne.n	8001228 <main+0x49c>
		  		target_feedrate = 0;
 80011f6:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <main+0x548>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	801a      	strh	r2, [r3, #0]
		  		if ( current_feedrate == 0 ){		//If motor is stopped then move to right status
 80011fc:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <main+0x54c>)
 80011fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d12d      	bne.n	8001262 <main+0x4d6>
		  			state = MOVE_RIGHT;				//Change state to right
 8001206:	4b35      	ldr	r3, [pc, #212]	; (80012dc <main+0x550>)
 8001208:	2201      	movs	r2, #1
 800120a:	801a      	strh	r2, [r3, #0]
		  			lcd_update = TRUE;				//Set flag to update display
 800120c:	4b34      	ldr	r3, [pc, #208]	; (80012e0 <main+0x554>)
 800120e:	2201      	movs	r2, #1
 8001210:	801a      	strh	r2, [r3, #0]
		  			Motor_Disable(en_invert);		//Disable Motor
 8001212:	4b34      	ldr	r3, [pc, #208]	; (80012e4 <main+0x558>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f000 fc54 	bl	8001ac4 <Motor_Disable>
		  			target_feedrate = display_feedrate;	//Update feedrate
 800121c:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <main+0x55c>)
 800121e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001222:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <main+0x548>)
 8001224:	801a      	strh	r2, [r3, #0]
		  			break;							//Exit this state
 8001226:	e051      	b.n	80012cc <main+0x540>
		  		}
	  		  }else if ( sw_status == MID ){		//If it is on Mid position, change to STOP or STANDBY status
 8001228:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <main+0x544>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d118      	bne.n	8001262 <main+0x4d6>
	  			target_feedrate = 0;
 8001230:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <main+0x548>)
 8001232:	2200      	movs	r2, #0
 8001234:	801a      	strh	r2, [r3, #0]
	  			if ( current_feedrate == 0 ){
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <main+0x54c>)
 8001238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d110      	bne.n	8001262 <main+0x4d6>
	  				state = STANDBY;				//Change state to standby
 8001240:	4b26      	ldr	r3, [pc, #152]	; (80012dc <main+0x550>)
 8001242:	2203      	movs	r2, #3
 8001244:	801a      	strh	r2, [r3, #0]
	  				lcd_update = TRUE;				//Set flag to update display
 8001246:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <main+0x554>)
 8001248:	2201      	movs	r2, #1
 800124a:	801a      	strh	r2, [r3, #0]
	  				Motor_Disable(en_invert);		//Disable Motor
 800124c:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <main+0x558>)
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fc37 	bl	8001ac4 <Motor_Disable>
	  				target_feedrate = display_feedrate;	//Update feedrate
 8001256:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <main+0x55c>)
 8001258:	f9b3 2000 	ldrsh.w	r2, [r3]
 800125c:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <main+0x548>)
 800125e:	801a      	strh	r2, [r3, #0]
	  				break;							//Exit this state
 8001260:	e034      	b.n	80012cc <main+0x540>
	  			}
	  		  }
	  		  if (lcd_update){				//Update the LCD comming from others states
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <main+0x554>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d009      	beq.n	800127e <main+0x4f2>
	  			lcdSetCursor(0,1);
 800126a:	2101      	movs	r1, #1
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff fc35 	bl	8000adc <lcdSetCursor>
	  			lcdPrint("Mode: LEFT ");
 8001272:	4826      	ldr	r0, [pc, #152]	; (800130c <main+0x580>)
 8001274:	f7ff fc64 	bl	8000b40 <lcdPrint>
	  			lcd_update = FALSE;			//Reset flag for LCD Update
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <main+0x554>)
 800127a:	2200      	movs	r2, #0
 800127c:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (previous_state != MOVE_LEFT){		//If previous status is Standby the enable motor and direcction
 800127e:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <main+0x564>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d00d      	beq.n	80012a2 <main+0x516>
	  		  Motor_Direction(LEFT, dir_invert);	//Set direction to left
 8001286:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <main+0x568>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	4619      	mov	r1, r3
 800128c:	2000      	movs	r0, #0
 800128e:	f000 fc31 	bl	8001af4 <Motor_Direction>
	  		  Motor_Enable(en_invert);				//Enable Motor
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <main+0x558>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f000 fbfe 	bl	8001a98 <Motor_Enable>
	  		  previous_state = MOVE_LEFT;			//Change previous state to current one
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <main+0x564>)
 800129e:	2202      	movs	r2, #2
 80012a0:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (update_speed){					//Update speed if the flag is set
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <main+0x56c>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00f      	beq.n	80012ca <main+0x53e>
	  			  current_feedrate = Motor_Feedrate_Update(&current_feedrate, &target_feedrate);
 80012aa:	490a      	ldr	r1, [pc, #40]	; (80012d4 <main+0x548>)
 80012ac:	480a      	ldr	r0, [pc, #40]	; (80012d8 <main+0x54c>)
 80012ae:	f000 fc93 	bl	8001bd8 <Motor_Feedrate_Update>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <main+0x54c>)
 80012b8:	801a      	strh	r2, [r3, #0]
				  update_speed = 0;					//Reset the update_speed flag
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <main+0x56c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  break;
 80012c0:	e003      	b.n	80012ca <main+0x53e>
	  		  break;
 80012c2:	bf00      	nop
 80012c4:	e597      	b.n	8000df6 <main+0x6a>
	  		  break;
 80012c6:	bf00      	nop
 80012c8:	e595      	b.n	8000df6 <main+0x6a>
	  		  break;
 80012ca:	bf00      	nop
	  switch (state)
 80012cc:	e593      	b.n	8000df6 <main+0x6a>
 80012ce:	bf00      	nop
 80012d0:	2000062c 	.word	0x2000062c
 80012d4:	2000000c 	.word	0x2000000c
 80012d8:	2000062a 	.word	0x2000062a
 80012dc:	20000620 	.word	0x20000620
 80012e0:	20000634 	.word	0x20000634
 80012e4:	20000626 	.word	0x20000626
 80012e8:	2000000e 	.word	0x2000000e
 80012ec:	080058e4 	.word	0x080058e4
 80012f0:	20000622 	.word	0x20000622
 80012f4:	20000628 	.word	0x20000628
 80012f8:	20000632 	.word	0x20000632
 80012fc:	2000062e 	.word	0x2000062e
 8001300:	20000630 	.word	0x20000630
 8001304:	20000624 	.word	0x20000624
 8001308:	2000000a 	.word	0x2000000a
 800130c:	080058f0 	.word	0x080058f0

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b094      	sub	sp, #80	; 0x50
 8001314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001316:	f107 0320 	add.w	r3, r7, #32
 800131a:	2230      	movs	r2, #48	; 0x30
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f003 fe4c 	bl	8004fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <SystemClock_Config+0xcc>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	4a27      	ldr	r2, [pc, #156]	; (80013dc <SystemClock_Config+0xcc>)
 800133e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001342:	6413      	str	r3, [r2, #64]	; 0x40
 8001344:	4b25      	ldr	r3, [pc, #148]	; (80013dc <SystemClock_Config+0xcc>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001350:	2300      	movs	r3, #0
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <SystemClock_Config+0xd0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800135c:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <SystemClock_Config+0xd0>)
 800135e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <SystemClock_Config+0xd0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001370:	2301      	movs	r3, #1
 8001372:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137a:	2302      	movs	r3, #2
 800137c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800137e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001382:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001384:	2319      	movs	r3, #25
 8001386:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001388:	23a8      	movs	r3, #168	; 0xa8
 800138a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800138c:	2304      	movs	r3, #4
 800138e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001390:	2304      	movs	r3, #4
 8001392:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001394:	f107 0320 	add.w	r3, r7, #32
 8001398:	4618      	mov	r0, r3
 800139a:	f002 f817 	bl	80033cc <HAL_RCC_OscConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013a4:	f000 fe50 	bl	8002048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a8:	230f      	movs	r3, #15
 80013aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ac:	2302      	movs	r3, #2
 80013ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2101      	movs	r1, #1
 80013c2:	4618      	mov	r0, r3
 80013c4:	f002 fa7a 	bl	80038bc <HAL_RCC_ClockConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013ce:	f000 fe3b 	bl	8002048 <Error_Handler>
  }
}
 80013d2:	bf00      	nop
 80013d4:	3750      	adds	r7, #80	; 0x50
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40007000 	.word	0x40007000

080013e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <MX_I2C1_Init+0x50>)
 80013ea:	4a13      	ldr	r2, [pc, #76]	; (8001438 <MX_I2C1_Init+0x54>)
 80013ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_I2C1_Init+0x50>)
 80013f0:	4a12      	ldr	r2, [pc, #72]	; (800143c <MX_I2C1_Init+0x58>)
 80013f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_I2C1_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_I2C1_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_I2C1_Init+0x50>)
 8001402:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001406:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <MX_I2C1_Init+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_I2C1_Init+0x50>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <MX_I2C1_Init+0x50>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_I2C1_Init+0x50>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001420:	4804      	ldr	r0, [pc, #16]	; (8001434 <MX_I2C1_Init+0x50>)
 8001422:	f001 fb87 	bl	8002b34 <HAL_I2C_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800142c:	f000 fe0c 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200004ac 	.word	0x200004ac
 8001438:	40005400 	.word	0x40005400
 800143c:	000186a0 	.word	0x000186a0

08001440 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08c      	sub	sp, #48	; 0x30
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	2224      	movs	r2, #36	; 0x24
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f003 fdb4 	bl	8004fbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800145c:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <MX_TIM1_Init+0xb8>)
 800145e:	4a27      	ldr	r2, [pc, #156]	; (80014fc <MX_TIM1_Init+0xbc>)
 8001460:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001462:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <MX_TIM1_Init+0xb8>)
 8001464:	2200      	movs	r2, #0
 8001466:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001468:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <MX_TIM1_Init+0xb8>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <MX_TIM1_Init+0xb8>)
 8001470:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001474:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001476:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <MX_TIM1_Init+0xb8>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <MX_TIM1_Init+0xb8>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <MX_TIM1_Init+0xb8>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001488:	2301      	movs	r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001490:	2301      	movs	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001498:	2302      	movs	r3, #2
 800149a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014a0:	2301      	movs	r3, #1
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 80014a8:	2302      	movs	r3, #2
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	4619      	mov	r1, r3
 80014b2:	4811      	ldr	r0, [pc, #68]	; (80014f8 <MX_TIM1_Init+0xb8>)
 80014b4:	f002 fdee 	bl	8004094 <HAL_TIM_Encoder_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80014be:	f000 fdc3 	bl	8002048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	4619      	mov	r1, r3
 80014ce:	480a      	ldr	r0, [pc, #40]	; (80014f8 <MX_TIM1_Init+0xb8>)
 80014d0:	f003 fcba 	bl	8004e48 <HAL_TIMEx_MasterConfigSynchronization>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80014da:	f000 fdb5 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->CNT = 0x7FFF;		//Initialization CNT in middle value to avoid Over/Under flow
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <MX_TIM1_Init+0xbc>)
 80014e0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  TIM1->SR = ~(1UL << 0);	//Clear UIF flag
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <MX_TIM1_Init+0xbc>)
 80014e8:	f06f 0201 	mvn.w	r2, #1
 80014ec:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	3730      	adds	r7, #48	; 0x30
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000500 	.word	0x20000500
 80014fc:	40010000 	.word	0x40010000

08001500 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08e      	sub	sp, #56	; 0x38
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001506:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001514:	f107 0320 	add.w	r3, r7, #32
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
 800152c:	615a      	str	r2, [r3, #20]
 800152e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001530:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <MX_TIM2_Init+0xe4>)
 8001532:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001536:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001538:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <MX_TIM2_Init+0xe4>)
 800153a:	2200      	movs	r2, #0
 800153c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153e:	4b29      	ldr	r3, [pc, #164]	; (80015e4 <MX_TIM2_Init+0xe4>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 8001544:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <MX_TIM2_Init+0xe4>)
 8001546:	2202      	movs	r2, #2
 8001548:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154a:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <MX_TIM2_Init+0xe4>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001550:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <MX_TIM2_Init+0xe4>)
 8001552:	2280      	movs	r2, #128	; 0x80
 8001554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001556:	4823      	ldr	r0, [pc, #140]	; (80015e4 <MX_TIM2_Init+0xe4>)
 8001558:	f002 fb7c 	bl	8003c54 <HAL_TIM_Base_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001562:	f000 fd71 	bl	8002048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800156c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001570:	4619      	mov	r1, r3
 8001572:	481c      	ldr	r0, [pc, #112]	; (80015e4 <MX_TIM2_Init+0xe4>)
 8001574:	f003 f8ac 	bl	80046d0 <HAL_TIM_ConfigClockSource>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800157e:	f000 fd63 	bl	8002048 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001582:	4818      	ldr	r0, [pc, #96]	; (80015e4 <MX_TIM2_Init+0xe4>)
 8001584:	f002 fc18 	bl	8003db8 <HAL_TIM_PWM_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800158e:	f000 fd5b 	bl	8002048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800159a:	f107 0320 	add.w	r3, r7, #32
 800159e:	4619      	mov	r1, r3
 80015a0:	4810      	ldr	r0, [pc, #64]	; (80015e4 <MX_TIM2_Init+0xe4>)
 80015a2:	f003 fc51 	bl	8004e48 <HAL_TIMEx_MasterConfigSynchronization>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80015ac:	f000 fd4c 	bl	8002048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b0:	2360      	movs	r3, #96	; 0x60
 80015b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 80015b4:	2301      	movs	r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80015bc:	2304      	movs	r3, #4
 80015be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	2200      	movs	r2, #0
 80015c4:	4619      	mov	r1, r3
 80015c6:	4807      	ldr	r0, [pc, #28]	; (80015e4 <MX_TIM2_Init+0xe4>)
 80015c8:	f002 ffc0 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80015d2:	f000 fd39 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015d6:	4803      	ldr	r0, [pc, #12]	; (80015e4 <MX_TIM2_Init+0xe4>)
 80015d8:	f000 fe5e 	bl	8002298 <HAL_TIM_MspPostInit>

}
 80015dc:	bf00      	nop
 80015de:	3738      	adds	r7, #56	; 0x38
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000548 	.word	0x20000548

080015e8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */
	float TIM10_period_ms = (float)DEBOUNCING_TIME/1000;		//Period to load into the timer, calculated from Define
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_TIM10_Init+0x70>)
 80015f0:	607b      	str	r3, [r7, #4]
	uint16_t TIM10_preescaler = 642;							//Preescaler, max 1 second
 80015f2:	f240 2382 	movw	r3, #642	; 0x282
 80015f6:	807b      	strh	r3, [r7, #2]
	uint16_t TIM10_ARR;
	TIM10_ARR = ( (float) (CLK_FREQ_T2/(TIM10_preescaler+1))*TIM10_period_ms );	//Calculation value for ARR register to set correct period
 80015f8:	887b      	ldrh	r3, [r7, #2]
 80015fa:	3301      	adds	r3, #1
 80015fc:	4a17      	ldr	r2, [pc, #92]	; (800165c <MX_TIM10_Init+0x74>)
 80015fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800160a:	edd7 7a01 	vldr	s15, [r7, #4]
 800160e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001616:	ee17 3a90 	vmov	r3, s15
 800161a:	803b      	strh	r3, [r7, #0]
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <MX_TIM10_Init+0x78>)
 800161e:	4a11      	ldr	r2, [pc, #68]	; (8001664 <MX_TIM10_Init+0x7c>)
 8001620:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = TIM10_preescaler;
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <MX_TIM10_Init+0x78>)
 8001626:	6053      	str	r3, [r2, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <MX_TIM10_Init+0x78>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = TIM10_ARR;
 800162e:	883b      	ldrh	r3, [r7, #0]
 8001630:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <MX_TIM10_Init+0x78>)
 8001632:	60d3      	str	r3, [r2, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <MX_TIM10_Init+0x78>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_TIM10_Init+0x78>)
 800163c:	2280      	movs	r2, #128	; 0x80
 800163e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001640:	4807      	ldr	r0, [pc, #28]	; (8001660 <MX_TIM10_Init+0x78>)
 8001642:	f002 fb07 	bl	8003c54 <HAL_TIM_Base_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM10_Init+0x68>
  {
    Error_Handler();
 800164c:	f000 fcfc 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	3dcccccd 	.word	0x3dcccccd
 800165c:	0280de80 	.word	0x0280de80
 8001660:	20000590 	.word	0x20000590
 8001664:	40014400 	.word	0x40014400

08001668 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */
  float TIM11_period_ms = (float)ACC_UPDATE_RATIO/1000;		//Period to load into the timer, calculated from Define
 800166e:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <MX_TIM11_Init+0x70>)
 8001670:	607b      	str	r3, [r7, #4]
  uint16_t TIM11_preescaler = 642;							//Preescaler, max 1 second
 8001672:	f240 2382 	movw	r3, #642	; 0x282
 8001676:	807b      	strh	r3, [r7, #2]
  uint16_t TIM11_ARR;
  TIM11_ARR = ( (float) (CLK_FREQ_T2/(TIM11_preescaler+1))*TIM11_period_ms );	//Calculation value for ARR register to set correct period
 8001678:	887b      	ldrh	r3, [r7, #2]
 800167a:	3301      	adds	r3, #1
 800167c:	4a17      	ldr	r2, [pc, #92]	; (80016dc <MX_TIM11_Init+0x74>)
 800167e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800168a:	edd7 7a01 	vldr	s15, [r7, #4]
 800168e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001696:	ee17 3a90 	vmov	r3, s15
 800169a:	803b      	strh	r3, [r7, #0]
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <MX_TIM11_Init+0x78>)
 800169e:	4a11      	ldr	r2, [pc, #68]	; (80016e4 <MX_TIM11_Init+0x7c>)
 80016a0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = TIM11_preescaler;
 80016a2:	887b      	ldrh	r3, [r7, #2]
 80016a4:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <MX_TIM11_Init+0x78>)
 80016a6:	6053      	str	r3, [r2, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a8:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <MX_TIM11_Init+0x78>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = TIM11_ARR;
 80016ae:	883b      	ldrh	r3, [r7, #0]
 80016b0:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <MX_TIM11_Init+0x78>)
 80016b2:	60d3      	str	r3, [r2, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <MX_TIM11_Init+0x78>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_TIM11_Init+0x78>)
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80016c0:	4807      	ldr	r0, [pc, #28]	; (80016e0 <MX_TIM11_Init+0x78>)
 80016c2:	f002 fac7 	bl	8003c54 <HAL_TIM_Base_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM11_Init+0x68>
  {
    Error_Handler();
 80016cc:	f000 fcbc 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	3d4ccccd 	.word	0x3d4ccccd
 80016dc:	0280de80 	.word	0x0280de80
 80016e0:	200005d8 	.word	0x200005d8
 80016e4:	40014800 	.word	0x40014800

080016e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	4b26      	ldr	r3, [pc, #152]	; (800179c <MX_GPIO_Init+0xb4>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a25      	ldr	r2, [pc, #148]	; (800179c <MX_GPIO_Init+0xb4>)
 8001708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b23      	ldr	r3, [pc, #140]	; (800179c <MX_GPIO_Init+0xb4>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	4b1f      	ldr	r3, [pc, #124]	; (800179c <MX_GPIO_Init+0xb4>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a1e      	ldr	r2, [pc, #120]	; (800179c <MX_GPIO_Init+0xb4>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b1c      	ldr	r3, [pc, #112]	; (800179c <MX_GPIO_Init+0xb4>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <MX_GPIO_Init+0xb4>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a17      	ldr	r2, [pc, #92]	; (800179c <MX_GPIO_Init+0xb4>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <MX_GPIO_Init+0xb4>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_Pin|DIR_Pin, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	2106      	movs	r1, #6
 8001756:	4812      	ldr	r0, [pc, #72]	; (80017a0 <MX_GPIO_Init+0xb8>)
 8001758:	f001 f9d2 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENABLE_Pin DIR_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin|DIR_Pin;
 800175c:	2306      	movs	r3, #6
 800175e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	4619      	mov	r1, r3
 8001772:	480b      	ldr	r0, [pc, #44]	; (80017a0 <MX_GPIO_Init+0xb8>)
 8001774:	f001 f828 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_LEFT_Pin SW_RIGHT_Pin SEC_SW_Pin EN_SW_Pin */
  GPIO_InitStruct.Pin = SW_LEFT_Pin|SW_RIGHT_Pin|SEC_SW_Pin|EN_SW_Pin;
 8001778:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800177c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	4619      	mov	r1, r3
 800178c:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_GPIO_Init+0xbc>)
 800178e:	f001 f81b 	bl	80027c8 <HAL_GPIO_Init>

}
 8001792:	bf00      	nop
 8001794:	3720      	adds	r7, #32
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40020400 	.word	0x40020400

080017a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	if (htim == &htim11 ){		//Checking if the IRQ is from Timer11 Acceleration
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a1a      	ldr	r2, [pc, #104]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d103      	bne.n	80017c0 <HAL_TIM_PeriodElapsedCallback+0x18>
		update_speed = 1;
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	801a      	strh	r2, [r3, #0]
			aux_debouncing = aux_debouncing + 1;
		}else if (!debouncing_aux_sw){	//If debouncing disable reset counter
			aux_debouncing = 0;
		}
	}
}
 80017be:	e027      	b.n	8001810 <HAL_TIM_PeriodElapsedCallback+0x68>
	}else if ( htim == &htim10 ){	//Checking if the IRQ is from Timer10 Debouncing
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a18      	ldr	r2, [pc, #96]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d123      	bne.n	8001810 <HAL_TIM_PeriodElapsedCallback+0x68>
		if (debouncing_en_sw){		//If debouncing enable, increment counter
 80017c8:	4b17      	ldr	r3, [pc, #92]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d006      	beq.n	80017de <HAL_TIM_PeriodElapsedCallback+0x36>
			debouncing = debouncing + 1;
 80017d0:	4b16      	ldr	r3, [pc, #88]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017da:	801a      	strh	r2, [r3, #0]
 80017dc:	e006      	b.n	80017ec <HAL_TIM_PeriodElapsedCallback+0x44>
		}else if (!debouncing_en_sw){	//If debouncing disable reset counter
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d102      	bne.n	80017ec <HAL_TIM_PeriodElapsedCallback+0x44>
			debouncing = 0;
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	801a      	strh	r2, [r3, #0]
		if (debouncing_aux_sw){		//If debouncing enable, increment counter
 80017ec:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d006      	beq.n	8001802 <HAL_TIM_PeriodElapsedCallback+0x5a>
			aux_debouncing = aux_debouncing + 1;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80017fe:	801a      	strh	r2, [r3, #0]
}
 8001800:	e006      	b.n	8001810 <HAL_TIM_PeriodElapsedCallback+0x68>
		}else if (!debouncing_aux_sw){	//If debouncing disable reset counter
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <HAL_TIM_PeriodElapsedCallback+0x68>
			aux_debouncing = 0;
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800180c:	2200      	movs	r2, #0
 800180e:	801a      	strh	r2, [r3, #0]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	200005d8 	.word	0x200005d8
 8001820:	20000632 	.word	0x20000632
 8001824:	20000590 	.word	0x20000590
 8001828:	20000636 	.word	0x20000636
 800182c:	2000063a 	.word	0x2000063a
 8001830:	20000638 	.word	0x20000638
 8001834:	2000063c 	.word	0x2000063c

08001838 <Encoder_Read>:
  * @brief Encoder Steps Read Function
  * @param old_value - Pointer to the value storage as latest encoder value
  * @retval encoder_steps - Number of steps increased or decreased on the encoder
  */
int32_t Encoder_Read(void)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
	int32_t encoder_steps;
	static int32_t old_value = 0x7FFF;		//Initialisation old_value variable

	if (TIM1->SR & (1 << 0)){		//If overflow or underflow occurs reset the CNT value
 800183e:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <Encoder_Read+0x78>)
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00d      	beq.n	8001866 <Encoder_Read+0x2e>
		TIM1->SR = ~(1UL << 0);		//Reset UIF bit
 800184a:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <Encoder_Read+0x78>)
 800184c:	f06f 0201 	mvn.w	r2, #1
 8001850:	611a      	str	r2, [r3, #16]
		TIM1->CNT = 0x7FFF;			//Reload CNT register to ox7FFF
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <Encoder_Read+0x78>)
 8001854:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
		old_value = 0x7FFF;
 800185a:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <Encoder_Read+0x7c>)
 800185c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001860:	601a      	str	r2, [r3, #0]
		return 0;					//Return 0
 8001862:	2300      	movs	r3, #0
 8001864:	e01d      	b.n	80018a2 <Encoder_Read+0x6a>
	}

	uint16_t encoder_value = TIM1->CNT;		//Variable to storage the CNT register value
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <Encoder_Read+0x78>)
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	80fb      	strh	r3, [r7, #6]
	if ( ( encoder_value - old_value >= 2 ) || ( encoder_value - old_value <= -2 ) ){		//If the value in the encoder register changed (At least 2, to avoid glitches) calculate increment
 800186c:	88fa      	ldrh	r2, [r7, #6]
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <Encoder_Read+0x7c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b01      	cmp	r3, #1
 8001876:	dc06      	bgt.n	8001886 <Encoder_Read+0x4e>
 8001878:	88fa      	ldrh	r2, [r7, #6]
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <Encoder_Read+0x7c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001884:	da0c      	bge.n	80018a0 <Encoder_Read+0x68>
		encoder_steps = (old_value - encoder_value)/2;	//Divide by 2 is needed due to increments by two on the encoder
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <Encoder_Read+0x7c>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	0fda      	lsrs	r2, r3, #31
 8001890:	4413      	add	r3, r2
 8001892:	105b      	asrs	r3, r3, #1
 8001894:	603b      	str	r3, [r7, #0]
		old_value = encoder_value;			//Reload the old_value
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <Encoder_Read+0x7c>)
 800189a:	6013      	str	r3, [r2, #0]
		return encoder_steps;				//Return the increments, can be positive or negative
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	e000      	b.n	80018a2 <Encoder_Read+0x6a>
	}else{
		return 0;							//Return 0 in case no changes
 80018a0:	2300      	movs	r3, #0
	}
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40010000 	.word	0x40010000
 80018b4:	20000010 	.word	0x20000010

080018b8 <LCD_Write_Number>:
  * 		col_pos - column position for the number
  * 		row_pos - raw position for the number
  * @retval
  */
void LCD_Write_Number(int32_t value, int32_t col_pos, int32_t row_pos)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
	char str[10];					//Variable to storage the string
	sprintf(str, "%ld", value);		//Convert number to string
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	496e      	ldr	r1, [pc, #440]	; (8001a84 <LCD_Write_Number+0x1cc>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f003 fb7d 	bl	8004fcc <siprintf>
	if (value > 0){					//If value is positive
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	dd5b      	ble.n	8001990 <LCD_Write_Number+0xd8>
		if (value < 10){			//If value is lower than 10
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b09      	cmp	r3, #9
 80018dc:	dc1a      	bgt.n	8001914 <LCD_Write_Number+0x5c>
			lcdSetCursor(col_pos+1,row_pos);
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	3301      	adds	r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff f8f5 	bl	8000adc <lcdSetCursor>
			lcdPrint(" ");
 80018f2:	4865      	ldr	r0, [pc, #404]	; (8001a88 <LCD_Write_Number+0x1d0>)
 80018f4:	f7ff f924 	bl	8000b40 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	4611      	mov	r1, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f8ea 	bl	8000adc <lcdSetCursor>
			lcdPrint(str);
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff f917 	bl	8000b40 <lcdPrint>
		lcdSetCursor(col_pos,row_pos);
		lcdPrint("  ");
		lcdSetCursor(col_pos,row_pos);
		lcdPrint("0");
	}
}
 8001912:	e0b3      	b.n	8001a7c <LCD_Write_Number+0x1c4>
		}else if (value < 100){		//If value is lower than 100
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b63      	cmp	r3, #99	; 0x63
 8001918:	dc1a      	bgt.n	8001950 <LCD_Write_Number+0x98>
			lcdSetCursor(col_pos+2,row_pos);
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	3302      	adds	r3, #2
 8001920:	b2db      	uxtb	r3, r3
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff f8d7 	bl	8000adc <lcdSetCursor>
			lcdPrint(" ");
 800192e:	4856      	ldr	r0, [pc, #344]	; (8001a88 <LCD_Write_Number+0x1d0>)
 8001930:	f7ff f906 	bl	8000b40 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f8cc 	bl	8000adc <lcdSetCursor>
			lcdPrint(str);
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff f8f9 	bl	8000b40 <lcdPrint>
}
 800194e:	e095      	b.n	8001a7c <LCD_Write_Number+0x1c4>
		}else if (value < 1000){	//If value is lower than 1000
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001956:	f280 8091 	bge.w	8001a7c <LCD_Write_Number+0x1c4>
			lcdSetCursor(col_pos+3,row_pos);
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	3303      	adds	r3, #3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff f8b7 	bl	8000adc <lcdSetCursor>
			lcdPrint(" ");
 800196e:	4846      	ldr	r0, [pc, #280]	; (8001a88 <LCD_Write_Number+0x1d0>)
 8001970:	f7ff f8e6 	bl	8000b40 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f8ac 	bl	8000adc <lcdSetCursor>
			lcdPrint(str);
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff f8d9 	bl	8000b40 <lcdPrint>
}
 800198e:	e075      	b.n	8001a7c <LCD_Write_Number+0x1c4>
	}else if (value < 0) {			//If value is negative
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	da5c      	bge.n	8001a50 <LCD_Write_Number+0x198>
		if (value > -10){			//If value is higher than -10
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f113 0f09 	cmn.w	r3, #9
 800199c:	db1a      	blt.n	80019d4 <LCD_Write_Number+0x11c>
			lcdSetCursor(col_pos+2,row_pos);
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	3302      	adds	r3, #2
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f895 	bl	8000adc <lcdSetCursor>
			lcdPrint(" ");
 80019b2:	4835      	ldr	r0, [pc, #212]	; (8001a88 <LCD_Write_Number+0x1d0>)
 80019b4:	f7ff f8c4 	bl	8000b40 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff f88a 	bl	8000adc <lcdSetCursor>
			lcdPrint(str);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff f8b7 	bl	8000b40 <lcdPrint>
}
 80019d2:	e053      	b.n	8001a7c <LCD_Write_Number+0x1c4>
		}else if (value > -100){	//If value is higher than -100
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80019da:	db1a      	blt.n	8001a12 <LCD_Write_Number+0x15a>
			lcdSetCursor(col_pos+2,row_pos);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	3302      	adds	r3, #2
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	4611      	mov	r1, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f876 	bl	8000adc <lcdSetCursor>
			lcdPrint("  ");
 80019f0:	4826      	ldr	r0, [pc, #152]	; (8001a8c <LCD_Write_Number+0x1d4>)
 80019f2:	f7ff f8a5 	bl	8000b40 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff f86b 	bl	8000adc <lcdSetCursor>
			lcdPrint(str);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff f898 	bl	8000b40 <lcdPrint>
}
 8001a10:	e034      	b.n	8001a7c <LCD_Write_Number+0x1c4>
		}else if (value > -1000){	//If value is higher than -1000
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001a18:	dd30      	ble.n	8001a7c <LCD_Write_Number+0x1c4>
			lcdSetCursor(col_pos+2,row_pos);
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	3302      	adds	r3, #2
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff f857 	bl	8000adc <lcdSetCursor>
			lcdPrint("   ");
 8001a2e:	4818      	ldr	r0, [pc, #96]	; (8001a90 <LCD_Write_Number+0x1d8>)
 8001a30:	f7ff f886 	bl	8000b40 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff f84c 	bl	8000adc <lcdSetCursor>
			lcdPrint(str);
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff f879 	bl	8000b40 <lcdPrint>
}
 8001a4e:	e015      	b.n	8001a7c <LCD_Write_Number+0x1c4>
		lcdSetCursor(col_pos,row_pos);
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff f83e 	bl	8000adc <lcdSetCursor>
		lcdPrint("  ");
 8001a60:	480a      	ldr	r0, [pc, #40]	; (8001a8c <LCD_Write_Number+0x1d4>)
 8001a62:	f7ff f86d 	bl	8000b40 <lcdPrint>
		lcdSetCursor(col_pos,row_pos);
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff f833 	bl	8000adc <lcdSetCursor>
		lcdPrint("0");
 8001a76:	4807      	ldr	r0, [pc, #28]	; (8001a94 <LCD_Write_Number+0x1dc>)
 8001a78:	f7ff f862 	bl	8000b40 <lcdPrint>
}
 8001a7c:	bf00      	nop
 8001a7e:	3720      	adds	r7, #32
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	080058fc 	.word	0x080058fc
 8001a88:	08005900 	.word	0x08005900
 8001a8c:	08005904 	.word	0x08005904
 8001a90:	08005908 	.word	0x08005908
 8001a94:	0800590c 	.word	0x0800590c

08001a98 <Motor_Enable>:
/**
  * @brief Function to Enable EN signal for Motor Driver
  * @param 	invert - variable to invert the EN pin logic
  * @retval
  */
void Motor_Enable(uint16_t invert){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, ENABLE_Pin, (GPIO_PIN_SET^invert));	//Enable Motor, XOR with SET to invert it if selected
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	f083 0301 	eor.w	r3, r3, #1
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	2102      	movs	r1, #2
 8001ab0:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <Motor_Enable+0x28>)
 8001ab2:	f001 f825 	bl	8002b00 <HAL_GPIO_WritePin>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40020000 	.word	0x40020000

08001ac4 <Motor_Disable>:
/**
  * @brief Function to Disable EN signal for Motor Driver
  * @param 	invert - variable to invert the EN pin logic
  * @retval
  */
void Motor_Disable(uint16_t invert){
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, ENABLE_Pin, (GPIO_PIN_RESET^invert));	//Disable Motor, XOR with SET to invert it if selected
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <Motor_Disable+0x28>)
 8001ad8:	f001 f812 	bl	8002b00 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001adc:	2100      	movs	r1, #0
 8001ade:	4804      	ldr	r0, [pc, #16]	; (8001af0 <Motor_Disable+0x2c>)
 8001ae0:	f002 fa74 	bl	8003fcc <HAL_TIM_PWM_Stop>
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40020000 	.word	0x40020000
 8001af0:	20000548 	.word	0x20000548

08001af4 <Motor_Direction>:
  * @brief Function to select the direction of the motor
  * @param 	direction - variable to set the direction of the motor (RIGHT or LEFT)
  * 		invert - variable to invert the DIR pin logic
  * @retval
  */
void Motor_Direction(uint16_t direction, uint16_t invert){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	460a      	mov	r2, r1
 8001afe:	80fb      	strh	r3, [r7, #6]
 8001b00:	4613      	mov	r3, r2
 8001b02:	80bb      	strh	r3, [r7, #4]
	if ( direction == RIGHT ){
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d10a      	bne.n	8001b20 <Motor_Direction+0x2c>
		HAL_GPIO_WritePin(GPIOA, DIR_Pin, (GPIO_PIN_SET^invert));	//Disable Motor, XOR with SET to invert it if selected
 8001b0a:	88bb      	ldrh	r3, [r7, #4]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	f083 0301 	eor.w	r3, r3, #1
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	2104      	movs	r1, #4
 8001b18:	4808      	ldr	r0, [pc, #32]	; (8001b3c <Motor_Direction+0x48>)
 8001b1a:	f000 fff1 	bl	8002b00 <HAL_GPIO_WritePin>
	}else if (direction == LEFT){
		HAL_GPIO_WritePin(GPIOA, DIR_Pin, (GPIO_PIN_RESET^invert));	//Disable Motor, XOR with SET to invert it if selected
	}

}
 8001b1e:	e009      	b.n	8001b34 <Motor_Direction+0x40>
	}else if (direction == LEFT){
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d106      	bne.n	8001b34 <Motor_Direction+0x40>
		HAL_GPIO_WritePin(GPIOA, DIR_Pin, (GPIO_PIN_RESET^invert));	//Disable Motor, XOR with SET to invert it if selected
 8001b26:	88bb      	ldrh	r3, [r7, #4]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	2104      	movs	r1, #4
 8001b2e:	4803      	ldr	r0, [pc, #12]	; (8001b3c <Motor_Direction+0x48>)
 8001b30:	f000 ffe6 	bl	8002b00 <HAL_GPIO_WritePin>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40020000 	.word	0x40020000

08001b40 <Motor_Speed_RPM>:
/**
  * @brief Function to select the speed of the motor in RPM
  * @param 	rpm - Speed value in RPM it is wanted
  * @retval
  */
void Motor_Speed_RPM(uint16_t speed){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
	float ARR_value_temp = 0;
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
	uint32_t ARR_value;
	if ((TIM2->CR1 & (1 << 0)) ^ (1 << 0)){			//Checking if the Timer is already enabled, if not, enable it
 8001b50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <Motor_Speed_RPM+0x22>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <Motor_Speed_RPM+0x24>
 8001b62:	2300      	movs	r3, #0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <Motor_Speed_RPM+0x30>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	//Enable Timer2 on PWM Mode
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4818      	ldr	r0, [pc, #96]	; (8001bcc <Motor_Speed_RPM+0x8c>)
 8001b6c:	f002 f97e 	bl	8003e6c <HAL_TIM_PWM_Start>
	}
	if (speed > 0){
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d021      	beq.n	8001bba <Motor_Speed_RPM+0x7a>
	ARR_value_temp = ((60 * (float) CLK_FREQ_T2)/(speed*motor_stepsrev));	//Calculation Value to load in ARR
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	4a15      	ldr	r2, [pc, #84]	; (8001bd0 <Motor_Speed_RPM+0x90>)
 8001b7a:	8812      	ldrh	r2, [r2, #0]
 8001b7c:	fb02 f303 	mul.w	r3, r2, r3
 8001b80:	ee07 3a90 	vmov	s15, r3
 8001b84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b88:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001bd4 <Motor_Speed_RPM+0x94>
 8001b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b90:	edc7 7a03 	vstr	s15, [r7, #12]
	ARR_value = (uint32_t) ARR_value_temp;	//Uint32 casting
 8001b94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b9c:	ee17 3a90 	vmov	r3, s15
 8001ba0:	60bb      	str	r3, [r7, #8]
	TIM2->ARR = ARR_value+1;				//Load ARR + 1
 8001ba2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CCR1 = (uint32_t) (ARR_value+1)/2;	//Load CCR1 to have always 50% Duty Cycle
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bb4:	085b      	lsrs	r3, r3, #1
 8001bb6:	6353      	str	r3, [r2, #52]	; 0x34
	}else{
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);	//Disable Timer2 on PWM Mode
	}
}
 8001bb8:	e003      	b.n	8001bc2 <Motor_Speed_RPM+0x82>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);	//Disable Timer2 on PWM Mode
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <Motor_Speed_RPM+0x8c>)
 8001bbe:	f002 fa05 	bl	8003fcc <HAL_TIM_PWM_Stop>
}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000548 	.word	0x20000548
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	4f163426 	.word	0x4f163426

08001bd8 <Motor_Feedrate_Update>:
  * @brief Function to update the feedrate of the motor following the acceleration
  * @param 	current_feedrate - Current feedrate
  * 		target_speed - Target feedrate
  * @retval updated_feedrate - Updated feedrate
  */
uint16_t Motor_Feedrate_Update(int16_t *current_feedrate, int16_t *target_feedrate){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
	static uint16_t prev_target_feedrate;	//Static Variable to storage the previous target feedrate
	static uint16_t acc_step_increment;		//Static Variable to storage the acceleration step increment
	static uint16_t diff_feedrate;			//Static variable to storage the delta feedrate

	uint16_t acc_step = ceil(ACC_TIME/ACC_UPDATE_RATIO);	//Calculation acc_step with the desired time in ms, and the refresh ratio on acc update
 8001be2:	2314      	movs	r3, #20
 8001be4:	81fb      	strh	r3, [r7, #14]
															//This will provide the number of steps we need to do to accelerate on the desired ACC_TIME

	diff_feedrate = *target_feedrate - *current_feedrate;	//Calculation for the Delta feedrate
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	4b52      	ldr	r3, [pc, #328]	; (8001d44 <Motor_Feedrate_Update+0x16c>)
 8001bfc:	801a      	strh	r2, [r3, #0]

	if (prev_target_feedrate != *target_feedrate){			//If the storaged feedrate changed since last time
 8001bfe:	4b52      	ldr	r3, [pc, #328]	; (8001d48 <Motor_Feedrate_Update+0x170>)
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	461a      	mov	r2, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d026      	beq.n	8001c5c <Motor_Feedrate_Update+0x84>
		prev_target_feedrate = *target_feedrate;				//Reload the prev_target_feedrate with latest value
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	4b4c      	ldr	r3, [pc, #304]	; (8001d48 <Motor_Feedrate_Update+0x170>)
 8001c18:	801a      	strh	r2, [r3, #0]
		diff_feedrate = abs(*target_feedrate - *current_feedrate);	//Re-calculate the delta feedrate
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c20:	461a      	mov	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	bfb8      	it	lt
 8001c2e:	425b      	neglt	r3, r3
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	4b44      	ldr	r3, [pc, #272]	; (8001d44 <Motor_Feedrate_Update+0x16c>)
 8001c34:	801a      	strh	r2, [r3, #0]
		acc_step_increment = ceil(diff_feedrate / acc_step);	//Re-calculate the acceleration step increment, so we take the Delta feedrate and divide it by
 8001c36:	4b43      	ldr	r3, [pc, #268]	; (8001d44 <Motor_Feedrate_Update+0x16c>)
 8001c38:	881a      	ldrh	r2, [r3, #0]
 8001c3a:	89fb      	ldrh	r3, [r7, #14]
 8001c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fc76 	bl	8000534 <__aeabi_i2d>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f7fe fcda 	bl	8000608 <__aeabi_d2uiz>
 8001c54:	4603      	mov	r3, r0
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	4b3c      	ldr	r3, [pc, #240]	; (8001d4c <Motor_Feedrate_Update+0x174>)
 8001c5a:	801a      	strh	r2, [r3, #0]
																//the numbers of step required to meeting the timing
	}

	if ( *current_feedrate < *target_feedrate){			//If the current feedrate is lower than the target, accelerate
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	da1f      	bge.n	8001cac <Motor_Feedrate_Update+0xd4>
		if (  (acc_step_increment >= diff_feedrate) || (!acc_step_increment) ){	//If the step increment is lower than the delta feedrate then we increase by one to reach the target
 8001c6c:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <Motor_Feedrate_Update+0x174>)
 8001c6e:	881a      	ldrh	r2, [r3, #0]
 8001c70:	4b34      	ldr	r3, [pc, #208]	; (8001d44 <Motor_Feedrate_Update+0x16c>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d203      	bcs.n	8001c80 <Motor_Feedrate_Update+0xa8>
 8001c78:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <Motor_Feedrate_Update+0x174>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <Motor_Feedrate_Update+0xbc>
																				//Or if the acceleration step increment is zero (If the delta feedrate is lower than the acceleration step)
			*current_feedrate = *current_feedrate + 1;	//Increment by one
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	3301      	adds	r3, #1
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	801a      	strh	r2, [r3, #0]
 8001c92:	e03a      	b.n	8001d0a <Motor_Feedrate_Update+0x132>
		}else{											//If the delta feedrate is bigger than acc_step and the the step incrmenet is lower than the delta feedrate the we increase
			*current_feedrate = *current_feedrate + acc_step_increment;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <Motor_Feedrate_Update+0x174>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	b21a      	sxth	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	801a      	strh	r2, [r3, #0]
 8001caa:	e02e      	b.n	8001d0a <Motor_Feedrate_Update+0x132>
		}
	}else if (*current_feedrate == *target_feedrate){	//If the target is achieved
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d026      	beq.n	8001d0a <Motor_Feedrate_Update+0x132>

	}else if ( *current_feedrate > *target_feedrate ){	//If the current feedrate is higher than the target, decelerate
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	dd1e      	ble.n	8001d0a <Motor_Feedrate_Update+0x132>
		if (  (acc_step_increment >= diff_feedrate) || (!acc_step_increment) ){	//If the step increment is lower than the delta feedrate then we increase by one to reach the target
 8001ccc:	4b1f      	ldr	r3, [pc, #124]	; (8001d4c <Motor_Feedrate_Update+0x174>)
 8001cce:	881a      	ldrh	r2, [r3, #0]
 8001cd0:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <Motor_Feedrate_Update+0x16c>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d203      	bcs.n	8001ce0 <Motor_Feedrate_Update+0x108>
 8001cd8:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <Motor_Feedrate_Update+0x174>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d109      	bne.n	8001cf4 <Motor_Feedrate_Update+0x11c>
																						//Or if the acceleration step increment is zero (If the delta feedrate is lower than the acceleration step)
			*current_feedrate = *current_feedrate - 1;	//Decrement by one
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	b21a      	sxth	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	801a      	strh	r2, [r3, #0]
 8001cf2:	e00a      	b.n	8001d0a <Motor_Feedrate_Update+0x132>
		}else{											//If the delta feedrate is bigger than acc_step and the the step incrmenet is lower than the delta feedrate the we increase
			*current_feedrate = *current_feedrate - acc_step_increment;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <Motor_Feedrate_Update+0x174>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	b21a      	sxth	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	801a      	strh	r2, [r3, #0]
		}
	}

	uint16_t rpm = *current_feedrate/leadscrew_pitch;	//Calculation for RPM with the leadscrew pitch
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d18:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <Motor_Feedrate_Update+0x178>)
 8001d1a:	ed93 7a00 	vldr	s14, [r3]
 8001d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d26:	ee17 3a90 	vmov	r3, s15
 8001d2a:	81bb      	strh	r3, [r7, #12]
	Motor_Speed_RPM(rpm);	//Set the motor speed
 8001d2c:	89bb      	ldrh	r3, [r7, #12]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ff06 	bl	8001b40 <Motor_Speed_RPM>

	return *current_feedrate;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d3a:	b29b      	uxth	r3, r3
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	2000063e 	.word	0x2000063e
 8001d48:	20000640 	.word	0x20000640
 8001d4c:	20000642 	.word	0x20000642
 8001d50:	20000004 	.word	0x20000004

08001d54 <LCD_Write_Feedrate>:
  * @param 	feedrate - feedrate value which expected to be writen into the LCD
  * 		col_pos - column position for the number
  * 		row_pos - raw position for the number
  * @retval
  */
void LCD_Write_Feedrate(int32_t feedrate, int32_t col_pos, int32_t row_pos){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
	static int32_t saved_feedrate;
	if ( saved_feedrate != feedrate ){					//Print only if the feedrate changed
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <LCD_Write_Feedrate+0x34>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d00a      	beq.n	8001d80 <LCD_Write_Feedrate+0x2c>
		LCD_Write_Number(feedrate,col_pos,row_pos);		//Write the number in the desired position
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f7ff fda2 	bl	80018b8 <LCD_Write_Number>
		lcdPrint("mm/min ");							//Adding mm/min
 8001d74:	4805      	ldr	r0, [pc, #20]	; (8001d8c <LCD_Write_Feedrate+0x38>)
 8001d76:	f7fe fee3 	bl	8000b40 <lcdPrint>
		saved_feedrate = feedrate;						//Updating Feedrate Saved
 8001d7a:	4a03      	ldr	r2, [pc, #12]	; (8001d88 <LCD_Write_Feedrate+0x34>)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6013      	str	r3, [r2, #0]
	}
}
 8001d80:	bf00      	nop
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000644 	.word	0x20000644
 8001d8c:	08005910 	.word	0x08005910

08001d90 <Switch_Status_Read>:
/**
  * @brief Function to read the value for the switchs
  * @param	- NONE
  * @retval	- Switch Status RIGHT, LEFT, MID, FAIL
  */
int16_t Switch_Status_Read(void){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
	int16_t switch_right, switch_left, sw_status;
	switch_right = HAL_GPIO_ReadPin(SW_RIGHT_GPIO_Port, SW_RIGHT_Pin);	//Storage value of RIGHT pin
 8001d96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d9a:	4821      	ldr	r0, [pc, #132]	; (8001e20 <Switch_Status_Read+0x90>)
 8001d9c:	f000 fe98 	bl	8002ad0 <HAL_GPIO_ReadPin>
 8001da0:	4603      	mov	r3, r0
 8001da2:	80bb      	strh	r3, [r7, #4]
	switch_left = HAL_GPIO_ReadPin(SW_LEFT_GPIO_Port, SW_LEFT_Pin);		//Storage value of LEFT pin
 8001da4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001da8:	481d      	ldr	r0, [pc, #116]	; (8001e20 <Switch_Status_Read+0x90>)
 8001daa:	f000 fe91 	bl	8002ad0 <HAL_GPIO_ReadPin>
 8001dae:	4603      	mov	r3, r0
 8001db0:	807b      	strh	r3, [r7, #2]
	if ( !switch_right & !switch_left ){	//If both are enabled at same time, return FAIL
 8001db2:	88ba      	ldrh	r2, [r7, #4]
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d103      	bne.n	8001dc6 <Switch_Status_Read+0x36>
		sw_status = FAIL;
 8001dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc2:	80fb      	strh	r3, [r7, #6]
 8001dc4:	e026      	b.n	8001e14 <Switch_Status_Read+0x84>
	}else if( switch_right & switch_left ){	//If none are enabled return MID point
 8001dc6:	88ba      	ldrh	r2, [r7, #4]
 8001dc8:	887b      	ldrh	r3, [r7, #2]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	b21b      	sxth	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <Switch_Status_Read+0x48>
		sw_status = MID;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	80fb      	strh	r3, [r7, #6]
 8001dd6:	e01d      	b.n	8001e14 <Switch_Status_Read+0x84>
	}else if ( ( !switch_right ) & switch_left ){	//If right is enable return RIGHT
 8001dd8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf0c      	ite	eq
 8001de0:	2301      	moveq	r3, #1
 8001de2:	2300      	movne	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <Switch_Status_Read+0x68>
		sw_status = RIGHT;
 8001df2:	2301      	movs	r3, #1
 8001df4:	80fb      	strh	r3, [r7, #6]
 8001df6:	e00d      	b.n	8001e14 <Switch_Status_Read+0x84>
	}else if ( switch_right & ( !switch_left ) ){	//If left is enable return LEFT
 8001df8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dfc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001e00:	2a00      	cmp	r2, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	2201      	moveq	r2, #1
 8001e06:	2200      	movne	r2, #0
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <Switch_Status_Read+0x84>
		sw_status = LEFT;
 8001e10:	2300      	movs	r3, #0
 8001e12:	80fb      	strh	r3, [r7, #6]
	}
	return sw_status;
 8001e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40020400 	.word	0x40020400

08001e24 <Update_Feedrate>:
/**
  * @brief Update Feedrate Function
  * @param old_value - Pointer to the value storaged as latest feedrate value
  * @retval new_feedrate - Updated Feedrate
  */
void Update_Feedrate(int16_t *feedrate){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	if (step_mode == STEP_NORMAL){
 8001e2c:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <Update_Feedrate+0x8c>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10d      	bne.n	8001e50 <Update_Feedrate+0x2c>
		*feedrate += Encoder_Read();	//Update Feedrate
 8001e34:	f7ff fd00 	bl	8001838 <Encoder_Read>
 8001e38:	4601      	mov	r1, r0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	b28b      	uxth	r3, r1
 8001e44:	4413      	add	r3, r2
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	b21a      	sxth	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	801a      	strh	r2, [r3, #0]
 8001e4e:	e015      	b.n	8001e7c <Update_Feedrate+0x58>
	}else if (step_mode == STEP_x10){
 8001e50:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <Update_Feedrate+0x8c>)
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d111      	bne.n	8001e7c <Update_Feedrate+0x58>
		*feedrate += ( 10 * Encoder_Read());	//Update Feedrate
 8001e58:	f7ff fcee 	bl	8001838 <Encoder_Read>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4619      	mov	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	b28b      	uxth	r3, r1
 8001e72:	4413      	add	r3, r2
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	b21a      	sxth	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	801a      	strh	r2, [r3, #0]
	}
	if (*feedrate <= 0 ){	//Limit the min value to zero
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	dc03      	bgt.n	8001e8e <Update_Feedrate+0x6a>
		*feedrate = 1;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	801a      	strh	r2, [r3, #0]
	}else if (*feedrate > MAX_FEEDRATE){
		*feedrate = MAX_FEEDRATE;
	}
}
 8001e8c:	e00c      	b.n	8001ea8 <Update_Feedrate+0x84>
	}else if (*feedrate > MAX_FEEDRATE){
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <Update_Feedrate+0x90>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	dd04      	ble.n	8001ea8 <Update_Feedrate+0x84>
		*feedrate = MAX_FEEDRATE;
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <Update_Feedrate+0x90>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	b21a      	sxth	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	801a      	strh	r2, [r3, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000624 	.word	0x20000624
 8001eb4:	20000008 	.word	0x20000008

08001eb8 <Encoder_Switch_Status_Read>:
/**
  * @brief Function to read the value for the encoder switch
  * @param	- NONE
  * @retval	- Encoder Switch Status TRUE, FALSE or TRUE_HOLD
  */
int16_t Encoder_Switch_Status_Read(void){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
	static uint16_t temp_debouncing = 0;	//Temporal variable to storage the debouncing
	static uint16_t previous_en_sw_status;	//Variable to storage the previous status of the encoder switch
	uint16_t en_sw_status;
	uint16_t encoder_sw_read_value;

	encoder_sw_read_value = HAL_GPIO_ReadPin(EN_SW_GPIO_Port, EN_SW_Pin);
 8001ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ec2:	482a      	ldr	r0, [pc, #168]	; (8001f6c <Encoder_Switch_Status_Read+0xb4>)
 8001ec4:	f000 fe04 	bl	8002ad0 <HAL_GPIO_ReadPin>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	80bb      	strh	r3, [r7, #4]

	if ( ( !encoder_sw_read_value ) && ( !debouncing_en_sw ) ){	//If encoder is pressed and debouncing not enable
 8001ecc:	88bb      	ldrh	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10d      	bne.n	8001eee <Encoder_Switch_Status_Read+0x36>
 8001ed2:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <Encoder_Switch_Status_Read+0xb8>)
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <Encoder_Switch_Status_Read+0x36>
		debouncing_en_sw = TRUE;	//Enable debouncing
 8001eda:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <Encoder_Switch_Status_Read+0xb8>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	801a      	strh	r2, [r3, #0]
		temp_debouncing = debouncing;	//Load value from debouncing
 8001ee0:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <Encoder_Switch_Status_Read+0xbc>)
 8001ee2:	881a      	ldrh	r2, [r3, #0]
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <Encoder_Switch_Status_Read+0xc0>)
 8001ee6:	801a      	strh	r2, [r3, #0]
		en_sw_status = FALSE;			//SW status still disable waiting debouncing time
 8001ee8:	2300      	movs	r3, #0
 8001eea:	80fb      	strh	r3, [r7, #6]
 8001eec:	e037      	b.n	8001f5e <Encoder_Switch_Status_Read+0xa6>
	}else if ( ( !encoder_sw_read_value ) && ( temp_debouncing+2 <= debouncing )){ //If encoder still pressed and debouncing +2 already passed
 8001eee:	88bb      	ldrh	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d118      	bne.n	8001f26 <Encoder_Switch_Status_Read+0x6e>
 8001ef4:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <Encoder_Switch_Status_Read+0xc0>)
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	4a1e      	ldr	r2, [pc, #120]	; (8001f74 <Encoder_Switch_Status_Read+0xbc>)
 8001efc:	8812      	ldrh	r2, [r2, #0]
 8001efe:	4293      	cmp	r3, r2
 8001f00:	da11      	bge.n	8001f26 <Encoder_Switch_Status_Read+0x6e>
		en_sw_status = FALSE;	//Status still FALSE
 8001f02:	2300      	movs	r3, #0
 8001f04:	80fb      	strh	r3, [r7, #6]
		//debouncing_en_sw = FALSE;	//Disable debouncing
		previous_en_sw_status = TRUE;	//Set previous status of enable TRUE
 8001f06:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <Encoder_Switch_Status_Read+0xc4>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	801a      	strh	r2, [r3, #0]
		if ( temp_debouncing+SW_HOLD_TIME <= debouncing ){	//If we keep the button pressed more than the time defines
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <Encoder_Switch_Status_Read+0xc0>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	3309      	adds	r3, #9
 8001f12:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <Encoder_Switch_Status_Read+0xbc>)
 8001f14:	8812      	ldrh	r2, [r2, #0]
 8001f16:	4293      	cmp	r3, r2
 8001f18:	da21      	bge.n	8001f5e <Encoder_Switch_Status_Read+0xa6>
			en_sw_status = TRUE_HOLD;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	80fb      	strh	r3, [r7, #6]
			previous_en_sw_status = TRUE_HOLD;
 8001f1e:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <Encoder_Switch_Status_Read+0xc4>)
 8001f20:	2203      	movs	r2, #3
 8001f22:	801a      	strh	r2, [r3, #0]
		if ( temp_debouncing+SW_HOLD_TIME <= debouncing ){	//If we keep the button pressed more than the time defines
 8001f24:	e01b      	b.n	8001f5e <Encoder_Switch_Status_Read+0xa6>
		}
	}else if( ( encoder_sw_read_value )){
 8001f26:	88bb      	ldrh	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d018      	beq.n	8001f5e <Encoder_Switch_Status_Read+0xa6>
		if ( previous_en_sw_status == TRUE_HOLD ){	//If previous status was HOLD< do not report push
 8001f2c:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <Encoder_Switch_Status_Read+0xc4>)
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d102      	bne.n	8001f3a <Encoder_Switch_Status_Read+0x82>
			en_sw_status = FALSE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	80fb      	strh	r3, [r7, #6]
 8001f38:	e00e      	b.n	8001f58 <Encoder_Switch_Status_Read+0xa0>
		}else if ( previous_en_sw_status == TRUE ){
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <Encoder_Switch_Status_Read+0xc4>)
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d105      	bne.n	8001f4e <Encoder_Switch_Status_Read+0x96>
			en_sw_status = TRUE;	//If button released then send status TRUE
 8001f42:	2301      	movs	r3, #1
 8001f44:	80fb      	strh	r3, [r7, #6]
			debouncing_en_sw = FALSE;	//Disable debouncing
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <Encoder_Switch_Status_Read+0xb8>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	801a      	strh	r2, [r3, #0]
 8001f4c:	e004      	b.n	8001f58 <Encoder_Switch_Status_Read+0xa0>
		}else{
			en_sw_status = FALSE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	80fb      	strh	r3, [r7, #6]
			debouncing_en_sw = FALSE;	//Disable debouncing
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <Encoder_Switch_Status_Read+0xb8>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	801a      	strh	r2, [r3, #0]
		}
		previous_en_sw_status = FALSE;	//Reset variable of previous status
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <Encoder_Switch_Status_Read+0xc4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	801a      	strh	r2, [r3, #0]
	}else{
		//en_sw_status = FALSE;	//In case other condition, send FALSE
	}
	return en_sw_status;
 8001f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	20000636 	.word	0x20000636
 8001f74:	2000063a 	.word	0x2000063a
 8001f78:	20000648 	.word	0x20000648
 8001f7c:	2000064a 	.word	0x2000064a

08001f80 <Aux_Switch_Status_Read>:
/**
  * @brief Function to read the value for auxiliary switch
  * @param	- NONE
  * @retval	- Aux Switch Status TRUE, FALSE or TRUE_HOLD
  */
int16_t Aux_Switch_Status_Read(void){
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
	static uint16_t aux_temp_debouncing = 0;	//Temporal variable to storage the debouncing
	static uint16_t previous_aux_sw_status;	//Variable to storage the previous status of the encoder switch
	uint16_t aux_sw_status;
	uint16_t aux_sw_read_value;

	aux_sw_read_value = HAL_GPIO_ReadPin(SEC_SW_GPIO_Port, SEC_SW_Pin);
 8001f86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f8a:	482a      	ldr	r0, [pc, #168]	; (8002034 <Aux_Switch_Status_Read+0xb4>)
 8001f8c:	f000 fda0 	bl	8002ad0 <HAL_GPIO_ReadPin>
 8001f90:	4603      	mov	r3, r0
 8001f92:	80bb      	strh	r3, [r7, #4]

	if ( ( !aux_sw_read_value ) && ( !debouncing_aux_sw ) ){	//If encoder is pressed and debouncing not enable
 8001f94:	88bb      	ldrh	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10d      	bne.n	8001fb6 <Aux_Switch_Status_Read+0x36>
 8001f9a:	4b27      	ldr	r3, [pc, #156]	; (8002038 <Aux_Switch_Status_Read+0xb8>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <Aux_Switch_Status_Read+0x36>
		debouncing_aux_sw = TRUE;	//Enable debouncing
 8001fa2:	4b25      	ldr	r3, [pc, #148]	; (8002038 <Aux_Switch_Status_Read+0xb8>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	801a      	strh	r2, [r3, #0]
		aux_temp_debouncing = aux_debouncing;	//Load value from debouncing
 8001fa8:	4b24      	ldr	r3, [pc, #144]	; (800203c <Aux_Switch_Status_Read+0xbc>)
 8001faa:	881a      	ldrh	r2, [r3, #0]
 8001fac:	4b24      	ldr	r3, [pc, #144]	; (8002040 <Aux_Switch_Status_Read+0xc0>)
 8001fae:	801a      	strh	r2, [r3, #0]
		aux_sw_status = FALSE;			//SW status still disable waiting debouncing time
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	80fb      	strh	r3, [r7, #6]
 8001fb4:	e037      	b.n	8002026 <Aux_Switch_Status_Read+0xa6>
	}else if ( ( !aux_sw_read_value ) && ( aux_temp_debouncing+2 <= aux_debouncing )){ //If encoder still pressed and debouncing +2 already passed
 8001fb6:	88bb      	ldrh	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d118      	bne.n	8001fee <Aux_Switch_Status_Read+0x6e>
 8001fbc:	4b20      	ldr	r3, [pc, #128]	; (8002040 <Aux_Switch_Status_Read+0xc0>)
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	4a1e      	ldr	r2, [pc, #120]	; (800203c <Aux_Switch_Status_Read+0xbc>)
 8001fc4:	8812      	ldrh	r2, [r2, #0]
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	da11      	bge.n	8001fee <Aux_Switch_Status_Read+0x6e>
		aux_sw_status = FALSE;	//Status still FALSE
 8001fca:	2300      	movs	r3, #0
 8001fcc:	80fb      	strh	r3, [r7, #6]
		//debouncing_aux_sw = FALSE;	//Disable debouncing
		previous_aux_sw_status = TRUE;	//Set previous status of enable TRUE
 8001fce:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <Aux_Switch_Status_Read+0xc4>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	801a      	strh	r2, [r3, #0]
		if ( aux_temp_debouncing+SW_HOLD_TIME <= aux_debouncing ){	//If we keep the button pressed more than the time defines
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <Aux_Switch_Status_Read+0xc0>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	3309      	adds	r3, #9
 8001fda:	4a18      	ldr	r2, [pc, #96]	; (800203c <Aux_Switch_Status_Read+0xbc>)
 8001fdc:	8812      	ldrh	r2, [r2, #0]
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	da21      	bge.n	8002026 <Aux_Switch_Status_Read+0xa6>
			aux_sw_status = TRUE_HOLD;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	80fb      	strh	r3, [r7, #6]
			previous_aux_sw_status = TRUE_HOLD;
 8001fe6:	4b17      	ldr	r3, [pc, #92]	; (8002044 <Aux_Switch_Status_Read+0xc4>)
 8001fe8:	2203      	movs	r2, #3
 8001fea:	801a      	strh	r2, [r3, #0]
		if ( aux_temp_debouncing+SW_HOLD_TIME <= aux_debouncing ){	//If we keep the button pressed more than the time defines
 8001fec:	e01b      	b.n	8002026 <Aux_Switch_Status_Read+0xa6>
		}
	}else if( ( aux_sw_read_value )){
 8001fee:	88bb      	ldrh	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d018      	beq.n	8002026 <Aux_Switch_Status_Read+0xa6>
		if ( previous_aux_sw_status == TRUE_HOLD ){	//If previous status was HOLD< do not report push
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <Aux_Switch_Status_Read+0xc4>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d102      	bne.n	8002002 <Aux_Switch_Status_Read+0x82>
			aux_sw_status = FALSE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	80fb      	strh	r3, [r7, #6]
 8002000:	e00e      	b.n	8002020 <Aux_Switch_Status_Read+0xa0>
		}else if ( previous_aux_sw_status == TRUE ){
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <Aux_Switch_Status_Read+0xc4>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d105      	bne.n	8002016 <Aux_Switch_Status_Read+0x96>
			aux_sw_status = TRUE;	//If button released then send status TRUE
 800200a:	2301      	movs	r3, #1
 800200c:	80fb      	strh	r3, [r7, #6]
			debouncing_aux_sw = FALSE;	//Disable debouncing
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <Aux_Switch_Status_Read+0xb8>)
 8002010:	2200      	movs	r2, #0
 8002012:	801a      	strh	r2, [r3, #0]
 8002014:	e004      	b.n	8002020 <Aux_Switch_Status_Read+0xa0>
		}else{
			aux_sw_status = FALSE;
 8002016:	2300      	movs	r3, #0
 8002018:	80fb      	strh	r3, [r7, #6]
			debouncing_aux_sw = FALSE;	//Disable debouncing
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <Aux_Switch_Status_Read+0xb8>)
 800201c:	2200      	movs	r2, #0
 800201e:	801a      	strh	r2, [r3, #0]
		}
		previous_aux_sw_status = FALSE;	//Reset variable of previous status
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <Aux_Switch_Status_Read+0xc4>)
 8002022:	2200      	movs	r2, #0
 8002024:	801a      	strh	r2, [r3, #0]
	}else{
		//aux_sw_status = FALSE;	//In case other condition, send FALSE
	}
	return aux_sw_status;
 8002026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40020400 	.word	0x40020400
 8002038:	20000638 	.word	0x20000638
 800203c:	2000063c 	.word	0x2000063c
 8002040:	2000064c 	.word	0x2000064c
 8002044:	2000064e 	.word	0x2000064e

08002048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800204c:	b672      	cpsid	i
}
 800204e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002050:	e7fe      	b.n	8002050 <Error_Handler+0x8>
	...

08002054 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_MspInit+0x4c>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	4a0f      	ldr	r2, [pc, #60]	; (80020a0 <HAL_MspInit+0x4c>)
 8002064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002068:	6453      	str	r3, [r2, #68]	; 0x44
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_MspInit+0x4c>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	603b      	str	r3, [r7, #0]
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_MspInit+0x4c>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <HAL_MspInit+0x4c>)
 8002080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_MspInit+0x4c>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800

080020a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a19      	ldr	r2, [pc, #100]	; (8002128 <HAL_I2C_MspInit+0x84>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d12b      	bne.n	800211e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_I2C_MspInit+0x88>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a17      	ldr	r2, [pc, #92]	; (800212c <HAL_I2C_MspInit+0x88>)
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <HAL_I2C_MspInit+0x88>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020e2:	23c0      	movs	r3, #192	; 0xc0
 80020e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e6:	2312      	movs	r3, #18
 80020e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ee:	2303      	movs	r3, #3
 80020f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020f2:	2304      	movs	r3, #4
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	4619      	mov	r1, r3
 80020fc:	480c      	ldr	r0, [pc, #48]	; (8002130 <HAL_I2C_MspInit+0x8c>)
 80020fe:	f000 fb63 	bl	80027c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_I2C_MspInit+0x88>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a08      	ldr	r2, [pc, #32]	; (800212c <HAL_I2C_MspInit+0x88>)
 800210c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_I2C_MspInit+0x88>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800211e:	bf00      	nop
 8002120:	3728      	adds	r7, #40	; 0x28
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40005400 	.word	0x40005400
 800212c:	40023800 	.word	0x40023800
 8002130:	40020400 	.word	0x40020400

08002134 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	; 0x28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a21      	ldr	r2, [pc, #132]	; (80021d8 <HAL_TIM_Encoder_MspInit+0xa4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d13c      	bne.n	80021d0 <HAL_TIM_Encoder_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_TIM_Encoder_MspInit+0xa8>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	4a1f      	ldr	r2, [pc, #124]	; (80021dc <HAL_TIM_Encoder_MspInit+0xa8>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6453      	str	r3, [r2, #68]	; 0x44
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_TIM_Encoder_MspInit+0xa8>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_TIM_Encoder_MspInit+0xa8>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a18      	ldr	r2, [pc, #96]	; (80021dc <HAL_TIM_Encoder_MspInit+0xa8>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b16      	ldr	r3, [pc, #88]	; (80021dc <HAL_TIM_Encoder_MspInit+0xa8>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN_A_Pin|EN_B_Pin;
 800218e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021a0:	2301      	movs	r3, #1
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	4619      	mov	r1, r3
 80021aa:	480d      	ldr	r0, [pc, #52]	; (80021e0 <HAL_TIM_Encoder_MspInit+0xac>)
 80021ac:	f000 fb0c 	bl	80027c8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2100      	movs	r1, #0
 80021b4:	2019      	movs	r0, #25
 80021b6:	f000 fad0 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021ba:	2019      	movs	r0, #25
 80021bc:	f000 fae9 	bl	8002792 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80021c0:	2200      	movs	r2, #0
 80021c2:	2100      	movs	r1, #0
 80021c4:	201a      	movs	r0, #26
 80021c6:	f000 fac8 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80021ca:	201a      	movs	r0, #26
 80021cc:	f000 fae1 	bl	8002792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80021d0:	bf00      	nop
 80021d2:	3728      	adds	r7, #40	; 0x28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40020000 	.word	0x40020000

080021e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f4:	d10e      	bne.n	8002214 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	4b24      	ldr	r3, [pc, #144]	; (800228c <HAL_TIM_Base_MspInit+0xa8>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	4a23      	ldr	r2, [pc, #140]	; (800228c <HAL_TIM_Base_MspInit+0xa8>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6413      	str	r3, [r2, #64]	; 0x40
 8002206:	4b21      	ldr	r3, [pc, #132]	; (800228c <HAL_TIM_Base_MspInit+0xa8>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002212:	e036      	b.n	8002282 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM10)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <HAL_TIM_Base_MspInit+0xac>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d116      	bne.n	800224c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	4b1a      	ldr	r3, [pc, #104]	; (800228c <HAL_TIM_Base_MspInit+0xa8>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	4a19      	ldr	r2, [pc, #100]	; (800228c <HAL_TIM_Base_MspInit+0xa8>)
 8002228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800222c:	6453      	str	r3, [r2, #68]	; 0x44
 800222e:	4b17      	ldr	r3, [pc, #92]	; (800228c <HAL_TIM_Base_MspInit+0xa8>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	2019      	movs	r0, #25
 8002240:	f000 fa8b 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002244:	2019      	movs	r0, #25
 8002246:	f000 faa4 	bl	8002792 <HAL_NVIC_EnableIRQ>
}
 800224a:	e01a      	b.n	8002282 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a10      	ldr	r2, [pc, #64]	; (8002294 <HAL_TIM_Base_MspInit+0xb0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d115      	bne.n	8002282 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <HAL_TIM_Base_MspInit+0xa8>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	4a0b      	ldr	r2, [pc, #44]	; (800228c <HAL_TIM_Base_MspInit+0xa8>)
 8002260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002264:	6453      	str	r3, [r2, #68]	; 0x44
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_TIM_Base_MspInit+0xa8>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2100      	movs	r1, #0
 8002276:	201a      	movs	r0, #26
 8002278:	f000 fa6f 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800227c:	201a      	movs	r0, #26
 800227e:	f000 fa88 	bl	8002792 <HAL_NVIC_EnableIRQ>
}
 8002282:	bf00      	nop
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	40014400 	.word	0x40014400
 8002294:	40014800 	.word	0x40014800

08002298 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 030c 	add.w	r3, r7, #12
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b8:	d11d      	bne.n	80022f6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <HAL_TIM_MspPostInit+0x68>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a0f      	ldr	r2, [pc, #60]	; (8002300 <HAL_TIM_MspPostInit+0x68>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <HAL_TIM_MspPostInit+0x68>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PULSE_Pin;
 80022d6:	2301      	movs	r3, #1
 80022d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022e2:	2302      	movs	r3, #2
 80022e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022e6:	2301      	movs	r3, #1
 80022e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PULSE_GPIO_Port, &GPIO_InitStruct);
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	4619      	mov	r1, r3
 80022f0:	4804      	ldr	r0, [pc, #16]	; (8002304 <HAL_TIM_MspPostInit+0x6c>)
 80022f2:	f000 fa69 	bl	80027c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022f6:	bf00      	nop
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	40020000 	.word	0x40020000

08002308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800230c:	e7fe      	b.n	800230c <NMI_Handler+0x4>

0800230e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002312:	e7fe      	b.n	8002312 <HardFault_Handler+0x4>

08002314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002318:	e7fe      	b.n	8002318 <MemManage_Handler+0x4>

0800231a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800231e:	e7fe      	b.n	800231e <BusFault_Handler+0x4>

08002320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <UsageFault_Handler+0x4>

08002326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002354:	f000 f8e2 	bl	800251c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}

0800235c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002360:	4803      	ldr	r0, [pc, #12]	; (8002370 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002362:	f001 ffeb 	bl	800433c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002366:	4803      	ldr	r0, [pc, #12]	; (8002374 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002368:	f001 ffe8 	bl	800433c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000500 	.word	0x20000500
 8002374:	20000590 	.word	0x20000590

08002378 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800237c:	4803      	ldr	r0, [pc, #12]	; (800238c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800237e:	f001 ffdd 	bl	800433c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002382:	4803      	ldr	r0, [pc, #12]	; (8002390 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002384:	f001 ffda 	bl	800433c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000500 	.word	0x20000500
 8002390:	200005d8 	.word	0x200005d8

08002394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800239c:	4a14      	ldr	r2, [pc, #80]	; (80023f0 <_sbrk+0x5c>)
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <_sbrk+0x60>)
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <_sbrk+0x64>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d102      	bne.n	80023b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <_sbrk+0x64>)
 80023b2:	4a12      	ldr	r2, [pc, #72]	; (80023fc <_sbrk+0x68>)
 80023b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <_sbrk+0x64>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d207      	bcs.n	80023d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023c4:	f002 fdc2 	bl	8004f4c <__errno>
 80023c8:	4603      	mov	r3, r0
 80023ca:	220c      	movs	r2, #12
 80023cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295
 80023d2:	e009      	b.n	80023e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <_sbrk+0x64>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <_sbrk+0x64>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <_sbrk+0x64>)
 80023e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023e6:	68fb      	ldr	r3, [r7, #12]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20010000 	.word	0x20010000
 80023f4:	00000400 	.word	0x00000400
 80023f8:	20000650 	.word	0x20000650
 80023fc:	20000668 	.word	0x20000668

08002400 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <SystemInit+0x20>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	4a05      	ldr	r2, [pc, #20]	; (8002420 <SystemInit+0x20>)
 800240c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <Reset_Handler>:
 8002424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800245c <LoopFillZerobss+0x12>
 8002428:	480d      	ldr	r0, [pc, #52]	; (8002460 <LoopFillZerobss+0x16>)
 800242a:	490e      	ldr	r1, [pc, #56]	; (8002464 <LoopFillZerobss+0x1a>)
 800242c:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <LoopFillZerobss+0x1e>)
 800242e:	2300      	movs	r3, #0
 8002430:	e002      	b.n	8002438 <LoopCopyDataInit>

08002432 <CopyDataInit>:
 8002432:	58d4      	ldr	r4, [r2, r3]
 8002434:	50c4      	str	r4, [r0, r3]
 8002436:	3304      	adds	r3, #4

08002438 <LoopCopyDataInit>:
 8002438:	18c4      	adds	r4, r0, r3
 800243a:	428c      	cmp	r4, r1
 800243c:	d3f9      	bcc.n	8002432 <CopyDataInit>
 800243e:	4a0b      	ldr	r2, [pc, #44]	; (800246c <LoopFillZerobss+0x22>)
 8002440:	4c0b      	ldr	r4, [pc, #44]	; (8002470 <LoopFillZerobss+0x26>)
 8002442:	2300      	movs	r3, #0
 8002444:	e001      	b.n	800244a <LoopFillZerobss>

08002446 <FillZerobss>:
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	3204      	adds	r2, #4

0800244a <LoopFillZerobss>:
 800244a:	42a2      	cmp	r2, r4
 800244c:	d3fb      	bcc.n	8002446 <FillZerobss>
 800244e:	f7ff ffd7 	bl	8002400 <SystemInit>
 8002452:	f002 fd81 	bl	8004f58 <__libc_init_array>
 8002456:	f7fe fc99 	bl	8000d8c <main>
 800245a:	4770      	bx	lr
 800245c:	20010000 	.word	0x20010000
 8002460:	20000000 	.word	0x20000000
 8002464:	20000084 	.word	0x20000084
 8002468:	08005974 	.word	0x08005974
 800246c:	20000084 	.word	0x20000084
 8002470:	20000668 	.word	0x20000668

08002474 <ADC_IRQHandler>:
 8002474:	e7fe      	b.n	8002474 <ADC_IRQHandler>
	...

08002478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_Init+0x40>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <HAL_Init+0x40>)
 8002482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_Init+0x40>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <HAL_Init+0x40>)
 800248e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <HAL_Init+0x40>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a07      	ldr	r2, [pc, #28]	; (80024b8 <HAL_Init+0x40>)
 800249a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a0:	2003      	movs	r0, #3
 80024a2:	f000 f94f 	bl	8002744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024a6:	200f      	movs	r0, #15
 80024a8:	f000 f808 	bl	80024bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024ac:	f7ff fdd2 	bl	8002054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023c00 	.word	0x40023c00

080024bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_InitTick+0x54>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_InitTick+0x58>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4619      	mov	r1, r3
 80024ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f967 	bl	80027ae <HAL_SYSTICK_Config>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e00e      	b.n	8002508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b0f      	cmp	r3, #15
 80024ee:	d80a      	bhi.n	8002506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f0:	2200      	movs	r2, #0
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295
 80024f8:	f000 f92f 	bl	800275a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024fc:	4a06      	ldr	r2, [pc, #24]	; (8002518 <HAL_InitTick+0x5c>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e000      	b.n	8002508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000014 	.word	0x20000014
 8002514:	2000001c 	.word	0x2000001c
 8002518:	20000018 	.word	0x20000018

0800251c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_IncTick+0x20>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_IncTick+0x24>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4413      	add	r3, r2
 800252c:	4a04      	ldr	r2, [pc, #16]	; (8002540 <HAL_IncTick+0x24>)
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	2000001c 	.word	0x2000001c
 8002540:	20000654 	.word	0x20000654

08002544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return uwTick;
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <HAL_GetTick+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000654 	.word	0x20000654

0800255c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002564:	f7ff ffee 	bl	8002544 <HAL_GetTick>
 8002568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002574:	d005      	beq.n	8002582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_Delay+0x44>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4413      	add	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002582:	bf00      	nop
 8002584:	f7ff ffde 	bl	8002544 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	429a      	cmp	r2, r3
 8002592:	d8f7      	bhi.n	8002584 <HAL_Delay+0x28>
  {
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	2000001c 	.word	0x2000001c

080025a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c0:	4013      	ands	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d6:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	60d3      	str	r3, [r2, #12]
}
 80025dc:	bf00      	nop
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <__NVIC_GetPriorityGrouping+0x18>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	f003 0307 	and.w	r3, r3, #7
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	2b00      	cmp	r3, #0
 8002618:	db0b      	blt.n	8002632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	f003 021f 	and.w	r2, r3, #31
 8002620:	4907      	ldr	r1, [pc, #28]	; (8002640 <__NVIC_EnableIRQ+0x38>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2001      	movs	r0, #1
 800262a:	fa00 f202 	lsl.w	r2, r0, r2
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000e100 	.word	0xe000e100

08002644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	6039      	str	r1, [r7, #0]
 800264e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	2b00      	cmp	r3, #0
 8002656:	db0a      	blt.n	800266e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	490c      	ldr	r1, [pc, #48]	; (8002690 <__NVIC_SetPriority+0x4c>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	0112      	lsls	r2, r2, #4
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	440b      	add	r3, r1
 8002668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800266c:	e00a      	b.n	8002684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4908      	ldr	r1, [pc, #32]	; (8002694 <__NVIC_SetPriority+0x50>)
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	3b04      	subs	r3, #4
 800267c:	0112      	lsls	r2, r2, #4
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	440b      	add	r3, r1
 8002682:	761a      	strb	r2, [r3, #24]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000e100 	.word	0xe000e100
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002698:	b480      	push	{r7}
 800269a:	b089      	sub	sp, #36	; 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f1c3 0307 	rsb	r3, r3, #7
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	bf28      	it	cs
 80026b6:	2304      	movcs	r3, #4
 80026b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3304      	adds	r3, #4
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d902      	bls.n	80026c8 <NVIC_EncodePriority+0x30>
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3b03      	subs	r3, #3
 80026c6:	e000      	b.n	80026ca <NVIC_EncodePriority+0x32>
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	f04f 32ff 	mov.w	r2, #4294967295
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43da      	mvns	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	401a      	ands	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e0:	f04f 31ff 	mov.w	r1, #4294967295
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	43d9      	mvns	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f0:	4313      	orrs	r3, r2
         );
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3724      	adds	r7, #36	; 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002710:	d301      	bcc.n	8002716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002712:	2301      	movs	r3, #1
 8002714:	e00f      	b.n	8002736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002716:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <SysTick_Config+0x40>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800271e:	210f      	movs	r1, #15
 8002720:	f04f 30ff 	mov.w	r0, #4294967295
 8002724:	f7ff ff8e 	bl	8002644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <SysTick_Config+0x40>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272e:	4b04      	ldr	r3, [pc, #16]	; (8002740 <SysTick_Config+0x40>)
 8002730:	2207      	movs	r2, #7
 8002732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	e000e010 	.word	0xe000e010

08002744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ff29 	bl	80025a4 <__NVIC_SetPriorityGrouping>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800276c:	f7ff ff3e 	bl	80025ec <__NVIC_GetPriorityGrouping>
 8002770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	6978      	ldr	r0, [r7, #20]
 8002778:	f7ff ff8e 	bl	8002698 <NVIC_EncodePriority>
 800277c:	4602      	mov	r2, r0
 800277e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff5d 	bl	8002644 <__NVIC_SetPriority>
}
 800278a:	bf00      	nop
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	4603      	mov	r3, r0
 800279a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff31 	bl	8002608 <__NVIC_EnableIRQ>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ffa2 	bl	8002700 <SysTick_Config>
 80027bc:	4603      	mov	r3, r0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	e159      	b.n	8002a98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027e4:	2201      	movs	r2, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	f040 8148 	bne.w	8002a92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d005      	beq.n	800281a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002816:	2b02      	cmp	r3, #2
 8002818:	d130      	bne.n	800287c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	2203      	movs	r2, #3
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002850:	2201      	movs	r2, #1
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f003 0201 	and.w	r2, r3, #1
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b03      	cmp	r3, #3
 8002886:	d017      	beq.n	80028b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d123      	bne.n	800290c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	08da      	lsrs	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3208      	adds	r2, #8
 80028cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	220f      	movs	r2, #15
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	08da      	lsrs	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3208      	adds	r2, #8
 8002906:	69b9      	ldr	r1, [r7, #24]
 8002908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0203 	and.w	r2, r3, #3
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80a2 	beq.w	8002a92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b57      	ldr	r3, [pc, #348]	; (8002ab0 <HAL_GPIO_Init+0x2e8>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	4a56      	ldr	r2, [pc, #344]	; (8002ab0 <HAL_GPIO_Init+0x2e8>)
 8002958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800295c:	6453      	str	r3, [r2, #68]	; 0x44
 800295e:	4b54      	ldr	r3, [pc, #336]	; (8002ab0 <HAL_GPIO_Init+0x2e8>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800296a:	4a52      	ldr	r2, [pc, #328]	; (8002ab4 <HAL_GPIO_Init+0x2ec>)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	3302      	adds	r3, #2
 8002972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a49      	ldr	r2, [pc, #292]	; (8002ab8 <HAL_GPIO_Init+0x2f0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d019      	beq.n	80029ca <HAL_GPIO_Init+0x202>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a48      	ldr	r2, [pc, #288]	; (8002abc <HAL_GPIO_Init+0x2f4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d013      	beq.n	80029c6 <HAL_GPIO_Init+0x1fe>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a47      	ldr	r2, [pc, #284]	; (8002ac0 <HAL_GPIO_Init+0x2f8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00d      	beq.n	80029c2 <HAL_GPIO_Init+0x1fa>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a46      	ldr	r2, [pc, #280]	; (8002ac4 <HAL_GPIO_Init+0x2fc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d007      	beq.n	80029be <HAL_GPIO_Init+0x1f6>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a45      	ldr	r2, [pc, #276]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d101      	bne.n	80029ba <HAL_GPIO_Init+0x1f2>
 80029b6:	2304      	movs	r3, #4
 80029b8:	e008      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029ba:	2307      	movs	r3, #7
 80029bc:	e006      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029be:	2303      	movs	r3, #3
 80029c0:	e004      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e002      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029ca:	2300      	movs	r3, #0
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	f002 0203 	and.w	r2, r2, #3
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	4093      	lsls	r3, r2
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029dc:	4935      	ldr	r1, [pc, #212]	; (8002ab4 <HAL_GPIO_Init+0x2ec>)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	089b      	lsrs	r3, r3, #2
 80029e2:	3302      	adds	r3, #2
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ea:	4b38      	ldr	r3, [pc, #224]	; (8002acc <HAL_GPIO_Init+0x304>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a0e:	4a2f      	ldr	r2, [pc, #188]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a14:	4b2d      	ldr	r3, [pc, #180]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a38:	4a24      	ldr	r2, [pc, #144]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a3e:	4b23      	ldr	r3, [pc, #140]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a62:	4a1a      	ldr	r2, [pc, #104]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a68:	4b18      	ldr	r3, [pc, #96]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a8c:	4a0f      	ldr	r2, [pc, #60]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	3301      	adds	r3, #1
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	2b0f      	cmp	r3, #15
 8002a9c:	f67f aea2 	bls.w	80027e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	3724      	adds	r7, #36	; 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40013800 	.word	0x40013800
 8002ab8:	40020000 	.word	0x40020000
 8002abc:	40020400 	.word	0x40020400
 8002ac0:	40020800 	.word	0x40020800
 8002ac4:	40020c00 	.word	0x40020c00
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40013c00 	.word	0x40013c00

08002ad0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	887b      	ldrh	r3, [r7, #2]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
 8002aec:	e001      	b.n	8002af2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aee:	2300      	movs	r3, #0
 8002af0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	807b      	strh	r3, [r7, #2]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b10:	787b      	ldrb	r3, [r7, #1]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b16:	887a      	ldrh	r2, [r7, #2]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b1c:	e003      	b.n	8002b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b1e:	887b      	ldrh	r3, [r7, #2]
 8002b20:	041a      	lsls	r2, r3, #16
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	619a      	str	r2, [r3, #24]
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e12b      	b.n	8002d9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff faa2 	bl	80020a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2224      	movs	r2, #36	; 0x24
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0201 	bic.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b98:	f001 f848 	bl	8003c2c <HAL_RCC_GetPCLK1Freq>
 8002b9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	4a81      	ldr	r2, [pc, #516]	; (8002da8 <HAL_I2C_Init+0x274>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d807      	bhi.n	8002bb8 <HAL_I2C_Init+0x84>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4a80      	ldr	r2, [pc, #512]	; (8002dac <HAL_I2C_Init+0x278>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	bf94      	ite	ls
 8002bb0:	2301      	movls	r3, #1
 8002bb2:	2300      	movhi	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	e006      	b.n	8002bc6 <HAL_I2C_Init+0x92>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4a7d      	ldr	r2, [pc, #500]	; (8002db0 <HAL_I2C_Init+0x27c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	bf94      	ite	ls
 8002bc0:	2301      	movls	r3, #1
 8002bc2:	2300      	movhi	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e0e7      	b.n	8002d9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	4a78      	ldr	r2, [pc, #480]	; (8002db4 <HAL_I2C_Init+0x280>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	0c9b      	lsrs	r3, r3, #18
 8002bd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	4a6a      	ldr	r2, [pc, #424]	; (8002da8 <HAL_I2C_Init+0x274>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d802      	bhi.n	8002c08 <HAL_I2C_Init+0xd4>
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	3301      	adds	r3, #1
 8002c06:	e009      	b.n	8002c1c <HAL_I2C_Init+0xe8>
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c0e:	fb02 f303 	mul.w	r3, r2, r3
 8002c12:	4a69      	ldr	r2, [pc, #420]	; (8002db8 <HAL_I2C_Init+0x284>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	099b      	lsrs	r3, r3, #6
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	430b      	orrs	r3, r1
 8002c22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	495c      	ldr	r1, [pc, #368]	; (8002da8 <HAL_I2C_Init+0x274>)
 8002c38:	428b      	cmp	r3, r1
 8002c3a:	d819      	bhi.n	8002c70 <HAL_I2C_Init+0x13c>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	1e59      	subs	r1, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c4a:	1c59      	adds	r1, r3, #1
 8002c4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c50:	400b      	ands	r3, r1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HAL_I2C_Init+0x138>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1e59      	subs	r1, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c64:	3301      	adds	r3, #1
 8002c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c6a:	e051      	b.n	8002d10 <HAL_I2C_Init+0x1dc>
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	e04f      	b.n	8002d10 <HAL_I2C_Init+0x1dc>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d111      	bne.n	8002c9c <HAL_I2C_Init+0x168>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1e58      	subs	r0, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6859      	ldr	r1, [r3, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	440b      	add	r3, r1
 8002c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e012      	b.n	8002cc2 <HAL_I2C_Init+0x18e>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1e58      	subs	r0, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6859      	ldr	r1, [r3, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	0099      	lsls	r1, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Init+0x196>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e022      	b.n	8002d10 <HAL_I2C_Init+0x1dc>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10e      	bne.n	8002cf0 <HAL_I2C_Init+0x1bc>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1e58      	subs	r0, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6859      	ldr	r1, [r3, #4]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	440b      	add	r3, r1
 8002ce0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cee:	e00f      	b.n	8002d10 <HAL_I2C_Init+0x1dc>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1e58      	subs	r0, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	0099      	lsls	r1, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d06:	3301      	adds	r3, #1
 8002d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	6809      	ldr	r1, [r1, #0]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69da      	ldr	r2, [r3, #28]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6911      	ldr	r1, [r2, #16]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68d2      	ldr	r2, [r2, #12]
 8002d4a:	4311      	orrs	r1, r2
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6812      	ldr	r2, [r2, #0]
 8002d50:	430b      	orrs	r3, r1
 8002d52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	000186a0 	.word	0x000186a0
 8002dac:	001e847f 	.word	0x001e847f
 8002db0:	003d08ff 	.word	0x003d08ff
 8002db4:	431bde83 	.word	0x431bde83
 8002db8:	10624dd3 	.word	0x10624dd3

08002dbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	460b      	mov	r3, r1
 8002dca:	817b      	strh	r3, [r7, #10]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dd0:	f7ff fbb8 	bl	8002544 <HAL_GetTick>
 8002dd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b20      	cmp	r3, #32
 8002de0:	f040 80e0 	bne.w	8002fa4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	2319      	movs	r3, #25
 8002dea:	2201      	movs	r2, #1
 8002dec:	4970      	ldr	r1, [pc, #448]	; (8002fb0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f964 	bl	80030bc <I2C_WaitOnFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e0d3      	b.n	8002fa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_I2C_Master_Transmit+0x50>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e0cc      	b.n	8002fa6 <HAL_I2C_Master_Transmit+0x1ea>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d007      	beq.n	8002e32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0201 	orr.w	r2, r2, #1
 8002e30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2221      	movs	r2, #33	; 0x21
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	893a      	ldrh	r2, [r7, #8]
 8002e62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4a50      	ldr	r2, [pc, #320]	; (8002fb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e74:	8979      	ldrh	r1, [r7, #10]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	6a3a      	ldr	r2, [r7, #32]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f89c 	bl	8002fb8 <I2C_MasterRequestWrite>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e08d      	b.n	8002fa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ea0:	e066      	b.n	8002f70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	6a39      	ldr	r1, [r7, #32]
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f9de 	bl	8003268 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00d      	beq.n	8002ece <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d107      	bne.n	8002eca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e06b      	b.n	8002fa6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	781a      	ldrb	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d11b      	bne.n	8002f44 <HAL_I2C_Master_Transmit+0x188>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d017      	beq.n	8002f44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	781a      	ldrb	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	6a39      	ldr	r1, [r7, #32]
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 f9ce 	bl	80032ea <I2C_WaitOnBTFFlagUntilTimeout>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00d      	beq.n	8002f70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d107      	bne.n	8002f6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e01a      	b.n	8002fa6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d194      	bne.n	8002ea2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	e000      	b.n	8002fa6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fa4:	2302      	movs	r3, #2
  }
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	00100002 	.word	0x00100002
 8002fb4:	ffff0000 	.word	0xffff0000

08002fb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d006      	beq.n	8002fe2 <I2C_MasterRequestWrite+0x2a>
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d003      	beq.n	8002fe2 <I2C_MasterRequestWrite+0x2a>
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fe0:	d108      	bne.n	8002ff4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	e00b      	b.n	800300c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff8:	2b12      	cmp	r3, #18
 8002ffa:	d107      	bne.n	800300c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800300a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f84f 	bl	80030bc <I2C_WaitOnFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00d      	beq.n	8003040 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003032:	d103      	bne.n	800303c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800303a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e035      	b.n	80030ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003048:	d108      	bne.n	800305c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800304a:	897b      	ldrh	r3, [r7, #10]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003058:	611a      	str	r2, [r3, #16]
 800305a:	e01b      	b.n	8003094 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800305c:	897b      	ldrh	r3, [r7, #10]
 800305e:	11db      	asrs	r3, r3, #7
 8003060:	b2db      	uxtb	r3, r3
 8003062:	f003 0306 	and.w	r3, r3, #6
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f063 030f 	orn	r3, r3, #15
 800306c:	b2da      	uxtb	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	490e      	ldr	r1, [pc, #56]	; (80030b4 <I2C_MasterRequestWrite+0xfc>)
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f875 	bl	800316a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e010      	b.n	80030ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800308a:	897b      	ldrh	r3, [r7, #10]
 800308c:	b2da      	uxtb	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4907      	ldr	r1, [pc, #28]	; (80030b8 <I2C_MasterRequestWrite+0x100>)
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f865 	bl	800316a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	00010008 	.word	0x00010008
 80030b8:	00010002 	.word	0x00010002

080030bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	4613      	mov	r3, r2
 80030ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030cc:	e025      	b.n	800311a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d4:	d021      	beq.n	800311a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d6:	f7ff fa35 	bl	8002544 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d302      	bcc.n	80030ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d116      	bne.n	800311a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f043 0220 	orr.w	r2, r3, #32
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e023      	b.n	8003162 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	0c1b      	lsrs	r3, r3, #16
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	d10d      	bne.n	8003140 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	43da      	mvns	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4013      	ands	r3, r2
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	bf0c      	ite	eq
 8003136:	2301      	moveq	r3, #1
 8003138:	2300      	movne	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	461a      	mov	r2, r3
 800313e:	e00c      	b.n	800315a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	43da      	mvns	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4013      	ands	r3, r2
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	bf0c      	ite	eq
 8003152:	2301      	moveq	r3, #1
 8003154:	2300      	movne	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	429a      	cmp	r2, r3
 800315e:	d0b6      	beq.n	80030ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
 8003176:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003178:	e051      	b.n	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003188:	d123      	bne.n	80031d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003198:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f043 0204 	orr.w	r2, r3, #4
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e046      	b.n	8003260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d021      	beq.n	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031da:	f7ff f9b3 	bl	8002544 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d302      	bcc.n	80031f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d116      	bne.n	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f043 0220 	orr.w	r2, r3, #32
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e020      	b.n	8003260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	d10c      	bne.n	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	43da      	mvns	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4013      	ands	r3, r2
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf14      	ite	ne
 800323a:	2301      	movne	r3, #1
 800323c:	2300      	moveq	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	e00b      	b.n	800325a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	43da      	mvns	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	4013      	ands	r3, r2
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf14      	ite	ne
 8003254:	2301      	movne	r3, #1
 8003256:	2300      	moveq	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d18d      	bne.n	800317a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003274:	e02d      	b.n	80032d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f878 	bl	800336c <I2C_IsAcknowledgeFailed>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e02d      	b.n	80032e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d021      	beq.n	80032d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328e:	f7ff f959 	bl	8002544 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	429a      	cmp	r2, r3
 800329c:	d302      	bcc.n	80032a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d116      	bne.n	80032d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f043 0220 	orr.w	r2, r3, #32
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e007      	b.n	80032e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032dc:	2b80      	cmp	r3, #128	; 0x80
 80032de:	d1ca      	bne.n	8003276 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032f6:	e02d      	b.n	8003354 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f837 	bl	800336c <I2C_IsAcknowledgeFailed>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e02d      	b.n	8003364 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330e:	d021      	beq.n	8003354 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003310:	f7ff f918 	bl	8002544 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	429a      	cmp	r2, r3
 800331e:	d302      	bcc.n	8003326 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d116      	bne.n	8003354 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e007      	b.n	8003364 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b04      	cmp	r3, #4
 8003360:	d1ca      	bne.n	80032f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003382:	d11b      	bne.n	80033bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800338c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	f043 0204 	orr.w	r2, r3, #4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e267      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d075      	beq.n	80034d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ea:	4b88      	ldr	r3, [pc, #544]	; (800360c <HAL_RCC_OscConfig+0x240>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d00c      	beq.n	8003410 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033f6:	4b85      	ldr	r3, [pc, #532]	; (800360c <HAL_RCC_OscConfig+0x240>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d112      	bne.n	8003428 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003402:	4b82      	ldr	r3, [pc, #520]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800340e:	d10b      	bne.n	8003428 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	4b7e      	ldr	r3, [pc, #504]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d05b      	beq.n	80034d4 <HAL_RCC_OscConfig+0x108>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d157      	bne.n	80034d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e242      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003430:	d106      	bne.n	8003440 <HAL_RCC_OscConfig+0x74>
 8003432:	4b76      	ldr	r3, [pc, #472]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a75      	ldr	r2, [pc, #468]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e01d      	b.n	800347c <HAL_RCC_OscConfig+0xb0>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003448:	d10c      	bne.n	8003464 <HAL_RCC_OscConfig+0x98>
 800344a:	4b70      	ldr	r3, [pc, #448]	; (800360c <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a6f      	ldr	r2, [pc, #444]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	4b6d      	ldr	r3, [pc, #436]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a6c      	ldr	r2, [pc, #432]	; (800360c <HAL_RCC_OscConfig+0x240>)
 800345c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	e00b      	b.n	800347c <HAL_RCC_OscConfig+0xb0>
 8003464:	4b69      	ldr	r3, [pc, #420]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a68      	ldr	r2, [pc, #416]	; (800360c <HAL_RCC_OscConfig+0x240>)
 800346a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	4b66      	ldr	r3, [pc, #408]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a65      	ldr	r2, [pc, #404]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800347a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d013      	beq.n	80034ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7ff f85e 	bl	8002544 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800348c:	f7ff f85a 	bl	8002544 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	; 0x64
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e207      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349e:	4b5b      	ldr	r3, [pc, #364]	; (800360c <HAL_RCC_OscConfig+0x240>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0xc0>
 80034aa:	e014      	b.n	80034d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7ff f84a 	bl	8002544 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b4:	f7ff f846 	bl	8002544 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	; 0x64
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e1f3      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c6:	4b51      	ldr	r3, [pc, #324]	; (800360c <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0xe8>
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d063      	beq.n	80035aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034e2:	4b4a      	ldr	r3, [pc, #296]	; (800360c <HAL_RCC_OscConfig+0x240>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00b      	beq.n	8003506 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ee:	4b47      	ldr	r3, [pc, #284]	; (800360c <HAL_RCC_OscConfig+0x240>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d11c      	bne.n	8003534 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034fa:	4b44      	ldr	r3, [pc, #272]	; (800360c <HAL_RCC_OscConfig+0x240>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d116      	bne.n	8003534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003506:	4b41      	ldr	r3, [pc, #260]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <HAL_RCC_OscConfig+0x152>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d001      	beq.n	800351e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e1c7      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351e:	4b3b      	ldr	r3, [pc, #236]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4937      	ldr	r1, [pc, #220]	; (800360c <HAL_RCC_OscConfig+0x240>)
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003532:	e03a      	b.n	80035aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d020      	beq.n	800357e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800353c:	4b34      	ldr	r3, [pc, #208]	; (8003610 <HAL_RCC_OscConfig+0x244>)
 800353e:	2201      	movs	r2, #1
 8003540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003542:	f7fe ffff 	bl	8002544 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354a:	f7fe fffb 	bl	8002544 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e1a8      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355c:	4b2b      	ldr	r3, [pc, #172]	; (800360c <HAL_RCC_OscConfig+0x240>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003568:	4b28      	ldr	r3, [pc, #160]	; (800360c <HAL_RCC_OscConfig+0x240>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4925      	ldr	r1, [pc, #148]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003578:	4313      	orrs	r3, r2
 800357a:	600b      	str	r3, [r1, #0]
 800357c:	e015      	b.n	80035aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800357e:	4b24      	ldr	r3, [pc, #144]	; (8003610 <HAL_RCC_OscConfig+0x244>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003584:	f7fe ffde 	bl	8002544 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800358c:	f7fe ffda 	bl	8002544 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e187      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359e:	4b1b      	ldr	r3, [pc, #108]	; (800360c <HAL_RCC_OscConfig+0x240>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d036      	beq.n	8003624 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d016      	beq.n	80035ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035be:	4b15      	ldr	r3, [pc, #84]	; (8003614 <HAL_RCC_OscConfig+0x248>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c4:	f7fe ffbe 	bl	8002544 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035cc:	f7fe ffba 	bl	8002544 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e167      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035de:	4b0b      	ldr	r3, [pc, #44]	; (800360c <HAL_RCC_OscConfig+0x240>)
 80035e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0x200>
 80035ea:	e01b      	b.n	8003624 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ec:	4b09      	ldr	r3, [pc, #36]	; (8003614 <HAL_RCC_OscConfig+0x248>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f2:	f7fe ffa7 	bl	8002544 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f8:	e00e      	b.n	8003618 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035fa:	f7fe ffa3 	bl	8002544 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d907      	bls.n	8003618 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e150      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
 800360c:	40023800 	.word	0x40023800
 8003610:	42470000 	.word	0x42470000
 8003614:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003618:	4b88      	ldr	r3, [pc, #544]	; (800383c <HAL_RCC_OscConfig+0x470>)
 800361a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1ea      	bne.n	80035fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8097 	beq.w	8003760 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003632:	2300      	movs	r3, #0
 8003634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003636:	4b81      	ldr	r3, [pc, #516]	; (800383c <HAL_RCC_OscConfig+0x470>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10f      	bne.n	8003662 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	4b7d      	ldr	r3, [pc, #500]	; (800383c <HAL_RCC_OscConfig+0x470>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	4a7c      	ldr	r2, [pc, #496]	; (800383c <HAL_RCC_OscConfig+0x470>)
 800364c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003650:	6413      	str	r3, [r2, #64]	; 0x40
 8003652:	4b7a      	ldr	r3, [pc, #488]	; (800383c <HAL_RCC_OscConfig+0x470>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800365e:	2301      	movs	r3, #1
 8003660:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003662:	4b77      	ldr	r3, [pc, #476]	; (8003840 <HAL_RCC_OscConfig+0x474>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d118      	bne.n	80036a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800366e:	4b74      	ldr	r3, [pc, #464]	; (8003840 <HAL_RCC_OscConfig+0x474>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a73      	ldr	r2, [pc, #460]	; (8003840 <HAL_RCC_OscConfig+0x474>)
 8003674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800367a:	f7fe ff63 	bl	8002544 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003682:	f7fe ff5f 	bl	8002544 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e10c      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003694:	4b6a      	ldr	r3, [pc, #424]	; (8003840 <HAL_RCC_OscConfig+0x474>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f0      	beq.n	8003682 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d106      	bne.n	80036b6 <HAL_RCC_OscConfig+0x2ea>
 80036a8:	4b64      	ldr	r3, [pc, #400]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ac:	4a63      	ldr	r2, [pc, #396]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6713      	str	r3, [r2, #112]	; 0x70
 80036b4:	e01c      	b.n	80036f0 <HAL_RCC_OscConfig+0x324>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b05      	cmp	r3, #5
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x30c>
 80036be:	4b5f      	ldr	r3, [pc, #380]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	4a5e      	ldr	r2, [pc, #376]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036c4:	f043 0304 	orr.w	r3, r3, #4
 80036c8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ca:	4b5c      	ldr	r3, [pc, #368]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	4a5b      	ldr	r2, [pc, #364]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	6713      	str	r3, [r2, #112]	; 0x70
 80036d6:	e00b      	b.n	80036f0 <HAL_RCC_OscConfig+0x324>
 80036d8:	4b58      	ldr	r3, [pc, #352]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	4a57      	ldr	r2, [pc, #348]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	6713      	str	r3, [r2, #112]	; 0x70
 80036e4:	4b55      	ldr	r3, [pc, #340]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e8:	4a54      	ldr	r2, [pc, #336]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036ea:	f023 0304 	bic.w	r3, r3, #4
 80036ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d015      	beq.n	8003724 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f8:	f7fe ff24 	bl	8002544 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036fe:	e00a      	b.n	8003716 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003700:	f7fe ff20 	bl	8002544 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	; 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e0cb      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003716:	4b49      	ldr	r3, [pc, #292]	; (800383c <HAL_RCC_OscConfig+0x470>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0ee      	beq.n	8003700 <HAL_RCC_OscConfig+0x334>
 8003722:	e014      	b.n	800374e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003724:	f7fe ff0e 	bl	8002544 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372a:	e00a      	b.n	8003742 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800372c:	f7fe ff0a 	bl	8002544 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	; 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e0b5      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003742:	4b3e      	ldr	r3, [pc, #248]	; (800383c <HAL_RCC_OscConfig+0x470>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1ee      	bne.n	800372c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d105      	bne.n	8003760 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003754:	4b39      	ldr	r3, [pc, #228]	; (800383c <HAL_RCC_OscConfig+0x470>)
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	4a38      	ldr	r2, [pc, #224]	; (800383c <HAL_RCC_OscConfig+0x470>)
 800375a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 80a1 	beq.w	80038ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800376a:	4b34      	ldr	r3, [pc, #208]	; (800383c <HAL_RCC_OscConfig+0x470>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b08      	cmp	r3, #8
 8003774:	d05c      	beq.n	8003830 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d141      	bne.n	8003802 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377e:	4b31      	ldr	r3, [pc, #196]	; (8003844 <HAL_RCC_OscConfig+0x478>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fe fede 	bl	8002544 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378c:	f7fe feda 	bl	8002544 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e087      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379e:	4b27      	ldr	r3, [pc, #156]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	019b      	lsls	r3, r3, #6
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c0:	085b      	lsrs	r3, r3, #1
 80037c2:	3b01      	subs	r3, #1
 80037c4:	041b      	lsls	r3, r3, #16
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	061b      	lsls	r3, r3, #24
 80037ce:	491b      	ldr	r1, [pc, #108]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d4:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <HAL_RCC_OscConfig+0x478>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037da:	f7fe feb3 	bl	8002544 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e2:	f7fe feaf 	bl	8002544 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e05c      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f4:	4b11      	ldr	r3, [pc, #68]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x416>
 8003800:	e054      	b.n	80038ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <HAL_RCC_OscConfig+0x478>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003808:	f7fe fe9c 	bl	8002544 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003810:	f7fe fe98 	bl	8002544 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e045      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_RCC_OscConfig+0x470>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x444>
 800382e:	e03d      	b.n	80038ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d107      	bne.n	8003848 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e038      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
 800383c:	40023800 	.word	0x40023800
 8003840:	40007000 	.word	0x40007000
 8003844:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003848:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <HAL_RCC_OscConfig+0x4ec>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d028      	beq.n	80038a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d121      	bne.n	80038a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d11a      	bne.n	80038a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003878:	4013      	ands	r3, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800387e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003880:	4293      	cmp	r3, r2
 8003882:	d111      	bne.n	80038a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	085b      	lsrs	r3, r3, #1
 8003890:	3b01      	subs	r3, #1
 8003892:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d107      	bne.n	80038a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40023800 	.word	0x40023800

080038bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0cc      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d0:	4b68      	ldr	r3, [pc, #416]	; (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d90c      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b65      	ldr	r3, [pc, #404]	; (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b63      	ldr	r3, [pc, #396]	; (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0b8      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003910:	4b59      	ldr	r3, [pc, #356]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4a58      	ldr	r2, [pc, #352]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800391a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003928:	4b53      	ldr	r3, [pc, #332]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4a52      	ldr	r2, [pc, #328]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003934:	4b50      	ldr	r3, [pc, #320]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	494d      	ldr	r1, [pc, #308]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	4313      	orrs	r3, r2
 8003944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d044      	beq.n	80039dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395a:	4b47      	ldr	r3, [pc, #284]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d119      	bne.n	800399a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e07f      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d003      	beq.n	800397a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003976:	2b03      	cmp	r3, #3
 8003978:	d107      	bne.n	800398a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397a:	4b3f      	ldr	r3, [pc, #252]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e06f      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398a:	4b3b      	ldr	r3, [pc, #236]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e067      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800399a:	4b37      	ldr	r3, [pc, #220]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f023 0203 	bic.w	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	4934      	ldr	r1, [pc, #208]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039ac:	f7fe fdca 	bl	8002544 <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b4:	f7fe fdc6 	bl	8002544 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e04f      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ca:	4b2b      	ldr	r3, [pc, #172]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 020c 	and.w	r2, r3, #12
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	429a      	cmp	r2, r3
 80039da:	d1eb      	bne.n	80039b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039dc:	4b25      	ldr	r3, [pc, #148]	; (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d20c      	bcs.n	8003a04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ea:	4b22      	ldr	r3, [pc, #136]	; (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e032      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a10:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4916      	ldr	r1, [pc, #88]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	490e      	ldr	r1, [pc, #56]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a42:	f000 f821 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8003a46:	4602      	mov	r2, r0
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	490a      	ldr	r1, [pc, #40]	; (8003a7c <HAL_RCC_ClockConfig+0x1c0>)
 8003a54:	5ccb      	ldrb	r3, [r1, r3]
 8003a56:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5a:	4a09      	ldr	r2, [pc, #36]	; (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe fd2a 	bl	80024bc <HAL_InitTick>

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40023c00 	.word	0x40023c00
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	08005918 	.word	0x08005918
 8003a80:	20000014 	.word	0x20000014
 8003a84:	20000018 	.word	0x20000018

08003a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a8c:	b090      	sub	sp, #64	; 0x40
 8003a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	637b      	str	r3, [r7, #52]	; 0x34
 8003a94:	2300      	movs	r3, #0
 8003a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a98:	2300      	movs	r3, #0
 8003a9a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aa0:	4b59      	ldr	r3, [pc, #356]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d00d      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	f200 80a1 	bhi.w	8003bf4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_RCC_GetSysClockFreq+0x34>
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d003      	beq.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003aba:	e09b      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003abc:	4b53      	ldr	r3, [pc, #332]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x184>)
 8003abe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003ac0:	e09b      	b.n	8003bfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ac2:	4b53      	ldr	r3, [pc, #332]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ac4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ac6:	e098      	b.n	8003bfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ac8:	4b4f      	ldr	r3, [pc, #316]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ad0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ad2:	4b4d      	ldr	r3, [pc, #308]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d028      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ade:	4b4a      	ldr	r3, [pc, #296]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	099b      	lsrs	r3, r3, #6
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	623b      	str	r3, [r7, #32]
 8003ae8:	627a      	str	r2, [r7, #36]	; 0x24
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003af0:	2100      	movs	r1, #0
 8003af2:	4b47      	ldr	r3, [pc, #284]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003af4:	fb03 f201 	mul.w	r2, r3, r1
 8003af8:	2300      	movs	r3, #0
 8003afa:	fb00 f303 	mul.w	r3, r0, r3
 8003afe:	4413      	add	r3, r2
 8003b00:	4a43      	ldr	r2, [pc, #268]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b02:	fba0 1202 	umull	r1, r2, r0, r2
 8003b06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b08:	460a      	mov	r2, r1
 8003b0a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b0e:	4413      	add	r3, r2
 8003b10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b14:	2200      	movs	r2, #0
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	61fa      	str	r2, [r7, #28]
 8003b1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b22:	f7fc fd91 	bl	8000648 <__aeabi_uldivmod>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b2e:	e053      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b30:	4b35      	ldr	r3, [pc, #212]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	2200      	movs	r2, #0
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	617a      	str	r2, [r7, #20]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b42:	f04f 0b00 	mov.w	fp, #0
 8003b46:	4652      	mov	r2, sl
 8003b48:	465b      	mov	r3, fp
 8003b4a:	f04f 0000 	mov.w	r0, #0
 8003b4e:	f04f 0100 	mov.w	r1, #0
 8003b52:	0159      	lsls	r1, r3, #5
 8003b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b58:	0150      	lsls	r0, r2, #5
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	ebb2 080a 	subs.w	r8, r2, sl
 8003b62:	eb63 090b 	sbc.w	r9, r3, fp
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b7a:	ebb2 0408 	subs.w	r4, r2, r8
 8003b7e:	eb63 0509 	sbc.w	r5, r3, r9
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	00eb      	lsls	r3, r5, #3
 8003b8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b90:	00e2      	lsls	r2, r4, #3
 8003b92:	4614      	mov	r4, r2
 8003b94:	461d      	mov	r5, r3
 8003b96:	eb14 030a 	adds.w	r3, r4, sl
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	eb45 030b 	adc.w	r3, r5, fp
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bae:	4629      	mov	r1, r5
 8003bb0:	028b      	lsls	r3, r1, #10
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bb8:	4621      	mov	r1, r4
 8003bba:	028a      	lsls	r2, r1, #10
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	60fa      	str	r2, [r7, #12]
 8003bc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bcc:	f7fc fd3c 	bl	8000648 <__aeabi_uldivmod>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	0c1b      	lsrs	r3, r3, #16
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	3301      	adds	r3, #1
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003be8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bf2:	e002      	b.n	8003bfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x184>)
 8003bf6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3740      	adds	r7, #64	; 0x40
 8003c00:	46bd      	mov	sp, r7
 8003c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c06:	bf00      	nop
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	00f42400 	.word	0x00f42400
 8003c10:	017d7840 	.word	0x017d7840

08003c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	20000014 	.word	0x20000014

08003c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c30:	f7ff fff0 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 8003c34:	4602      	mov	r2, r0
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	0a9b      	lsrs	r3, r3, #10
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	4903      	ldr	r1, [pc, #12]	; (8003c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c42:	5ccb      	ldrb	r3, [r1, r3]
 8003c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	08005928 	.word	0x08005928

08003c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e041      	b.n	8003cea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fe fab2 	bl	80021e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	4619      	mov	r1, r3
 8003c92:	4610      	mov	r0, r2
 8003c94:	f000 fe0c 	bl	80048b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d001      	beq.n	8003d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e044      	b.n	8003d96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a1e      	ldr	r2, [pc, #120]	; (8003da4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d018      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x6c>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d36:	d013      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x6c>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1a      	ldr	r2, [pc, #104]	; (8003da8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00e      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x6c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a19      	ldr	r2, [pc, #100]	; (8003dac <HAL_TIM_Base_Start_IT+0xb8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d009      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x6c>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a17      	ldr	r2, [pc, #92]	; (8003db0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d004      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x6c>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a16      	ldr	r2, [pc, #88]	; (8003db4 <HAL_TIM_Base_Start_IT+0xc0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d111      	bne.n	8003d84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b06      	cmp	r3, #6
 8003d70:	d010      	beq.n	8003d94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f042 0201 	orr.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d82:	e007      	b.n	8003d94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000800 	.word	0x40000800
 8003db0:	40000c00 	.word	0x40000c00
 8003db4:	40014000 	.word	0x40014000

08003db8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e041      	b.n	8003e4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f839 	bl	8003e56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f000 fd5a 	bl	80048b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d109      	bne.n	8003e90 <HAL_TIM_PWM_Start+0x24>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	bf14      	ite	ne
 8003e88:	2301      	movne	r3, #1
 8003e8a:	2300      	moveq	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	e022      	b.n	8003ed6 <HAL_TIM_PWM_Start+0x6a>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d109      	bne.n	8003eaa <HAL_TIM_PWM_Start+0x3e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	bf14      	ite	ne
 8003ea2:	2301      	movne	r3, #1
 8003ea4:	2300      	moveq	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	e015      	b.n	8003ed6 <HAL_TIM_PWM_Start+0x6a>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d109      	bne.n	8003ec4 <HAL_TIM_PWM_Start+0x58>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	bf14      	ite	ne
 8003ebc:	2301      	movne	r3, #1
 8003ebe:	2300      	moveq	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	e008      	b.n	8003ed6 <HAL_TIM_PWM_Start+0x6a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	bf14      	ite	ne
 8003ed0:	2301      	movne	r3, #1
 8003ed2:	2300      	moveq	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e068      	b.n	8003fb0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <HAL_TIM_PWM_Start+0x82>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eec:	e013      	b.n	8003f16 <HAL_TIM_PWM_Start+0xaa>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d104      	bne.n	8003efe <HAL_TIM_PWM_Start+0x92>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003efc:	e00b      	b.n	8003f16 <HAL_TIM_PWM_Start+0xaa>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d104      	bne.n	8003f0e <HAL_TIM_PWM_Start+0xa2>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f0c:	e003      	b.n	8003f16 <HAL_TIM_PWM_Start+0xaa>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2202      	movs	r2, #2
 8003f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	6839      	ldr	r1, [r7, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 ff6c 	bl	8004dfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a23      	ldr	r2, [pc, #140]	; (8003fb8 <HAL_TIM_PWM_Start+0x14c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d107      	bne.n	8003f3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <HAL_TIM_PWM_Start+0x14c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d018      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x10e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f50:	d013      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x10e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <HAL_TIM_PWM_Start+0x150>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00e      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x10e>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a17      	ldr	r2, [pc, #92]	; (8003fc0 <HAL_TIM_PWM_Start+0x154>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d009      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x10e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a16      	ldr	r2, [pc, #88]	; (8003fc4 <HAL_TIM_PWM_Start+0x158>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d004      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x10e>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <HAL_TIM_PWM_Start+0x15c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d111      	bne.n	8003f9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b06      	cmp	r3, #6
 8003f8a:	d010      	beq.n	8003fae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9c:	e007      	b.n	8003fae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0201 	orr.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40010000 	.word	0x40010000
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	40000800 	.word	0x40000800
 8003fc4:	40000c00 	.word	0x40000c00
 8003fc8:	40014000 	.word	0x40014000

08003fcc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	6839      	ldr	r1, [r7, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 ff0c 	bl	8004dfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a29      	ldr	r2, [pc, #164]	; (8004090 <HAL_TIM_PWM_Stop+0xc4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d117      	bne.n	800401e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6a1a      	ldr	r2, [r3, #32]
 8003ff4:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10f      	bne.n	800401e <HAL_TIM_PWM_Stop+0x52>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6a1a      	ldr	r2, [r3, #32]
 8004004:	f240 4344 	movw	r3, #1092	; 0x444
 8004008:	4013      	ands	r3, r2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d107      	bne.n	800401e <HAL_TIM_PWM_Stop+0x52>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800401c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6a1a      	ldr	r2, [r3, #32]
 8004024:	f241 1311 	movw	r3, #4369	; 0x1111
 8004028:	4013      	ands	r3, r2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10f      	bne.n	800404e <HAL_TIM_PWM_Stop+0x82>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6a1a      	ldr	r2, [r3, #32]
 8004034:	f240 4344 	movw	r3, #1092	; 0x444
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d107      	bne.n	800404e <HAL_TIM_PWM_Stop+0x82>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d104      	bne.n	800405e <HAL_TIM_PWM_Stop+0x92>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800405c:	e013      	b.n	8004086 <HAL_TIM_PWM_Stop+0xba>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b04      	cmp	r3, #4
 8004062:	d104      	bne.n	800406e <HAL_TIM_PWM_Stop+0xa2>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800406c:	e00b      	b.n	8004086 <HAL_TIM_PWM_Stop+0xba>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d104      	bne.n	800407e <HAL_TIM_PWM_Stop+0xb2>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800407c:	e003      	b.n	8004086 <HAL_TIM_PWM_Stop+0xba>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40010000 	.word	0x40010000

08004094 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e097      	b.n	80041d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d106      	bne.n	80040c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7fe f839 	bl	8002134 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2202      	movs	r2, #2
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6812      	ldr	r2, [r2, #0]
 80040d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040d8:	f023 0307 	bic.w	r3, r3, #7
 80040dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	4619      	mov	r1, r3
 80040e8:	4610      	mov	r0, r2
 80040ea:	f000 fbe1 	bl	80048b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004116:	f023 0303 	bic.w	r3, r3, #3
 800411a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	4313      	orrs	r3, r2
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004134:	f023 030c 	bic.w	r3, r3, #12
 8004138:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004144:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	4313      	orrs	r3, r2
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	011a      	lsls	r2, r3, #4
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	031b      	lsls	r3, r3, #12
 8004164:	4313      	orrs	r3, r2
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004172:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800417a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	4313      	orrs	r3, r2
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004200:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004208:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d110      	bne.n	8004232 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d102      	bne.n	800421c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004216:	7b7b      	ldrb	r3, [r7, #13]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d001      	beq.n	8004220 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e089      	b.n	8004334 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004230:	e031      	b.n	8004296 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b04      	cmp	r3, #4
 8004236:	d110      	bne.n	800425a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004238:	7bbb      	ldrb	r3, [r7, #14]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d102      	bne.n	8004244 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800423e:	7b3b      	ldrb	r3, [r7, #12]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d001      	beq.n	8004248 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e075      	b.n	8004334 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004258:	e01d      	b.n	8004296 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d108      	bne.n	8004272 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004260:	7bbb      	ldrb	r3, [r7, #14]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d105      	bne.n	8004272 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004266:	7b7b      	ldrb	r3, [r7, #13]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d102      	bne.n	8004272 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800426c:	7b3b      	ldrb	r3, [r7, #12]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d001      	beq.n	8004276 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e05e      	b.n	8004334 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2202      	movs	r2, #2
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2202      	movs	r2, #2
 8004282:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2202      	movs	r2, #2
 800428a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2202      	movs	r2, #2
 8004292:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_TIM_Encoder_Start_IT+0xc4>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d010      	beq.n	80042c4 <HAL_TIM_Encoder_Start_IT+0xe4>
 80042a2:	e01f      	b.n	80042e4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2201      	movs	r2, #1
 80042aa:	2100      	movs	r1, #0
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fda5 	bl	8004dfc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0202 	orr.w	r2, r2, #2
 80042c0:	60da      	str	r2, [r3, #12]
      break;
 80042c2:	e02e      	b.n	8004322 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2201      	movs	r2, #1
 80042ca:	2104      	movs	r1, #4
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fd95 	bl	8004dfc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0204 	orr.w	r2, r2, #4
 80042e0:	60da      	str	r2, [r3, #12]
      break;
 80042e2:	e01e      	b.n	8004322 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2201      	movs	r2, #1
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fd85 	bl	8004dfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2201      	movs	r2, #1
 80042f8:	2104      	movs	r1, #4
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fd7e 	bl	8004dfc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0202 	orr.w	r2, r2, #2
 800430e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0204 	orr.w	r2, r2, #4
 800431e:	60da      	str	r2, [r3, #12]
      break;
 8004320:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 0201 	orr.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b02      	cmp	r3, #2
 8004350:	d122      	bne.n	8004398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b02      	cmp	r3, #2
 800435e:	d11b      	bne.n	8004398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0202 	mvn.w	r2, #2
 8004368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fa77 	bl	8004872 <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fa69 	bl	800485e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fa7a 	bl	8004886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d122      	bne.n	80043ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d11b      	bne.n	80043ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0204 	mvn.w	r2, #4
 80043bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2202      	movs	r2, #2
 80043c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fa4d 	bl	8004872 <HAL_TIM_IC_CaptureCallback>
 80043d8:	e005      	b.n	80043e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fa3f 	bl	800485e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fa50 	bl	8004886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d122      	bne.n	8004440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b08      	cmp	r3, #8
 8004406:	d11b      	bne.n	8004440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0208 	mvn.w	r2, #8
 8004410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2204      	movs	r2, #4
 8004416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fa23 	bl	8004872 <HAL_TIM_IC_CaptureCallback>
 800442c:	e005      	b.n	800443a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fa15 	bl	800485e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fa26 	bl	8004886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	2b10      	cmp	r3, #16
 800444c:	d122      	bne.n	8004494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b10      	cmp	r3, #16
 800445a:	d11b      	bne.n	8004494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0210 	mvn.w	r2, #16
 8004464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2208      	movs	r2, #8
 800446a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f9f9 	bl	8004872 <HAL_TIM_IC_CaptureCallback>
 8004480:	e005      	b.n	800448e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f9eb 	bl	800485e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f9fc 	bl	8004886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d10e      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d107      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0201 	mvn.w	r2, #1
 80044b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fd f974 	bl	80017a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ca:	2b80      	cmp	r3, #128	; 0x80
 80044cc:	d10e      	bne.n	80044ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d8:	2b80      	cmp	r3, #128	; 0x80
 80044da:	d107      	bne.n	80044ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fd26 	bl	8004f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f6:	2b40      	cmp	r3, #64	; 0x40
 80044f8:	d10e      	bne.n	8004518 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004504:	2b40      	cmp	r3, #64	; 0x40
 8004506:	d107      	bne.n	8004518 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f9c1 	bl	800489a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0320 	and.w	r3, r3, #32
 8004522:	2b20      	cmp	r3, #32
 8004524:	d10e      	bne.n	8004544 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0320 	and.w	r3, r3, #32
 8004530:	2b20      	cmp	r3, #32
 8004532:	d107      	bne.n	8004544 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0220 	mvn.w	r2, #32
 800453c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fcf0 	bl	8004f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004544:	bf00      	nop
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004566:	2302      	movs	r3, #2
 8004568:	e0ae      	b.n	80046c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b0c      	cmp	r3, #12
 8004576:	f200 809f 	bhi.w	80046b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800457a:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800457c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004580:	080045b5 	.word	0x080045b5
 8004584:	080046b9 	.word	0x080046b9
 8004588:	080046b9 	.word	0x080046b9
 800458c:	080046b9 	.word	0x080046b9
 8004590:	080045f5 	.word	0x080045f5
 8004594:	080046b9 	.word	0x080046b9
 8004598:	080046b9 	.word	0x080046b9
 800459c:	080046b9 	.word	0x080046b9
 80045a0:	08004637 	.word	0x08004637
 80045a4:	080046b9 	.word	0x080046b9
 80045a8:	080046b9 	.word	0x080046b9
 80045ac:	080046b9 	.word	0x080046b9
 80045b0:	08004677 	.word	0x08004677
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f9f8 	bl	80049b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0208 	orr.w	r2, r2, #8
 80045ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0204 	bic.w	r2, r2, #4
 80045de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6999      	ldr	r1, [r3, #24]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	619a      	str	r2, [r3, #24]
      break;
 80045f2:	e064      	b.n	80046be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fa3e 	bl	8004a7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699a      	ldr	r2, [r3, #24]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800460e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800461e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6999      	ldr	r1, [r3, #24]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	021a      	lsls	r2, r3, #8
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	619a      	str	r2, [r3, #24]
      break;
 8004634:	e043      	b.n	80046be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fa89 	bl	8004b54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0208 	orr.w	r2, r2, #8
 8004650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0204 	bic.w	r2, r2, #4
 8004660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69d9      	ldr	r1, [r3, #28]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	61da      	str	r2, [r3, #28]
      break;
 8004674:	e023      	b.n	80046be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fad3 	bl	8004c28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69d9      	ldr	r1, [r3, #28]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	021a      	lsls	r2, r3, #8
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	61da      	str	r2, [r3, #28]
      break;
 80046b6:	e002      	b.n	80046be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	75fb      	strb	r3, [r7, #23]
      break;
 80046bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_TIM_ConfigClockSource+0x1c>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e0b4      	b.n	8004856 <HAL_TIM_ConfigClockSource+0x186>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800470a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004724:	d03e      	beq.n	80047a4 <HAL_TIM_ConfigClockSource+0xd4>
 8004726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472a:	f200 8087 	bhi.w	800483c <HAL_TIM_ConfigClockSource+0x16c>
 800472e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004732:	f000 8086 	beq.w	8004842 <HAL_TIM_ConfigClockSource+0x172>
 8004736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473a:	d87f      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x16c>
 800473c:	2b70      	cmp	r3, #112	; 0x70
 800473e:	d01a      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0xa6>
 8004740:	2b70      	cmp	r3, #112	; 0x70
 8004742:	d87b      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x16c>
 8004744:	2b60      	cmp	r3, #96	; 0x60
 8004746:	d050      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0x11a>
 8004748:	2b60      	cmp	r3, #96	; 0x60
 800474a:	d877      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x16c>
 800474c:	2b50      	cmp	r3, #80	; 0x50
 800474e:	d03c      	beq.n	80047ca <HAL_TIM_ConfigClockSource+0xfa>
 8004750:	2b50      	cmp	r3, #80	; 0x50
 8004752:	d873      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x16c>
 8004754:	2b40      	cmp	r3, #64	; 0x40
 8004756:	d058      	beq.n	800480a <HAL_TIM_ConfigClockSource+0x13a>
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d86f      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x16c>
 800475c:	2b30      	cmp	r3, #48	; 0x30
 800475e:	d064      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x15a>
 8004760:	2b30      	cmp	r3, #48	; 0x30
 8004762:	d86b      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x16c>
 8004764:	2b20      	cmp	r3, #32
 8004766:	d060      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x15a>
 8004768:	2b20      	cmp	r3, #32
 800476a:	d867      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x16c>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d05c      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x15a>
 8004770:	2b10      	cmp	r3, #16
 8004772:	d05a      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x15a>
 8004774:	e062      	b.n	800483c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6818      	ldr	r0, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6899      	ldr	r1, [r3, #8]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f000 fb19 	bl	8004dbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004798:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	609a      	str	r2, [r3, #8]
      break;
 80047a2:	e04f      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	6899      	ldr	r1, [r3, #8]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f000 fb02 	bl	8004dbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047c6:	609a      	str	r2, [r3, #8]
      break;
 80047c8:	e03c      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6859      	ldr	r1, [r3, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	461a      	mov	r2, r3
 80047d8:	f000 fa76 	bl	8004cc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2150      	movs	r1, #80	; 0x50
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 facf 	bl	8004d86 <TIM_ITRx_SetConfig>
      break;
 80047e8:	e02c      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6859      	ldr	r1, [r3, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f000 fa95 	bl	8004d26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2160      	movs	r1, #96	; 0x60
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fabf 	bl	8004d86 <TIM_ITRx_SetConfig>
      break;
 8004808:	e01c      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6859      	ldr	r1, [r3, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	461a      	mov	r2, r3
 8004818:	f000 fa56 	bl	8004cc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2140      	movs	r1, #64	; 0x40
 8004822:	4618      	mov	r0, r3
 8004824:	f000 faaf 	bl	8004d86 <TIM_ITRx_SetConfig>
      break;
 8004828:	e00c      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4619      	mov	r1, r3
 8004834:	4610      	mov	r0, r2
 8004836:	f000 faa6 	bl	8004d86 <TIM_ITRx_SetConfig>
      break;
 800483a:	e003      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]
      break;
 8004840:	e000      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004842:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
	...

080048b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a34      	ldr	r2, [pc, #208]	; (8004994 <TIM_Base_SetConfig+0xe4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00f      	beq.n	80048e8 <TIM_Base_SetConfig+0x38>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ce:	d00b      	beq.n	80048e8 <TIM_Base_SetConfig+0x38>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a31      	ldr	r2, [pc, #196]	; (8004998 <TIM_Base_SetConfig+0xe8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d007      	beq.n	80048e8 <TIM_Base_SetConfig+0x38>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a30      	ldr	r2, [pc, #192]	; (800499c <TIM_Base_SetConfig+0xec>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d003      	beq.n	80048e8 <TIM_Base_SetConfig+0x38>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a2f      	ldr	r2, [pc, #188]	; (80049a0 <TIM_Base_SetConfig+0xf0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d108      	bne.n	80048fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a25      	ldr	r2, [pc, #148]	; (8004994 <TIM_Base_SetConfig+0xe4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d01b      	beq.n	800493a <TIM_Base_SetConfig+0x8a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004908:	d017      	beq.n	800493a <TIM_Base_SetConfig+0x8a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a22      	ldr	r2, [pc, #136]	; (8004998 <TIM_Base_SetConfig+0xe8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d013      	beq.n	800493a <TIM_Base_SetConfig+0x8a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a21      	ldr	r2, [pc, #132]	; (800499c <TIM_Base_SetConfig+0xec>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00f      	beq.n	800493a <TIM_Base_SetConfig+0x8a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a20      	ldr	r2, [pc, #128]	; (80049a0 <TIM_Base_SetConfig+0xf0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00b      	beq.n	800493a <TIM_Base_SetConfig+0x8a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a1f      	ldr	r2, [pc, #124]	; (80049a4 <TIM_Base_SetConfig+0xf4>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d007      	beq.n	800493a <TIM_Base_SetConfig+0x8a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a1e      	ldr	r2, [pc, #120]	; (80049a8 <TIM_Base_SetConfig+0xf8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d003      	beq.n	800493a <TIM_Base_SetConfig+0x8a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a1d      	ldr	r2, [pc, #116]	; (80049ac <TIM_Base_SetConfig+0xfc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d108      	bne.n	800494c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a08      	ldr	r2, [pc, #32]	; (8004994 <TIM_Base_SetConfig+0xe4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d103      	bne.n	8004980 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	615a      	str	r2, [r3, #20]
}
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40010000 	.word	0x40010000
 8004998:	40000400 	.word	0x40000400
 800499c:	40000800 	.word	0x40000800
 80049a0:	40000c00 	.word	0x40000c00
 80049a4:	40014000 	.word	0x40014000
 80049a8:	40014400 	.word	0x40014400
 80049ac:	40014800 	.word	0x40014800

080049b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	f023 0201 	bic.w	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0303 	bic.w	r3, r3, #3
 80049e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f023 0302 	bic.w	r3, r3, #2
 80049f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a1c      	ldr	r2, [pc, #112]	; (8004a78 <TIM_OC1_SetConfig+0xc8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d10c      	bne.n	8004a26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f023 0308 	bic.w	r3, r3, #8
 8004a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f023 0304 	bic.w	r3, r3, #4
 8004a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a13      	ldr	r2, [pc, #76]	; (8004a78 <TIM_OC1_SetConfig+0xc8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d111      	bne.n	8004a52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	621a      	str	r2, [r3, #32]
}
 8004a6c:	bf00      	nop
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40010000 	.word	0x40010000

08004a7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	f023 0210 	bic.w	r2, r3, #16
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f023 0320 	bic.w	r3, r3, #32
 8004ac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a1e      	ldr	r2, [pc, #120]	; (8004b50 <TIM_OC2_SetConfig+0xd4>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d10d      	bne.n	8004af8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a15      	ldr	r2, [pc, #84]	; (8004b50 <TIM_OC2_SetConfig+0xd4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d113      	bne.n	8004b28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40010000 	.word	0x40010000

08004b54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0303 	bic.w	r3, r3, #3
 8004b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	021b      	lsls	r3, r3, #8
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a1d      	ldr	r2, [pc, #116]	; (8004c24 <TIM_OC3_SetConfig+0xd0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d10d      	bne.n	8004bce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a14      	ldr	r2, [pc, #80]	; (8004c24 <TIM_OC3_SetConfig+0xd0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d113      	bne.n	8004bfe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	621a      	str	r2, [r3, #32]
}
 8004c18:	bf00      	nop
 8004c1a:	371c      	adds	r7, #28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	40010000 	.word	0x40010000

08004c28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	021b      	lsls	r3, r3, #8
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	031b      	lsls	r3, r3, #12
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a10      	ldr	r2, [pc, #64]	; (8004cc4 <TIM_OC4_SetConfig+0x9c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d109      	bne.n	8004c9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	019b      	lsls	r3, r3, #6
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	621a      	str	r2, [r3, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40010000 	.word	0x40010000

08004cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	f023 0201 	bic.w	r2, r3, #1
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	011b      	lsls	r3, r3, #4
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f023 030a 	bic.w	r3, r3, #10
 8004d04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	621a      	str	r2, [r3, #32]
}
 8004d1a:	bf00      	nop
 8004d1c:	371c      	adds	r7, #28
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b087      	sub	sp, #28
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	f023 0210 	bic.w	r2, r3, #16
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	031b      	lsls	r3, r3, #12
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	011b      	lsls	r3, r3, #4
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	621a      	str	r2, [r3, #32]
}
 8004d7a:	bf00      	nop
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b085      	sub	sp, #20
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f043 0307 	orr.w	r3, r3, #7
 8004da8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	609a      	str	r2, [r3, #8]
}
 8004db0:	bf00      	nop
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	021a      	lsls	r2, r3, #8
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	609a      	str	r2, [r3, #8]
}
 8004df0:	bf00      	nop
 8004df2:	371c      	adds	r7, #28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f003 031f 	and.w	r3, r3, #31
 8004e0e:	2201      	movs	r2, #1
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a1a      	ldr	r2, [r3, #32]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	401a      	ands	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a1a      	ldr	r2, [r3, #32]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f003 031f 	and.w	r3, r3, #31
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	fa01 f303 	lsl.w	r3, r1, r3
 8004e34:	431a      	orrs	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	621a      	str	r2, [r3, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e050      	b.n	8004f02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a1c      	ldr	r2, [pc, #112]	; (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d018      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eac:	d013      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a18      	ldr	r2, [pc, #96]	; (8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00e      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a16      	ldr	r2, [pc, #88]	; (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d009      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a15      	ldr	r2, [pc, #84]	; (8004f1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d004      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a13      	ldr	r2, [pc, #76]	; (8004f20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004edc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40010000 	.word	0x40010000
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40000c00 	.word	0x40000c00
 8004f20:	40014000 	.word	0x40014000

08004f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <__errno>:
 8004f4c:	4b01      	ldr	r3, [pc, #4]	; (8004f54 <__errno+0x8>)
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000020 	.word	0x20000020

08004f58 <__libc_init_array>:
 8004f58:	b570      	push	{r4, r5, r6, lr}
 8004f5a:	4d0d      	ldr	r5, [pc, #52]	; (8004f90 <__libc_init_array+0x38>)
 8004f5c:	4c0d      	ldr	r4, [pc, #52]	; (8004f94 <__libc_init_array+0x3c>)
 8004f5e:	1b64      	subs	r4, r4, r5
 8004f60:	10a4      	asrs	r4, r4, #2
 8004f62:	2600      	movs	r6, #0
 8004f64:	42a6      	cmp	r6, r4
 8004f66:	d109      	bne.n	8004f7c <__libc_init_array+0x24>
 8004f68:	4d0b      	ldr	r5, [pc, #44]	; (8004f98 <__libc_init_array+0x40>)
 8004f6a:	4c0c      	ldr	r4, [pc, #48]	; (8004f9c <__libc_init_array+0x44>)
 8004f6c:	f000 fc8e 	bl	800588c <_init>
 8004f70:	1b64      	subs	r4, r4, r5
 8004f72:	10a4      	asrs	r4, r4, #2
 8004f74:	2600      	movs	r6, #0
 8004f76:	42a6      	cmp	r6, r4
 8004f78:	d105      	bne.n	8004f86 <__libc_init_array+0x2e>
 8004f7a:	bd70      	pop	{r4, r5, r6, pc}
 8004f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f80:	4798      	blx	r3
 8004f82:	3601      	adds	r6, #1
 8004f84:	e7ee      	b.n	8004f64 <__libc_init_array+0xc>
 8004f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f8a:	4798      	blx	r3
 8004f8c:	3601      	adds	r6, #1
 8004f8e:	e7f2      	b.n	8004f76 <__libc_init_array+0x1e>
 8004f90:	0800596c 	.word	0x0800596c
 8004f94:	0800596c 	.word	0x0800596c
 8004f98:	0800596c 	.word	0x0800596c
 8004f9c:	08005970 	.word	0x08005970

08004fa0 <memcpy>:
 8004fa0:	440a      	add	r2, r1
 8004fa2:	4291      	cmp	r1, r2
 8004fa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fa8:	d100      	bne.n	8004fac <memcpy+0xc>
 8004faa:	4770      	bx	lr
 8004fac:	b510      	push	{r4, lr}
 8004fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fb6:	4291      	cmp	r1, r2
 8004fb8:	d1f9      	bne.n	8004fae <memcpy+0xe>
 8004fba:	bd10      	pop	{r4, pc}

08004fbc <memset>:
 8004fbc:	4402      	add	r2, r0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d100      	bne.n	8004fc6 <memset+0xa>
 8004fc4:	4770      	bx	lr
 8004fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fca:	e7f9      	b.n	8004fc0 <memset+0x4>

08004fcc <siprintf>:
 8004fcc:	b40e      	push	{r1, r2, r3}
 8004fce:	b500      	push	{lr}
 8004fd0:	b09c      	sub	sp, #112	; 0x70
 8004fd2:	ab1d      	add	r3, sp, #116	; 0x74
 8004fd4:	9002      	str	r0, [sp, #8]
 8004fd6:	9006      	str	r0, [sp, #24]
 8004fd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fdc:	4809      	ldr	r0, [pc, #36]	; (8005004 <siprintf+0x38>)
 8004fde:	9107      	str	r1, [sp, #28]
 8004fe0:	9104      	str	r1, [sp, #16]
 8004fe2:	4909      	ldr	r1, [pc, #36]	; (8005008 <siprintf+0x3c>)
 8004fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fe8:	9105      	str	r1, [sp, #20]
 8004fea:	6800      	ldr	r0, [r0, #0]
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	a902      	add	r1, sp, #8
 8004ff0:	f000 f868 	bl	80050c4 <_svfiprintf_r>
 8004ff4:	9b02      	ldr	r3, [sp, #8]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	b01c      	add	sp, #112	; 0x70
 8004ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005000:	b003      	add	sp, #12
 8005002:	4770      	bx	lr
 8005004:	20000020 	.word	0x20000020
 8005008:	ffff0208 	.word	0xffff0208

0800500c <__ssputs_r>:
 800500c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005010:	688e      	ldr	r6, [r1, #8]
 8005012:	429e      	cmp	r6, r3
 8005014:	4682      	mov	sl, r0
 8005016:	460c      	mov	r4, r1
 8005018:	4690      	mov	r8, r2
 800501a:	461f      	mov	r7, r3
 800501c:	d838      	bhi.n	8005090 <__ssputs_r+0x84>
 800501e:	898a      	ldrh	r2, [r1, #12]
 8005020:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005024:	d032      	beq.n	800508c <__ssputs_r+0x80>
 8005026:	6825      	ldr	r5, [r4, #0]
 8005028:	6909      	ldr	r1, [r1, #16]
 800502a:	eba5 0901 	sub.w	r9, r5, r1
 800502e:	6965      	ldr	r5, [r4, #20]
 8005030:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005034:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005038:	3301      	adds	r3, #1
 800503a:	444b      	add	r3, r9
 800503c:	106d      	asrs	r5, r5, #1
 800503e:	429d      	cmp	r5, r3
 8005040:	bf38      	it	cc
 8005042:	461d      	movcc	r5, r3
 8005044:	0553      	lsls	r3, r2, #21
 8005046:	d531      	bpl.n	80050ac <__ssputs_r+0xa0>
 8005048:	4629      	mov	r1, r5
 800504a:	f000 fb55 	bl	80056f8 <_malloc_r>
 800504e:	4606      	mov	r6, r0
 8005050:	b950      	cbnz	r0, 8005068 <__ssputs_r+0x5c>
 8005052:	230c      	movs	r3, #12
 8005054:	f8ca 3000 	str.w	r3, [sl]
 8005058:	89a3      	ldrh	r3, [r4, #12]
 800505a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800505e:	81a3      	strh	r3, [r4, #12]
 8005060:	f04f 30ff 	mov.w	r0, #4294967295
 8005064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005068:	6921      	ldr	r1, [r4, #16]
 800506a:	464a      	mov	r2, r9
 800506c:	f7ff ff98 	bl	8004fa0 <memcpy>
 8005070:	89a3      	ldrh	r3, [r4, #12]
 8005072:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507a:	81a3      	strh	r3, [r4, #12]
 800507c:	6126      	str	r6, [r4, #16]
 800507e:	6165      	str	r5, [r4, #20]
 8005080:	444e      	add	r6, r9
 8005082:	eba5 0509 	sub.w	r5, r5, r9
 8005086:	6026      	str	r6, [r4, #0]
 8005088:	60a5      	str	r5, [r4, #8]
 800508a:	463e      	mov	r6, r7
 800508c:	42be      	cmp	r6, r7
 800508e:	d900      	bls.n	8005092 <__ssputs_r+0x86>
 8005090:	463e      	mov	r6, r7
 8005092:	6820      	ldr	r0, [r4, #0]
 8005094:	4632      	mov	r2, r6
 8005096:	4641      	mov	r1, r8
 8005098:	f000 faa8 	bl	80055ec <memmove>
 800509c:	68a3      	ldr	r3, [r4, #8]
 800509e:	1b9b      	subs	r3, r3, r6
 80050a0:	60a3      	str	r3, [r4, #8]
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	4433      	add	r3, r6
 80050a6:	6023      	str	r3, [r4, #0]
 80050a8:	2000      	movs	r0, #0
 80050aa:	e7db      	b.n	8005064 <__ssputs_r+0x58>
 80050ac:	462a      	mov	r2, r5
 80050ae:	f000 fb97 	bl	80057e0 <_realloc_r>
 80050b2:	4606      	mov	r6, r0
 80050b4:	2800      	cmp	r0, #0
 80050b6:	d1e1      	bne.n	800507c <__ssputs_r+0x70>
 80050b8:	6921      	ldr	r1, [r4, #16]
 80050ba:	4650      	mov	r0, sl
 80050bc:	f000 fab0 	bl	8005620 <_free_r>
 80050c0:	e7c7      	b.n	8005052 <__ssputs_r+0x46>
	...

080050c4 <_svfiprintf_r>:
 80050c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c8:	4698      	mov	r8, r3
 80050ca:	898b      	ldrh	r3, [r1, #12]
 80050cc:	061b      	lsls	r3, r3, #24
 80050ce:	b09d      	sub	sp, #116	; 0x74
 80050d0:	4607      	mov	r7, r0
 80050d2:	460d      	mov	r5, r1
 80050d4:	4614      	mov	r4, r2
 80050d6:	d50e      	bpl.n	80050f6 <_svfiprintf_r+0x32>
 80050d8:	690b      	ldr	r3, [r1, #16]
 80050da:	b963      	cbnz	r3, 80050f6 <_svfiprintf_r+0x32>
 80050dc:	2140      	movs	r1, #64	; 0x40
 80050de:	f000 fb0b 	bl	80056f8 <_malloc_r>
 80050e2:	6028      	str	r0, [r5, #0]
 80050e4:	6128      	str	r0, [r5, #16]
 80050e6:	b920      	cbnz	r0, 80050f2 <_svfiprintf_r+0x2e>
 80050e8:	230c      	movs	r3, #12
 80050ea:	603b      	str	r3, [r7, #0]
 80050ec:	f04f 30ff 	mov.w	r0, #4294967295
 80050f0:	e0d1      	b.n	8005296 <_svfiprintf_r+0x1d2>
 80050f2:	2340      	movs	r3, #64	; 0x40
 80050f4:	616b      	str	r3, [r5, #20]
 80050f6:	2300      	movs	r3, #0
 80050f8:	9309      	str	r3, [sp, #36]	; 0x24
 80050fa:	2320      	movs	r3, #32
 80050fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005100:	f8cd 800c 	str.w	r8, [sp, #12]
 8005104:	2330      	movs	r3, #48	; 0x30
 8005106:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80052b0 <_svfiprintf_r+0x1ec>
 800510a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800510e:	f04f 0901 	mov.w	r9, #1
 8005112:	4623      	mov	r3, r4
 8005114:	469a      	mov	sl, r3
 8005116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800511a:	b10a      	cbz	r2, 8005120 <_svfiprintf_r+0x5c>
 800511c:	2a25      	cmp	r2, #37	; 0x25
 800511e:	d1f9      	bne.n	8005114 <_svfiprintf_r+0x50>
 8005120:	ebba 0b04 	subs.w	fp, sl, r4
 8005124:	d00b      	beq.n	800513e <_svfiprintf_r+0x7a>
 8005126:	465b      	mov	r3, fp
 8005128:	4622      	mov	r2, r4
 800512a:	4629      	mov	r1, r5
 800512c:	4638      	mov	r0, r7
 800512e:	f7ff ff6d 	bl	800500c <__ssputs_r>
 8005132:	3001      	adds	r0, #1
 8005134:	f000 80aa 	beq.w	800528c <_svfiprintf_r+0x1c8>
 8005138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800513a:	445a      	add	r2, fp
 800513c:	9209      	str	r2, [sp, #36]	; 0x24
 800513e:	f89a 3000 	ldrb.w	r3, [sl]
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 80a2 	beq.w	800528c <_svfiprintf_r+0x1c8>
 8005148:	2300      	movs	r3, #0
 800514a:	f04f 32ff 	mov.w	r2, #4294967295
 800514e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005152:	f10a 0a01 	add.w	sl, sl, #1
 8005156:	9304      	str	r3, [sp, #16]
 8005158:	9307      	str	r3, [sp, #28]
 800515a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800515e:	931a      	str	r3, [sp, #104]	; 0x68
 8005160:	4654      	mov	r4, sl
 8005162:	2205      	movs	r2, #5
 8005164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005168:	4851      	ldr	r0, [pc, #324]	; (80052b0 <_svfiprintf_r+0x1ec>)
 800516a:	f7fb f841 	bl	80001f0 <memchr>
 800516e:	9a04      	ldr	r2, [sp, #16]
 8005170:	b9d8      	cbnz	r0, 80051aa <_svfiprintf_r+0xe6>
 8005172:	06d0      	lsls	r0, r2, #27
 8005174:	bf44      	itt	mi
 8005176:	2320      	movmi	r3, #32
 8005178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800517c:	0711      	lsls	r1, r2, #28
 800517e:	bf44      	itt	mi
 8005180:	232b      	movmi	r3, #43	; 0x2b
 8005182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005186:	f89a 3000 	ldrb.w	r3, [sl]
 800518a:	2b2a      	cmp	r3, #42	; 0x2a
 800518c:	d015      	beq.n	80051ba <_svfiprintf_r+0xf6>
 800518e:	9a07      	ldr	r2, [sp, #28]
 8005190:	4654      	mov	r4, sl
 8005192:	2000      	movs	r0, #0
 8005194:	f04f 0c0a 	mov.w	ip, #10
 8005198:	4621      	mov	r1, r4
 800519a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800519e:	3b30      	subs	r3, #48	; 0x30
 80051a0:	2b09      	cmp	r3, #9
 80051a2:	d94e      	bls.n	8005242 <_svfiprintf_r+0x17e>
 80051a4:	b1b0      	cbz	r0, 80051d4 <_svfiprintf_r+0x110>
 80051a6:	9207      	str	r2, [sp, #28]
 80051a8:	e014      	b.n	80051d4 <_svfiprintf_r+0x110>
 80051aa:	eba0 0308 	sub.w	r3, r0, r8
 80051ae:	fa09 f303 	lsl.w	r3, r9, r3
 80051b2:	4313      	orrs	r3, r2
 80051b4:	9304      	str	r3, [sp, #16]
 80051b6:	46a2      	mov	sl, r4
 80051b8:	e7d2      	b.n	8005160 <_svfiprintf_r+0x9c>
 80051ba:	9b03      	ldr	r3, [sp, #12]
 80051bc:	1d19      	adds	r1, r3, #4
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	9103      	str	r1, [sp, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	bfbb      	ittet	lt
 80051c6:	425b      	neglt	r3, r3
 80051c8:	f042 0202 	orrlt.w	r2, r2, #2
 80051cc:	9307      	strge	r3, [sp, #28]
 80051ce:	9307      	strlt	r3, [sp, #28]
 80051d0:	bfb8      	it	lt
 80051d2:	9204      	strlt	r2, [sp, #16]
 80051d4:	7823      	ldrb	r3, [r4, #0]
 80051d6:	2b2e      	cmp	r3, #46	; 0x2e
 80051d8:	d10c      	bne.n	80051f4 <_svfiprintf_r+0x130>
 80051da:	7863      	ldrb	r3, [r4, #1]
 80051dc:	2b2a      	cmp	r3, #42	; 0x2a
 80051de:	d135      	bne.n	800524c <_svfiprintf_r+0x188>
 80051e0:	9b03      	ldr	r3, [sp, #12]
 80051e2:	1d1a      	adds	r2, r3, #4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	9203      	str	r2, [sp, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bfb8      	it	lt
 80051ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80051f0:	3402      	adds	r4, #2
 80051f2:	9305      	str	r3, [sp, #20]
 80051f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80052c0 <_svfiprintf_r+0x1fc>
 80051f8:	7821      	ldrb	r1, [r4, #0]
 80051fa:	2203      	movs	r2, #3
 80051fc:	4650      	mov	r0, sl
 80051fe:	f7fa fff7 	bl	80001f0 <memchr>
 8005202:	b140      	cbz	r0, 8005216 <_svfiprintf_r+0x152>
 8005204:	2340      	movs	r3, #64	; 0x40
 8005206:	eba0 000a 	sub.w	r0, r0, sl
 800520a:	fa03 f000 	lsl.w	r0, r3, r0
 800520e:	9b04      	ldr	r3, [sp, #16]
 8005210:	4303      	orrs	r3, r0
 8005212:	3401      	adds	r4, #1
 8005214:	9304      	str	r3, [sp, #16]
 8005216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800521a:	4826      	ldr	r0, [pc, #152]	; (80052b4 <_svfiprintf_r+0x1f0>)
 800521c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005220:	2206      	movs	r2, #6
 8005222:	f7fa ffe5 	bl	80001f0 <memchr>
 8005226:	2800      	cmp	r0, #0
 8005228:	d038      	beq.n	800529c <_svfiprintf_r+0x1d8>
 800522a:	4b23      	ldr	r3, [pc, #140]	; (80052b8 <_svfiprintf_r+0x1f4>)
 800522c:	bb1b      	cbnz	r3, 8005276 <_svfiprintf_r+0x1b2>
 800522e:	9b03      	ldr	r3, [sp, #12]
 8005230:	3307      	adds	r3, #7
 8005232:	f023 0307 	bic.w	r3, r3, #7
 8005236:	3308      	adds	r3, #8
 8005238:	9303      	str	r3, [sp, #12]
 800523a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800523c:	4433      	add	r3, r6
 800523e:	9309      	str	r3, [sp, #36]	; 0x24
 8005240:	e767      	b.n	8005112 <_svfiprintf_r+0x4e>
 8005242:	fb0c 3202 	mla	r2, ip, r2, r3
 8005246:	460c      	mov	r4, r1
 8005248:	2001      	movs	r0, #1
 800524a:	e7a5      	b.n	8005198 <_svfiprintf_r+0xd4>
 800524c:	2300      	movs	r3, #0
 800524e:	3401      	adds	r4, #1
 8005250:	9305      	str	r3, [sp, #20]
 8005252:	4619      	mov	r1, r3
 8005254:	f04f 0c0a 	mov.w	ip, #10
 8005258:	4620      	mov	r0, r4
 800525a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800525e:	3a30      	subs	r2, #48	; 0x30
 8005260:	2a09      	cmp	r2, #9
 8005262:	d903      	bls.n	800526c <_svfiprintf_r+0x1a8>
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0c5      	beq.n	80051f4 <_svfiprintf_r+0x130>
 8005268:	9105      	str	r1, [sp, #20]
 800526a:	e7c3      	b.n	80051f4 <_svfiprintf_r+0x130>
 800526c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005270:	4604      	mov	r4, r0
 8005272:	2301      	movs	r3, #1
 8005274:	e7f0      	b.n	8005258 <_svfiprintf_r+0x194>
 8005276:	ab03      	add	r3, sp, #12
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	462a      	mov	r2, r5
 800527c:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <_svfiprintf_r+0x1f8>)
 800527e:	a904      	add	r1, sp, #16
 8005280:	4638      	mov	r0, r7
 8005282:	f3af 8000 	nop.w
 8005286:	1c42      	adds	r2, r0, #1
 8005288:	4606      	mov	r6, r0
 800528a:	d1d6      	bne.n	800523a <_svfiprintf_r+0x176>
 800528c:	89ab      	ldrh	r3, [r5, #12]
 800528e:	065b      	lsls	r3, r3, #25
 8005290:	f53f af2c 	bmi.w	80050ec <_svfiprintf_r+0x28>
 8005294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005296:	b01d      	add	sp, #116	; 0x74
 8005298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529c:	ab03      	add	r3, sp, #12
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	462a      	mov	r2, r5
 80052a2:	4b06      	ldr	r3, [pc, #24]	; (80052bc <_svfiprintf_r+0x1f8>)
 80052a4:	a904      	add	r1, sp, #16
 80052a6:	4638      	mov	r0, r7
 80052a8:	f000 f87a 	bl	80053a0 <_printf_i>
 80052ac:	e7eb      	b.n	8005286 <_svfiprintf_r+0x1c2>
 80052ae:	bf00      	nop
 80052b0:	08005930 	.word	0x08005930
 80052b4:	0800593a 	.word	0x0800593a
 80052b8:	00000000 	.word	0x00000000
 80052bc:	0800500d 	.word	0x0800500d
 80052c0:	08005936 	.word	0x08005936

080052c4 <_printf_common>:
 80052c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052c8:	4616      	mov	r6, r2
 80052ca:	4699      	mov	r9, r3
 80052cc:	688a      	ldr	r2, [r1, #8]
 80052ce:	690b      	ldr	r3, [r1, #16]
 80052d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052d4:	4293      	cmp	r3, r2
 80052d6:	bfb8      	it	lt
 80052d8:	4613      	movlt	r3, r2
 80052da:	6033      	str	r3, [r6, #0]
 80052dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052e0:	4607      	mov	r7, r0
 80052e2:	460c      	mov	r4, r1
 80052e4:	b10a      	cbz	r2, 80052ea <_printf_common+0x26>
 80052e6:	3301      	adds	r3, #1
 80052e8:	6033      	str	r3, [r6, #0]
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	0699      	lsls	r1, r3, #26
 80052ee:	bf42      	ittt	mi
 80052f0:	6833      	ldrmi	r3, [r6, #0]
 80052f2:	3302      	addmi	r3, #2
 80052f4:	6033      	strmi	r3, [r6, #0]
 80052f6:	6825      	ldr	r5, [r4, #0]
 80052f8:	f015 0506 	ands.w	r5, r5, #6
 80052fc:	d106      	bne.n	800530c <_printf_common+0x48>
 80052fe:	f104 0a19 	add.w	sl, r4, #25
 8005302:	68e3      	ldr	r3, [r4, #12]
 8005304:	6832      	ldr	r2, [r6, #0]
 8005306:	1a9b      	subs	r3, r3, r2
 8005308:	42ab      	cmp	r3, r5
 800530a:	dc26      	bgt.n	800535a <_printf_common+0x96>
 800530c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005310:	1e13      	subs	r3, r2, #0
 8005312:	6822      	ldr	r2, [r4, #0]
 8005314:	bf18      	it	ne
 8005316:	2301      	movne	r3, #1
 8005318:	0692      	lsls	r2, r2, #26
 800531a:	d42b      	bmi.n	8005374 <_printf_common+0xb0>
 800531c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005320:	4649      	mov	r1, r9
 8005322:	4638      	mov	r0, r7
 8005324:	47c0      	blx	r8
 8005326:	3001      	adds	r0, #1
 8005328:	d01e      	beq.n	8005368 <_printf_common+0xa4>
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	68e5      	ldr	r5, [r4, #12]
 800532e:	6832      	ldr	r2, [r6, #0]
 8005330:	f003 0306 	and.w	r3, r3, #6
 8005334:	2b04      	cmp	r3, #4
 8005336:	bf08      	it	eq
 8005338:	1aad      	subeq	r5, r5, r2
 800533a:	68a3      	ldr	r3, [r4, #8]
 800533c:	6922      	ldr	r2, [r4, #16]
 800533e:	bf0c      	ite	eq
 8005340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005344:	2500      	movne	r5, #0
 8005346:	4293      	cmp	r3, r2
 8005348:	bfc4      	itt	gt
 800534a:	1a9b      	subgt	r3, r3, r2
 800534c:	18ed      	addgt	r5, r5, r3
 800534e:	2600      	movs	r6, #0
 8005350:	341a      	adds	r4, #26
 8005352:	42b5      	cmp	r5, r6
 8005354:	d11a      	bne.n	800538c <_printf_common+0xc8>
 8005356:	2000      	movs	r0, #0
 8005358:	e008      	b.n	800536c <_printf_common+0xa8>
 800535a:	2301      	movs	r3, #1
 800535c:	4652      	mov	r2, sl
 800535e:	4649      	mov	r1, r9
 8005360:	4638      	mov	r0, r7
 8005362:	47c0      	blx	r8
 8005364:	3001      	adds	r0, #1
 8005366:	d103      	bne.n	8005370 <_printf_common+0xac>
 8005368:	f04f 30ff 	mov.w	r0, #4294967295
 800536c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005370:	3501      	adds	r5, #1
 8005372:	e7c6      	b.n	8005302 <_printf_common+0x3e>
 8005374:	18e1      	adds	r1, r4, r3
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	2030      	movs	r0, #48	; 0x30
 800537a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800537e:	4422      	add	r2, r4
 8005380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005384:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005388:	3302      	adds	r3, #2
 800538a:	e7c7      	b.n	800531c <_printf_common+0x58>
 800538c:	2301      	movs	r3, #1
 800538e:	4622      	mov	r2, r4
 8005390:	4649      	mov	r1, r9
 8005392:	4638      	mov	r0, r7
 8005394:	47c0      	blx	r8
 8005396:	3001      	adds	r0, #1
 8005398:	d0e6      	beq.n	8005368 <_printf_common+0xa4>
 800539a:	3601      	adds	r6, #1
 800539c:	e7d9      	b.n	8005352 <_printf_common+0x8e>
	...

080053a0 <_printf_i>:
 80053a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053a4:	7e0f      	ldrb	r7, [r1, #24]
 80053a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053a8:	2f78      	cmp	r7, #120	; 0x78
 80053aa:	4691      	mov	r9, r2
 80053ac:	4680      	mov	r8, r0
 80053ae:	460c      	mov	r4, r1
 80053b0:	469a      	mov	sl, r3
 80053b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053b6:	d807      	bhi.n	80053c8 <_printf_i+0x28>
 80053b8:	2f62      	cmp	r7, #98	; 0x62
 80053ba:	d80a      	bhi.n	80053d2 <_printf_i+0x32>
 80053bc:	2f00      	cmp	r7, #0
 80053be:	f000 80d8 	beq.w	8005572 <_printf_i+0x1d2>
 80053c2:	2f58      	cmp	r7, #88	; 0x58
 80053c4:	f000 80a3 	beq.w	800550e <_printf_i+0x16e>
 80053c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053d0:	e03a      	b.n	8005448 <_printf_i+0xa8>
 80053d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053d6:	2b15      	cmp	r3, #21
 80053d8:	d8f6      	bhi.n	80053c8 <_printf_i+0x28>
 80053da:	a101      	add	r1, pc, #4	; (adr r1, 80053e0 <_printf_i+0x40>)
 80053dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053e0:	08005439 	.word	0x08005439
 80053e4:	0800544d 	.word	0x0800544d
 80053e8:	080053c9 	.word	0x080053c9
 80053ec:	080053c9 	.word	0x080053c9
 80053f0:	080053c9 	.word	0x080053c9
 80053f4:	080053c9 	.word	0x080053c9
 80053f8:	0800544d 	.word	0x0800544d
 80053fc:	080053c9 	.word	0x080053c9
 8005400:	080053c9 	.word	0x080053c9
 8005404:	080053c9 	.word	0x080053c9
 8005408:	080053c9 	.word	0x080053c9
 800540c:	08005559 	.word	0x08005559
 8005410:	0800547d 	.word	0x0800547d
 8005414:	0800553b 	.word	0x0800553b
 8005418:	080053c9 	.word	0x080053c9
 800541c:	080053c9 	.word	0x080053c9
 8005420:	0800557b 	.word	0x0800557b
 8005424:	080053c9 	.word	0x080053c9
 8005428:	0800547d 	.word	0x0800547d
 800542c:	080053c9 	.word	0x080053c9
 8005430:	080053c9 	.word	0x080053c9
 8005434:	08005543 	.word	0x08005543
 8005438:	682b      	ldr	r3, [r5, #0]
 800543a:	1d1a      	adds	r2, r3, #4
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	602a      	str	r2, [r5, #0]
 8005440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005448:	2301      	movs	r3, #1
 800544a:	e0a3      	b.n	8005594 <_printf_i+0x1f4>
 800544c:	6820      	ldr	r0, [r4, #0]
 800544e:	6829      	ldr	r1, [r5, #0]
 8005450:	0606      	lsls	r6, r0, #24
 8005452:	f101 0304 	add.w	r3, r1, #4
 8005456:	d50a      	bpl.n	800546e <_printf_i+0xce>
 8005458:	680e      	ldr	r6, [r1, #0]
 800545a:	602b      	str	r3, [r5, #0]
 800545c:	2e00      	cmp	r6, #0
 800545e:	da03      	bge.n	8005468 <_printf_i+0xc8>
 8005460:	232d      	movs	r3, #45	; 0x2d
 8005462:	4276      	negs	r6, r6
 8005464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005468:	485e      	ldr	r0, [pc, #376]	; (80055e4 <_printf_i+0x244>)
 800546a:	230a      	movs	r3, #10
 800546c:	e019      	b.n	80054a2 <_printf_i+0x102>
 800546e:	680e      	ldr	r6, [r1, #0]
 8005470:	602b      	str	r3, [r5, #0]
 8005472:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005476:	bf18      	it	ne
 8005478:	b236      	sxthne	r6, r6
 800547a:	e7ef      	b.n	800545c <_printf_i+0xbc>
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	6820      	ldr	r0, [r4, #0]
 8005480:	1d19      	adds	r1, r3, #4
 8005482:	6029      	str	r1, [r5, #0]
 8005484:	0601      	lsls	r1, r0, #24
 8005486:	d501      	bpl.n	800548c <_printf_i+0xec>
 8005488:	681e      	ldr	r6, [r3, #0]
 800548a:	e002      	b.n	8005492 <_printf_i+0xf2>
 800548c:	0646      	lsls	r6, r0, #25
 800548e:	d5fb      	bpl.n	8005488 <_printf_i+0xe8>
 8005490:	881e      	ldrh	r6, [r3, #0]
 8005492:	4854      	ldr	r0, [pc, #336]	; (80055e4 <_printf_i+0x244>)
 8005494:	2f6f      	cmp	r7, #111	; 0x6f
 8005496:	bf0c      	ite	eq
 8005498:	2308      	moveq	r3, #8
 800549a:	230a      	movne	r3, #10
 800549c:	2100      	movs	r1, #0
 800549e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054a2:	6865      	ldr	r5, [r4, #4]
 80054a4:	60a5      	str	r5, [r4, #8]
 80054a6:	2d00      	cmp	r5, #0
 80054a8:	bfa2      	ittt	ge
 80054aa:	6821      	ldrge	r1, [r4, #0]
 80054ac:	f021 0104 	bicge.w	r1, r1, #4
 80054b0:	6021      	strge	r1, [r4, #0]
 80054b2:	b90e      	cbnz	r6, 80054b8 <_printf_i+0x118>
 80054b4:	2d00      	cmp	r5, #0
 80054b6:	d04d      	beq.n	8005554 <_printf_i+0x1b4>
 80054b8:	4615      	mov	r5, r2
 80054ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80054be:	fb03 6711 	mls	r7, r3, r1, r6
 80054c2:	5dc7      	ldrb	r7, [r0, r7]
 80054c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054c8:	4637      	mov	r7, r6
 80054ca:	42bb      	cmp	r3, r7
 80054cc:	460e      	mov	r6, r1
 80054ce:	d9f4      	bls.n	80054ba <_printf_i+0x11a>
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	d10b      	bne.n	80054ec <_printf_i+0x14c>
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	07de      	lsls	r6, r3, #31
 80054d8:	d508      	bpl.n	80054ec <_printf_i+0x14c>
 80054da:	6923      	ldr	r3, [r4, #16]
 80054dc:	6861      	ldr	r1, [r4, #4]
 80054de:	4299      	cmp	r1, r3
 80054e0:	bfde      	ittt	le
 80054e2:	2330      	movle	r3, #48	; 0x30
 80054e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054ec:	1b52      	subs	r2, r2, r5
 80054ee:	6122      	str	r2, [r4, #16]
 80054f0:	f8cd a000 	str.w	sl, [sp]
 80054f4:	464b      	mov	r3, r9
 80054f6:	aa03      	add	r2, sp, #12
 80054f8:	4621      	mov	r1, r4
 80054fa:	4640      	mov	r0, r8
 80054fc:	f7ff fee2 	bl	80052c4 <_printf_common>
 8005500:	3001      	adds	r0, #1
 8005502:	d14c      	bne.n	800559e <_printf_i+0x1fe>
 8005504:	f04f 30ff 	mov.w	r0, #4294967295
 8005508:	b004      	add	sp, #16
 800550a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800550e:	4835      	ldr	r0, [pc, #212]	; (80055e4 <_printf_i+0x244>)
 8005510:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005514:	6829      	ldr	r1, [r5, #0]
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	f851 6b04 	ldr.w	r6, [r1], #4
 800551c:	6029      	str	r1, [r5, #0]
 800551e:	061d      	lsls	r5, r3, #24
 8005520:	d514      	bpl.n	800554c <_printf_i+0x1ac>
 8005522:	07df      	lsls	r7, r3, #31
 8005524:	bf44      	itt	mi
 8005526:	f043 0320 	orrmi.w	r3, r3, #32
 800552a:	6023      	strmi	r3, [r4, #0]
 800552c:	b91e      	cbnz	r6, 8005536 <_printf_i+0x196>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	f023 0320 	bic.w	r3, r3, #32
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	2310      	movs	r3, #16
 8005538:	e7b0      	b.n	800549c <_printf_i+0xfc>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	f043 0320 	orr.w	r3, r3, #32
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	2378      	movs	r3, #120	; 0x78
 8005544:	4828      	ldr	r0, [pc, #160]	; (80055e8 <_printf_i+0x248>)
 8005546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800554a:	e7e3      	b.n	8005514 <_printf_i+0x174>
 800554c:	0659      	lsls	r1, r3, #25
 800554e:	bf48      	it	mi
 8005550:	b2b6      	uxthmi	r6, r6
 8005552:	e7e6      	b.n	8005522 <_printf_i+0x182>
 8005554:	4615      	mov	r5, r2
 8005556:	e7bb      	b.n	80054d0 <_printf_i+0x130>
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	6826      	ldr	r6, [r4, #0]
 800555c:	6961      	ldr	r1, [r4, #20]
 800555e:	1d18      	adds	r0, r3, #4
 8005560:	6028      	str	r0, [r5, #0]
 8005562:	0635      	lsls	r5, r6, #24
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	d501      	bpl.n	800556c <_printf_i+0x1cc>
 8005568:	6019      	str	r1, [r3, #0]
 800556a:	e002      	b.n	8005572 <_printf_i+0x1d2>
 800556c:	0670      	lsls	r0, r6, #25
 800556e:	d5fb      	bpl.n	8005568 <_printf_i+0x1c8>
 8005570:	8019      	strh	r1, [r3, #0]
 8005572:	2300      	movs	r3, #0
 8005574:	6123      	str	r3, [r4, #16]
 8005576:	4615      	mov	r5, r2
 8005578:	e7ba      	b.n	80054f0 <_printf_i+0x150>
 800557a:	682b      	ldr	r3, [r5, #0]
 800557c:	1d1a      	adds	r2, r3, #4
 800557e:	602a      	str	r2, [r5, #0]
 8005580:	681d      	ldr	r5, [r3, #0]
 8005582:	6862      	ldr	r2, [r4, #4]
 8005584:	2100      	movs	r1, #0
 8005586:	4628      	mov	r0, r5
 8005588:	f7fa fe32 	bl	80001f0 <memchr>
 800558c:	b108      	cbz	r0, 8005592 <_printf_i+0x1f2>
 800558e:	1b40      	subs	r0, r0, r5
 8005590:	6060      	str	r0, [r4, #4]
 8005592:	6863      	ldr	r3, [r4, #4]
 8005594:	6123      	str	r3, [r4, #16]
 8005596:	2300      	movs	r3, #0
 8005598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800559c:	e7a8      	b.n	80054f0 <_printf_i+0x150>
 800559e:	6923      	ldr	r3, [r4, #16]
 80055a0:	462a      	mov	r2, r5
 80055a2:	4649      	mov	r1, r9
 80055a4:	4640      	mov	r0, r8
 80055a6:	47d0      	blx	sl
 80055a8:	3001      	adds	r0, #1
 80055aa:	d0ab      	beq.n	8005504 <_printf_i+0x164>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	079b      	lsls	r3, r3, #30
 80055b0:	d413      	bmi.n	80055da <_printf_i+0x23a>
 80055b2:	68e0      	ldr	r0, [r4, #12]
 80055b4:	9b03      	ldr	r3, [sp, #12]
 80055b6:	4298      	cmp	r0, r3
 80055b8:	bfb8      	it	lt
 80055ba:	4618      	movlt	r0, r3
 80055bc:	e7a4      	b.n	8005508 <_printf_i+0x168>
 80055be:	2301      	movs	r3, #1
 80055c0:	4632      	mov	r2, r6
 80055c2:	4649      	mov	r1, r9
 80055c4:	4640      	mov	r0, r8
 80055c6:	47d0      	blx	sl
 80055c8:	3001      	adds	r0, #1
 80055ca:	d09b      	beq.n	8005504 <_printf_i+0x164>
 80055cc:	3501      	adds	r5, #1
 80055ce:	68e3      	ldr	r3, [r4, #12]
 80055d0:	9903      	ldr	r1, [sp, #12]
 80055d2:	1a5b      	subs	r3, r3, r1
 80055d4:	42ab      	cmp	r3, r5
 80055d6:	dcf2      	bgt.n	80055be <_printf_i+0x21e>
 80055d8:	e7eb      	b.n	80055b2 <_printf_i+0x212>
 80055da:	2500      	movs	r5, #0
 80055dc:	f104 0619 	add.w	r6, r4, #25
 80055e0:	e7f5      	b.n	80055ce <_printf_i+0x22e>
 80055e2:	bf00      	nop
 80055e4:	08005941 	.word	0x08005941
 80055e8:	08005952 	.word	0x08005952

080055ec <memmove>:
 80055ec:	4288      	cmp	r0, r1
 80055ee:	b510      	push	{r4, lr}
 80055f0:	eb01 0402 	add.w	r4, r1, r2
 80055f4:	d902      	bls.n	80055fc <memmove+0x10>
 80055f6:	4284      	cmp	r4, r0
 80055f8:	4623      	mov	r3, r4
 80055fa:	d807      	bhi.n	800560c <memmove+0x20>
 80055fc:	1e43      	subs	r3, r0, #1
 80055fe:	42a1      	cmp	r1, r4
 8005600:	d008      	beq.n	8005614 <memmove+0x28>
 8005602:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005606:	f803 2f01 	strb.w	r2, [r3, #1]!
 800560a:	e7f8      	b.n	80055fe <memmove+0x12>
 800560c:	4402      	add	r2, r0
 800560e:	4601      	mov	r1, r0
 8005610:	428a      	cmp	r2, r1
 8005612:	d100      	bne.n	8005616 <memmove+0x2a>
 8005614:	bd10      	pop	{r4, pc}
 8005616:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800561a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800561e:	e7f7      	b.n	8005610 <memmove+0x24>

08005620 <_free_r>:
 8005620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005622:	2900      	cmp	r1, #0
 8005624:	d044      	beq.n	80056b0 <_free_r+0x90>
 8005626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800562a:	9001      	str	r0, [sp, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	f1a1 0404 	sub.w	r4, r1, #4
 8005632:	bfb8      	it	lt
 8005634:	18e4      	addlt	r4, r4, r3
 8005636:	f000 f913 	bl	8005860 <__malloc_lock>
 800563a:	4a1e      	ldr	r2, [pc, #120]	; (80056b4 <_free_r+0x94>)
 800563c:	9801      	ldr	r0, [sp, #4]
 800563e:	6813      	ldr	r3, [r2, #0]
 8005640:	b933      	cbnz	r3, 8005650 <_free_r+0x30>
 8005642:	6063      	str	r3, [r4, #4]
 8005644:	6014      	str	r4, [r2, #0]
 8005646:	b003      	add	sp, #12
 8005648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800564c:	f000 b90e 	b.w	800586c <__malloc_unlock>
 8005650:	42a3      	cmp	r3, r4
 8005652:	d908      	bls.n	8005666 <_free_r+0x46>
 8005654:	6825      	ldr	r5, [r4, #0]
 8005656:	1961      	adds	r1, r4, r5
 8005658:	428b      	cmp	r3, r1
 800565a:	bf01      	itttt	eq
 800565c:	6819      	ldreq	r1, [r3, #0]
 800565e:	685b      	ldreq	r3, [r3, #4]
 8005660:	1949      	addeq	r1, r1, r5
 8005662:	6021      	streq	r1, [r4, #0]
 8005664:	e7ed      	b.n	8005642 <_free_r+0x22>
 8005666:	461a      	mov	r2, r3
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	b10b      	cbz	r3, 8005670 <_free_r+0x50>
 800566c:	42a3      	cmp	r3, r4
 800566e:	d9fa      	bls.n	8005666 <_free_r+0x46>
 8005670:	6811      	ldr	r1, [r2, #0]
 8005672:	1855      	adds	r5, r2, r1
 8005674:	42a5      	cmp	r5, r4
 8005676:	d10b      	bne.n	8005690 <_free_r+0x70>
 8005678:	6824      	ldr	r4, [r4, #0]
 800567a:	4421      	add	r1, r4
 800567c:	1854      	adds	r4, r2, r1
 800567e:	42a3      	cmp	r3, r4
 8005680:	6011      	str	r1, [r2, #0]
 8005682:	d1e0      	bne.n	8005646 <_free_r+0x26>
 8005684:	681c      	ldr	r4, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	6053      	str	r3, [r2, #4]
 800568a:	4421      	add	r1, r4
 800568c:	6011      	str	r1, [r2, #0]
 800568e:	e7da      	b.n	8005646 <_free_r+0x26>
 8005690:	d902      	bls.n	8005698 <_free_r+0x78>
 8005692:	230c      	movs	r3, #12
 8005694:	6003      	str	r3, [r0, #0]
 8005696:	e7d6      	b.n	8005646 <_free_r+0x26>
 8005698:	6825      	ldr	r5, [r4, #0]
 800569a:	1961      	adds	r1, r4, r5
 800569c:	428b      	cmp	r3, r1
 800569e:	bf04      	itt	eq
 80056a0:	6819      	ldreq	r1, [r3, #0]
 80056a2:	685b      	ldreq	r3, [r3, #4]
 80056a4:	6063      	str	r3, [r4, #4]
 80056a6:	bf04      	itt	eq
 80056a8:	1949      	addeq	r1, r1, r5
 80056aa:	6021      	streq	r1, [r4, #0]
 80056ac:	6054      	str	r4, [r2, #4]
 80056ae:	e7ca      	b.n	8005646 <_free_r+0x26>
 80056b0:	b003      	add	sp, #12
 80056b2:	bd30      	pop	{r4, r5, pc}
 80056b4:	20000658 	.word	0x20000658

080056b8 <sbrk_aligned>:
 80056b8:	b570      	push	{r4, r5, r6, lr}
 80056ba:	4e0e      	ldr	r6, [pc, #56]	; (80056f4 <sbrk_aligned+0x3c>)
 80056bc:	460c      	mov	r4, r1
 80056be:	6831      	ldr	r1, [r6, #0]
 80056c0:	4605      	mov	r5, r0
 80056c2:	b911      	cbnz	r1, 80056ca <sbrk_aligned+0x12>
 80056c4:	f000 f8bc 	bl	8005840 <_sbrk_r>
 80056c8:	6030      	str	r0, [r6, #0]
 80056ca:	4621      	mov	r1, r4
 80056cc:	4628      	mov	r0, r5
 80056ce:	f000 f8b7 	bl	8005840 <_sbrk_r>
 80056d2:	1c43      	adds	r3, r0, #1
 80056d4:	d00a      	beq.n	80056ec <sbrk_aligned+0x34>
 80056d6:	1cc4      	adds	r4, r0, #3
 80056d8:	f024 0403 	bic.w	r4, r4, #3
 80056dc:	42a0      	cmp	r0, r4
 80056de:	d007      	beq.n	80056f0 <sbrk_aligned+0x38>
 80056e0:	1a21      	subs	r1, r4, r0
 80056e2:	4628      	mov	r0, r5
 80056e4:	f000 f8ac 	bl	8005840 <_sbrk_r>
 80056e8:	3001      	adds	r0, #1
 80056ea:	d101      	bne.n	80056f0 <sbrk_aligned+0x38>
 80056ec:	f04f 34ff 	mov.w	r4, #4294967295
 80056f0:	4620      	mov	r0, r4
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
 80056f4:	2000065c 	.word	0x2000065c

080056f8 <_malloc_r>:
 80056f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056fc:	1ccd      	adds	r5, r1, #3
 80056fe:	f025 0503 	bic.w	r5, r5, #3
 8005702:	3508      	adds	r5, #8
 8005704:	2d0c      	cmp	r5, #12
 8005706:	bf38      	it	cc
 8005708:	250c      	movcc	r5, #12
 800570a:	2d00      	cmp	r5, #0
 800570c:	4607      	mov	r7, r0
 800570e:	db01      	blt.n	8005714 <_malloc_r+0x1c>
 8005710:	42a9      	cmp	r1, r5
 8005712:	d905      	bls.n	8005720 <_malloc_r+0x28>
 8005714:	230c      	movs	r3, #12
 8005716:	603b      	str	r3, [r7, #0]
 8005718:	2600      	movs	r6, #0
 800571a:	4630      	mov	r0, r6
 800571c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005720:	4e2e      	ldr	r6, [pc, #184]	; (80057dc <_malloc_r+0xe4>)
 8005722:	f000 f89d 	bl	8005860 <__malloc_lock>
 8005726:	6833      	ldr	r3, [r6, #0]
 8005728:	461c      	mov	r4, r3
 800572a:	bb34      	cbnz	r4, 800577a <_malloc_r+0x82>
 800572c:	4629      	mov	r1, r5
 800572e:	4638      	mov	r0, r7
 8005730:	f7ff ffc2 	bl	80056b8 <sbrk_aligned>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	4604      	mov	r4, r0
 8005738:	d14d      	bne.n	80057d6 <_malloc_r+0xde>
 800573a:	6834      	ldr	r4, [r6, #0]
 800573c:	4626      	mov	r6, r4
 800573e:	2e00      	cmp	r6, #0
 8005740:	d140      	bne.n	80057c4 <_malloc_r+0xcc>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	4631      	mov	r1, r6
 8005746:	4638      	mov	r0, r7
 8005748:	eb04 0803 	add.w	r8, r4, r3
 800574c:	f000 f878 	bl	8005840 <_sbrk_r>
 8005750:	4580      	cmp	r8, r0
 8005752:	d13a      	bne.n	80057ca <_malloc_r+0xd2>
 8005754:	6821      	ldr	r1, [r4, #0]
 8005756:	3503      	adds	r5, #3
 8005758:	1a6d      	subs	r5, r5, r1
 800575a:	f025 0503 	bic.w	r5, r5, #3
 800575e:	3508      	adds	r5, #8
 8005760:	2d0c      	cmp	r5, #12
 8005762:	bf38      	it	cc
 8005764:	250c      	movcc	r5, #12
 8005766:	4629      	mov	r1, r5
 8005768:	4638      	mov	r0, r7
 800576a:	f7ff ffa5 	bl	80056b8 <sbrk_aligned>
 800576e:	3001      	adds	r0, #1
 8005770:	d02b      	beq.n	80057ca <_malloc_r+0xd2>
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	442b      	add	r3, r5
 8005776:	6023      	str	r3, [r4, #0]
 8005778:	e00e      	b.n	8005798 <_malloc_r+0xa0>
 800577a:	6822      	ldr	r2, [r4, #0]
 800577c:	1b52      	subs	r2, r2, r5
 800577e:	d41e      	bmi.n	80057be <_malloc_r+0xc6>
 8005780:	2a0b      	cmp	r2, #11
 8005782:	d916      	bls.n	80057b2 <_malloc_r+0xba>
 8005784:	1961      	adds	r1, r4, r5
 8005786:	42a3      	cmp	r3, r4
 8005788:	6025      	str	r5, [r4, #0]
 800578a:	bf18      	it	ne
 800578c:	6059      	strne	r1, [r3, #4]
 800578e:	6863      	ldr	r3, [r4, #4]
 8005790:	bf08      	it	eq
 8005792:	6031      	streq	r1, [r6, #0]
 8005794:	5162      	str	r2, [r4, r5]
 8005796:	604b      	str	r3, [r1, #4]
 8005798:	4638      	mov	r0, r7
 800579a:	f104 060b 	add.w	r6, r4, #11
 800579e:	f000 f865 	bl	800586c <__malloc_unlock>
 80057a2:	f026 0607 	bic.w	r6, r6, #7
 80057a6:	1d23      	adds	r3, r4, #4
 80057a8:	1af2      	subs	r2, r6, r3
 80057aa:	d0b6      	beq.n	800571a <_malloc_r+0x22>
 80057ac:	1b9b      	subs	r3, r3, r6
 80057ae:	50a3      	str	r3, [r4, r2]
 80057b0:	e7b3      	b.n	800571a <_malloc_r+0x22>
 80057b2:	6862      	ldr	r2, [r4, #4]
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	bf0c      	ite	eq
 80057b8:	6032      	streq	r2, [r6, #0]
 80057ba:	605a      	strne	r2, [r3, #4]
 80057bc:	e7ec      	b.n	8005798 <_malloc_r+0xa0>
 80057be:	4623      	mov	r3, r4
 80057c0:	6864      	ldr	r4, [r4, #4]
 80057c2:	e7b2      	b.n	800572a <_malloc_r+0x32>
 80057c4:	4634      	mov	r4, r6
 80057c6:	6876      	ldr	r6, [r6, #4]
 80057c8:	e7b9      	b.n	800573e <_malloc_r+0x46>
 80057ca:	230c      	movs	r3, #12
 80057cc:	603b      	str	r3, [r7, #0]
 80057ce:	4638      	mov	r0, r7
 80057d0:	f000 f84c 	bl	800586c <__malloc_unlock>
 80057d4:	e7a1      	b.n	800571a <_malloc_r+0x22>
 80057d6:	6025      	str	r5, [r4, #0]
 80057d8:	e7de      	b.n	8005798 <_malloc_r+0xa0>
 80057da:	bf00      	nop
 80057dc:	20000658 	.word	0x20000658

080057e0 <_realloc_r>:
 80057e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e4:	4680      	mov	r8, r0
 80057e6:	4614      	mov	r4, r2
 80057e8:	460e      	mov	r6, r1
 80057ea:	b921      	cbnz	r1, 80057f6 <_realloc_r+0x16>
 80057ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057f0:	4611      	mov	r1, r2
 80057f2:	f7ff bf81 	b.w	80056f8 <_malloc_r>
 80057f6:	b92a      	cbnz	r2, 8005804 <_realloc_r+0x24>
 80057f8:	f7ff ff12 	bl	8005620 <_free_r>
 80057fc:	4625      	mov	r5, r4
 80057fe:	4628      	mov	r0, r5
 8005800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005804:	f000 f838 	bl	8005878 <_malloc_usable_size_r>
 8005808:	4284      	cmp	r4, r0
 800580a:	4607      	mov	r7, r0
 800580c:	d802      	bhi.n	8005814 <_realloc_r+0x34>
 800580e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005812:	d812      	bhi.n	800583a <_realloc_r+0x5a>
 8005814:	4621      	mov	r1, r4
 8005816:	4640      	mov	r0, r8
 8005818:	f7ff ff6e 	bl	80056f8 <_malloc_r>
 800581c:	4605      	mov	r5, r0
 800581e:	2800      	cmp	r0, #0
 8005820:	d0ed      	beq.n	80057fe <_realloc_r+0x1e>
 8005822:	42bc      	cmp	r4, r7
 8005824:	4622      	mov	r2, r4
 8005826:	4631      	mov	r1, r6
 8005828:	bf28      	it	cs
 800582a:	463a      	movcs	r2, r7
 800582c:	f7ff fbb8 	bl	8004fa0 <memcpy>
 8005830:	4631      	mov	r1, r6
 8005832:	4640      	mov	r0, r8
 8005834:	f7ff fef4 	bl	8005620 <_free_r>
 8005838:	e7e1      	b.n	80057fe <_realloc_r+0x1e>
 800583a:	4635      	mov	r5, r6
 800583c:	e7df      	b.n	80057fe <_realloc_r+0x1e>
	...

08005840 <_sbrk_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	4d06      	ldr	r5, [pc, #24]	; (800585c <_sbrk_r+0x1c>)
 8005844:	2300      	movs	r3, #0
 8005846:	4604      	mov	r4, r0
 8005848:	4608      	mov	r0, r1
 800584a:	602b      	str	r3, [r5, #0]
 800584c:	f7fc fda2 	bl	8002394 <_sbrk>
 8005850:	1c43      	adds	r3, r0, #1
 8005852:	d102      	bne.n	800585a <_sbrk_r+0x1a>
 8005854:	682b      	ldr	r3, [r5, #0]
 8005856:	b103      	cbz	r3, 800585a <_sbrk_r+0x1a>
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	bd38      	pop	{r3, r4, r5, pc}
 800585c:	20000660 	.word	0x20000660

08005860 <__malloc_lock>:
 8005860:	4801      	ldr	r0, [pc, #4]	; (8005868 <__malloc_lock+0x8>)
 8005862:	f000 b811 	b.w	8005888 <__retarget_lock_acquire_recursive>
 8005866:	bf00      	nop
 8005868:	20000664 	.word	0x20000664

0800586c <__malloc_unlock>:
 800586c:	4801      	ldr	r0, [pc, #4]	; (8005874 <__malloc_unlock+0x8>)
 800586e:	f000 b80c 	b.w	800588a <__retarget_lock_release_recursive>
 8005872:	bf00      	nop
 8005874:	20000664 	.word	0x20000664

08005878 <_malloc_usable_size_r>:
 8005878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800587c:	1f18      	subs	r0, r3, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	bfbc      	itt	lt
 8005882:	580b      	ldrlt	r3, [r1, r0]
 8005884:	18c0      	addlt	r0, r0, r3
 8005886:	4770      	bx	lr

08005888 <__retarget_lock_acquire_recursive>:
 8005888:	4770      	bx	lr

0800588a <__retarget_lock_release_recursive>:
 800588a:	4770      	bx	lr

0800588c <_init>:
 800588c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588e:	bf00      	nop
 8005890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005892:	bc08      	pop	{r3}
 8005894:	469e      	mov	lr, r3
 8005896:	4770      	bx	lr

08005898 <_fini>:
 8005898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589a:	bf00      	nop
 800589c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800589e:	bc08      	pop	{r3}
 80058a0:	469e      	mov	lr, r3
 80058a2:	4770      	bx	lr
