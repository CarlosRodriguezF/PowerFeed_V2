
PowerFeed_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fe0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004180  08004180  00014180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041fc  080041fc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080041fc  080041fc  000141fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004204  08004204  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004204  08004204  00014204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004208  08004208  00014208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800420c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000078  08004284  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08004284  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5fc  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b62  00000000  00000000  0002c6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0002e208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  0002ef48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dc1  00000000  00000000  0002fbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e945  00000000  00000000  00046989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ebf0  00000000  00000000  000552ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3ebe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be8  00000000  00000000  000e3f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004168 	.word	0x08004168

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08004168 	.word	0x08004168

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <LiquidCrystal_I2C>:
}
*/



void LiquidCrystal_I2C(uint8_t lcd_addr, uint8_t lcd_cols, uint8_t lcd_rows) {
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
 800059e:	460b      	mov	r3, r1
 80005a0:	71bb      	strb	r3, [r7, #6]
 80005a2:	4613      	mov	r3, r2
 80005a4:	717b      	strb	r3, [r7, #5]
	_addr = lcd_addr;
 80005a6:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <LiquidCrystal_I2C+0x3c>)
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	7013      	strb	r3, [r2, #0]
	_cols = lcd_cols;
 80005ac:	4a09      	ldr	r2, [pc, #36]	; (80005d4 <LiquidCrystal_I2C+0x40>)
 80005ae:	79bb      	ldrb	r3, [r7, #6]
 80005b0:	7013      	strb	r3, [r2, #0]
	_rows = lcd_rows;
 80005b2:	4a09      	ldr	r2, [pc, #36]	; (80005d8 <LiquidCrystal_I2C+0x44>)
 80005b4:	797b      	ldrb	r3, [r7, #5]
 80005b6:	7013      	strb	r3, [r2, #0]
	_charsize = LCD_5x8DOTS;
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <LiquidCrystal_I2C+0x48>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
	_backlightval = LCD_BACKLIGHT;
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <LiquidCrystal_I2C+0x4c>)
 80005c0:	2208      	movs	r2, #8
 80005c2:	701a      	strb	r2, [r3, #0]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	20000094 	.word	0x20000094
 80005d4:	20000098 	.word	0x20000098
 80005d8:	20000099 	.word	0x20000099
 80005dc:	2000009a 	.word	0x2000009a
 80005e0:	2000009b 	.word	0x2000009b

080005e4 <lcdBegin>:

void lcdBegin(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80005e8:	4b32      	ldr	r3, [pc, #200]	; (80006b4 <lcdBegin+0xd0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]

	if (_rows > 1) {
 80005ee:	4b32      	ldr	r3, [pc, #200]	; (80006b8 <lcdBegin+0xd4>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d906      	bls.n	8000604 <lcdBegin+0x20>
		_displayfunction |= LCD_2LINE;
 80005f6:	4b2f      	ldr	r3, [pc, #188]	; (80006b4 <lcdBegin+0xd0>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	f043 0308 	orr.w	r3, r3, #8
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b2c      	ldr	r3, [pc, #176]	; (80006b4 <lcdBegin+0xd0>)
 8000602:	701a      	strb	r2, [r3, #0]
	}

	setRowOffsets(0x00, 0x40, 0x00 + _cols, 0x40 + _cols);
 8000604:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <lcdBegin+0xd8>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <lcdBegin+0xd8>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	3340      	adds	r3, #64	; 0x40
 8000610:	2140      	movs	r1, #64	; 0x40
 8000612:	2000      	movs	r0, #0
 8000614:	f000 f90e 	bl	8000834 <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((_charsize != 0) && (_rows == 1)) {
 8000618:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <lcdBegin+0xdc>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d00a      	beq.n	8000636 <lcdBegin+0x52>
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <lcdBegin+0xd4>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d106      	bne.n	8000636 <lcdBegin+0x52>
		_displayfunction |= LCD_5x10DOTS;
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <lcdBegin+0xd0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <lcdBegin+0xd0>)
 8000634:	701a      	strb	r2, [r3, #0]
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	HAL_Delay(50);
 8000636:	2032      	movs	r0, #50	; 0x32
 8000638:	f000 fefe 	bl	8001438 <HAL_Delay>

	// Now we pull both RS and R/W low to begin commands
	write8bits(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
 800063c:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <lcdBegin+0xe0>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f000 f967 	bl	8000914 <write8bits>
	HAL_Delay(1);
 8000646:	2001      	movs	r0, #1
 8000648:	f000 fef6 	bl	8001438 <HAL_Delay>
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	write4bits(0x03 << 4);
 800064c:	2030      	movs	r0, #48	; 0x30
 800064e:	f000 f94f 	bl	80008f0 <write4bits>
	HAL_Delay(5); // wait min 4.1ms
 8000652:	2005      	movs	r0, #5
 8000654:	f000 fef0 	bl	8001438 <HAL_Delay>

	// second try
	write4bits(0x03 << 4);
 8000658:	2030      	movs	r0, #48	; 0x30
 800065a:	f000 f949 	bl	80008f0 <write4bits>
	HAL_Delay(5); // wait min 4.1ms
 800065e:	2005      	movs	r0, #5
 8000660:	f000 feea 	bl	8001438 <HAL_Delay>

	// third go!
	write4bits(0x03 << 4);
 8000664:	2030      	movs	r0, #48	; 0x30
 8000666:	f000 f943 	bl	80008f0 <write4bits>
	HAL_Delay(5);
 800066a:	2005      	movs	r0, #5
 800066c:	f000 fee4 	bl	8001438 <HAL_Delay>

	// finally, set to 4-bit interface
	write4bits(0x02 << 4);
 8000670:	2020      	movs	r0, #32
 8000672:	f000 f93d 	bl	80008f0 <write4bits>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <lcdBegin+0xd0>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	f043 0320 	orr.w	r3, r3, #32
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f8c9 	bl	8000818 <command>

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <lcdBegin+0xe4>)
 8000688:	2204      	movs	r2, #4
 800068a:	701a      	strb	r2, [r3, #0]
	lcdDisplay();
 800068c:	f000 f842 	bl	8000714 <lcdDisplay>

	// clear it off
	lcdClear();
 8000690:	f000 f81e 	bl	80006d0 <lcdClear>

	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000694:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <lcdBegin+0xe8>)
 8000696:	2202      	movs	r2, #2
 8000698:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <lcdBegin+0xe8>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f8b7 	bl	8000818 <command>

	lcdHome();
 80006aa:	f000 f81b 	bl	80006e4 <lcdHome>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000095 	.word	0x20000095
 80006b8:	20000099 	.word	0x20000099
 80006bc:	20000098 	.word	0x20000098
 80006c0:	2000009a 	.word	0x2000009a
 80006c4:	2000009b 	.word	0x2000009b
 80006c8:	20000096 	.word	0x20000096
 80006cc:	20000097 	.word	0x20000097

080006d0 <lcdClear>:

/********** high level commands, for the user! */
void lcdClear(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 80006d4:	2001      	movs	r0, #1
 80006d6:	f000 f89f 	bl	8000818 <command>
	HAL_Delay(2);  // this command takes a long time!
 80006da:	2002      	movs	r0, #2
 80006dc:	f000 feac 	bl	8001438 <HAL_Delay>
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <lcdHome>:

void lcdHome(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	command(LCD_RETURNHOME);  // set cursor position to zero
 80006e8:	2002      	movs	r0, #2
 80006ea:	f000 f895 	bl	8000818 <command>
	HAL_Delay(2);  // this command takes a long time!
 80006ee:	2002      	movs	r0, #2
 80006f0:	f000 fea2 	bl	8001438 <HAL_Delay>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <lcdBacklight>:
// Turn the backlight off/on
void lcdNoBacklight(void) {
	_backlightval = LCD_NOBACKLIGHT;
	write8bits(_backlightval);
}
void lcdBacklight(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	_backlightval = LCD_BACKLIGHT;
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <lcdBacklight+0x18>)
 80006fe:	2208      	movs	r2, #8
 8000700:	701a      	strb	r2, [r3, #0]
	write8bits(_backlightval);
 8000702:	4b03      	ldr	r3, [pc, #12]	; (8000710 <lcdBacklight+0x18>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f000 f904 	bl	8000914 <write8bits>
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000009b 	.word	0x2000009b

08000714 <lcdDisplay>:
// Turn the display on/off (quickly)
void lcdNoDisplay(void) {
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void lcdDisplay(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <lcdDisplay+0x28>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <lcdDisplay+0x28>)
 8000724:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <lcdDisplay+0x28>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	f043 0308 	orr.w	r3, r3, #8
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f000 f871 	bl	8000818 <command>
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000096 	.word	0x20000096

08000740 <lcdSetCursor>:
	for (int i = 0; i < 8; i++) {
		lcdWrite(charmap[i]);
	}
}

void lcdSetCursor(uint8_t col, uint8_t row) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	460a      	mov	r2, r1
 800074a:	71fb      	strb	r3, [r7, #7]
 800074c:	4613      	mov	r3, r2
 800074e:	71bb      	strb	r3, [r7, #6]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8000750:	2304      	movs	r3, #4
 8000752:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 8000754:	79bb      	ldrb	r3, [r7, #6]
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	429a      	cmp	r2, r3
 800075a:	d803      	bhi.n	8000764 <lcdSetCursor+0x24>
		row = max_lines - 1;    // we count rows starting w/0
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	3b01      	subs	r3, #1
 8000762:	71bb      	strb	r3, [r7, #6]
	}
	if ( row >= _rows ) {
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <lcdSetCursor+0x5c>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	79ba      	ldrb	r2, [r7, #6]
 800076a:	429a      	cmp	r2, r3
 800076c:	d303      	bcc.n	8000776 <lcdSetCursor+0x36>
		row = _rows - 1;   		// we count rows starting w/0
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <lcdSetCursor+0x5c>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	3b01      	subs	r3, #1
 8000774:	71bb      	strb	r3, [r7, #6]
	}

	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	4a09      	ldr	r2, [pc, #36]	; (80007a0 <lcdSetCursor+0x60>)
 800077a:	5cd2      	ldrb	r2, [r2, r3]
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	4413      	add	r3, r2
 8000780:	b2db      	uxtb	r3, r3
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000788:	b25b      	sxtb	r3, r3
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f843 	bl	8000818 <command>
}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000099 	.word	0x20000099
 80007a0:	2000009c 	.word	0x2000009c

080007a4 <lcdPrint>:

// This will print character string to the LCD
size_t lcdPrint(const char str[]) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	if (str == NULL) return 0;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d101      	bne.n	80007b6 <lcdPrint+0x12>
 80007b2:	2300      	movs	r3, #0
 80007b4:	e01d      	b.n	80007f2 <lcdPrint+0x4e>

	const uint8_t *buffer = (const uint8_t *)str;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	617b      	str	r3, [r7, #20]
	size_t size = strlen(str);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff fd10 	bl	80001e0 <strlen>
 80007c0:	6138      	str	r0, [r7, #16]
	size_t n = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]

	while (size--) {
 80007c6:	e00c      	b.n	80007e2 <lcdPrint+0x3e>
	if (lcdWrite(*buffer++)) n++;
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	617a      	str	r2, [r7, #20]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f812 	bl	80007fa <lcdWrite>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d008      	beq.n	80007ee <lcdPrint+0x4a>
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3301      	adds	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
	while (size--) {
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	613a      	str	r2, [r7, #16]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1ed      	bne.n	80007c8 <lcdPrint+0x24>
 80007ec:	e000      	b.n	80007f0 <lcdPrint+0x4c>
	else break;
 80007ee:	bf00      	nop
	}
	return n;
 80007f0:	68fb      	ldr	r3, [r7, #12]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <lcdWrite>:

/*********** mid level commands, for sending data/cmds */
size_t lcdWrite(uint8_t value) {
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	71fb      	strb	r3, [r7, #7]
	send(value, Rs);
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2101      	movs	r1, #1
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f850 	bl	80008ae <send>
	return 1;
 800080e:	2301      	movs	r3, #1
}
 8000810:	4618      	mov	r0, r3
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <command>:

void command(uint8_t value) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
	send(value, 0);
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f841 	bl	80008ae <send>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <setRowOffsets>:

/************ low level data pushing commands **********/
void setRowOffsets(int row0, int row1, int row2, int row3) {
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
 8000840:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <setRowOffsets+0x3c>)
 8000848:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <setRowOffsets+0x3c>)
 8000850:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <setRowOffsets+0x3c>)
 8000858:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <setRowOffsets+0x3c>)
 8000860:	70da      	strb	r2, [r3, #3]
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	2000009c 	.word	0x2000009c

08000874 <pulseEnable>:

void pulseEnable(uint8_t _data) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	write8bits(_data | En);		// En high
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	b2db      	uxtb	r3, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f844 	bl	8000914 <write8bits>
	HAL_Delay(1);
 800088c:	2001      	movs	r0, #1
 800088e:	f000 fdd3 	bl	8001438 <HAL_Delay>
	//DWT_Delay_us(5);		// enable pulse must be >450ns //To Be Checked

	write8bits(_data & ~En);	// En low
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	f023 0304 	bic.w	r3, r3, #4
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f83a 	bl	8000914 <write8bits>
	HAL_Delay(1);
 80008a0:	2001      	movs	r0, #1
 80008a2:	f000 fdc9 	bl	8001438 <HAL_Delay>
	//DWT_Delay_us(1);		// commands need > 37us to settle //To Be Checked
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <send>:

// write either command or data
void send(uint8_t value, uint8_t mode) {
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b084      	sub	sp, #16
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	4603      	mov	r3, r0
 80008b6:	460a      	mov	r2, r1
 80008b8:	71fb      	strb	r3, [r7, #7]
 80008ba:	4613      	mov	r3, r2
 80008bc:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib = value & 0xf0;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	f023 030f 	bic.w	r3, r3, #15
 80008c4:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (value << 4) & 0xf0;
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	011b      	lsls	r3, r3, #4
 80008ca:	73bb      	strb	r3, [r7, #14]
	write4bits((highnib) | mode);
 80008cc:	7bfa      	ldrb	r2, [r7, #15]
 80008ce:	79bb      	ldrb	r3, [r7, #6]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 f80b 	bl	80008f0 <write4bits>
	write4bits((lownib) | mode);
 80008da:	7bba      	ldrb	r2, [r7, #14]
 80008dc:	79bb      	ldrb	r3, [r7, #6]
 80008de:	4313      	orrs	r3, r2
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f804 	bl	80008f0 <write4bits>
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <write4bits>:

void write4bits(uint8_t value) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	write8bits(value);
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 f809 	bl	8000914 <write8bits>
	pulseEnable(value);
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ffb5 	bl	8000874 <pulseEnable>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <write8bits>:

void write8bits(uint8_t _data){
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af02      	add	r7, sp, #8
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_t[1];
	data_t[0] = _data | _backlightval;
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <write8bits+0x34>)
 8000920:	781a      	ldrb	r2, [r3, #0]
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	4313      	orrs	r3, r2
 8000926:	b2db      	uxtb	r3, r3
 8000928:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit (&hi2c1, _addr, (uint8_t *) data_t, 1, 100);
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <write8bits+0x38>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	b299      	uxth	r1, r3
 8000930:	f107 020c 	add.w	r2, r7, #12
 8000934:	2364      	movs	r3, #100	; 0x64
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	2301      	movs	r3, #1
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <write8bits+0x3c>)
 800093c:	f001 f968 	bl	8001c10 <HAL_I2C_Master_Transmit>
}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000009b 	.word	0x2000009b
 800094c:	20000094 	.word	0x20000094
 8000950:	200000a0 	.word	0x200000a0

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095a:	f000 fcfb 	bl	8001354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095e:	f000 f84f 	bl	8000a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000962:	f000 f9bb 	bl	8000cdc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000966:	f000 f8b5 	bl	8000ad4 <MX_I2C1_Init>
  MX_TIM1_Init();
 800096a:	f000 f8e1 	bl	8000b30 <MX_TIM1_Init>
  MX_TIM2_Init();
 800096e:	f000 f93f 	bl	8000bf0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //Encoder Initialization
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000972:	213c      	movs	r1, #60	; 0x3c
 8000974:	481d      	ldr	r0, [pc, #116]	; (80009ec <main+0x98>)
 8000976:	f002 f9e5 	bl	8002d44 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int32_t value = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
  int32_t old_value = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
  LiquidCrystal_I2C(0x4E, 20, 4);
 8000982:	2204      	movs	r2, #4
 8000984:	2114      	movs	r1, #20
 8000986:	204e      	movs	r0, #78	; 0x4e
 8000988:	f7ff fe04 	bl	8000594 <LiquidCrystal_I2C>
  lcdBegin();
 800098c:	f7ff fe2a 	bl	80005e4 <lcdBegin>
  lcdSetCursor(1,1);
 8000990:	2101      	movs	r1, #1
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff fed4 	bl	8000740 <lcdSetCursor>
  lcdPrint("Power Feed V2.0 DEV");
 8000998:	4815      	ldr	r0, [pc, #84]	; (80009f0 <main+0x9c>)
 800099a:	f7ff ff03 	bl	80007a4 <lcdPrint>
  lcdBacklight();
 800099e:	f7ff feab 	bl	80006f8 <lcdBacklight>

  while (1)
  {
	  HAL_Delay(10);
 80009a2:	200a      	movs	r0, #10
 80009a4:	f000 fd48 	bl	8001438 <HAL_Delay>
	  encoder_value = Encoder_Read(&old_encoder_value);
 80009a8:	4812      	ldr	r0, [pc, #72]	; (80009f4 <main+0xa0>)
 80009aa:	f000 f9f7 	bl	8000d9c <Encoder_Read>
 80009ae:	4603      	mov	r3, r0
 80009b0:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <main+0xa4>)
 80009b2:	6013      	str	r3, [r2, #0]
	  value = value + encoder_value;
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <main+0xa4>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	4413      	add	r3, r2
 80009bc:	607b      	str	r3, [r7, #4]
	  //sprintf(str, "%ld", value);
	  if (value != old_value){
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d006      	beq.n	80009d4 <main+0x80>
		  old_value = value;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	603b      	str	r3, [r7, #0]
		  LCD_Write_Number(value, 1, 3);
 80009ca:	2203      	movs	r2, #3
 80009cc:	2101      	movs	r1, #1
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f000 fa1e 	bl	8000e10 <LCD_Write_Number>
	  }
	  lcdSetCursor(1,2);
 80009d4:	2102      	movs	r1, #2
 80009d6:	2001      	movs	r0, #1
 80009d8:	f7ff feb2 	bl	8000740 <lcdSetCursor>
	  lcdPrint("Encoder: ");
 80009dc:	4807      	ldr	r0, [pc, #28]	; (80009fc <main+0xa8>)
 80009de:	f7ff fee1 	bl	80007a4 <lcdPrint>
	  HAL_Delay(10);
 80009e2:	200a      	movs	r0, #10
 80009e4:	f000 fd28 	bl	8001438 <HAL_Delay>
	  HAL_Delay(10);
 80009e8:	e7db      	b.n	80009a2 <main+0x4e>
 80009ea:	bf00      	nop
 80009ec:	200000f4 	.word	0x200000f4
 80009f0:	08004180 	.word	0x08004180
 80009f4:	20000004 	.word	0x20000004
 80009f8:	20000000 	.word	0x20000000
 80009fc:	08004194 	.word	0x08004194

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b094      	sub	sp, #80	; 0x50
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 0320 	add.w	r3, r7, #32
 8000a0a:	2230      	movs	r2, #48	; 0x30
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 ff34 	bl	800387c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	4b28      	ldr	r3, [pc, #160]	; (8000acc <SystemClock_Config+0xcc>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a27      	ldr	r2, [pc, #156]	; (8000acc <SystemClock_Config+0xcc>)
 8000a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
 8000a34:	4b25      	ldr	r3, [pc, #148]	; (8000acc <SystemClock_Config+0xcc>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a40:	2300      	movs	r3, #0
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <SystemClock_Config+0xd0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a4c:	4a20      	ldr	r2, [pc, #128]	; (8000ad0 <SystemClock_Config+0xd0>)
 8000a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <SystemClock_Config+0xd0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a60:	2301      	movs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a74:	2319      	movs	r3, #25
 8000a76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a78:	23a8      	movs	r3, #168	; 0xa8
 8000a7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a80:	2304      	movs	r3, #4
 8000a82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a84:	f107 0320 	add.w	r3, r7, #32
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 fbc9 	bl	8002220 <HAL_RCC_OscConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a94:	f000 faac 	bl	8000ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a98:	230f      	movs	r3, #15
 8000a9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fe2c 	bl	8002710 <HAL_RCC_ClockConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000abe:	f000 fa97 	bl	8000ff0 <Error_Handler>
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3750      	adds	r7, #80	; 0x50
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40007000 	.word	0x40007000

08000ad4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000ada:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <MX_I2C1_Init+0x54>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000ae0:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <MX_I2C1_Init+0x58>)
 8000ae2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000af2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000af6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b12:	f000 ff39 	bl	8001988 <HAL_I2C_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b1c:	f000 fa68 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200000a0 	.word	0x200000a0
 8000b28:	40005400 	.word	0x40005400
 8000b2c:	000186a0 	.word	0x000186a0

08000b30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	2224      	movs	r2, #36	; 0x24
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f002 fe9c 	bl	800387c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b4c:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <MX_TIM1_Init+0xb8>)
 8000b4e:	4a27      	ldr	r2, [pc, #156]	; (8000bec <MX_TIM1_Init+0xbc>)
 8000b50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b52:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <MX_TIM1_Init+0xb8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b58:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <MX_TIM1_Init+0xb8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b5e:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <MX_TIM1_Init+0xb8>)
 8000b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b66:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <MX_TIM1_Init+0xb8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <MX_TIM1_Init+0xb8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b72:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <MX_TIM1_Init+0xb8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b80:	2301      	movs	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b90:	2301      	movs	r3, #1
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4811      	ldr	r0, [pc, #68]	; (8000be8 <MX_TIM1_Init+0xb8>)
 8000ba4:	f002 f828 	bl	8002bf8 <HAL_TIM_Encoder_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000bae:	f000 fa1f 	bl	8000ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480a      	ldr	r0, [pc, #40]	; (8000be8 <MX_TIM1_Init+0xb8>)
 8000bc0:	f002 fdc4 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000bca:	f000 fa11 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->CNT = 0x7FFF;		//Initialization CNT in middle value to avoid Over/Under flow
 8000bce:	4b07      	ldr	r3, [pc, #28]	; (8000bec <MX_TIM1_Init+0xbc>)
 8000bd0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
  TIM1->SR = ~(1UL << 0);	//Clear UIF flag
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <MX_TIM1_Init+0xbc>)
 8000bd8:	f06f 0201 	mvn.w	r2, #1
 8000bdc:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM1_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	3730      	adds	r7, #48	; 0x30
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000f4 	.word	0x200000f4
 8000bec:	40010000 	.word	0x40010000

08000bf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08e      	sub	sp, #56	; 0x38
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c04:	f107 0320 	add.w	r3, r7, #32
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
 8000c1c:	615a      	str	r2, [r3, #20]
 8000c1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c20:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c28:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c36:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c42:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c44:	2280      	movs	r2, #128	; 0x80
 8000c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c48:	4823      	ldr	r0, [pc, #140]	; (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c4a:	f001 ff2d 	bl	8002aa8 <HAL_TIM_Base_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c54:	f000 f9cc 	bl	8000ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c62:	4619      	mov	r1, r3
 8000c64:	481c      	ldr	r0, [pc, #112]	; (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c66:	f002 f9dd 	bl	8003024 <HAL_TIM_ConfigClockSource>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c70:	f000 f9be 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c74:	4818      	ldr	r0, [pc, #96]	; (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c76:	f001 ff66 	bl	8002b46 <HAL_TIM_PWM_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c80:	f000 f9b6 	bl	8000ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c8c:	f107 0320 	add.w	r3, r7, #32
 8000c90:	4619      	mov	r1, r3
 8000c92:	4811      	ldr	r0, [pc, #68]	; (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c94:	f002 fd5a 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c9e:	f000 f9a7 	bl	8000ff0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca2:	2360      	movs	r3, #96	; 0x60
 8000ca4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4807      	ldr	r0, [pc, #28]	; (8000cd8 <MX_TIM2_Init+0xe8>)
 8000cba:	f002 f8f1 	bl	8002ea0 <HAL_TIM_PWM_ConfigChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000cc4:	f000 f994 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cc8:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <MX_TIM2_Init+0xe8>)
 8000cca:	f000 fa6f 	bl	80011ac <HAL_TIM_MspPostInit>

}
 8000cce:	bf00      	nop
 8000cd0:	3738      	adds	r7, #56	; 0x38
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000013c 	.word	0x2000013c

08000cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <MX_GPIO_Init+0xb4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a25      	ldr	r2, [pc, #148]	; (8000d90 <MX_GPIO_Init+0xb4>)
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <MX_GPIO_Init+0xb4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <MX_GPIO_Init+0xb4>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a1e      	ldr	r2, [pc, #120]	; (8000d90 <MX_GPIO_Init+0xb4>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <MX_GPIO_Init+0xb4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_GPIO_Init+0xb4>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <MX_GPIO_Init+0xb4>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_GPIO_Init+0xb4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_Pin|DIR_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2106      	movs	r1, #6
 8000d4a:	4812      	ldr	r0, [pc, #72]	; (8000d94 <MX_GPIO_Init+0xb8>)
 8000d4c:	f000 fe02 	bl	8001954 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENABLE_Pin DIR_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin|DIR_Pin;
 8000d50:	2306      	movs	r3, #6
 8000d52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	480b      	ldr	r0, [pc, #44]	; (8000d94 <MX_GPIO_Init+0xb8>)
 8000d68:	f000 fc70 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_LEFT_Pin SW_RIGHT_Pin EN_SW_Pin */
  GPIO_InitStruct.Pin = SW_LEFT_Pin|SW_RIGHT_Pin|EN_SW_Pin;
 8000d6c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000d70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_GPIO_Init+0xbc>)
 8000d82:	f000 fc63 	bl	800164c <HAL_GPIO_Init>

}
 8000d86:	bf00      	nop
 8000d88:	3720      	adds	r7, #32
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020000 	.word	0x40020000
 8000d98:	40020400 	.word	0x40020400

08000d9c <Encoder_Read>:
  * @brief Encoder Steps Read Function
  * @param old_value - Pointer to the value storaged as latest encoder value
  * @retval encoder_steps - Number of steps increased or decreased on the encoder
  */
int32_t Encoder_Read(int32_t *old_value)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	int32_t encoder_steps;

	if (TIM1->SR & (1 << 0)){		//If overflow or underflow occurs reset the CNT value
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <Encoder_Read+0x70>)
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d009      	beq.n	8000dc4 <Encoder_Read+0x28>
		TIM1->SR = ~(1UL << 0);		//Reset UIF bit
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <Encoder_Read+0x70>)
 8000db2:	f06f 0201 	mvn.w	r2, #1
 8000db6:	611a      	str	r2, [r3, #16]
		TIM1->CNT = 0x7FFF;			//Reload CNT register to ox7FFF
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <Encoder_Read+0x70>)
 8000dba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000dbe:	625a      	str	r2, [r3, #36]	; 0x24
		return 0;					//Return 0
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e01d      	b.n	8000e00 <Encoder_Read+0x64>
	}

	uint16_t encoder_value = TIM1->CNT;		//Variable to storage the CNT register value
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <Encoder_Read+0x70>)
 8000dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc8:	81fb      	strh	r3, [r7, #14]
	if ( ( encoder_value - *old_value >= 2 ) || ( encoder_value - *old_value <= -2 ) ){		//If the value in the encoder register changed (At least 2, to avoid glitches) calculate increment
 8000dca:	89fa      	ldrh	r2, [r7, #14]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	dc06      	bgt.n	8000de4 <Encoder_Read+0x48>
 8000dd6:	89fa      	ldrh	r2, [r7, #14]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de2:	da0c      	bge.n	8000dfe <Encoder_Read+0x62>
		encoder_steps = (*old_value - encoder_value)/2;	//Divide by 2 is needed due to increments by two on the encoder
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	89fb      	ldrh	r3, [r7, #14]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	0fda      	lsrs	r2, r3, #31
 8000dee:	4413      	add	r3, r2
 8000df0:	105b      	asrs	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
		*old_value = encoder_value;			//Reload the old_value
 8000df4:	89fa      	ldrh	r2, [r7, #14]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	601a      	str	r2, [r3, #0]
		return encoder_steps;				//Return the increments, can be positive or negative
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	e000      	b.n	8000e00 <Encoder_Read+0x64>
	}else{
		return 0;							//Return 0 in case no changes
 8000dfe:	2300      	movs	r3, #0
	}
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	40010000 	.word	0x40010000

08000e10 <LCD_Write_Number>:
  * 		col_pos - column position for the number
  * 		row_pos - raw position for the number
  * @retval
  */
void LCD_Write_Number(int32_t value, int32_t col_pos, int32_t raw_pos)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
	char str[10];
	sprintf(str, "%ld", value);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	496f      	ldr	r1, [pc, #444]	; (8000fe0 <LCD_Write_Number+0x1d0>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fd31 	bl	800388c <siprintf>
	if (value > 0){
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	dd5b      	ble.n	8000ee8 <LCD_Write_Number+0xd8>
		if (value < 10){
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2b09      	cmp	r3, #9
 8000e34:	dc1a      	bgt.n	8000e6c <LCD_Write_Number+0x5c>
			lcdSetCursor(col_pos+1,raw_pos);
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fc7b 	bl	8000740 <lcdSetCursor>
			lcdPrint(" ");
 8000e4a:	4866      	ldr	r0, [pc, #408]	; (8000fe4 <LCD_Write_Number+0x1d4>)
 8000e4c:	f7ff fcaa 	bl	80007a4 <lcdPrint>
			lcdSetCursor(col_pos,raw_pos);
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fc70 	bl	8000740 <lcdSetCursor>
			lcdPrint(str);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fc9d 	bl	80007a4 <lcdPrint>
		lcdSetCursor(col_pos+1,raw_pos);
		lcdPrint(" ");
		lcdSetCursor(col_pos,2);
		lcdPrint(str);
	}
}
 8000e6a:	e0b5      	b.n	8000fd8 <LCD_Write_Number+0x1c8>
		}else if (value < 100){
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b63      	cmp	r3, #99	; 0x63
 8000e70:	dc1a      	bgt.n	8000ea8 <LCD_Write_Number+0x98>
			lcdSetCursor(col_pos+1,raw_pos);
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	3301      	adds	r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fc5d 	bl	8000740 <lcdSetCursor>
			lcdPrint("  ");
 8000e86:	4858      	ldr	r0, [pc, #352]	; (8000fe8 <LCD_Write_Number+0x1d8>)
 8000e88:	f7ff fc8c 	bl	80007a4 <lcdPrint>
			lcdSetCursor(col_pos,raw_pos);
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	4611      	mov	r1, r2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fc52 	bl	8000740 <lcdSetCursor>
			lcdPrint(str);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fc7f 	bl	80007a4 <lcdPrint>
}
 8000ea6:	e097      	b.n	8000fd8 <LCD_Write_Number+0x1c8>
		}else if (value < 1000){
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000eae:	f280 8093 	bge.w	8000fd8 <LCD_Write_Number+0x1c8>
			lcdSetCursor(col_pos+1,raw_pos);
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fc3d 	bl	8000740 <lcdSetCursor>
			lcdPrint("   ");
 8000ec6:	4849      	ldr	r0, [pc, #292]	; (8000fec <LCD_Write_Number+0x1dc>)
 8000ec8:	f7ff fc6c 	bl	80007a4 <lcdPrint>
			lcdSetCursor(col_pos,raw_pos);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fc32 	bl	8000740 <lcdSetCursor>
			lcdPrint(str);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fc5f 	bl	80007a4 <lcdPrint>
}
 8000ee6:	e077      	b.n	8000fd8 <LCD_Write_Number+0x1c8>
	}else if (value < 0) {
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	da5c      	bge.n	8000fa8 <LCD_Write_Number+0x198>
		if (value > -10){
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f113 0f09 	cmn.w	r3, #9
 8000ef4:	db1a      	blt.n	8000f2c <LCD_Write_Number+0x11c>
			lcdSetCursor(col_pos+2,raw_pos);
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	3302      	adds	r3, #2
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	4611      	mov	r1, r2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fc1b 	bl	8000740 <lcdSetCursor>
			lcdPrint(" ");
 8000f0a:	4836      	ldr	r0, [pc, #216]	; (8000fe4 <LCD_Write_Number+0x1d4>)
 8000f0c:	f7ff fc4a 	bl	80007a4 <lcdPrint>
			lcdSetCursor(col_pos,raw_pos);
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fc10 	bl	8000740 <lcdSetCursor>
			lcdPrint(str);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fc3d 	bl	80007a4 <lcdPrint>
}
 8000f2a:	e055      	b.n	8000fd8 <LCD_Write_Number+0x1c8>
		}else if (value > -100){
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8000f32:	db1a      	blt.n	8000f6a <LCD_Write_Number+0x15a>
			lcdSetCursor(col_pos+2,raw_pos);
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	3302      	adds	r3, #2
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fbfc 	bl	8000740 <lcdSetCursor>
			lcdPrint("  ");
 8000f48:	4827      	ldr	r0, [pc, #156]	; (8000fe8 <LCD_Write_Number+0x1d8>)
 8000f4a:	f7ff fc2b 	bl	80007a4 <lcdPrint>
			lcdSetCursor(col_pos,raw_pos);
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fbf1 	bl	8000740 <lcdSetCursor>
			lcdPrint(str);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fc1e 	bl	80007a4 <lcdPrint>
}
 8000f68:	e036      	b.n	8000fd8 <LCD_Write_Number+0x1c8>
		}else if (value > -1000){
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000f70:	dd32      	ble.n	8000fd8 <LCD_Write_Number+0x1c8>
			lcdSetCursor(col_pos+2,raw_pos);
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	3302      	adds	r3, #2
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fbdd 	bl	8000740 <lcdSetCursor>
			lcdPrint("   ");
 8000f86:	4819      	ldr	r0, [pc, #100]	; (8000fec <LCD_Write_Number+0x1dc>)
 8000f88:	f7ff fc0c 	bl	80007a4 <lcdPrint>
			lcdSetCursor(col_pos,raw_pos);
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	4611      	mov	r1, r2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fbd2 	bl	8000740 <lcdSetCursor>
			lcdPrint(str);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fbff 	bl	80007a4 <lcdPrint>
}
 8000fa6:	e017      	b.n	8000fd8 <LCD_Write_Number+0x1c8>
		lcdSetCursor(col_pos+1,raw_pos);
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fbc2 	bl	8000740 <lcdSetCursor>
		lcdPrint(" ");
 8000fbc:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <LCD_Write_Number+0x1d4>)
 8000fbe:	f7ff fbf1 	bl	80007a4 <lcdPrint>
		lcdSetCursor(col_pos,2);
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2102      	movs	r1, #2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fbb9 	bl	8000740 <lcdSetCursor>
		lcdPrint(str);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fbe6 	bl	80007a4 <lcdPrint>
}
 8000fd8:	bf00      	nop
 8000fda:	3720      	adds	r7, #32
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	080041a0 	.word	0x080041a0
 8000fe4:	080041a4 	.word	0x080041a4
 8000fe8:	080041a8 	.word	0x080041a8
 8000fec:	080041ac 	.word	0x080041ac

08000ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff4:	b672      	cpsid	i
}
 8000ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <Error_Handler+0x8>
	...

08000ffc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <HAL_MspInit+0x4c>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <HAL_MspInit+0x4c>)
 800100c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <HAL_MspInit+0x4c>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_MspInit+0x4c>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <HAL_MspInit+0x4c>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_MspInit+0x4c>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800

0800104c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <HAL_I2C_MspInit+0x84>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d12b      	bne.n	80010c6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_I2C_MspInit+0x88>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <HAL_I2C_MspInit+0x88>)
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_I2C_MspInit+0x88>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800108a:	23c0      	movs	r3, #192	; 0xc0
 800108c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800108e:	2312      	movs	r3, #18
 8001090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800109a:	2304      	movs	r3, #4
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	480c      	ldr	r0, [pc, #48]	; (80010d8 <HAL_I2C_MspInit+0x8c>)
 80010a6:	f000 fad1 	bl	800164c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_I2C_MspInit+0x88>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_I2C_MspInit+0x88>)
 80010b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_I2C_MspInit+0x88>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40005400 	.word	0x40005400
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020400 	.word	0x40020400

080010dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a19      	ldr	r2, [pc, #100]	; (8001160 <HAL_TIM_Encoder_MspInit+0x84>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d12c      	bne.n	8001158 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <HAL_TIM_Encoder_MspInit+0x88>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a17      	ldr	r2, [pc, #92]	; (8001164 <HAL_TIM_Encoder_MspInit+0x88>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_TIM_Encoder_MspInit+0x88>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_TIM_Encoder_MspInit+0x88>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a10      	ldr	r2, [pc, #64]	; (8001164 <HAL_TIM_Encoder_MspInit+0x88>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_TIM_Encoder_MspInit+0x88>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN_A_Pin|EN_B_Pin;
 8001136:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001148:	2301      	movs	r3, #1
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001154:	f000 fa7a 	bl	800164c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	; 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40010000 	.word	0x40010000
 8001164:	40023800 	.word	0x40023800
 8001168:	40020000 	.word	0x40020000

0800116c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800117c:	d10d      	bne.n	800119a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_TIM_Base_MspInit+0x3c>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_TIM_Base_MspInit+0x3c>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_TIM_Base_MspInit+0x3c>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011cc:	d11d      	bne.n	800120a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_TIM_MspPostInit+0x68>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <HAL_TIM_MspPostInit+0x68>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <HAL_TIM_MspPostInit+0x68>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PULSE_Pin;
 80011ea:	2301      	movs	r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PULSE_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 030c 	add.w	r3, r7, #12
 8001202:	4619      	mov	r1, r3
 8001204:	4804      	ldr	r0, [pc, #16]	; (8001218 <HAL_TIM_MspPostInit+0x6c>)
 8001206:	f000 fa21 	bl	800164c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800120a:	bf00      	nop
 800120c:	3720      	adds	r7, #32
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	40020000 	.word	0x40020000

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler+0x4>

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001268:	f000 f8c6 	bl	80013f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001278:	4a14      	ldr	r2, [pc, #80]	; (80012cc <_sbrk+0x5c>)
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <_sbrk+0x60>)
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <_sbrk+0x64>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <_sbrk+0x64>)
 800128e:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <_sbrk+0x68>)
 8001290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	429a      	cmp	r2, r3
 800129e:	d207      	bcs.n	80012b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a0:	f002 fac2 	bl	8003828 <__errno>
 80012a4:	4603      	mov	r3, r0
 80012a6:	220c      	movs	r2, #12
 80012a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	e009      	b.n	80012c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <_sbrk+0x64>)
 80012c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20010000 	.word	0x20010000
 80012d0:	00000400 	.word	0x00000400
 80012d4:	20000184 	.word	0x20000184
 80012d8:	200001a0 	.word	0x200001a0

080012dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <SystemInit+0x20>)
 80012e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <SystemInit+0x20>)
 80012e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <Reset_Handler>:
 8001300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001338 <LoopFillZerobss+0x12>
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <LoopFillZerobss+0x16>)
 8001306:	490e      	ldr	r1, [pc, #56]	; (8001340 <LoopFillZerobss+0x1a>)
 8001308:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <LoopFillZerobss+0x1e>)
 800130a:	2300      	movs	r3, #0
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:
 800130e:	58d4      	ldr	r4, [r2, r3]
 8001310:	50c4      	str	r4, [r0, r3]
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:
 8001314:	18c4      	adds	r4, r0, r3
 8001316:	428c      	cmp	r4, r1
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
 800131a:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <LoopFillZerobss+0x22>)
 800131c:	4c0b      	ldr	r4, [pc, #44]	; (800134c <LoopFillZerobss+0x26>)
 800131e:	2300      	movs	r3, #0
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:
 8001326:	42a2      	cmp	r2, r4
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>
 800132a:	f7ff ffd7 	bl	80012dc <SystemInit>
 800132e:	f002 fa81 	bl	8003834 <__libc_init_array>
 8001332:	f7ff fb0f 	bl	8000954 <main>
 8001336:	4770      	bx	lr
 8001338:	20010000 	.word	0x20010000
 800133c:	20000000 	.word	0x20000000
 8001340:	20000078 	.word	0x20000078
 8001344:	0800420c 	.word	0x0800420c
 8001348:	20000078 	.word	0x20000078
 800134c:	2000019c 	.word	0x2000019c

08001350 <ADC_IRQHandler>:
 8001350:	e7fe      	b.n	8001350 <ADC_IRQHandler>
	...

08001354 <HAL_Init>:
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_Init+0x40>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <HAL_Init+0x40>)
 800135e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_Init+0x40>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <HAL_Init+0x40>)
 800136a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_Init+0x40>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_Init+0x40>)
 8001376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	2003      	movs	r0, #3
 800137e:	f000 f931 	bl	80015e4 <HAL_NVIC_SetPriorityGrouping>
 8001382:	200f      	movs	r0, #15
 8001384:	f000 f808 	bl	8001398 <HAL_InitTick>
 8001388:	f7ff fe38 	bl	8000ffc <HAL_MspInit>
 800138c:	2300      	movs	r3, #0
 800138e:	4618      	mov	r0, r3
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023c00 	.word	0x40023c00

08001398 <HAL_InitTick>:
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x54>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_InitTick+0x58>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f93b 	bl	8001632 <HAL_SYSTICK_Config>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_InitTick+0x2e>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00e      	b.n	80013e4 <HAL_InitTick+0x4c>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b0f      	cmp	r3, #15
 80013ca:	d80a      	bhi.n	80013e2 <HAL_InitTick+0x4a>
 80013cc:	2200      	movs	r2, #0
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295
 80013d4:	f000 f911 	bl	80015fa <HAL_NVIC_SetPriority>
 80013d8:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <HAL_InitTick+0x5c>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	2300      	movs	r3, #0
 80013e0:	e000      	b.n	80013e4 <HAL_InitTick+0x4c>
 80013e2:	2301      	movs	r3, #1
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000008 	.word	0x20000008
 80013f0:	20000010 	.word	0x20000010
 80013f4:	2000000c 	.word	0x2000000c

080013f8 <HAL_IncTick>:
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_IncTick+0x20>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_IncTick+0x24>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4a04      	ldr	r2, [pc, #16]	; (800141c <HAL_IncTick+0x24>)
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000010 	.word	0x20000010
 800141c:	20000188 	.word	0x20000188

08001420 <HAL_GetTick>:
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <HAL_GetTick+0x14>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000188 	.word	0x20000188

08001438 <HAL_Delay>:
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	f7ff ffee 	bl	8001420 <HAL_GetTick>
 8001444:	60b8      	str	r0, [r7, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001450:	d005      	beq.n	800145e <HAL_Delay+0x26>
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_Delay+0x44>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4413      	add	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	bf00      	nop
 8001460:	f7ff ffde 	bl	8001420 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	429a      	cmp	r2, r3
 800146e:	d8f7      	bhi.n	8001460 <HAL_Delay+0x28>
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000010 	.word	0x20000010

08001480 <__NVIC_SetPriorityGrouping>:
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800149c:	4013      	ands	r3, r2
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	021a      	lsls	r2, r3, #8
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	60d3      	str	r3, [r2, #12]
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_GetPriorityGrouping>:
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_SetPriority>:
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	; (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	; (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <NVIC_EncodePriority>:
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f1c3 0307 	rsb	r3, r3, #7
 8001552:	2b04      	cmp	r3, #4
 8001554:	bf28      	it	cs
 8001556:	2304      	movcs	r3, #4
 8001558:	61bb      	str	r3, [r7, #24]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3304      	adds	r3, #4
 800155e:	2b06      	cmp	r3, #6
 8001560:	d902      	bls.n	8001568 <NVIC_EncodePriority+0x30>
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3b03      	subs	r3, #3
 8001566:	e000      	b.n	800156a <NVIC_EncodePriority+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
 8001580:	f04f 31ff 	mov.w	r1, #4294967295
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43d9      	mvns	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	400b      	ands	r3, r1
 8001590:	4313      	orrs	r3, r2
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	; 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <SysTick_Config>:
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b0:	d301      	bcc.n	80015b6 <SysTick_Config+0x16>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00f      	b.n	80015d6 <SysTick_Config+0x36>
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <SysTick_Config+0x40>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	6053      	str	r3, [r2, #4]
 80015be:	210f      	movs	r1, #15
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f7ff ff8e 	bl	80014e4 <__NVIC_SetPriority>
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <SysTick_Config+0x40>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <SysTick_Config+0x40>)
 80015d0:	2207      	movs	r2, #7
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	2300      	movs	r3, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	e000e010 	.word	0xe000e010

080015e4 <HAL_NVIC_SetPriorityGrouping>:
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ff47 	bl	8001480 <__NVIC_SetPriorityGrouping>
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_SetPriority>:
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	73fb      	strb	r3, [r7, #15]
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	f7ff ff5c 	bl	80014c8 <__NVIC_GetPriorityGrouping>
 8001610:	6178      	str	r0, [r7, #20]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	6978      	ldr	r0, [r7, #20]
 8001618:	f7ff ff8e 	bl	8001538 <NVIC_EncodePriority>
 800161c:	4602      	mov	r2, r0
 800161e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff5d 	bl	80014e4 <__NVIC_SetPriority>
 800162a:	bf00      	nop
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_SYSTICK_Config>:
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffb0 	bl	80015a0 <SysTick_Config>
 8001640:	4603      	mov	r3, r0
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <HAL_GPIO_Init>:
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
 8001666:	e159      	b.n	800191c <HAL_GPIO_Init+0x2d0>
 8001668:	2201      	movs	r2, #1
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	429a      	cmp	r2, r3
 8001682:	f040 8148 	bne.w	8001916 <HAL_GPIO_Init+0x2ca>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	2b01      	cmp	r3, #1
 8001690:	d005      	beq.n	800169e <HAL_GPIO_Init+0x52>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d130      	bne.n	8001700 <HAL_GPIO_Init+0xb4>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	61bb      	str	r3, [r7, #24]
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	2203      	movs	r2, #3
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	61bb      	str	r3, [r7, #24]
 80016d4:	2201      	movs	r2, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	f003 0201 	and.w	r2, r3, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b03      	cmp	r3, #3
 800170a:	d017      	beq.n	800173c <HAL_GPIO_Init+0xf0>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	61bb      	str	r3, [r7, #24]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	2203      	movs	r2, #3
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d123      	bne.n	8001790 <HAL_GPIO_Init+0x144>
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	08da      	lsrs	r2, r3, #3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3208      	adds	r2, #8
 8001750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	220f      	movs	r2, #15
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	691a      	ldr	r2, [r3, #16]
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	08da      	lsrs	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3208      	adds	r2, #8
 800178a:	69b9      	ldr	r1, [r7, #24]
 800178c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	61bb      	str	r3, [r7, #24]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	2203      	movs	r2, #3
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0203 	and.w	r2, r3, #3
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80a2 	beq.w	8001916 <HAL_GPIO_Init+0x2ca>
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b57      	ldr	r3, [pc, #348]	; (8001934 <HAL_GPIO_Init+0x2e8>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	4a56      	ldr	r2, [pc, #344]	; (8001934 <HAL_GPIO_Init+0x2e8>)
 80017dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e0:	6453      	str	r3, [r2, #68]	; 0x44
 80017e2:	4b54      	ldr	r3, [pc, #336]	; (8001934 <HAL_GPIO_Init+0x2e8>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4a52      	ldr	r2, [pc, #328]	; (8001938 <HAL_GPIO_Init+0x2ec>)
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	089b      	lsrs	r3, r3, #2
 80017f4:	3302      	adds	r3, #2
 80017f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fa:	61bb      	str	r3, [r7, #24]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	220f      	movs	r2, #15
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a49      	ldr	r2, [pc, #292]	; (800193c <HAL_GPIO_Init+0x2f0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d019      	beq.n	800184e <HAL_GPIO_Init+0x202>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a48      	ldr	r2, [pc, #288]	; (8001940 <HAL_GPIO_Init+0x2f4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d013      	beq.n	800184a <HAL_GPIO_Init+0x1fe>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a47      	ldr	r2, [pc, #284]	; (8001944 <HAL_GPIO_Init+0x2f8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d00d      	beq.n	8001846 <HAL_GPIO_Init+0x1fa>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a46      	ldr	r2, [pc, #280]	; (8001948 <HAL_GPIO_Init+0x2fc>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d007      	beq.n	8001842 <HAL_GPIO_Init+0x1f6>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a45      	ldr	r2, [pc, #276]	; (800194c <HAL_GPIO_Init+0x300>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d101      	bne.n	800183e <HAL_GPIO_Init+0x1f2>
 800183a:	2304      	movs	r3, #4
 800183c:	e008      	b.n	8001850 <HAL_GPIO_Init+0x204>
 800183e:	2307      	movs	r3, #7
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x204>
 8001842:	2303      	movs	r3, #3
 8001844:	e004      	b.n	8001850 <HAL_GPIO_Init+0x204>
 8001846:	2302      	movs	r3, #2
 8001848:	e002      	b.n	8001850 <HAL_GPIO_Init+0x204>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_GPIO_Init+0x204>
 800184e:	2300      	movs	r3, #0
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	f002 0203 	and.w	r2, r2, #3
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	4093      	lsls	r3, r2
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
 8001860:	4935      	ldr	r1, [pc, #212]	; (8001938 <HAL_GPIO_Init+0x2ec>)
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3302      	adds	r3, #2
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800186e:	4b38      	ldr	r3, [pc, #224]	; (8001950 <HAL_GPIO_Init+0x304>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x246>
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
 8001892:	4a2f      	ldr	r2, [pc, #188]	; (8001950 <HAL_GPIO_Init+0x304>)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	6093      	str	r3, [r2, #8]
 8001898:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <HAL_GPIO_Init+0x304>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x270>
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	4a24      	ldr	r2, [pc, #144]	; (8001950 <HAL_GPIO_Init+0x304>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	60d3      	str	r3, [r2, #12]
 80018c2:	4b23      	ldr	r3, [pc, #140]	; (8001950 <HAL_GPIO_Init+0x304>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	61bb      	str	r3, [r7, #24]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x29a>
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	4a1a      	ldr	r2, [pc, #104]	; (8001950 <HAL_GPIO_Init+0x304>)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	6053      	str	r3, [r2, #4]
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_GPIO_Init+0x304>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	61bb      	str	r3, [r7, #24]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x2c4>
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
 8001910:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <HAL_GPIO_Init+0x304>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3301      	adds	r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	2b0f      	cmp	r3, #15
 8001920:	f67f aea2 	bls.w	8001668 <HAL_GPIO_Init+0x1c>
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3724      	adds	r7, #36	; 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800
 8001938:	40013800 	.word	0x40013800
 800193c:	40020000 	.word	0x40020000
 8001940:	40020400 	.word	0x40020400
 8001944:	40020800 	.word	0x40020800
 8001948:	40020c00 	.word	0x40020c00
 800194c:	40021000 	.word	0x40021000
 8001950:	40013c00 	.word	0x40013c00

08001954 <HAL_GPIO_WritePin>:
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]
 8001960:	4613      	mov	r3, r2
 8001962:	707b      	strb	r3, [r7, #1]
 8001964:	787b      	ldrb	r3, [r7, #1]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_WritePin+0x1e>
 800196a:	887a      	ldrh	r2, [r7, #2]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	619a      	str	r2, [r3, #24]
 8001970:	e003      	b.n	800197a <HAL_GPIO_WritePin+0x26>
 8001972:	887b      	ldrh	r3, [r7, #2]
 8001974:	041a      	lsls	r2, r3, #16
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	619a      	str	r2, [r3, #24]
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <HAL_I2C_Init>:
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_I2C_Init+0x12>
 8001996:	2301      	movs	r3, #1
 8001998:	e12b      	b.n	8001bf2 <HAL_I2C_Init+0x26a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d106      	bne.n	80019b4 <HAL_I2C_Init+0x2c>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff fb4c 	bl	800104c <HAL_I2C_MspInit>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2224      	movs	r2, #36	; 0x24
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0201 	bic.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	f001 f848 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4a81      	ldr	r2, [pc, #516]	; (8001bfc <HAL_I2C_Init+0x274>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d807      	bhi.n	8001a0c <HAL_I2C_Init+0x84>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4a80      	ldr	r2, [pc, #512]	; (8001c00 <HAL_I2C_Init+0x278>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	bf94      	ite	ls
 8001a04:	2301      	movls	r3, #1
 8001a06:	2300      	movhi	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	e006      	b.n	8001a1a <HAL_I2C_Init+0x92>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4a7d      	ldr	r2, [pc, #500]	; (8001c04 <HAL_I2C_Init+0x27c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	bf94      	ite	ls
 8001a14:	2301      	movls	r3, #1
 8001a16:	2300      	movhi	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_I2C_Init+0x9a>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e0e7      	b.n	8001bf2 <HAL_I2C_Init+0x26a>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4a78      	ldr	r2, [pc, #480]	; (8001c08 <HAL_I2C_Init+0x280>)
 8001a26:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2a:	0c9b      	lsrs	r3, r3, #18
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68ba      	ldr	r2, [r7, #8]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	4a6a      	ldr	r2, [pc, #424]	; (8001bfc <HAL_I2C_Init+0x274>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d802      	bhi.n	8001a5c <HAL_I2C_Init+0xd4>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	e009      	b.n	8001a70 <HAL_I2C_Init+0xe8>
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a62:	fb02 f303 	mul.w	r3, r2, r3
 8001a66:	4a69      	ldr	r2, [pc, #420]	; (8001c0c <HAL_I2C_Init+0x284>)
 8001a68:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6c:	099b      	lsrs	r3, r3, #6
 8001a6e:	3301      	adds	r3, #1
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	430b      	orrs	r3, r1
 8001a76:	6213      	str	r3, [r2, #32]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	495c      	ldr	r1, [pc, #368]	; (8001bfc <HAL_I2C_Init+0x274>)
 8001a8c:	428b      	cmp	r3, r1
 8001a8e:	d819      	bhi.n	8001ac4 <HAL_I2C_Init+0x13c>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1e59      	subs	r1, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a9e:	1c59      	adds	r1, r3, #1
 8001aa0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001aa4:	400b      	ands	r3, r1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00a      	beq.n	8001ac0 <HAL_I2C_Init+0x138>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1e59      	subs	r1, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ab8:	3301      	adds	r3, #1
 8001aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001abe:	e051      	b.n	8001b64 <HAL_I2C_Init+0x1dc>
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	e04f      	b.n	8001b64 <HAL_I2C_Init+0x1dc>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d111      	bne.n	8001af0 <HAL_I2C_Init+0x168>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	1e58      	subs	r0, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6859      	ldr	r1, [r3, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	440b      	add	r3, r1
 8001ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bf0c      	ite	eq
 8001ae8:	2301      	moveq	r3, #1
 8001aea:	2300      	movne	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	e012      	b.n	8001b16 <HAL_I2C_Init+0x18e>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	1e58      	subs	r0, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6859      	ldr	r1, [r3, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	0099      	lsls	r1, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b06:	3301      	adds	r3, #1
 8001b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	bf0c      	ite	eq
 8001b10:	2301      	moveq	r3, #1
 8001b12:	2300      	movne	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Init+0x196>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e022      	b.n	8001b64 <HAL_I2C_Init+0x1dc>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10e      	bne.n	8001b44 <HAL_I2C_Init+0x1bc>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1e58      	subs	r0, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6859      	ldr	r1, [r3, #4]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	440b      	add	r3, r1
 8001b34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b38:	3301      	adds	r3, #1
 8001b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b42:	e00f      	b.n	8001b64 <HAL_I2C_Init+0x1dc>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1e58      	subs	r0, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6859      	ldr	r1, [r3, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	0099      	lsls	r1, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	6809      	ldr	r1, [r1, #0]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61cb      	str	r3, [r1, #28]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69da      	ldr	r2, [r3, #28]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6911      	ldr	r1, [r2, #16]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68d2      	ldr	r2, [r2, #12]
 8001b9e:	4311      	orrs	r1, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	6093      	str	r3, [r2, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	641a      	str	r2, [r3, #64]	; 0x40
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	000186a0 	.word	0x000186a0
 8001c00:	001e847f 	.word	0x001e847f
 8001c04:	003d08ff 	.word	0x003d08ff
 8001c08:	431bde83 	.word	0x431bde83
 8001c0c:	10624dd3 	.word	0x10624dd3

08001c10 <HAL_I2C_Master_Transmit>:
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	817b      	strh	r3, [r7, #10]
 8001c20:	4613      	mov	r3, r2
 8001c22:	813b      	strh	r3, [r7, #8]
 8001c24:	f7ff fbfc 	bl	8001420 <HAL_GetTick>
 8001c28:	6178      	str	r0, [r7, #20]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	f040 80e0 	bne.w	8001df8 <HAL_I2C_Master_Transmit+0x1e8>
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	2319      	movs	r3, #25
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4970      	ldr	r1, [pc, #448]	; (8001e04 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f964 	bl	8001f10 <I2C_WaitOnFlagUntilTimeout>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_I2C_Master_Transmit+0x42>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e0d3      	b.n	8001dfa <HAL_I2C_Master_Transmit+0x1ea>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_I2C_Master_Transmit+0x50>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e0cc      	b.n	8001dfa <HAL_I2C_Master_Transmit+0x1ea>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d007      	beq.n	8001c86 <HAL_I2C_Master_Transmit+0x76>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0201 	orr.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2221      	movs	r2, #33	; 0x21
 8001c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2210      	movs	r2, #16
 8001ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	893a      	ldrh	r2, [r7, #8]
 8001cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	851a      	strh	r2, [r3, #40]	; 0x28
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4a50      	ldr	r2, [pc, #320]	; (8001e08 <HAL_I2C_Master_Transmit+0x1f8>)
 8001cc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cc8:	8979      	ldrh	r1, [r7, #10]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	6a3a      	ldr	r2, [r7, #32]
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 f89c 	bl	8001e0c <I2C_MasterRequestWrite>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_I2C_Master_Transmit+0xce>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e08d      	b.n	8001dfa <HAL_I2C_Master_Transmit+0x1ea>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	e066      	b.n	8001dc4 <HAL_I2C_Master_Transmit+0x1b4>
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	6a39      	ldr	r1, [r7, #32]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f9de 	bl	80020bc <I2C_WaitOnTXEFlagUntilTimeout>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00d      	beq.n	8001d22 <HAL_I2C_Master_Transmit+0x112>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d107      	bne.n	8001d1e <HAL_I2C_Master_Transmit+0x10e>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e06b      	b.n	8001dfa <HAL_I2C_Master_Transmit+0x1ea>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	611a      	str	r2, [r3, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	851a      	strh	r2, [r3, #40]	; 0x28
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d11b      	bne.n	8001d98 <HAL_I2C_Master_Transmit+0x188>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d017      	beq.n	8001d98 <HAL_I2C_Master_Transmit+0x188>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	781a      	ldrb	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	611a      	str	r2, [r3, #16]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	851a      	strh	r2, [r3, #40]	; 0x28
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	6a39      	ldr	r1, [r7, #32]
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 f9ce 	bl	800213e <I2C_WaitOnBTFFlagUntilTimeout>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00d      	beq.n	8001dc4 <HAL_I2C_Master_Transmit+0x1b4>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d107      	bne.n	8001dc0 <HAL_I2C_Master_Transmit+0x1b0>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e01a      	b.n	8001dfa <HAL_I2C_Master_Transmit+0x1ea>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d194      	bne.n	8001cf6 <HAL_I2C_Master_Transmit+0xe6>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001df4:	2300      	movs	r3, #0
 8001df6:	e000      	b.n	8001dfa <HAL_I2C_Master_Transmit+0x1ea>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	00100002 	.word	0x00100002
 8001e08:	ffff0000 	.word	0xffff0000

08001e0c <I2C_MasterRequestWrite>:
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	817b      	strh	r3, [r7, #10]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d006      	beq.n	8001e36 <I2C_MasterRequestWrite+0x2a>
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d003      	beq.n	8001e36 <I2C_MasterRequestWrite+0x2a>
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e34:	d108      	bne.n	8001e48 <I2C_MasterRequestWrite+0x3c>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e00b      	b.n	8001e60 <I2C_MasterRequestWrite+0x54>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4c:	2b12      	cmp	r3, #18
 8001e4e:	d107      	bne.n	8001e60 <I2C_MasterRequestWrite+0x54>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 f84f 	bl	8001f10 <I2C_WaitOnFlagUntilTimeout>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00d      	beq.n	8001e94 <I2C_MasterRequestWrite+0x88>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e86:	d103      	bne.n	8001e90 <I2C_MasterRequestWrite+0x84>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40
 8001e90:	2303      	movs	r3, #3
 8001e92:	e035      	b.n	8001f00 <I2C_MasterRequestWrite+0xf4>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e9c:	d108      	bne.n	8001eb0 <I2C_MasterRequestWrite+0xa4>
 8001e9e:	897b      	ldrh	r3, [r7, #10]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001eac:	611a      	str	r2, [r3, #16]
 8001eae:	e01b      	b.n	8001ee8 <I2C_MasterRequestWrite+0xdc>
 8001eb0:	897b      	ldrh	r3, [r7, #10]
 8001eb2:	11db      	asrs	r3, r3, #7
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f003 0306 	and.w	r3, r3, #6
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f063 030f 	orn	r3, r3, #15
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	611a      	str	r2, [r3, #16]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	490e      	ldr	r1, [pc, #56]	; (8001f08 <I2C_MasterRequestWrite+0xfc>)
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f875 	bl	8001fbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <I2C_MasterRequestWrite+0xd2>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e010      	b.n	8001f00 <I2C_MasterRequestWrite+0xf4>
 8001ede:	897b      	ldrh	r3, [r7, #10]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	611a      	str	r2, [r3, #16]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4907      	ldr	r1, [pc, #28]	; (8001f0c <I2C_MasterRequestWrite+0x100>)
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f865 	bl	8001fbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <I2C_MasterRequestWrite+0xf2>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <I2C_MasterRequestWrite+0xf4>
 8001efe:	2300      	movs	r3, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	00010008 	.word	0x00010008
 8001f0c:	00010002 	.word	0x00010002

08001f10 <I2C_WaitOnFlagUntilTimeout>:
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	71fb      	strb	r3, [r7, #7]
 8001f20:	e025      	b.n	8001f6e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f28:	d021      	beq.n	8001f6e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8001f2a:	f7ff fa79 	bl	8001420 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d302      	bcc.n	8001f40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d116      	bne.n	8001f6e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	631a      	str	r2, [r3, #48]	; 0x30
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f043 0220 	orr.w	r2, r3, #32
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e023      	b.n	8001fb6 <I2C_WaitOnFlagUntilTimeout+0xa6>
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	0c1b      	lsrs	r3, r3, #16
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d10d      	bne.n	8001f94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4013      	ands	r3, r2
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	bf0c      	ite	eq
 8001f8a:	2301      	moveq	r3, #1
 8001f8c:	2300      	movne	r3, #0
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	e00c      	b.n	8001fae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	43da      	mvns	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf0c      	ite	eq
 8001fa6:	2301      	moveq	r3, #1
 8001fa8:	2300      	movne	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d0b6      	beq.n	8001f22 <I2C_WaitOnFlagUntilTimeout+0x12>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	e051      	b.n	8002072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fdc:	d123      	bne.n	8002026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ff6:	615a      	str	r2, [r3, #20]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f043 0204 	orr.w	r2, r3, #4
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	641a      	str	r2, [r3, #64]	; 0x40
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002022:	2301      	movs	r3, #1
 8002024:	e046      	b.n	80020b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d021      	beq.n	8002072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 800202e:	f7ff f9f7 	bl	8001420 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	429a      	cmp	r2, r3
 800203c:	d302      	bcc.n	8002044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d116      	bne.n	8002072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2220      	movs	r2, #32
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f043 0220 	orr.w	r2, r3, #32
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800206e:	2301      	movs	r3, #1
 8002070:	e020      	b.n	80020b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	0c1b      	lsrs	r3, r3, #16
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d10c      	bne.n	8002096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4013      	ands	r3, r2
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf14      	ite	ne
 800208e:	2301      	movne	r3, #1
 8002090:	2300      	moveq	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	e00b      	b.n	80020ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	43da      	mvns	r2, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	4013      	ands	r3, r2
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf14      	ite	ne
 80020a8:	2301      	movne	r3, #1
 80020aa:	2300      	moveq	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d18d      	bne.n	8001fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80020b2:	2300      	movs	r3, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <I2C_WaitOnTXEFlagUntilTimeout>:
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	e02d      	b.n	8002126 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f878 	bl	80021c0 <I2C_IsAcknowledgeFailed>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e02d      	b.n	8002136 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e0:	d021      	beq.n	8002126 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80020e2:	f7ff f99d 	bl	8001420 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d302      	bcc.n	80020f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d116      	bne.n	8002126 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	631a      	str	r2, [r3, #48]	; 0x30
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2220      	movs	r2, #32
 8002102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f043 0220 	orr.w	r2, r3, #32
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	641a      	str	r2, [r3, #64]	; 0x40
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002122:	2301      	movs	r3, #1
 8002124:	e007      	b.n	8002136 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002130:	2b80      	cmp	r3, #128	; 0x80
 8002132:	d1ca      	bne.n	80020ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8002134:	2300      	movs	r3, #0
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <I2C_WaitOnBTFFlagUntilTimeout>:
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	e02d      	b.n	80021a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f837 	bl	80021c0 <I2C_IsAcknowledgeFailed>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8002158:	2301      	movs	r3, #1
 800215a:	e02d      	b.n	80021b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002162:	d021      	beq.n	80021a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8002164:	f7ff f95c 	bl	8001420 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	429a      	cmp	r2, r3
 8002172:	d302      	bcc.n	800217a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d116      	bne.n	80021a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f043 0220 	orr.w	r2, r3, #32
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	641a      	str	r2, [r3, #64]	; 0x40
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021a4:	2301      	movs	r3, #1
 80021a6:	e007      	b.n	80021b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d1ca      	bne.n	800214c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 80021b6:	2300      	movs	r3, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <I2C_IsAcknowledgeFailed>:
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d6:	d11b      	bne.n	8002210 <I2C_IsAcknowledgeFailed+0x50>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021e0:	615a      	str	r2, [r3, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	631a      	str	r2, [r3, #48]	; 0x30
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f043 0204 	orr.w	r2, r3, #4
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	641a      	str	r2, [r3, #64]	; 0x40
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <I2C_IsAcknowledgeFailed+0x52>
 8002210:	2300      	movs	r3, #0
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <HAL_RCC_OscConfig>:
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCC_OscConfig+0x12>
 800222e:	2301      	movs	r3, #1
 8002230:	e267      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d075      	beq.n	800232a <HAL_RCC_OscConfig+0x10a>
 800223e:	4b88      	ldr	r3, [pc, #544]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b04      	cmp	r3, #4
 8002248:	d00c      	beq.n	8002264 <HAL_RCC_OscConfig+0x44>
 800224a:	4b85      	ldr	r3, [pc, #532]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b08      	cmp	r3, #8
 8002254:	d112      	bne.n	800227c <HAL_RCC_OscConfig+0x5c>
 8002256:	4b82      	ldr	r3, [pc, #520]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002262:	d10b      	bne.n	800227c <HAL_RCC_OscConfig+0x5c>
 8002264:	4b7e      	ldr	r3, [pc, #504]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d05b      	beq.n	8002328 <HAL_RCC_OscConfig+0x108>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d157      	bne.n	8002328 <HAL_RCC_OscConfig+0x108>
 8002278:	2301      	movs	r3, #1
 800227a:	e242      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002284:	d106      	bne.n	8002294 <HAL_RCC_OscConfig+0x74>
 8002286:	4b76      	ldr	r3, [pc, #472]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a75      	ldr	r2, [pc, #468]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e01d      	b.n	80022d0 <HAL_RCC_OscConfig+0xb0>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x98>
 800229e:	4b70      	ldr	r3, [pc, #448]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a6f      	ldr	r2, [pc, #444]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b6d      	ldr	r3, [pc, #436]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a6c      	ldr	r2, [pc, #432]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e00b      	b.n	80022d0 <HAL_RCC_OscConfig+0xb0>
 80022b8:	4b69      	ldr	r3, [pc, #420]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a68      	ldr	r2, [pc, #416]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b66      	ldr	r3, [pc, #408]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a65      	ldr	r2, [pc, #404]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <HAL_RCC_OscConfig+0xe0>
 80022d8:	f7ff f8a2 	bl	8001420 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0xd2>
 80022e0:	f7ff f89e 	bl	8001420 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	; 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0xd2>
 80022ee:	2303      	movs	r3, #3
 80022f0:	e207      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 80022f2:	4b5b      	ldr	r3, [pc, #364]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0xc0>
 80022fe:	e014      	b.n	800232a <HAL_RCC_OscConfig+0x10a>
 8002300:	f7ff f88e 	bl	8001420 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0xfa>
 8002308:	f7ff f88a 	bl	8001420 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0xfa>
 8002316:	2303      	movs	r3, #3
 8002318:	e1f3      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 800231a:	4b51      	ldr	r3, [pc, #324]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0xe8>
 8002326:	e000      	b.n	800232a <HAL_RCC_OscConfig+0x10a>
 8002328:	bf00      	nop
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d063      	beq.n	80023fe <HAL_RCC_OscConfig+0x1de>
 8002336:	4b4a      	ldr	r3, [pc, #296]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <HAL_RCC_OscConfig+0x13a>
 8002342:	4b47      	ldr	r3, [pc, #284]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b08      	cmp	r3, #8
 800234c:	d11c      	bne.n	8002388 <HAL_RCC_OscConfig+0x168>
 800234e:	4b44      	ldr	r3, [pc, #272]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d116      	bne.n	8002388 <HAL_RCC_OscConfig+0x168>
 800235a:	4b41      	ldr	r3, [pc, #260]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_RCC_OscConfig+0x152>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d001      	beq.n	8002372 <HAL_RCC_OscConfig+0x152>
 800236e:	2301      	movs	r3, #1
 8002370:	e1c7      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 8002372:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4937      	ldr	r1, [pc, #220]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
 8002386:	e03a      	b.n	80023fe <HAL_RCC_OscConfig+0x1de>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_RCC_OscConfig+0x1b2>
 8002390:	4b34      	ldr	r3, [pc, #208]	; (8002464 <HAL_RCC_OscConfig+0x244>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	f7ff f843 	bl	8001420 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x190>
 800239e:	f7ff f83f 	bl	8001420 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x190>
 80023ac:	2303      	movs	r3, #3
 80023ae:	e1a8      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 80023b0:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x17e>
 80023bc:	4b28      	ldr	r3, [pc, #160]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4925      	ldr	r1, [pc, #148]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]
 80023d0:	e015      	b.n	80023fe <HAL_RCC_OscConfig+0x1de>
 80023d2:	4b24      	ldr	r3, [pc, #144]	; (8002464 <HAL_RCC_OscConfig+0x244>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	f7ff f822 	bl	8001420 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x1d2>
 80023e0:	f7ff f81e 	bl	8001420 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x1d2>
 80023ee:	2303      	movs	r3, #3
 80023f0:	e187      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 80023f2:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x1c0>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d036      	beq.n	8002478 <HAL_RCC_OscConfig+0x258>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <HAL_RCC_OscConfig+0x220>
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <HAL_RCC_OscConfig+0x248>)
 8002414:	2201      	movs	r2, #1
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	f7ff f802 	bl	8001420 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x212>
 8002420:	f7fe fffe 	bl	8001420 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x212>
 800242e:	2303      	movs	r3, #3
 8002430:	e167      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x200>
 800243e:	e01b      	b.n	8002478 <HAL_RCC_OscConfig+0x258>
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_RCC_OscConfig+0x248>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	f7fe ffeb 	bl	8001420 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]
 800244c:	e00e      	b.n	800246c <HAL_RCC_OscConfig+0x24c>
 800244e:	f7fe ffe7 	bl	8001420 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d907      	bls.n	800246c <HAL_RCC_OscConfig+0x24c>
 800245c:	2303      	movs	r3, #3
 800245e:	e150      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 8002460:	40023800 	.word	0x40023800
 8002464:	42470000 	.word	0x42470000
 8002468:	42470e80 	.word	0x42470e80
 800246c:	4b88      	ldr	r3, [pc, #544]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800246e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ea      	bne.n	800244e <HAL_RCC_OscConfig+0x22e>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 8097 	beq.w	80025b4 <HAL_RCC_OscConfig+0x394>
 8002486:	2300      	movs	r3, #0
 8002488:	75fb      	strb	r3, [r7, #23]
 800248a:	4b81      	ldr	r3, [pc, #516]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10f      	bne.n	80024b6 <HAL_RCC_OscConfig+0x296>
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	4b7d      	ldr	r3, [pc, #500]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a7c      	ldr	r2, [pc, #496]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b7a      	ldr	r3, [pc, #488]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
 80024b6:	4b77      	ldr	r3, [pc, #476]	; (8002694 <HAL_RCC_OscConfig+0x474>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d118      	bne.n	80024f4 <HAL_RCC_OscConfig+0x2d4>
 80024c2:	4b74      	ldr	r3, [pc, #464]	; (8002694 <HAL_RCC_OscConfig+0x474>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a73      	ldr	r2, [pc, #460]	; (8002694 <HAL_RCC_OscConfig+0x474>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	f7fe ffa7 	bl	8001420 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x2c8>
 80024d6:	f7fe ffa3 	bl	8001420 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x2c8>
 80024e4:	2303      	movs	r3, #3
 80024e6:	e10c      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 80024e8:	4b6a      	ldr	r3, [pc, #424]	; (8002694 <HAL_RCC_OscConfig+0x474>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x2b6>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x2ea>
 80024fc:	4b64      	ldr	r3, [pc, #400]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80024fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002500:	4a63      	ldr	r2, [pc, #396]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6713      	str	r3, [r2, #112]	; 0x70
 8002508:	e01c      	b.n	8002544 <HAL_RCC_OscConfig+0x324>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b05      	cmp	r3, #5
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x30c>
 8002512:	4b5f      	ldr	r3, [pc, #380]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002516:	4a5e      	ldr	r2, [pc, #376]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	6713      	str	r3, [r2, #112]	; 0x70
 800251e:	4b5c      	ldr	r3, [pc, #368]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002522:	4a5b      	ldr	r2, [pc, #364]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6713      	str	r3, [r2, #112]	; 0x70
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0x324>
 800252c:	4b58      	ldr	r3, [pc, #352]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	4a57      	ldr	r2, [pc, #348]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002532:	f023 0301 	bic.w	r3, r3, #1
 8002536:	6713      	str	r3, [r2, #112]	; 0x70
 8002538:	4b55      	ldr	r3, [pc, #340]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800253a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253c:	4a54      	ldr	r2, [pc, #336]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800253e:	f023 0304 	bic.w	r3, r3, #4
 8002542:	6713      	str	r3, [r2, #112]	; 0x70
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d015      	beq.n	8002578 <HAL_RCC_OscConfig+0x358>
 800254c:	f7fe ff68 	bl	8001420 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]
 8002552:	e00a      	b.n	800256a <HAL_RCC_OscConfig+0x34a>
 8002554:	f7fe ff64 	bl	8001420 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x34a>
 8002566:	2303      	movs	r3, #3
 8002568:	e0cb      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 800256a:	4b49      	ldr	r3, [pc, #292]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0ee      	beq.n	8002554 <HAL_RCC_OscConfig+0x334>
 8002576:	e014      	b.n	80025a2 <HAL_RCC_OscConfig+0x382>
 8002578:	f7fe ff52 	bl	8001420 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]
 800257e:	e00a      	b.n	8002596 <HAL_RCC_OscConfig+0x376>
 8002580:	f7fe ff4e 	bl	8001420 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	; 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x376>
 8002592:	2303      	movs	r3, #3
 8002594:	e0b5      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 8002596:	4b3e      	ldr	r3, [pc, #248]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1ee      	bne.n	8002580 <HAL_RCC_OscConfig+0x360>
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_RCC_OscConfig+0x394>
 80025a8:	4b39      	ldr	r3, [pc, #228]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	4a38      	ldr	r2, [pc, #224]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80025ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b2:	6413      	str	r3, [r2, #64]	; 0x40
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80a1 	beq.w	8002700 <HAL_RCC_OscConfig+0x4e0>
 80025be:	4b34      	ldr	r3, [pc, #208]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d05c      	beq.n	8002684 <HAL_RCC_OscConfig+0x464>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d141      	bne.n	8002656 <HAL_RCC_OscConfig+0x436>
 80025d2:	4b31      	ldr	r3, [pc, #196]	; (8002698 <HAL_RCC_OscConfig+0x478>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	f7fe ff22 	bl	8001420 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x3d2>
 80025e0:	f7fe ff1e 	bl	8001420 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x3d2>
 80025ee:	2303      	movs	r3, #3
 80025f0:	e087      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 80025f2:	4b27      	ldr	r3, [pc, #156]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x3c0>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69da      	ldr	r2, [r3, #28]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	019b      	lsls	r3, r3, #6
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	085b      	lsrs	r3, r3, #1
 8002616:	3b01      	subs	r3, #1
 8002618:	041b      	lsls	r3, r3, #16
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	061b      	lsls	r3, r3, #24
 8002622:	491b      	ldr	r1, [pc, #108]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
 8002628:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <HAL_RCC_OscConfig+0x478>)
 800262a:	2201      	movs	r2, #1
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	f7fe fef7 	bl	8001420 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x428>
 8002636:	f7fe fef3 	bl	8001420 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x428>
 8002644:	2303      	movs	r3, #3
 8002646:	e05c      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x416>
 8002654:	e054      	b.n	8002700 <HAL_RCC_OscConfig+0x4e0>
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_RCC_OscConfig+0x478>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	f7fe fee0 	bl	8001420 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x456>
 8002664:	f7fe fedc 	bl	8001420 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x456>
 8002672:	2303      	movs	r3, #3
 8002674:	e045      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x444>
 8002682:	e03d      	b.n	8002700 <HAL_RCC_OscConfig+0x4e0>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d107      	bne.n	800269c <HAL_RCC_OscConfig+0x47c>
 800268c:	2301      	movs	r3, #1
 800268e:	e038      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 8002690:	40023800 	.word	0x40023800
 8002694:	40007000 	.word	0x40007000
 8002698:	42470060 	.word	0x42470060
 800269c:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_RCC_OscConfig+0x4ec>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d028      	beq.n	80026fc <HAL_RCC_OscConfig+0x4dc>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d121      	bne.n	80026fc <HAL_RCC_OscConfig+0x4dc>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d11a      	bne.n	80026fc <HAL_RCC_OscConfig+0x4dc>
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026cc:	4013      	ands	r3, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026d2:	0192      	lsls	r2, r2, #6
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d111      	bne.n	80026fc <HAL_RCC_OscConfig+0x4dc>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	085b      	lsrs	r3, r3, #1
 80026e4:	3b01      	subs	r3, #1
 80026e6:	041b      	lsls	r3, r3, #16
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_OscConfig+0x4dc>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	061b      	lsls	r3, r3, #24
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_OscConfig+0x4e0>
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 8002700:	2300      	movs	r3, #0
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800

08002710 <HAL_RCC_ClockConfig>:
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_ClockConfig+0x14>
 8002720:	2301      	movs	r3, #1
 8002722:	e0cc      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
 8002724:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d90c      	bls.n	800274c <HAL_RCC_ClockConfig+0x3c>
 8002732:	4b65      	ldr	r3, [pc, #404]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]
 800273a:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x3c>
 8002748:	2301      	movs	r3, #1
 800274a:	e0b8      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_ClockConfig+0x8a>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x60>
 8002764:	4b59      	ldr	r3, [pc, #356]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800276e:	6093      	str	r3, [r2, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x78>
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a52      	ldr	r2, [pc, #328]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002786:	6093      	str	r3, [r2, #8]
 8002788:	4b50      	ldr	r3, [pc, #320]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	494d      	ldr	r1, [pc, #308]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d044      	beq.n	8002830 <HAL_RCC_ClockConfig+0x120>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xae>
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d119      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e07f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d003      	beq.n	80027ce <HAL_RCC_ClockConfig+0xbe>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xce>
 80027ce:	4b3f      	ldr	r3, [pc, #252]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
 80027da:	2301      	movs	r3, #1
 80027dc:	e06f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
 80027de:	4b3b      	ldr	r3, [pc, #236]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e067      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
 80027ee:	4b37      	ldr	r3, [pc, #220]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f023 0203 	bic.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4934      	ldr	r1, [pc, #208]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	608b      	str	r3, [r1, #8]
 8002800:	f7fe fe0e 	bl	8001420 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	e00a      	b.n	800281e <HAL_RCC_ClockConfig+0x10e>
 8002808:	f7fe fe0a 	bl	8001420 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x10e>
 800281a:	2303      	movs	r3, #3
 800281c:	e04f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
 800281e:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 020c 	and.w	r2, r3, #12
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	429a      	cmp	r2, r3
 800282e:	d1eb      	bne.n	8002808 <HAL_RCC_ClockConfig+0xf8>
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d20c      	bcs.n	8002858 <HAL_RCC_ClockConfig+0x148>
 800283e:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x148>
 8002854:	2301      	movs	r3, #1
 8002856:	e032      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCC_ClockConfig+0x166>
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4916      	ldr	r1, [pc, #88]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCC_ClockConfig+0x186>
 8002882:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	490e      	ldr	r1, [pc, #56]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
 8002896:	f000 f821 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800289a:	4602      	mov	r2, r0
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	490a      	ldr	r1, [pc, #40]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	5ccb      	ldrb	r3, [r1, r3]
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fd6e 	bl	8001398 <HAL_InitTick>
 80028bc:	2300      	movs	r3, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023c00 	.word	0x40023c00
 80028cc:	40023800 	.word	0x40023800
 80028d0:	080041b0 	.word	0x080041b0
 80028d4:	20000008 	.word	0x20000008
 80028d8:	2000000c 	.word	0x2000000c

080028dc <HAL_RCC_GetSysClockFreq>:
 80028dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e0:	b090      	sub	sp, #64	; 0x40
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	2300      	movs	r3, #0
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
 80028e8:	2300      	movs	r3, #0
 80028ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ec:	2300      	movs	r3, #0
 80028ee:	633b      	str	r3, [r7, #48]	; 0x30
 80028f0:	2300      	movs	r3, #0
 80028f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80028f4:	4b59      	ldr	r3, [pc, #356]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d00d      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x40>
 8002900:	2b08      	cmp	r3, #8
 8002902:	f200 80a1 	bhi.w	8002a48 <HAL_RCC_GetSysClockFreq+0x16c>
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x34>
 800290a:	2b04      	cmp	r3, #4
 800290c:	d003      	beq.n	8002916 <HAL_RCC_GetSysClockFreq+0x3a>
 800290e:	e09b      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x16c>
 8002910:	4b53      	ldr	r3, [pc, #332]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002912:	63bb      	str	r3, [r7, #56]	; 0x38
 8002914:	e09b      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x172>
 8002916:	4b53      	ldr	r3, [pc, #332]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002918:	63bb      	str	r3, [r7, #56]	; 0x38
 800291a:	e098      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x172>
 800291c:	4b4f      	ldr	r3, [pc, #316]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
 8002926:	4b4d      	ldr	r3, [pc, #308]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d028      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0xa8>
 8002932:	4b4a      	ldr	r3, [pc, #296]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	099b      	lsrs	r3, r3, #6
 8002938:	2200      	movs	r2, #0
 800293a:	623b      	str	r3, [r7, #32]
 800293c:	627a      	str	r2, [r7, #36]	; 0x24
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002944:	2100      	movs	r1, #0
 8002946:	4b47      	ldr	r3, [pc, #284]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002948:	fb03 f201 	mul.w	r2, r3, r1
 800294c:	2300      	movs	r3, #0
 800294e:	fb00 f303 	mul.w	r3, r0, r3
 8002952:	4413      	add	r3, r2
 8002954:	4a43      	ldr	r2, [pc, #268]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002956:	fba0 1202 	umull	r1, r2, r0, r2
 800295a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800295c:	460a      	mov	r2, r1
 800295e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002962:	4413      	add	r3, r2
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002968:	2200      	movs	r2, #0
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	61fa      	str	r2, [r7, #28]
 800296e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002972:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002976:	f7fd fc8b 	bl	8000290 <__aeabi_uldivmod>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4613      	mov	r3, r2
 8002980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002982:	e053      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x150>
 8002984:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	2200      	movs	r2, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	617a      	str	r2, [r7, #20]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002996:	f04f 0b00 	mov.w	fp, #0
 800299a:	4652      	mov	r2, sl
 800299c:	465b      	mov	r3, fp
 800299e:	f04f 0000 	mov.w	r0, #0
 80029a2:	f04f 0100 	mov.w	r1, #0
 80029a6:	0159      	lsls	r1, r3, #5
 80029a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029ac:	0150      	lsls	r0, r2, #5
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	ebb2 080a 	subs.w	r8, r2, sl
 80029b6:	eb63 090b 	sbc.w	r9, r3, fp
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029ce:	ebb2 0408 	subs.w	r4, r2, r8
 80029d2:	eb63 0509 	sbc.w	r5, r3, r9
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	00eb      	lsls	r3, r5, #3
 80029e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029e4:	00e2      	lsls	r2, r4, #3
 80029e6:	4614      	mov	r4, r2
 80029e8:	461d      	mov	r5, r3
 80029ea:	eb14 030a 	adds.w	r3, r4, sl
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	eb45 030b 	adc.w	r3, r5, fp
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a02:	4629      	mov	r1, r5
 8002a04:	028b      	lsls	r3, r1, #10
 8002a06:	4621      	mov	r1, r4
 8002a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a0c:	4621      	mov	r1, r4
 8002a0e:	028a      	lsls	r2, r1, #10
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a16:	2200      	movs	r2, #0
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	60fa      	str	r2, [r7, #12]
 8002a1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a20:	f7fd fc36 	bl	8000290 <__aeabi_uldivmod>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4613      	mov	r3, r2
 8002a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	0c1b      	lsrs	r3, r3, #16
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	3301      	adds	r3, #1
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a44:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a46:	e002      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x172>
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a4c:	bf00      	nop
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a50:	4618      	mov	r0, r3
 8002a52:	3740      	adds	r7, #64	; 0x40
 8002a54:	46bd      	mov	sp, r7
 8002a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	00f42400 	.word	0x00f42400
 8002a64:	017d7840 	.word	0x017d7840

08002a68 <HAL_RCC_GetHCLKFreq>:
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20000008 	.word	0x20000008

08002a80 <HAL_RCC_GetPCLK1Freq>:
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	f7ff fff0 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	0a9b      	lsrs	r3, r3, #10
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	4903      	ldr	r1, [pc, #12]	; (8002aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a96:	5ccb      	ldrb	r3, [r1, r3]
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	080041c0 	.word	0x080041c0

08002aa8 <HAL_TIM_Base_Init>:
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_Base_Init+0x12>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e041      	b.n	8002b3e <HAL_TIM_Base_Init+0x96>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_TIM_Base_Init+0x2c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe fb4c 	bl	800116c <HAL_TIM_Base_MspInit>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	f000 fb64 	bl	80031b4 <TIM_Base_SetConfig>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_TIM_PWM_Init>:
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_TIM_PWM_Init+0x12>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e041      	b.n	8002bdc <HAL_TIM_PWM_Init+0x96>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d106      	bne.n	8002b72 <HAL_TIM_PWM_Init+0x2c>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f839 	bl	8002be4 <HAL_TIM_PWM_MspInit>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2202      	movs	r2, #2
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3304      	adds	r3, #4
 8002b82:	4619      	mov	r1, r3
 8002b84:	4610      	mov	r0, r2
 8002b86:	f000 fb15 	bl	80031b4 <TIM_Base_SetConfig>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002bda:	2300      	movs	r3, #0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_TIM_PWM_MspInit>:
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_TIM_Encoder_Init>:
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_TIM_Encoder_Init+0x14>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e097      	b.n	8002d3c <HAL_TIM_Encoder_Init+0x144>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d106      	bne.n	8002c26 <HAL_TIM_Encoder_Init+0x2e>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7fe fa5b 	bl	80010dc <HAL_TIM_Encoder_MspInit>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c3c:	f023 0307 	bic.w	r3, r3, #7
 8002c40:	6093      	str	r3, [r2, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	f000 fab1 	bl	80031b4 <TIM_Base_SetConfig>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7a:	f023 0303 	bic.w	r3, r3, #3
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c98:	f023 030c 	bic.w	r3, r3, #12
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ca4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	011a      	lsls	r2, r3, #4
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	031b      	lsls	r3, r3, #12
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	4313      	orrs	r3, r2
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	619a      	str	r2, [r3, #24]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	621a      	str	r2, [r3, #32]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_TIM_Encoder_Start_IT>:
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d54:	73fb      	strb	r3, [r7, #15]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d5c:	73bb      	strb	r3, [r7, #14]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d64:	737b      	strb	r3, [r7, #13]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d6c:	733b      	strb	r3, [r7, #12]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d110      	bne.n	8002d96 <HAL_TIM_Encoder_Start_IT+0x52>
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d102      	bne.n	8002d80 <HAL_TIM_Encoder_Start_IT+0x3c>
 8002d7a:	7b7b      	ldrb	r3, [r7, #13]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d001      	beq.n	8002d84 <HAL_TIM_Encoder_Start_IT+0x40>
 8002d80:	2301      	movs	r3, #1
 8002d82:	e089      	b.n	8002e98 <HAL_TIM_Encoder_Start_IT+0x154>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d94:	e031      	b.n	8002dfa <HAL_TIM_Encoder_Start_IT+0xb6>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d110      	bne.n	8002dbe <HAL_TIM_Encoder_Start_IT+0x7a>
 8002d9c:	7bbb      	ldrb	r3, [r7, #14]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d102      	bne.n	8002da8 <HAL_TIM_Encoder_Start_IT+0x64>
 8002da2:	7b3b      	ldrb	r3, [r7, #12]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d001      	beq.n	8002dac <HAL_TIM_Encoder_Start_IT+0x68>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e075      	b.n	8002e98 <HAL_TIM_Encoder_Start_IT+0x154>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dbc:	e01d      	b.n	8002dfa <HAL_TIM_Encoder_Start_IT+0xb6>
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d108      	bne.n	8002dd6 <HAL_TIM_Encoder_Start_IT+0x92>
 8002dc4:	7bbb      	ldrb	r3, [r7, #14]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d105      	bne.n	8002dd6 <HAL_TIM_Encoder_Start_IT+0x92>
 8002dca:	7b7b      	ldrb	r3, [r7, #13]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d102      	bne.n	8002dd6 <HAL_TIM_Encoder_Start_IT+0x92>
 8002dd0:	7b3b      	ldrb	r3, [r7, #12]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d001      	beq.n	8002dda <HAL_TIM_Encoder_Start_IT+0x96>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e05e      	b.n	8002e98 <HAL_TIM_Encoder_Start_IT+0x154>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2202      	movs	r2, #2
 8002de6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2202      	movs	r2, #2
 8002dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2202      	movs	r2, #2
 8002df6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_TIM_Encoder_Start_IT+0xc4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d010      	beq.n	8002e28 <HAL_TIM_Encoder_Start_IT+0xe4>
 8002e06:	e01f      	b.n	8002e48 <HAL_TIM_Encoder_Start_IT+0x104>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	2100      	movs	r1, #0
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 fc75 	bl	8003700 <TIM_CCxChannelCmd>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0202 	orr.w	r2, r2, #2
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	e02e      	b.n	8002e86 <HAL_TIM_Encoder_Start_IT+0x142>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	2104      	movs	r1, #4
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fc65 	bl	8003700 <TIM_CCxChannelCmd>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0204 	orr.w	r2, r2, #4
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	e01e      	b.n	8002e86 <HAL_TIM_Encoder_Start_IT+0x142>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fc55 	bl	8003700 <TIM_CCxChannelCmd>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	2104      	movs	r1, #4
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fc4e 	bl	8003700 <TIM_CCxChannelCmd>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0202 	orr.w	r2, r2, #2
 8002e72:	60da      	str	r2, [r3, #12]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0204 	orr.w	r2, r2, #4
 8002e82:	60da      	str	r2, [r3, #12]
 8002e84:	bf00      	nop
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0201 	orr.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	2300      	movs	r3, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_TIM_PWM_ConfigChannel>:
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	2300      	movs	r3, #0
 8002eae:	75fb      	strb	r3, [r7, #23]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e0ae      	b.n	800301c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b0c      	cmp	r3, #12
 8002eca:	f200 809f 	bhi.w	800300c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ece:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed4:	08002f09 	.word	0x08002f09
 8002ed8:	0800300d 	.word	0x0800300d
 8002edc:	0800300d 	.word	0x0800300d
 8002ee0:	0800300d 	.word	0x0800300d
 8002ee4:	08002f49 	.word	0x08002f49
 8002ee8:	0800300d 	.word	0x0800300d
 8002eec:	0800300d 	.word	0x0800300d
 8002ef0:	0800300d 	.word	0x0800300d
 8002ef4:	08002f8b 	.word	0x08002f8b
 8002ef8:	0800300d 	.word	0x0800300d
 8002efc:	0800300d 	.word	0x0800300d
 8002f00:	0800300d 	.word	0x0800300d
 8002f04:	08002fcb 	.word	0x08002fcb
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 f9d0 	bl	80032b4 <TIM_OC1_SetConfig>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0208 	orr.w	r2, r2, #8
 8002f22:	619a      	str	r2, [r3, #24]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0204 	bic.w	r2, r2, #4
 8002f32:	619a      	str	r2, [r3, #24]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6999      	ldr	r1, [r3, #24]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	619a      	str	r2, [r3, #24]
 8002f46:	e064      	b.n	8003012 <HAL_TIM_PWM_ConfigChannel+0x172>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fa16 	bl	8003380 <TIM_OC2_SetConfig>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f62:	619a      	str	r2, [r3, #24]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f72:	619a      	str	r2, [r3, #24]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6999      	ldr	r1, [r3, #24]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	021a      	lsls	r2, r3, #8
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	619a      	str	r2, [r3, #24]
 8002f88:	e043      	b.n	8003012 <HAL_TIM_PWM_ConfigChannel+0x172>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fa61 	bl	8003458 <TIM_OC3_SetConfig>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69da      	ldr	r2, [r3, #28]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0208 	orr.w	r2, r2, #8
 8002fa4:	61da      	str	r2, [r3, #28]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0204 	bic.w	r2, r2, #4
 8002fb4:	61da      	str	r2, [r3, #28]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69d9      	ldr	r1, [r3, #28]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	61da      	str	r2, [r3, #28]
 8002fc8:	e023      	b.n	8003012 <HAL_TIM_PWM_ConfigChannel+0x172>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 faab 	bl	800352c <TIM_OC4_SetConfig>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fe4:	61da      	str	r2, [r3, #28]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69da      	ldr	r2, [r3, #28]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff4:	61da      	str	r2, [r3, #28]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69d9      	ldr	r1, [r3, #28]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	021a      	lsls	r2, r3, #8
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	61da      	str	r2, [r3, #28]
 800300a:	e002      	b.n	8003012 <HAL_TIM_PWM_ConfigChannel+0x172>
 800300c:	2301      	movs	r3, #1
 800300e:	75fb      	strb	r3, [r7, #23]
 8003010:	bf00      	nop
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800301a:	7dfb      	ldrb	r3, [r7, #23]
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_TIM_ConfigClockSource>:
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
 800302e:	2300      	movs	r3, #0
 8003030:	73fb      	strb	r3, [r7, #15]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_TIM_ConfigClockSource+0x1c>
 800303c:	2302      	movs	r3, #2
 800303e:	e0b4      	b.n	80031aa <HAL_TIM_ConfigClockSource+0x186>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003078:	d03e      	beq.n	80030f8 <HAL_TIM_ConfigClockSource+0xd4>
 800307a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307e:	f200 8087 	bhi.w	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 8003082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003086:	f000 8086 	beq.w	8003196 <HAL_TIM_ConfigClockSource+0x172>
 800308a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308e:	d87f      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 8003090:	2b70      	cmp	r3, #112	; 0x70
 8003092:	d01a      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0xa6>
 8003094:	2b70      	cmp	r3, #112	; 0x70
 8003096:	d87b      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 8003098:	2b60      	cmp	r3, #96	; 0x60
 800309a:	d050      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x11a>
 800309c:	2b60      	cmp	r3, #96	; 0x60
 800309e:	d877      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 80030a0:	2b50      	cmp	r3, #80	; 0x50
 80030a2:	d03c      	beq.n	800311e <HAL_TIM_ConfigClockSource+0xfa>
 80030a4:	2b50      	cmp	r3, #80	; 0x50
 80030a6:	d873      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 80030a8:	2b40      	cmp	r3, #64	; 0x40
 80030aa:	d058      	beq.n	800315e <HAL_TIM_ConfigClockSource+0x13a>
 80030ac:	2b40      	cmp	r3, #64	; 0x40
 80030ae:	d86f      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 80030b0:	2b30      	cmp	r3, #48	; 0x30
 80030b2:	d064      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x15a>
 80030b4:	2b30      	cmp	r3, #48	; 0x30
 80030b6:	d86b      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	d060      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x15a>
 80030bc:	2b20      	cmp	r3, #32
 80030be:	d867      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d05c      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x15a>
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d05a      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x15a>
 80030c8:	e062      	b.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6899      	ldr	r1, [r3, #8]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f000 faf1 	bl	80036c0 <TIM_ETR_SetConfig>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	609a      	str	r2, [r3, #8]
 80030f6:	e04f      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6899      	ldr	r1, [r3, #8]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f000 fada 	bl	80036c0 <TIM_ETR_SetConfig>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	e03c      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6859      	ldr	r1, [r3, #4]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	461a      	mov	r2, r3
 800312c:	f000 fa4e 	bl	80035cc <TIM_TI1_ConfigInputStage>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2150      	movs	r1, #80	; 0x50
 8003136:	4618      	mov	r0, r3
 8003138:	f000 faa7 	bl	800368a <TIM_ITRx_SetConfig>
 800313c:	e02c      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6859      	ldr	r1, [r3, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	461a      	mov	r2, r3
 800314c:	f000 fa6d 	bl	800362a <TIM_TI2_ConfigInputStage>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2160      	movs	r1, #96	; 0x60
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fa97 	bl	800368a <TIM_ITRx_SetConfig>
 800315c:	e01c      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6859      	ldr	r1, [r3, #4]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	461a      	mov	r2, r3
 800316c:	f000 fa2e 	bl	80035cc <TIM_TI1_ConfigInputStage>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2140      	movs	r1, #64	; 0x40
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fa87 	bl	800368a <TIM_ITRx_SetConfig>
 800317c:	e00c      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4619      	mov	r1, r3
 8003188:	4610      	mov	r0, r2
 800318a:	f000 fa7e 	bl	800368a <TIM_ITRx_SetConfig>
 800318e:	e003      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
 8003194:	e000      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>
 8003196:	bf00      	nop
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <TIM_Base_SetConfig>:
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a34      	ldr	r2, [pc, #208]	; (8003298 <TIM_Base_SetConfig+0xe4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00f      	beq.n	80031ec <TIM_Base_SetConfig+0x38>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d2:	d00b      	beq.n	80031ec <TIM_Base_SetConfig+0x38>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a31      	ldr	r2, [pc, #196]	; (800329c <TIM_Base_SetConfig+0xe8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d007      	beq.n	80031ec <TIM_Base_SetConfig+0x38>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a30      	ldr	r2, [pc, #192]	; (80032a0 <TIM_Base_SetConfig+0xec>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d003      	beq.n	80031ec <TIM_Base_SetConfig+0x38>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a2f      	ldr	r2, [pc, #188]	; (80032a4 <TIM_Base_SetConfig+0xf0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d108      	bne.n	80031fe <TIM_Base_SetConfig+0x4a>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a25      	ldr	r2, [pc, #148]	; (8003298 <TIM_Base_SetConfig+0xe4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d01b      	beq.n	800323e <TIM_Base_SetConfig+0x8a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320c:	d017      	beq.n	800323e <TIM_Base_SetConfig+0x8a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a22      	ldr	r2, [pc, #136]	; (800329c <TIM_Base_SetConfig+0xe8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <TIM_Base_SetConfig+0x8a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a21      	ldr	r2, [pc, #132]	; (80032a0 <TIM_Base_SetConfig+0xec>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00f      	beq.n	800323e <TIM_Base_SetConfig+0x8a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a20      	ldr	r2, [pc, #128]	; (80032a4 <TIM_Base_SetConfig+0xf0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00b      	beq.n	800323e <TIM_Base_SetConfig+0x8a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a1f      	ldr	r2, [pc, #124]	; (80032a8 <TIM_Base_SetConfig+0xf4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d007      	beq.n	800323e <TIM_Base_SetConfig+0x8a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a1e      	ldr	r2, [pc, #120]	; (80032ac <TIM_Base_SetConfig+0xf8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d003      	beq.n	800323e <TIM_Base_SetConfig+0x8a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <TIM_Base_SetConfig+0xfc>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d108      	bne.n	8003250 <TIM_Base_SetConfig+0x9c>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4313      	orrs	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	62da      	str	r2, [r3, #44]	; 0x2c
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	629a      	str	r2, [r3, #40]	; 0x28
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a08      	ldr	r2, [pc, #32]	; (8003298 <TIM_Base_SetConfig+0xe4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d103      	bne.n	8003284 <TIM_Base_SetConfig+0xd0>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	615a      	str	r2, [r3, #20]
 800328a:	bf00      	nop
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40010000 	.word	0x40010000
 800329c:	40000400 	.word	0x40000400
 80032a0:	40000800 	.word	0x40000800
 80032a4:	40000c00 	.word	0x40000c00
 80032a8:	40014000 	.word	0x40014000
 80032ac:	40014400 	.word	0x40014400
 80032b0:	40014800 	.word	0x40014800

080032b4 <TIM_OC1_SetConfig>:
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	f023 0201 	bic.w	r2, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	621a      	str	r2, [r3, #32]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0303 	bic.w	r3, r3, #3
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f023 0302 	bic.w	r3, r3, #2
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a1c      	ldr	r2, [pc, #112]	; (800337c <TIM_OC1_SetConfig+0xc8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d10c      	bne.n	800332a <TIM_OC1_SetConfig+0x76>
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f023 0308 	bic.w	r3, r3, #8
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f023 0304 	bic.w	r3, r3, #4
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a13      	ldr	r2, [pc, #76]	; (800337c <TIM_OC1_SetConfig+0xc8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d111      	bne.n	8003356 <TIM_OC1_SetConfig+0xa2>
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	619a      	str	r2, [r3, #24]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	635a      	str	r2, [r3, #52]	; 0x34
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	621a      	str	r2, [r3, #32]
 8003370:	bf00      	nop
 8003372:	371c      	adds	r7, #28
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	40010000 	.word	0x40010000

08003380 <TIM_OC2_SetConfig>:
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	f023 0210 	bic.w	r2, r3, #16
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	621a      	str	r2, [r3, #32]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f023 0320 	bic.w	r3, r3, #32
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a1e      	ldr	r2, [pc, #120]	; (8003454 <TIM_OC2_SetConfig+0xd4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d10d      	bne.n	80033fc <TIM_OC2_SetConfig+0x7c>
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a15      	ldr	r2, [pc, #84]	; (8003454 <TIM_OC2_SetConfig+0xd4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d113      	bne.n	800342c <TIM_OC2_SetConfig+0xac>
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	619a      	str	r2, [r3, #24]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	639a      	str	r2, [r3, #56]	; 0x38
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	621a      	str	r2, [r3, #32]
 8003446:	bf00      	nop
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40010000 	.word	0x40010000

08003458 <TIM_OC3_SetConfig>:
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	621a      	str	r2, [r3, #32]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0303 	bic.w	r3, r3, #3
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	021b      	lsls	r3, r3, #8
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <TIM_OC3_SetConfig+0xd0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d10d      	bne.n	80034d2 <TIM_OC3_SetConfig+0x7a>
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a14      	ldr	r2, [pc, #80]	; (8003528 <TIM_OC3_SetConfig+0xd0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d113      	bne.n	8003502 <TIM_OC3_SetConfig+0xaa>
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	605a      	str	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	61da      	str	r2, [r3, #28]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	63da      	str	r2, [r3, #60]	; 0x3c
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	621a      	str	r2, [r3, #32]
 800351c:	bf00      	nop
 800351e:	371c      	adds	r7, #28
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	40010000 	.word	0x40010000

0800352c <TIM_OC4_SetConfig>:
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	621a      	str	r2, [r3, #32]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	021b      	lsls	r3, r3, #8
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003576:	613b      	str	r3, [r7, #16]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	031b      	lsls	r3, r3, #12
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a10      	ldr	r2, [pc, #64]	; (80035c8 <TIM_OC4_SetConfig+0x9c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d109      	bne.n	80035a0 <TIM_OC4_SetConfig+0x74>
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	019b      	lsls	r3, r3, #6
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	4313      	orrs	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	61da      	str	r2, [r3, #28]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	641a      	str	r2, [r3, #64]	; 0x40
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	621a      	str	r2, [r3, #32]
 80035ba:	bf00      	nop
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40010000 	.word	0x40010000

080035cc <TIM_TI1_ConfigInputStage>:
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	f023 0201 	bic.w	r2, r3, #1
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	621a      	str	r2, [r3, #32]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f023 030a 	bic.w	r3, r3, #10
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	619a      	str	r2, [r3, #24]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	621a      	str	r2, [r3, #32]
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <TIM_TI2_ConfigInputStage>:
 800362a:	b480      	push	{r7}
 800362c:	b087      	sub	sp, #28
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f023 0210 	bic.w	r2, r3, #16
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	621a      	str	r2, [r3, #32]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	031b      	lsls	r3, r3, #12
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	619a      	str	r2, [r3, #24]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	621a      	str	r2, [r3, #32]
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <TIM_ITRx_SetConfig>:
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	6039      	str	r1, [r7, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f043 0307 	orr.w	r3, r3, #7
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <TIM_ETR_SetConfig>:
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	021a      	lsls	r2, r3, #8
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <TIM_CCxChannelCmd>:
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	2201      	movs	r2, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1a      	ldr	r2, [r3, #32]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	43db      	mvns	r3, r3
 8003722:	401a      	ands	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	621a      	str	r2, [r3, #32]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a1a      	ldr	r2, [r3, #32]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	431a      	orrs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	621a      	str	r2, [r3, #32]
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <HAL_TIMEx_MasterConfigSynchronization>:
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003760:	2302      	movs	r3, #2
 8003762:	e050      	b.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1c      	ldr	r2, [pc, #112]	; (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d018      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b0:	d013      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a18      	ldr	r2, [pc, #96]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00e      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a16      	ldr	r2, [pc, #88]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d009      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a15      	ldr	r2, [pc, #84]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d004      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a13      	ldr	r2, [pc, #76]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d10c      	bne.n	80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003804:	2300      	movs	r3, #0
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40010000 	.word	0x40010000
 8003818:	40000400 	.word	0x40000400
 800381c:	40000800 	.word	0x40000800
 8003820:	40000c00 	.word	0x40000c00
 8003824:	40014000 	.word	0x40014000

08003828 <__errno>:
 8003828:	4b01      	ldr	r3, [pc, #4]	; (8003830 <__errno+0x8>)
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	20000014 	.word	0x20000014

08003834 <__libc_init_array>:
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	4d0d      	ldr	r5, [pc, #52]	; (800386c <__libc_init_array+0x38>)
 8003838:	4c0d      	ldr	r4, [pc, #52]	; (8003870 <__libc_init_array+0x3c>)
 800383a:	1b64      	subs	r4, r4, r5
 800383c:	10a4      	asrs	r4, r4, #2
 800383e:	2600      	movs	r6, #0
 8003840:	42a6      	cmp	r6, r4
 8003842:	d109      	bne.n	8003858 <__libc_init_array+0x24>
 8003844:	4d0b      	ldr	r5, [pc, #44]	; (8003874 <__libc_init_array+0x40>)
 8003846:	4c0c      	ldr	r4, [pc, #48]	; (8003878 <__libc_init_array+0x44>)
 8003848:	f000 fc8e 	bl	8004168 <_init>
 800384c:	1b64      	subs	r4, r4, r5
 800384e:	10a4      	asrs	r4, r4, #2
 8003850:	2600      	movs	r6, #0
 8003852:	42a6      	cmp	r6, r4
 8003854:	d105      	bne.n	8003862 <__libc_init_array+0x2e>
 8003856:	bd70      	pop	{r4, r5, r6, pc}
 8003858:	f855 3b04 	ldr.w	r3, [r5], #4
 800385c:	4798      	blx	r3
 800385e:	3601      	adds	r6, #1
 8003860:	e7ee      	b.n	8003840 <__libc_init_array+0xc>
 8003862:	f855 3b04 	ldr.w	r3, [r5], #4
 8003866:	4798      	blx	r3
 8003868:	3601      	adds	r6, #1
 800386a:	e7f2      	b.n	8003852 <__libc_init_array+0x1e>
 800386c:	08004204 	.word	0x08004204
 8003870:	08004204 	.word	0x08004204
 8003874:	08004204 	.word	0x08004204
 8003878:	08004208 	.word	0x08004208

0800387c <memset>:
 800387c:	4402      	add	r2, r0
 800387e:	4603      	mov	r3, r0
 8003880:	4293      	cmp	r3, r2
 8003882:	d100      	bne.n	8003886 <memset+0xa>
 8003884:	4770      	bx	lr
 8003886:	f803 1b01 	strb.w	r1, [r3], #1
 800388a:	e7f9      	b.n	8003880 <memset+0x4>

0800388c <siprintf>:
 800388c:	b40e      	push	{r1, r2, r3}
 800388e:	b500      	push	{lr}
 8003890:	b09c      	sub	sp, #112	; 0x70
 8003892:	ab1d      	add	r3, sp, #116	; 0x74
 8003894:	9002      	str	r0, [sp, #8]
 8003896:	9006      	str	r0, [sp, #24]
 8003898:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800389c:	4809      	ldr	r0, [pc, #36]	; (80038c4 <siprintf+0x38>)
 800389e:	9107      	str	r1, [sp, #28]
 80038a0:	9104      	str	r1, [sp, #16]
 80038a2:	4909      	ldr	r1, [pc, #36]	; (80038c8 <siprintf+0x3c>)
 80038a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80038a8:	9105      	str	r1, [sp, #20]
 80038aa:	6800      	ldr	r0, [r0, #0]
 80038ac:	9301      	str	r3, [sp, #4]
 80038ae:	a902      	add	r1, sp, #8
 80038b0:	f000 f868 	bl	8003984 <_svfiprintf_r>
 80038b4:	9b02      	ldr	r3, [sp, #8]
 80038b6:	2200      	movs	r2, #0
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	b01c      	add	sp, #112	; 0x70
 80038bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80038c0:	b003      	add	sp, #12
 80038c2:	4770      	bx	lr
 80038c4:	20000014 	.word	0x20000014
 80038c8:	ffff0208 	.word	0xffff0208

080038cc <__ssputs_r>:
 80038cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038d0:	688e      	ldr	r6, [r1, #8]
 80038d2:	429e      	cmp	r6, r3
 80038d4:	4682      	mov	sl, r0
 80038d6:	460c      	mov	r4, r1
 80038d8:	4690      	mov	r8, r2
 80038da:	461f      	mov	r7, r3
 80038dc:	d838      	bhi.n	8003950 <__ssputs_r+0x84>
 80038de:	898a      	ldrh	r2, [r1, #12]
 80038e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038e4:	d032      	beq.n	800394c <__ssputs_r+0x80>
 80038e6:	6825      	ldr	r5, [r4, #0]
 80038e8:	6909      	ldr	r1, [r1, #16]
 80038ea:	eba5 0901 	sub.w	r9, r5, r1
 80038ee:	6965      	ldr	r5, [r4, #20]
 80038f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038f8:	3301      	adds	r3, #1
 80038fa:	444b      	add	r3, r9
 80038fc:	106d      	asrs	r5, r5, #1
 80038fe:	429d      	cmp	r5, r3
 8003900:	bf38      	it	cc
 8003902:	461d      	movcc	r5, r3
 8003904:	0553      	lsls	r3, r2, #21
 8003906:	d531      	bpl.n	800396c <__ssputs_r+0xa0>
 8003908:	4629      	mov	r1, r5
 800390a:	f000 fb63 	bl	8003fd4 <_malloc_r>
 800390e:	4606      	mov	r6, r0
 8003910:	b950      	cbnz	r0, 8003928 <__ssputs_r+0x5c>
 8003912:	230c      	movs	r3, #12
 8003914:	f8ca 3000 	str.w	r3, [sl]
 8003918:	89a3      	ldrh	r3, [r4, #12]
 800391a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800391e:	81a3      	strh	r3, [r4, #12]
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003928:	6921      	ldr	r1, [r4, #16]
 800392a:	464a      	mov	r2, r9
 800392c:	f000 fabe 	bl	8003eac <memcpy>
 8003930:	89a3      	ldrh	r3, [r4, #12]
 8003932:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800393a:	81a3      	strh	r3, [r4, #12]
 800393c:	6126      	str	r6, [r4, #16]
 800393e:	6165      	str	r5, [r4, #20]
 8003940:	444e      	add	r6, r9
 8003942:	eba5 0509 	sub.w	r5, r5, r9
 8003946:	6026      	str	r6, [r4, #0]
 8003948:	60a5      	str	r5, [r4, #8]
 800394a:	463e      	mov	r6, r7
 800394c:	42be      	cmp	r6, r7
 800394e:	d900      	bls.n	8003952 <__ssputs_r+0x86>
 8003950:	463e      	mov	r6, r7
 8003952:	6820      	ldr	r0, [r4, #0]
 8003954:	4632      	mov	r2, r6
 8003956:	4641      	mov	r1, r8
 8003958:	f000 fab6 	bl	8003ec8 <memmove>
 800395c:	68a3      	ldr	r3, [r4, #8]
 800395e:	1b9b      	subs	r3, r3, r6
 8003960:	60a3      	str	r3, [r4, #8]
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	4433      	add	r3, r6
 8003966:	6023      	str	r3, [r4, #0]
 8003968:	2000      	movs	r0, #0
 800396a:	e7db      	b.n	8003924 <__ssputs_r+0x58>
 800396c:	462a      	mov	r2, r5
 800396e:	f000 fba5 	bl	80040bc <_realloc_r>
 8003972:	4606      	mov	r6, r0
 8003974:	2800      	cmp	r0, #0
 8003976:	d1e1      	bne.n	800393c <__ssputs_r+0x70>
 8003978:	6921      	ldr	r1, [r4, #16]
 800397a:	4650      	mov	r0, sl
 800397c:	f000 fabe 	bl	8003efc <_free_r>
 8003980:	e7c7      	b.n	8003912 <__ssputs_r+0x46>
	...

08003984 <_svfiprintf_r>:
 8003984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003988:	4698      	mov	r8, r3
 800398a:	898b      	ldrh	r3, [r1, #12]
 800398c:	061b      	lsls	r3, r3, #24
 800398e:	b09d      	sub	sp, #116	; 0x74
 8003990:	4607      	mov	r7, r0
 8003992:	460d      	mov	r5, r1
 8003994:	4614      	mov	r4, r2
 8003996:	d50e      	bpl.n	80039b6 <_svfiprintf_r+0x32>
 8003998:	690b      	ldr	r3, [r1, #16]
 800399a:	b963      	cbnz	r3, 80039b6 <_svfiprintf_r+0x32>
 800399c:	2140      	movs	r1, #64	; 0x40
 800399e:	f000 fb19 	bl	8003fd4 <_malloc_r>
 80039a2:	6028      	str	r0, [r5, #0]
 80039a4:	6128      	str	r0, [r5, #16]
 80039a6:	b920      	cbnz	r0, 80039b2 <_svfiprintf_r+0x2e>
 80039a8:	230c      	movs	r3, #12
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	f04f 30ff 	mov.w	r0, #4294967295
 80039b0:	e0d1      	b.n	8003b56 <_svfiprintf_r+0x1d2>
 80039b2:	2340      	movs	r3, #64	; 0x40
 80039b4:	616b      	str	r3, [r5, #20]
 80039b6:	2300      	movs	r3, #0
 80039b8:	9309      	str	r3, [sp, #36]	; 0x24
 80039ba:	2320      	movs	r3, #32
 80039bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80039c4:	2330      	movs	r3, #48	; 0x30
 80039c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003b70 <_svfiprintf_r+0x1ec>
 80039ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039ce:	f04f 0901 	mov.w	r9, #1
 80039d2:	4623      	mov	r3, r4
 80039d4:	469a      	mov	sl, r3
 80039d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039da:	b10a      	cbz	r2, 80039e0 <_svfiprintf_r+0x5c>
 80039dc:	2a25      	cmp	r2, #37	; 0x25
 80039de:	d1f9      	bne.n	80039d4 <_svfiprintf_r+0x50>
 80039e0:	ebba 0b04 	subs.w	fp, sl, r4
 80039e4:	d00b      	beq.n	80039fe <_svfiprintf_r+0x7a>
 80039e6:	465b      	mov	r3, fp
 80039e8:	4622      	mov	r2, r4
 80039ea:	4629      	mov	r1, r5
 80039ec:	4638      	mov	r0, r7
 80039ee:	f7ff ff6d 	bl	80038cc <__ssputs_r>
 80039f2:	3001      	adds	r0, #1
 80039f4:	f000 80aa 	beq.w	8003b4c <_svfiprintf_r+0x1c8>
 80039f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039fa:	445a      	add	r2, fp
 80039fc:	9209      	str	r2, [sp, #36]	; 0x24
 80039fe:	f89a 3000 	ldrb.w	r3, [sl]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 80a2 	beq.w	8003b4c <_svfiprintf_r+0x1c8>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a12:	f10a 0a01 	add.w	sl, sl, #1
 8003a16:	9304      	str	r3, [sp, #16]
 8003a18:	9307      	str	r3, [sp, #28]
 8003a1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a1e:	931a      	str	r3, [sp, #104]	; 0x68
 8003a20:	4654      	mov	r4, sl
 8003a22:	2205      	movs	r2, #5
 8003a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a28:	4851      	ldr	r0, [pc, #324]	; (8003b70 <_svfiprintf_r+0x1ec>)
 8003a2a:	f7fc fbe1 	bl	80001f0 <memchr>
 8003a2e:	9a04      	ldr	r2, [sp, #16]
 8003a30:	b9d8      	cbnz	r0, 8003a6a <_svfiprintf_r+0xe6>
 8003a32:	06d0      	lsls	r0, r2, #27
 8003a34:	bf44      	itt	mi
 8003a36:	2320      	movmi	r3, #32
 8003a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a3c:	0711      	lsls	r1, r2, #28
 8003a3e:	bf44      	itt	mi
 8003a40:	232b      	movmi	r3, #43	; 0x2b
 8003a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a46:	f89a 3000 	ldrb.w	r3, [sl]
 8003a4a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a4c:	d015      	beq.n	8003a7a <_svfiprintf_r+0xf6>
 8003a4e:	9a07      	ldr	r2, [sp, #28]
 8003a50:	4654      	mov	r4, sl
 8003a52:	2000      	movs	r0, #0
 8003a54:	f04f 0c0a 	mov.w	ip, #10
 8003a58:	4621      	mov	r1, r4
 8003a5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a5e:	3b30      	subs	r3, #48	; 0x30
 8003a60:	2b09      	cmp	r3, #9
 8003a62:	d94e      	bls.n	8003b02 <_svfiprintf_r+0x17e>
 8003a64:	b1b0      	cbz	r0, 8003a94 <_svfiprintf_r+0x110>
 8003a66:	9207      	str	r2, [sp, #28]
 8003a68:	e014      	b.n	8003a94 <_svfiprintf_r+0x110>
 8003a6a:	eba0 0308 	sub.w	r3, r0, r8
 8003a6e:	fa09 f303 	lsl.w	r3, r9, r3
 8003a72:	4313      	orrs	r3, r2
 8003a74:	9304      	str	r3, [sp, #16]
 8003a76:	46a2      	mov	sl, r4
 8003a78:	e7d2      	b.n	8003a20 <_svfiprintf_r+0x9c>
 8003a7a:	9b03      	ldr	r3, [sp, #12]
 8003a7c:	1d19      	adds	r1, r3, #4
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	9103      	str	r1, [sp, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	bfbb      	ittet	lt
 8003a86:	425b      	neglt	r3, r3
 8003a88:	f042 0202 	orrlt.w	r2, r2, #2
 8003a8c:	9307      	strge	r3, [sp, #28]
 8003a8e:	9307      	strlt	r3, [sp, #28]
 8003a90:	bfb8      	it	lt
 8003a92:	9204      	strlt	r2, [sp, #16]
 8003a94:	7823      	ldrb	r3, [r4, #0]
 8003a96:	2b2e      	cmp	r3, #46	; 0x2e
 8003a98:	d10c      	bne.n	8003ab4 <_svfiprintf_r+0x130>
 8003a9a:	7863      	ldrb	r3, [r4, #1]
 8003a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a9e:	d135      	bne.n	8003b0c <_svfiprintf_r+0x188>
 8003aa0:	9b03      	ldr	r3, [sp, #12]
 8003aa2:	1d1a      	adds	r2, r3, #4
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	9203      	str	r2, [sp, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bfb8      	it	lt
 8003aac:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ab0:	3402      	adds	r4, #2
 8003ab2:	9305      	str	r3, [sp, #20]
 8003ab4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b80 <_svfiprintf_r+0x1fc>
 8003ab8:	7821      	ldrb	r1, [r4, #0]
 8003aba:	2203      	movs	r2, #3
 8003abc:	4650      	mov	r0, sl
 8003abe:	f7fc fb97 	bl	80001f0 <memchr>
 8003ac2:	b140      	cbz	r0, 8003ad6 <_svfiprintf_r+0x152>
 8003ac4:	2340      	movs	r3, #64	; 0x40
 8003ac6:	eba0 000a 	sub.w	r0, r0, sl
 8003aca:	fa03 f000 	lsl.w	r0, r3, r0
 8003ace:	9b04      	ldr	r3, [sp, #16]
 8003ad0:	4303      	orrs	r3, r0
 8003ad2:	3401      	adds	r4, #1
 8003ad4:	9304      	str	r3, [sp, #16]
 8003ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ada:	4826      	ldr	r0, [pc, #152]	; (8003b74 <_svfiprintf_r+0x1f0>)
 8003adc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ae0:	2206      	movs	r2, #6
 8003ae2:	f7fc fb85 	bl	80001f0 <memchr>
 8003ae6:	2800      	cmp	r0, #0
 8003ae8:	d038      	beq.n	8003b5c <_svfiprintf_r+0x1d8>
 8003aea:	4b23      	ldr	r3, [pc, #140]	; (8003b78 <_svfiprintf_r+0x1f4>)
 8003aec:	bb1b      	cbnz	r3, 8003b36 <_svfiprintf_r+0x1b2>
 8003aee:	9b03      	ldr	r3, [sp, #12]
 8003af0:	3307      	adds	r3, #7
 8003af2:	f023 0307 	bic.w	r3, r3, #7
 8003af6:	3308      	adds	r3, #8
 8003af8:	9303      	str	r3, [sp, #12]
 8003afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003afc:	4433      	add	r3, r6
 8003afe:	9309      	str	r3, [sp, #36]	; 0x24
 8003b00:	e767      	b.n	80039d2 <_svfiprintf_r+0x4e>
 8003b02:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b06:	460c      	mov	r4, r1
 8003b08:	2001      	movs	r0, #1
 8003b0a:	e7a5      	b.n	8003a58 <_svfiprintf_r+0xd4>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	3401      	adds	r4, #1
 8003b10:	9305      	str	r3, [sp, #20]
 8003b12:	4619      	mov	r1, r3
 8003b14:	f04f 0c0a 	mov.w	ip, #10
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b1e:	3a30      	subs	r2, #48	; 0x30
 8003b20:	2a09      	cmp	r2, #9
 8003b22:	d903      	bls.n	8003b2c <_svfiprintf_r+0x1a8>
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0c5      	beq.n	8003ab4 <_svfiprintf_r+0x130>
 8003b28:	9105      	str	r1, [sp, #20]
 8003b2a:	e7c3      	b.n	8003ab4 <_svfiprintf_r+0x130>
 8003b2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b30:	4604      	mov	r4, r0
 8003b32:	2301      	movs	r3, #1
 8003b34:	e7f0      	b.n	8003b18 <_svfiprintf_r+0x194>
 8003b36:	ab03      	add	r3, sp, #12
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	462a      	mov	r2, r5
 8003b3c:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <_svfiprintf_r+0x1f8>)
 8003b3e:	a904      	add	r1, sp, #16
 8003b40:	4638      	mov	r0, r7
 8003b42:	f3af 8000 	nop.w
 8003b46:	1c42      	adds	r2, r0, #1
 8003b48:	4606      	mov	r6, r0
 8003b4a:	d1d6      	bne.n	8003afa <_svfiprintf_r+0x176>
 8003b4c:	89ab      	ldrh	r3, [r5, #12]
 8003b4e:	065b      	lsls	r3, r3, #25
 8003b50:	f53f af2c 	bmi.w	80039ac <_svfiprintf_r+0x28>
 8003b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b56:	b01d      	add	sp, #116	; 0x74
 8003b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b5c:	ab03      	add	r3, sp, #12
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	462a      	mov	r2, r5
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <_svfiprintf_r+0x1f8>)
 8003b64:	a904      	add	r1, sp, #16
 8003b66:	4638      	mov	r0, r7
 8003b68:	f000 f87a 	bl	8003c60 <_printf_i>
 8003b6c:	e7eb      	b.n	8003b46 <_svfiprintf_r+0x1c2>
 8003b6e:	bf00      	nop
 8003b70:	080041c8 	.word	0x080041c8
 8003b74:	080041d2 	.word	0x080041d2
 8003b78:	00000000 	.word	0x00000000
 8003b7c:	080038cd 	.word	0x080038cd
 8003b80:	080041ce 	.word	0x080041ce

08003b84 <_printf_common>:
 8003b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b88:	4616      	mov	r6, r2
 8003b8a:	4699      	mov	r9, r3
 8003b8c:	688a      	ldr	r2, [r1, #8]
 8003b8e:	690b      	ldr	r3, [r1, #16]
 8003b90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b94:	4293      	cmp	r3, r2
 8003b96:	bfb8      	it	lt
 8003b98:	4613      	movlt	r3, r2
 8003b9a:	6033      	str	r3, [r6, #0]
 8003b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ba0:	4607      	mov	r7, r0
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	b10a      	cbz	r2, 8003baa <_printf_common+0x26>
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	6033      	str	r3, [r6, #0]
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	0699      	lsls	r1, r3, #26
 8003bae:	bf42      	ittt	mi
 8003bb0:	6833      	ldrmi	r3, [r6, #0]
 8003bb2:	3302      	addmi	r3, #2
 8003bb4:	6033      	strmi	r3, [r6, #0]
 8003bb6:	6825      	ldr	r5, [r4, #0]
 8003bb8:	f015 0506 	ands.w	r5, r5, #6
 8003bbc:	d106      	bne.n	8003bcc <_printf_common+0x48>
 8003bbe:	f104 0a19 	add.w	sl, r4, #25
 8003bc2:	68e3      	ldr	r3, [r4, #12]
 8003bc4:	6832      	ldr	r2, [r6, #0]
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	42ab      	cmp	r3, r5
 8003bca:	dc26      	bgt.n	8003c1a <_printf_common+0x96>
 8003bcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bd0:	1e13      	subs	r3, r2, #0
 8003bd2:	6822      	ldr	r2, [r4, #0]
 8003bd4:	bf18      	it	ne
 8003bd6:	2301      	movne	r3, #1
 8003bd8:	0692      	lsls	r2, r2, #26
 8003bda:	d42b      	bmi.n	8003c34 <_printf_common+0xb0>
 8003bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003be0:	4649      	mov	r1, r9
 8003be2:	4638      	mov	r0, r7
 8003be4:	47c0      	blx	r8
 8003be6:	3001      	adds	r0, #1
 8003be8:	d01e      	beq.n	8003c28 <_printf_common+0xa4>
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	68e5      	ldr	r5, [r4, #12]
 8003bee:	6832      	ldr	r2, [r6, #0]
 8003bf0:	f003 0306 	and.w	r3, r3, #6
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	bf08      	it	eq
 8003bf8:	1aad      	subeq	r5, r5, r2
 8003bfa:	68a3      	ldr	r3, [r4, #8]
 8003bfc:	6922      	ldr	r2, [r4, #16]
 8003bfe:	bf0c      	ite	eq
 8003c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c04:	2500      	movne	r5, #0
 8003c06:	4293      	cmp	r3, r2
 8003c08:	bfc4      	itt	gt
 8003c0a:	1a9b      	subgt	r3, r3, r2
 8003c0c:	18ed      	addgt	r5, r5, r3
 8003c0e:	2600      	movs	r6, #0
 8003c10:	341a      	adds	r4, #26
 8003c12:	42b5      	cmp	r5, r6
 8003c14:	d11a      	bne.n	8003c4c <_printf_common+0xc8>
 8003c16:	2000      	movs	r0, #0
 8003c18:	e008      	b.n	8003c2c <_printf_common+0xa8>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	4652      	mov	r2, sl
 8003c1e:	4649      	mov	r1, r9
 8003c20:	4638      	mov	r0, r7
 8003c22:	47c0      	blx	r8
 8003c24:	3001      	adds	r0, #1
 8003c26:	d103      	bne.n	8003c30 <_printf_common+0xac>
 8003c28:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c30:	3501      	adds	r5, #1
 8003c32:	e7c6      	b.n	8003bc2 <_printf_common+0x3e>
 8003c34:	18e1      	adds	r1, r4, r3
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	2030      	movs	r0, #48	; 0x30
 8003c3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c3e:	4422      	add	r2, r4
 8003c40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c48:	3302      	adds	r3, #2
 8003c4a:	e7c7      	b.n	8003bdc <_printf_common+0x58>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	4622      	mov	r2, r4
 8003c50:	4649      	mov	r1, r9
 8003c52:	4638      	mov	r0, r7
 8003c54:	47c0      	blx	r8
 8003c56:	3001      	adds	r0, #1
 8003c58:	d0e6      	beq.n	8003c28 <_printf_common+0xa4>
 8003c5a:	3601      	adds	r6, #1
 8003c5c:	e7d9      	b.n	8003c12 <_printf_common+0x8e>
	...

08003c60 <_printf_i>:
 8003c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c64:	7e0f      	ldrb	r7, [r1, #24]
 8003c66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c68:	2f78      	cmp	r7, #120	; 0x78
 8003c6a:	4691      	mov	r9, r2
 8003c6c:	4680      	mov	r8, r0
 8003c6e:	460c      	mov	r4, r1
 8003c70:	469a      	mov	sl, r3
 8003c72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c76:	d807      	bhi.n	8003c88 <_printf_i+0x28>
 8003c78:	2f62      	cmp	r7, #98	; 0x62
 8003c7a:	d80a      	bhi.n	8003c92 <_printf_i+0x32>
 8003c7c:	2f00      	cmp	r7, #0
 8003c7e:	f000 80d8 	beq.w	8003e32 <_printf_i+0x1d2>
 8003c82:	2f58      	cmp	r7, #88	; 0x58
 8003c84:	f000 80a3 	beq.w	8003dce <_printf_i+0x16e>
 8003c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c90:	e03a      	b.n	8003d08 <_printf_i+0xa8>
 8003c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c96:	2b15      	cmp	r3, #21
 8003c98:	d8f6      	bhi.n	8003c88 <_printf_i+0x28>
 8003c9a:	a101      	add	r1, pc, #4	; (adr r1, 8003ca0 <_printf_i+0x40>)
 8003c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ca0:	08003cf9 	.word	0x08003cf9
 8003ca4:	08003d0d 	.word	0x08003d0d
 8003ca8:	08003c89 	.word	0x08003c89
 8003cac:	08003c89 	.word	0x08003c89
 8003cb0:	08003c89 	.word	0x08003c89
 8003cb4:	08003c89 	.word	0x08003c89
 8003cb8:	08003d0d 	.word	0x08003d0d
 8003cbc:	08003c89 	.word	0x08003c89
 8003cc0:	08003c89 	.word	0x08003c89
 8003cc4:	08003c89 	.word	0x08003c89
 8003cc8:	08003c89 	.word	0x08003c89
 8003ccc:	08003e19 	.word	0x08003e19
 8003cd0:	08003d3d 	.word	0x08003d3d
 8003cd4:	08003dfb 	.word	0x08003dfb
 8003cd8:	08003c89 	.word	0x08003c89
 8003cdc:	08003c89 	.word	0x08003c89
 8003ce0:	08003e3b 	.word	0x08003e3b
 8003ce4:	08003c89 	.word	0x08003c89
 8003ce8:	08003d3d 	.word	0x08003d3d
 8003cec:	08003c89 	.word	0x08003c89
 8003cf0:	08003c89 	.word	0x08003c89
 8003cf4:	08003e03 	.word	0x08003e03
 8003cf8:	682b      	ldr	r3, [r5, #0]
 8003cfa:	1d1a      	adds	r2, r3, #4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	602a      	str	r2, [r5, #0]
 8003d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0a3      	b.n	8003e54 <_printf_i+0x1f4>
 8003d0c:	6820      	ldr	r0, [r4, #0]
 8003d0e:	6829      	ldr	r1, [r5, #0]
 8003d10:	0606      	lsls	r6, r0, #24
 8003d12:	f101 0304 	add.w	r3, r1, #4
 8003d16:	d50a      	bpl.n	8003d2e <_printf_i+0xce>
 8003d18:	680e      	ldr	r6, [r1, #0]
 8003d1a:	602b      	str	r3, [r5, #0]
 8003d1c:	2e00      	cmp	r6, #0
 8003d1e:	da03      	bge.n	8003d28 <_printf_i+0xc8>
 8003d20:	232d      	movs	r3, #45	; 0x2d
 8003d22:	4276      	negs	r6, r6
 8003d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d28:	485e      	ldr	r0, [pc, #376]	; (8003ea4 <_printf_i+0x244>)
 8003d2a:	230a      	movs	r3, #10
 8003d2c:	e019      	b.n	8003d62 <_printf_i+0x102>
 8003d2e:	680e      	ldr	r6, [r1, #0]
 8003d30:	602b      	str	r3, [r5, #0]
 8003d32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d36:	bf18      	it	ne
 8003d38:	b236      	sxthne	r6, r6
 8003d3a:	e7ef      	b.n	8003d1c <_printf_i+0xbc>
 8003d3c:	682b      	ldr	r3, [r5, #0]
 8003d3e:	6820      	ldr	r0, [r4, #0]
 8003d40:	1d19      	adds	r1, r3, #4
 8003d42:	6029      	str	r1, [r5, #0]
 8003d44:	0601      	lsls	r1, r0, #24
 8003d46:	d501      	bpl.n	8003d4c <_printf_i+0xec>
 8003d48:	681e      	ldr	r6, [r3, #0]
 8003d4a:	e002      	b.n	8003d52 <_printf_i+0xf2>
 8003d4c:	0646      	lsls	r6, r0, #25
 8003d4e:	d5fb      	bpl.n	8003d48 <_printf_i+0xe8>
 8003d50:	881e      	ldrh	r6, [r3, #0]
 8003d52:	4854      	ldr	r0, [pc, #336]	; (8003ea4 <_printf_i+0x244>)
 8003d54:	2f6f      	cmp	r7, #111	; 0x6f
 8003d56:	bf0c      	ite	eq
 8003d58:	2308      	moveq	r3, #8
 8003d5a:	230a      	movne	r3, #10
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d62:	6865      	ldr	r5, [r4, #4]
 8003d64:	60a5      	str	r5, [r4, #8]
 8003d66:	2d00      	cmp	r5, #0
 8003d68:	bfa2      	ittt	ge
 8003d6a:	6821      	ldrge	r1, [r4, #0]
 8003d6c:	f021 0104 	bicge.w	r1, r1, #4
 8003d70:	6021      	strge	r1, [r4, #0]
 8003d72:	b90e      	cbnz	r6, 8003d78 <_printf_i+0x118>
 8003d74:	2d00      	cmp	r5, #0
 8003d76:	d04d      	beq.n	8003e14 <_printf_i+0x1b4>
 8003d78:	4615      	mov	r5, r2
 8003d7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d7e:	fb03 6711 	mls	r7, r3, r1, r6
 8003d82:	5dc7      	ldrb	r7, [r0, r7]
 8003d84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d88:	4637      	mov	r7, r6
 8003d8a:	42bb      	cmp	r3, r7
 8003d8c:	460e      	mov	r6, r1
 8003d8e:	d9f4      	bls.n	8003d7a <_printf_i+0x11a>
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d10b      	bne.n	8003dac <_printf_i+0x14c>
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	07de      	lsls	r6, r3, #31
 8003d98:	d508      	bpl.n	8003dac <_printf_i+0x14c>
 8003d9a:	6923      	ldr	r3, [r4, #16]
 8003d9c:	6861      	ldr	r1, [r4, #4]
 8003d9e:	4299      	cmp	r1, r3
 8003da0:	bfde      	ittt	le
 8003da2:	2330      	movle	r3, #48	; 0x30
 8003da4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003da8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003dac:	1b52      	subs	r2, r2, r5
 8003dae:	6122      	str	r2, [r4, #16]
 8003db0:	f8cd a000 	str.w	sl, [sp]
 8003db4:	464b      	mov	r3, r9
 8003db6:	aa03      	add	r2, sp, #12
 8003db8:	4621      	mov	r1, r4
 8003dba:	4640      	mov	r0, r8
 8003dbc:	f7ff fee2 	bl	8003b84 <_printf_common>
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d14c      	bne.n	8003e5e <_printf_i+0x1fe>
 8003dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc8:	b004      	add	sp, #16
 8003dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dce:	4835      	ldr	r0, [pc, #212]	; (8003ea4 <_printf_i+0x244>)
 8003dd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003dd4:	6829      	ldr	r1, [r5, #0]
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ddc:	6029      	str	r1, [r5, #0]
 8003dde:	061d      	lsls	r5, r3, #24
 8003de0:	d514      	bpl.n	8003e0c <_printf_i+0x1ac>
 8003de2:	07df      	lsls	r7, r3, #31
 8003de4:	bf44      	itt	mi
 8003de6:	f043 0320 	orrmi.w	r3, r3, #32
 8003dea:	6023      	strmi	r3, [r4, #0]
 8003dec:	b91e      	cbnz	r6, 8003df6 <_printf_i+0x196>
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	f023 0320 	bic.w	r3, r3, #32
 8003df4:	6023      	str	r3, [r4, #0]
 8003df6:	2310      	movs	r3, #16
 8003df8:	e7b0      	b.n	8003d5c <_printf_i+0xfc>
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	f043 0320 	orr.w	r3, r3, #32
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	2378      	movs	r3, #120	; 0x78
 8003e04:	4828      	ldr	r0, [pc, #160]	; (8003ea8 <_printf_i+0x248>)
 8003e06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e0a:	e7e3      	b.n	8003dd4 <_printf_i+0x174>
 8003e0c:	0659      	lsls	r1, r3, #25
 8003e0e:	bf48      	it	mi
 8003e10:	b2b6      	uxthmi	r6, r6
 8003e12:	e7e6      	b.n	8003de2 <_printf_i+0x182>
 8003e14:	4615      	mov	r5, r2
 8003e16:	e7bb      	b.n	8003d90 <_printf_i+0x130>
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	6826      	ldr	r6, [r4, #0]
 8003e1c:	6961      	ldr	r1, [r4, #20]
 8003e1e:	1d18      	adds	r0, r3, #4
 8003e20:	6028      	str	r0, [r5, #0]
 8003e22:	0635      	lsls	r5, r6, #24
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	d501      	bpl.n	8003e2c <_printf_i+0x1cc>
 8003e28:	6019      	str	r1, [r3, #0]
 8003e2a:	e002      	b.n	8003e32 <_printf_i+0x1d2>
 8003e2c:	0670      	lsls	r0, r6, #25
 8003e2e:	d5fb      	bpl.n	8003e28 <_printf_i+0x1c8>
 8003e30:	8019      	strh	r1, [r3, #0]
 8003e32:	2300      	movs	r3, #0
 8003e34:	6123      	str	r3, [r4, #16]
 8003e36:	4615      	mov	r5, r2
 8003e38:	e7ba      	b.n	8003db0 <_printf_i+0x150>
 8003e3a:	682b      	ldr	r3, [r5, #0]
 8003e3c:	1d1a      	adds	r2, r3, #4
 8003e3e:	602a      	str	r2, [r5, #0]
 8003e40:	681d      	ldr	r5, [r3, #0]
 8003e42:	6862      	ldr	r2, [r4, #4]
 8003e44:	2100      	movs	r1, #0
 8003e46:	4628      	mov	r0, r5
 8003e48:	f7fc f9d2 	bl	80001f0 <memchr>
 8003e4c:	b108      	cbz	r0, 8003e52 <_printf_i+0x1f2>
 8003e4e:	1b40      	subs	r0, r0, r5
 8003e50:	6060      	str	r0, [r4, #4]
 8003e52:	6863      	ldr	r3, [r4, #4]
 8003e54:	6123      	str	r3, [r4, #16]
 8003e56:	2300      	movs	r3, #0
 8003e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e5c:	e7a8      	b.n	8003db0 <_printf_i+0x150>
 8003e5e:	6923      	ldr	r3, [r4, #16]
 8003e60:	462a      	mov	r2, r5
 8003e62:	4649      	mov	r1, r9
 8003e64:	4640      	mov	r0, r8
 8003e66:	47d0      	blx	sl
 8003e68:	3001      	adds	r0, #1
 8003e6a:	d0ab      	beq.n	8003dc4 <_printf_i+0x164>
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	079b      	lsls	r3, r3, #30
 8003e70:	d413      	bmi.n	8003e9a <_printf_i+0x23a>
 8003e72:	68e0      	ldr	r0, [r4, #12]
 8003e74:	9b03      	ldr	r3, [sp, #12]
 8003e76:	4298      	cmp	r0, r3
 8003e78:	bfb8      	it	lt
 8003e7a:	4618      	movlt	r0, r3
 8003e7c:	e7a4      	b.n	8003dc8 <_printf_i+0x168>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	4632      	mov	r2, r6
 8003e82:	4649      	mov	r1, r9
 8003e84:	4640      	mov	r0, r8
 8003e86:	47d0      	blx	sl
 8003e88:	3001      	adds	r0, #1
 8003e8a:	d09b      	beq.n	8003dc4 <_printf_i+0x164>
 8003e8c:	3501      	adds	r5, #1
 8003e8e:	68e3      	ldr	r3, [r4, #12]
 8003e90:	9903      	ldr	r1, [sp, #12]
 8003e92:	1a5b      	subs	r3, r3, r1
 8003e94:	42ab      	cmp	r3, r5
 8003e96:	dcf2      	bgt.n	8003e7e <_printf_i+0x21e>
 8003e98:	e7eb      	b.n	8003e72 <_printf_i+0x212>
 8003e9a:	2500      	movs	r5, #0
 8003e9c:	f104 0619 	add.w	r6, r4, #25
 8003ea0:	e7f5      	b.n	8003e8e <_printf_i+0x22e>
 8003ea2:	bf00      	nop
 8003ea4:	080041d9 	.word	0x080041d9
 8003ea8:	080041ea 	.word	0x080041ea

08003eac <memcpy>:
 8003eac:	440a      	add	r2, r1
 8003eae:	4291      	cmp	r1, r2
 8003eb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003eb4:	d100      	bne.n	8003eb8 <memcpy+0xc>
 8003eb6:	4770      	bx	lr
 8003eb8:	b510      	push	{r4, lr}
 8003eba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ec2:	4291      	cmp	r1, r2
 8003ec4:	d1f9      	bne.n	8003eba <memcpy+0xe>
 8003ec6:	bd10      	pop	{r4, pc}

08003ec8 <memmove>:
 8003ec8:	4288      	cmp	r0, r1
 8003eca:	b510      	push	{r4, lr}
 8003ecc:	eb01 0402 	add.w	r4, r1, r2
 8003ed0:	d902      	bls.n	8003ed8 <memmove+0x10>
 8003ed2:	4284      	cmp	r4, r0
 8003ed4:	4623      	mov	r3, r4
 8003ed6:	d807      	bhi.n	8003ee8 <memmove+0x20>
 8003ed8:	1e43      	subs	r3, r0, #1
 8003eda:	42a1      	cmp	r1, r4
 8003edc:	d008      	beq.n	8003ef0 <memmove+0x28>
 8003ede:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ee6:	e7f8      	b.n	8003eda <memmove+0x12>
 8003ee8:	4402      	add	r2, r0
 8003eea:	4601      	mov	r1, r0
 8003eec:	428a      	cmp	r2, r1
 8003eee:	d100      	bne.n	8003ef2 <memmove+0x2a>
 8003ef0:	bd10      	pop	{r4, pc}
 8003ef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ef6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003efa:	e7f7      	b.n	8003eec <memmove+0x24>

08003efc <_free_r>:
 8003efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003efe:	2900      	cmp	r1, #0
 8003f00:	d044      	beq.n	8003f8c <_free_r+0x90>
 8003f02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f06:	9001      	str	r0, [sp, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f1a1 0404 	sub.w	r4, r1, #4
 8003f0e:	bfb8      	it	lt
 8003f10:	18e4      	addlt	r4, r4, r3
 8003f12:	f000 f913 	bl	800413c <__malloc_lock>
 8003f16:	4a1e      	ldr	r2, [pc, #120]	; (8003f90 <_free_r+0x94>)
 8003f18:	9801      	ldr	r0, [sp, #4]
 8003f1a:	6813      	ldr	r3, [r2, #0]
 8003f1c:	b933      	cbnz	r3, 8003f2c <_free_r+0x30>
 8003f1e:	6063      	str	r3, [r4, #4]
 8003f20:	6014      	str	r4, [r2, #0]
 8003f22:	b003      	add	sp, #12
 8003f24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f28:	f000 b90e 	b.w	8004148 <__malloc_unlock>
 8003f2c:	42a3      	cmp	r3, r4
 8003f2e:	d908      	bls.n	8003f42 <_free_r+0x46>
 8003f30:	6825      	ldr	r5, [r4, #0]
 8003f32:	1961      	adds	r1, r4, r5
 8003f34:	428b      	cmp	r3, r1
 8003f36:	bf01      	itttt	eq
 8003f38:	6819      	ldreq	r1, [r3, #0]
 8003f3a:	685b      	ldreq	r3, [r3, #4]
 8003f3c:	1949      	addeq	r1, r1, r5
 8003f3e:	6021      	streq	r1, [r4, #0]
 8003f40:	e7ed      	b.n	8003f1e <_free_r+0x22>
 8003f42:	461a      	mov	r2, r3
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	b10b      	cbz	r3, 8003f4c <_free_r+0x50>
 8003f48:	42a3      	cmp	r3, r4
 8003f4a:	d9fa      	bls.n	8003f42 <_free_r+0x46>
 8003f4c:	6811      	ldr	r1, [r2, #0]
 8003f4e:	1855      	adds	r5, r2, r1
 8003f50:	42a5      	cmp	r5, r4
 8003f52:	d10b      	bne.n	8003f6c <_free_r+0x70>
 8003f54:	6824      	ldr	r4, [r4, #0]
 8003f56:	4421      	add	r1, r4
 8003f58:	1854      	adds	r4, r2, r1
 8003f5a:	42a3      	cmp	r3, r4
 8003f5c:	6011      	str	r1, [r2, #0]
 8003f5e:	d1e0      	bne.n	8003f22 <_free_r+0x26>
 8003f60:	681c      	ldr	r4, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	6053      	str	r3, [r2, #4]
 8003f66:	4421      	add	r1, r4
 8003f68:	6011      	str	r1, [r2, #0]
 8003f6a:	e7da      	b.n	8003f22 <_free_r+0x26>
 8003f6c:	d902      	bls.n	8003f74 <_free_r+0x78>
 8003f6e:	230c      	movs	r3, #12
 8003f70:	6003      	str	r3, [r0, #0]
 8003f72:	e7d6      	b.n	8003f22 <_free_r+0x26>
 8003f74:	6825      	ldr	r5, [r4, #0]
 8003f76:	1961      	adds	r1, r4, r5
 8003f78:	428b      	cmp	r3, r1
 8003f7a:	bf04      	itt	eq
 8003f7c:	6819      	ldreq	r1, [r3, #0]
 8003f7e:	685b      	ldreq	r3, [r3, #4]
 8003f80:	6063      	str	r3, [r4, #4]
 8003f82:	bf04      	itt	eq
 8003f84:	1949      	addeq	r1, r1, r5
 8003f86:	6021      	streq	r1, [r4, #0]
 8003f88:	6054      	str	r4, [r2, #4]
 8003f8a:	e7ca      	b.n	8003f22 <_free_r+0x26>
 8003f8c:	b003      	add	sp, #12
 8003f8e:	bd30      	pop	{r4, r5, pc}
 8003f90:	2000018c 	.word	0x2000018c

08003f94 <sbrk_aligned>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	4e0e      	ldr	r6, [pc, #56]	; (8003fd0 <sbrk_aligned+0x3c>)
 8003f98:	460c      	mov	r4, r1
 8003f9a:	6831      	ldr	r1, [r6, #0]
 8003f9c:	4605      	mov	r5, r0
 8003f9e:	b911      	cbnz	r1, 8003fa6 <sbrk_aligned+0x12>
 8003fa0:	f000 f8bc 	bl	800411c <_sbrk_r>
 8003fa4:	6030      	str	r0, [r6, #0]
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	4628      	mov	r0, r5
 8003faa:	f000 f8b7 	bl	800411c <_sbrk_r>
 8003fae:	1c43      	adds	r3, r0, #1
 8003fb0:	d00a      	beq.n	8003fc8 <sbrk_aligned+0x34>
 8003fb2:	1cc4      	adds	r4, r0, #3
 8003fb4:	f024 0403 	bic.w	r4, r4, #3
 8003fb8:	42a0      	cmp	r0, r4
 8003fba:	d007      	beq.n	8003fcc <sbrk_aligned+0x38>
 8003fbc:	1a21      	subs	r1, r4, r0
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	f000 f8ac 	bl	800411c <_sbrk_r>
 8003fc4:	3001      	adds	r0, #1
 8003fc6:	d101      	bne.n	8003fcc <sbrk_aligned+0x38>
 8003fc8:	f04f 34ff 	mov.w	r4, #4294967295
 8003fcc:	4620      	mov	r0, r4
 8003fce:	bd70      	pop	{r4, r5, r6, pc}
 8003fd0:	20000190 	.word	0x20000190

08003fd4 <_malloc_r>:
 8003fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd8:	1ccd      	adds	r5, r1, #3
 8003fda:	f025 0503 	bic.w	r5, r5, #3
 8003fde:	3508      	adds	r5, #8
 8003fe0:	2d0c      	cmp	r5, #12
 8003fe2:	bf38      	it	cc
 8003fe4:	250c      	movcc	r5, #12
 8003fe6:	2d00      	cmp	r5, #0
 8003fe8:	4607      	mov	r7, r0
 8003fea:	db01      	blt.n	8003ff0 <_malloc_r+0x1c>
 8003fec:	42a9      	cmp	r1, r5
 8003fee:	d905      	bls.n	8003ffc <_malloc_r+0x28>
 8003ff0:	230c      	movs	r3, #12
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	2600      	movs	r6, #0
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ffc:	4e2e      	ldr	r6, [pc, #184]	; (80040b8 <_malloc_r+0xe4>)
 8003ffe:	f000 f89d 	bl	800413c <__malloc_lock>
 8004002:	6833      	ldr	r3, [r6, #0]
 8004004:	461c      	mov	r4, r3
 8004006:	bb34      	cbnz	r4, 8004056 <_malloc_r+0x82>
 8004008:	4629      	mov	r1, r5
 800400a:	4638      	mov	r0, r7
 800400c:	f7ff ffc2 	bl	8003f94 <sbrk_aligned>
 8004010:	1c43      	adds	r3, r0, #1
 8004012:	4604      	mov	r4, r0
 8004014:	d14d      	bne.n	80040b2 <_malloc_r+0xde>
 8004016:	6834      	ldr	r4, [r6, #0]
 8004018:	4626      	mov	r6, r4
 800401a:	2e00      	cmp	r6, #0
 800401c:	d140      	bne.n	80040a0 <_malloc_r+0xcc>
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	4631      	mov	r1, r6
 8004022:	4638      	mov	r0, r7
 8004024:	eb04 0803 	add.w	r8, r4, r3
 8004028:	f000 f878 	bl	800411c <_sbrk_r>
 800402c:	4580      	cmp	r8, r0
 800402e:	d13a      	bne.n	80040a6 <_malloc_r+0xd2>
 8004030:	6821      	ldr	r1, [r4, #0]
 8004032:	3503      	adds	r5, #3
 8004034:	1a6d      	subs	r5, r5, r1
 8004036:	f025 0503 	bic.w	r5, r5, #3
 800403a:	3508      	adds	r5, #8
 800403c:	2d0c      	cmp	r5, #12
 800403e:	bf38      	it	cc
 8004040:	250c      	movcc	r5, #12
 8004042:	4629      	mov	r1, r5
 8004044:	4638      	mov	r0, r7
 8004046:	f7ff ffa5 	bl	8003f94 <sbrk_aligned>
 800404a:	3001      	adds	r0, #1
 800404c:	d02b      	beq.n	80040a6 <_malloc_r+0xd2>
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	442b      	add	r3, r5
 8004052:	6023      	str	r3, [r4, #0]
 8004054:	e00e      	b.n	8004074 <_malloc_r+0xa0>
 8004056:	6822      	ldr	r2, [r4, #0]
 8004058:	1b52      	subs	r2, r2, r5
 800405a:	d41e      	bmi.n	800409a <_malloc_r+0xc6>
 800405c:	2a0b      	cmp	r2, #11
 800405e:	d916      	bls.n	800408e <_malloc_r+0xba>
 8004060:	1961      	adds	r1, r4, r5
 8004062:	42a3      	cmp	r3, r4
 8004064:	6025      	str	r5, [r4, #0]
 8004066:	bf18      	it	ne
 8004068:	6059      	strne	r1, [r3, #4]
 800406a:	6863      	ldr	r3, [r4, #4]
 800406c:	bf08      	it	eq
 800406e:	6031      	streq	r1, [r6, #0]
 8004070:	5162      	str	r2, [r4, r5]
 8004072:	604b      	str	r3, [r1, #4]
 8004074:	4638      	mov	r0, r7
 8004076:	f104 060b 	add.w	r6, r4, #11
 800407a:	f000 f865 	bl	8004148 <__malloc_unlock>
 800407e:	f026 0607 	bic.w	r6, r6, #7
 8004082:	1d23      	adds	r3, r4, #4
 8004084:	1af2      	subs	r2, r6, r3
 8004086:	d0b6      	beq.n	8003ff6 <_malloc_r+0x22>
 8004088:	1b9b      	subs	r3, r3, r6
 800408a:	50a3      	str	r3, [r4, r2]
 800408c:	e7b3      	b.n	8003ff6 <_malloc_r+0x22>
 800408e:	6862      	ldr	r2, [r4, #4]
 8004090:	42a3      	cmp	r3, r4
 8004092:	bf0c      	ite	eq
 8004094:	6032      	streq	r2, [r6, #0]
 8004096:	605a      	strne	r2, [r3, #4]
 8004098:	e7ec      	b.n	8004074 <_malloc_r+0xa0>
 800409a:	4623      	mov	r3, r4
 800409c:	6864      	ldr	r4, [r4, #4]
 800409e:	e7b2      	b.n	8004006 <_malloc_r+0x32>
 80040a0:	4634      	mov	r4, r6
 80040a2:	6876      	ldr	r6, [r6, #4]
 80040a4:	e7b9      	b.n	800401a <_malloc_r+0x46>
 80040a6:	230c      	movs	r3, #12
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	4638      	mov	r0, r7
 80040ac:	f000 f84c 	bl	8004148 <__malloc_unlock>
 80040b0:	e7a1      	b.n	8003ff6 <_malloc_r+0x22>
 80040b2:	6025      	str	r5, [r4, #0]
 80040b4:	e7de      	b.n	8004074 <_malloc_r+0xa0>
 80040b6:	bf00      	nop
 80040b8:	2000018c 	.word	0x2000018c

080040bc <_realloc_r>:
 80040bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040c0:	4680      	mov	r8, r0
 80040c2:	4614      	mov	r4, r2
 80040c4:	460e      	mov	r6, r1
 80040c6:	b921      	cbnz	r1, 80040d2 <_realloc_r+0x16>
 80040c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040cc:	4611      	mov	r1, r2
 80040ce:	f7ff bf81 	b.w	8003fd4 <_malloc_r>
 80040d2:	b92a      	cbnz	r2, 80040e0 <_realloc_r+0x24>
 80040d4:	f7ff ff12 	bl	8003efc <_free_r>
 80040d8:	4625      	mov	r5, r4
 80040da:	4628      	mov	r0, r5
 80040dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040e0:	f000 f838 	bl	8004154 <_malloc_usable_size_r>
 80040e4:	4284      	cmp	r4, r0
 80040e6:	4607      	mov	r7, r0
 80040e8:	d802      	bhi.n	80040f0 <_realloc_r+0x34>
 80040ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80040ee:	d812      	bhi.n	8004116 <_realloc_r+0x5a>
 80040f0:	4621      	mov	r1, r4
 80040f2:	4640      	mov	r0, r8
 80040f4:	f7ff ff6e 	bl	8003fd4 <_malloc_r>
 80040f8:	4605      	mov	r5, r0
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d0ed      	beq.n	80040da <_realloc_r+0x1e>
 80040fe:	42bc      	cmp	r4, r7
 8004100:	4622      	mov	r2, r4
 8004102:	4631      	mov	r1, r6
 8004104:	bf28      	it	cs
 8004106:	463a      	movcs	r2, r7
 8004108:	f7ff fed0 	bl	8003eac <memcpy>
 800410c:	4631      	mov	r1, r6
 800410e:	4640      	mov	r0, r8
 8004110:	f7ff fef4 	bl	8003efc <_free_r>
 8004114:	e7e1      	b.n	80040da <_realloc_r+0x1e>
 8004116:	4635      	mov	r5, r6
 8004118:	e7df      	b.n	80040da <_realloc_r+0x1e>
	...

0800411c <_sbrk_r>:
 800411c:	b538      	push	{r3, r4, r5, lr}
 800411e:	4d06      	ldr	r5, [pc, #24]	; (8004138 <_sbrk_r+0x1c>)
 8004120:	2300      	movs	r3, #0
 8004122:	4604      	mov	r4, r0
 8004124:	4608      	mov	r0, r1
 8004126:	602b      	str	r3, [r5, #0]
 8004128:	f7fd f8a2 	bl	8001270 <_sbrk>
 800412c:	1c43      	adds	r3, r0, #1
 800412e:	d102      	bne.n	8004136 <_sbrk_r+0x1a>
 8004130:	682b      	ldr	r3, [r5, #0]
 8004132:	b103      	cbz	r3, 8004136 <_sbrk_r+0x1a>
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	bd38      	pop	{r3, r4, r5, pc}
 8004138:	20000194 	.word	0x20000194

0800413c <__malloc_lock>:
 800413c:	4801      	ldr	r0, [pc, #4]	; (8004144 <__malloc_lock+0x8>)
 800413e:	f000 b811 	b.w	8004164 <__retarget_lock_acquire_recursive>
 8004142:	bf00      	nop
 8004144:	20000198 	.word	0x20000198

08004148 <__malloc_unlock>:
 8004148:	4801      	ldr	r0, [pc, #4]	; (8004150 <__malloc_unlock+0x8>)
 800414a:	f000 b80c 	b.w	8004166 <__retarget_lock_release_recursive>
 800414e:	bf00      	nop
 8004150:	20000198 	.word	0x20000198

08004154 <_malloc_usable_size_r>:
 8004154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004158:	1f18      	subs	r0, r3, #4
 800415a:	2b00      	cmp	r3, #0
 800415c:	bfbc      	itt	lt
 800415e:	580b      	ldrlt	r3, [r1, r0]
 8004160:	18c0      	addlt	r0, r0, r3
 8004162:	4770      	bx	lr

08004164 <__retarget_lock_acquire_recursive>:
 8004164:	4770      	bx	lr

08004166 <__retarget_lock_release_recursive>:
 8004166:	4770      	bx	lr

08004168 <_init>:
 8004168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416a:	bf00      	nop
 800416c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416e:	bc08      	pop	{r3}
 8004170:	469e      	mov	lr, r3
 8004172:	4770      	bx	lr

08004174 <_fini>:
 8004174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004176:	bf00      	nop
 8004178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800417a:	bc08      	pop	{r3}
 800417c:	469e      	mov	lr, r3
 800417e:	4770      	bx	lr
