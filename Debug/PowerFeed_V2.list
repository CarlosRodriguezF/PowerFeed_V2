
PowerFeed_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08007890  08007890  00017890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b0c  08007b0c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b0c  08007b0c  00017b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b14  08007b14  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b14  08007b14  00017b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b18  08007b18  00017b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08007b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  2000008c  08007ba8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  08007ba8  0002071c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb74  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002414  00000000  00000000  0002ec30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00031048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  00031ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a25  00000000  00000000  00032eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011788  00000000  00000000  0004a8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000904f8  00000000  00000000  0005c065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec55d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047b8  00000000  00000000  000ec5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007878 	.word	0x08007878

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08007878 	.word	0x08007878

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__gedf2>:
 800085c:	f04f 3cff 	mov.w	ip, #4294967295
 8000860:	e006      	b.n	8000870 <__cmpdf2+0x4>
 8000862:	bf00      	nop

08000864 <__ledf2>:
 8000864:	f04f 0c01 	mov.w	ip, #1
 8000868:	e002      	b.n	8000870 <__cmpdf2+0x4>
 800086a:	bf00      	nop

0800086c <__cmpdf2>:
 800086c:	f04f 0c01 	mov.w	ip, #1
 8000870:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000874:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000878:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800087c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000880:	bf18      	it	ne
 8000882:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000886:	d01b      	beq.n	80008c0 <__cmpdf2+0x54>
 8000888:	b001      	add	sp, #4
 800088a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800088e:	bf0c      	ite	eq
 8000890:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000894:	ea91 0f03 	teqne	r1, r3
 8000898:	bf02      	ittt	eq
 800089a:	ea90 0f02 	teqeq	r0, r2
 800089e:	2000      	moveq	r0, #0
 80008a0:	4770      	bxeq	lr
 80008a2:	f110 0f00 	cmn.w	r0, #0
 80008a6:	ea91 0f03 	teq	r1, r3
 80008aa:	bf58      	it	pl
 80008ac:	4299      	cmppl	r1, r3
 80008ae:	bf08      	it	eq
 80008b0:	4290      	cmpeq	r0, r2
 80008b2:	bf2c      	ite	cs
 80008b4:	17d8      	asrcs	r0, r3, #31
 80008b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ba:	f040 0001 	orr.w	r0, r0, #1
 80008be:	4770      	bx	lr
 80008c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d102      	bne.n	80008d0 <__cmpdf2+0x64>
 80008ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ce:	d107      	bne.n	80008e0 <__cmpdf2+0x74>
 80008d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d1d6      	bne.n	8000888 <__cmpdf2+0x1c>
 80008da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008de:	d0d3      	beq.n	8000888 <__cmpdf2+0x1c>
 80008e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdrcmple>:
 80008e8:	4684      	mov	ip, r0
 80008ea:	4610      	mov	r0, r2
 80008ec:	4662      	mov	r2, ip
 80008ee:	468c      	mov	ip, r1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4663      	mov	r3, ip
 80008f4:	e000      	b.n	80008f8 <__aeabi_cdcmpeq>
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdcmpeq>:
 80008f8:	b501      	push	{r0, lr}
 80008fa:	f7ff ffb7 	bl	800086c <__cmpdf2>
 80008fe:	2800      	cmp	r0, #0
 8000900:	bf48      	it	mi
 8000902:	f110 0f00 	cmnmi.w	r0, #0
 8000906:	bd01      	pop	{r0, pc}

08000908 <__aeabi_dcmpeq>:
 8000908:	f84d ed08 	str.w	lr, [sp, #-8]!
 800090c:	f7ff fff4 	bl	80008f8 <__aeabi_cdcmpeq>
 8000910:	bf0c      	ite	eq
 8000912:	2001      	moveq	r0, #1
 8000914:	2000      	movne	r0, #0
 8000916:	f85d fb08 	ldr.w	pc, [sp], #8
 800091a:	bf00      	nop

0800091c <__aeabi_dcmplt>:
 800091c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000920:	f7ff ffea 	bl	80008f8 <__aeabi_cdcmpeq>
 8000924:	bf34      	ite	cc
 8000926:	2001      	movcc	r0, #1
 8000928:	2000      	movcs	r0, #0
 800092a:	f85d fb08 	ldr.w	pc, [sp], #8
 800092e:	bf00      	nop

08000930 <__aeabi_dcmple>:
 8000930:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000934:	f7ff ffe0 	bl	80008f8 <__aeabi_cdcmpeq>
 8000938:	bf94      	ite	ls
 800093a:	2001      	movls	r0, #1
 800093c:	2000      	movhi	r0, #0
 800093e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000942:	bf00      	nop

08000944 <__aeabi_dcmpge>:
 8000944:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000948:	f7ff ffce 	bl	80008e8 <__aeabi_cdrcmple>
 800094c:	bf94      	ite	ls
 800094e:	2001      	movls	r0, #1
 8000950:	2000      	movhi	r0, #0
 8000952:	f85d fb08 	ldr.w	pc, [sp], #8
 8000956:	bf00      	nop

08000958 <__aeabi_dcmpgt>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff ffc4 	bl	80008e8 <__aeabi_cdrcmple>
 8000960:	bf34      	ite	cc
 8000962:	2001      	movcc	r0, #1
 8000964:	2000      	movcs	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b974 	b.w	8000d4c <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	468e      	mov	lr, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14d      	bne.n	8000b26 <__udivmoddi4+0xaa>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4694      	mov	ip, r2
 8000a8e:	d969      	bls.n	8000b64 <__udivmoddi4+0xe8>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b152      	cbz	r2, 8000aac <__udivmoddi4+0x30>
 8000a96:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9a:	f1c2 0120 	rsb	r1, r2, #32
 8000a9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000aa2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aaa:	4094      	lsls	r4, r2
 8000aac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab0:	0c21      	lsrs	r1, r4, #16
 8000ab2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ab6:	fa1f f78c 	uxth.w	r7, ip
 8000aba:	fb08 e316 	mls	r3, r8, r6, lr
 8000abe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ac2:	fb06 f107 	mul.w	r1, r6, r7
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x64>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ad2:	f080 811f 	bcs.w	8000d14 <__udivmoddi4+0x298>
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	f240 811c 	bls.w	8000d14 <__udivmoddi4+0x298>
 8000adc:	3e02      	subs	r6, #2
 8000ade:	4463      	add	r3, ip
 8000ae0:	1a5b      	subs	r3, r3, r1
 8000ae2:	b2a4      	uxth	r4, r4
 8000ae4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af0:	fb00 f707 	mul.w	r7, r0, r7
 8000af4:	42a7      	cmp	r7, r4
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x92>
 8000af8:	eb1c 0404 	adds.w	r4, ip, r4
 8000afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b00:	f080 810a 	bcs.w	8000d18 <__udivmoddi4+0x29c>
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	f240 8107 	bls.w	8000d18 <__udivmoddi4+0x29c>
 8000b0a:	4464      	add	r4, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b12:	1be4      	subs	r4, r4, r7
 8000b14:	2600      	movs	r6, #0
 8000b16:	b11d      	cbz	r5, 8000b20 <__udivmoddi4+0xa4>
 8000b18:	40d4      	lsrs	r4, r2
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0xc2>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	f000 80ef 	beq.w	8000d0e <__udivmoddi4+0x292>
 8000b30:	2600      	movs	r6, #0
 8000b32:	e9c5 0100 	strd	r0, r1, [r5]
 8000b36:	4630      	mov	r0, r6
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	fab3 f683 	clz	r6, r3
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d14a      	bne.n	8000bdc <__udivmoddi4+0x160>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xd4>
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	f200 80f9 	bhi.w	8000d42 <__udivmoddi4+0x2c6>
 8000b50:	1a84      	subs	r4, r0, r2
 8000b52:	eb61 0303 	sbc.w	r3, r1, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	469e      	mov	lr, r3
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d0e0      	beq.n	8000b20 <__udivmoddi4+0xa4>
 8000b5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b62:	e7dd      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000b64:	b902      	cbnz	r2, 8000b68 <__udivmoddi4+0xec>
 8000b66:	deff      	udf	#255	; 0xff
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	f040 8092 	bne.w	8000c96 <__udivmoddi4+0x21a>
 8000b72:	eba1 010c 	sub.w	r1, r1, ip
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2601      	movs	r6, #1
 8000b80:	0c20      	lsrs	r0, r4, #16
 8000b82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b86:	fb07 1113 	mls	r1, r7, r3, r1
 8000b8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b8e:	fb0e f003 	mul.w	r0, lr, r3
 8000b92:	4288      	cmp	r0, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x12c>
 8000b96:	eb1c 0101 	adds.w	r1, ip, r1
 8000b9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x12a>
 8000ba0:	4288      	cmp	r0, r1
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2c0>
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	1a09      	subs	r1, r1, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x156>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x154>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2ca>
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bda:	e79c      	b.n	8000b16 <__udivmoddi4+0x9a>
 8000bdc:	f1c6 0720 	rsb	r7, r6, #32
 8000be0:	40b3      	lsls	r3, r6
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa20 f407 	lsr.w	r4, r0, r7
 8000bee:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf2:	431c      	orrs	r4, r3
 8000bf4:	40f9      	lsrs	r1, r7
 8000bf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000bfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c02:	0c20      	lsrs	r0, r4, #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fb09 1118 	mls	r1, r9, r8, r1
 8000c0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c10:	fb08 f00e 	mul.w	r0, r8, lr
 8000c14:	4288      	cmp	r0, r1
 8000c16:	fa02 f206 	lsl.w	r2, r2, r6
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b8>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2bc>
 8000c28:	4288      	cmp	r0, r1
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2bc>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4461      	add	r1, ip
 8000c34:	1a09      	subs	r1, r1, r0
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c48:	458e      	cmp	lr, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1e2>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2b4>
 8000c56:	458e      	cmp	lr, r1
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2b4>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c62:	fba0 9402 	umull	r9, r4, r0, r2
 8000c66:	eba1 010e 	sub.w	r1, r1, lr
 8000c6a:	42a1      	cmp	r1, r4
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46a6      	mov	lr, r4
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x2a4>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x2a0>
 8000c74:	b15d      	cbz	r5, 8000c8e <__udivmoddi4+0x212>
 8000c76:	ebb3 0208 	subs.w	r2, r3, r8
 8000c7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c82:	fa22 f306 	lsr.w	r3, r2, r6
 8000c86:	40f1      	lsrs	r1, r6
 8000c88:	431f      	orrs	r7, r3
 8000c8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c8e:	2600      	movs	r6, #0
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	f1c2 0320 	rsb	r3, r2, #32
 8000c9a:	40d8      	lsrs	r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	4301      	orrs	r1, r0
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb8:	0c0b      	lsrs	r3, r1, #16
 8000cba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x260>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd4:	429e      	cmp	r6, r3
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	b289      	uxth	r1, r1
 8000ce0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ce4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cec:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x28a>
 8000cf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000d02:	3e02      	subs	r6, #2
 8000d04:	4461      	add	r1, ip
 8000d06:	1ac9      	subs	r1, r1, r3
 8000d08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0x104>
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e705      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e3      	b.n	8000ae0 <__udivmoddi4+0x64>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6f8      	b.n	8000b0e <__udivmoddi4+0x92>
 8000d1c:	454b      	cmp	r3, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f8>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f8>
 8000d2c:	4646      	mov	r6, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x28a>
 8000d30:	4620      	mov	r0, r4
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1e2>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x260>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b8>
 8000d3c:	3b02      	subs	r3, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x12c>
 8000d42:	4630      	mov	r0, r6
 8000d44:	e709      	b.n	8000b5a <__udivmoddi4+0xde>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x156>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <LiquidCrystal_I2C>:
}
*/



void LiquidCrystal_I2C(uint8_t lcd_addr, uint8_t lcd_cols, uint8_t lcd_rows) {
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	71bb      	strb	r3, [r7, #6]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	717b      	strb	r3, [r7, #5]
	_addr = lcd_addr;
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <LiquidCrystal_I2C+0x3c>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	7013      	strb	r3, [r2, #0]
	_cols = lcd_cols;
 8000d68:	4a09      	ldr	r2, [pc, #36]	; (8000d90 <LiquidCrystal_I2C+0x40>)
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	7013      	strb	r3, [r2, #0]
	_rows = lcd_rows;
 8000d6e:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <LiquidCrystal_I2C+0x44>)
 8000d70:	797b      	ldrb	r3, [r7, #5]
 8000d72:	7013      	strb	r3, [r2, #0]
	_charsize = LCD_5x8DOTS;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <LiquidCrystal_I2C+0x48>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
	_backlightval = LCD_BACKLIGHT;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <LiquidCrystal_I2C+0x4c>)
 8000d7c:	2208      	movs	r2, #8
 8000d7e:	701a      	strb	r2, [r3, #0]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	200000a8 	.word	0x200000a8
 8000d90:	200000ac 	.word	0x200000ac
 8000d94:	200000ad 	.word	0x200000ad
 8000d98:	200000ae 	.word	0x200000ae
 8000d9c:	200000af 	.word	0x200000af

08000da0 <lcdBegin>:

void lcdBegin(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000da4:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <lcdBegin+0xd0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]

	if (_rows > 1) {
 8000daa:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <lcdBegin+0xd4>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d906      	bls.n	8000dc0 <lcdBegin+0x20>
		_displayfunction |= LCD_2LINE;
 8000db2:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <lcdBegin+0xd0>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	f043 0308 	orr.w	r3, r3, #8
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <lcdBegin+0xd0>)
 8000dbe:	701a      	strb	r2, [r3, #0]
	}

	setRowOffsets(0x00, 0x40, 0x00 + _cols, 0x40 + _cols);
 8000dc0:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <lcdBegin+0xd8>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <lcdBegin+0xd8>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	3340      	adds	r3, #64	; 0x40
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f000 f900 	bl	8000fd4 <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((_charsize != 0) && (_rows == 1)) {
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <lcdBegin+0xdc>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d00a      	beq.n	8000df2 <lcdBegin+0x52>
 8000ddc:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <lcdBegin+0xd4>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d106      	bne.n	8000df2 <lcdBegin+0x52>
		_displayfunction |= LCD_5x10DOTS;
 8000de4:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <lcdBegin+0xd0>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <lcdBegin+0xd0>)
 8000df0:	701a      	strb	r2, [r3, #0]
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	HAL_Delay(50);
 8000df2:	2032      	movs	r0, #50	; 0x32
 8000df4:	f003 f8c0 	bl	8003f78 <HAL_Delay>

	// Now we pull both RS and R/W low to begin commands
	write8bits(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <lcdBegin+0xe0>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f959 	bl	80010b4 <write8bits>
	HAL_Delay(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f003 f8b8 	bl	8003f78 <HAL_Delay>
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	write4bits(0x03 << 4);
 8000e08:	2030      	movs	r0, #48	; 0x30
 8000e0a:	f000 f941 	bl	8001090 <write4bits>
	HAL_Delay(5); // wait min 4.1ms
 8000e0e:	2005      	movs	r0, #5
 8000e10:	f003 f8b2 	bl	8003f78 <HAL_Delay>

	// second try
	write4bits(0x03 << 4);
 8000e14:	2030      	movs	r0, #48	; 0x30
 8000e16:	f000 f93b 	bl	8001090 <write4bits>
	HAL_Delay(5); // wait min 4.1ms
 8000e1a:	2005      	movs	r0, #5
 8000e1c:	f003 f8ac 	bl	8003f78 <HAL_Delay>

	// third go!
	write4bits(0x03 << 4);
 8000e20:	2030      	movs	r0, #48	; 0x30
 8000e22:	f000 f935 	bl	8001090 <write4bits>
	HAL_Delay(5);
 8000e26:	2005      	movs	r0, #5
 8000e28:	f003 f8a6 	bl	8003f78 <HAL_Delay>

	// finally, set to 4-bit interface
	write4bits(0x02 << 4);
 8000e2c:	2020      	movs	r0, #32
 8000e2e:	f000 f92f 	bl	8001090 <write4bits>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <lcdBegin+0xd0>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	f043 0320 	orr.w	r3, r3, #32
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f8bb 	bl	8000fb8 <command>

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <lcdBegin+0xe4>)
 8000e44:	2204      	movs	r2, #4
 8000e46:	701a      	strb	r2, [r3, #0]
	lcdDisplay();
 8000e48:	f000 f834 	bl	8000eb4 <lcdDisplay>

	// clear it off
	lcdClear();
 8000e4c:	f000 f81e 	bl	8000e8c <lcdClear>

	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <lcdBegin+0xe8>)
 8000e52:	2202      	movs	r2, #2
 8000e54:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <lcdBegin+0xe8>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 f8a9 	bl	8000fb8 <command>

	lcdHome();
 8000e66:	f000 f81b 	bl	8000ea0 <lcdHome>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200000a9 	.word	0x200000a9
 8000e74:	200000ad 	.word	0x200000ad
 8000e78:	200000ac 	.word	0x200000ac
 8000e7c:	200000ae 	.word	0x200000ae
 8000e80:	200000af 	.word	0x200000af
 8000e84:	200000aa 	.word	0x200000aa
 8000e88:	200000ab 	.word	0x200000ab

08000e8c <lcdClear>:

/********** high level commands, for the user! */
void lcdClear(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 8000e90:	2001      	movs	r0, #1
 8000e92:	f000 f891 	bl	8000fb8 <command>
	HAL_Delay(2);  // this command takes a long time!
 8000e96:	2002      	movs	r0, #2
 8000e98:	f003 f86e 	bl	8003f78 <HAL_Delay>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <lcdHome>:

void lcdHome(void) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	command(LCD_RETURNHOME);  // set cursor position to zero
 8000ea4:	2002      	movs	r0, #2
 8000ea6:	f000 f887 	bl	8000fb8 <command>
	HAL_Delay(2);  // this command takes a long time!
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f003 f864 	bl	8003f78 <HAL_Delay>
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <lcdDisplay>:
// Turn the display on/off (quickly)
void lcdNoDisplay(void) {
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void lcdDisplay(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <lcdDisplay+0x28>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <lcdDisplay+0x28>)
 8000ec4:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <lcdDisplay+0x28>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	f043 0308 	orr.w	r3, r3, #8
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f871 	bl	8000fb8 <command>
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200000aa 	.word	0x200000aa

08000ee0 <lcdSetCursor>:
	for (int i = 0; i < 8; i++) {
		lcdWrite(charmap[i]);
	}
}

void lcdSetCursor(uint8_t col, uint8_t row) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460a      	mov	r2, r1
 8000eea:	71fb      	strb	r3, [r7, #7]
 8000eec:	4613      	mov	r3, r2
 8000eee:	71bb      	strb	r3, [r7, #6]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 8000ef4:	79bb      	ldrb	r3, [r7, #6]
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d803      	bhi.n	8000f04 <lcdSetCursor+0x24>
		row = max_lines - 1;    // we count rows starting w/0
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	3b01      	subs	r3, #1
 8000f02:	71bb      	strb	r3, [r7, #6]
	}
	if ( row >= _rows ) {
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <lcdSetCursor+0x5c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	79ba      	ldrb	r2, [r7, #6]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d303      	bcc.n	8000f16 <lcdSetCursor+0x36>
		row = _rows - 1;   		// we count rows starting w/0
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <lcdSetCursor+0x5c>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	71bb      	strb	r3, [r7, #6]
	}

	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <lcdSetCursor+0x60>)
 8000f1a:	5cd2      	ldrb	r2, [r2, r3]
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f843 	bl	8000fb8 <command>
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200000ad 	.word	0x200000ad
 8000f40:	200000b0 	.word	0x200000b0

08000f44 <lcdPrint>:

// This will print character string to the LCD
size_t lcdPrint(const char str[]) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	if (str == NULL) return 0;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <lcdPrint+0x12>
 8000f52:	2300      	movs	r3, #0
 8000f54:	e01d      	b.n	8000f92 <lcdPrint+0x4e>

	const uint8_t *buffer = (const uint8_t *)str;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	617b      	str	r3, [r7, #20]
	size_t size = strlen(str);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff f940 	bl	80001e0 <strlen>
 8000f60:	6138      	str	r0, [r7, #16]
	size_t n = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]

	while (size--) {
 8000f66:	e00c      	b.n	8000f82 <lcdPrint+0x3e>
	if (lcdWrite(*buffer++)) n++;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	617a      	str	r2, [r7, #20]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 f812 	bl	8000f9a <lcdWrite>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d008      	beq.n	8000f8e <lcdPrint+0x4a>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	60fb      	str	r3, [r7, #12]
	while (size--) {
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1e5a      	subs	r2, r3, #1
 8000f86:	613a      	str	r2, [r7, #16]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1ed      	bne.n	8000f68 <lcdPrint+0x24>
 8000f8c:	e000      	b.n	8000f90 <lcdPrint+0x4c>
	else break;
 8000f8e:	bf00      	nop
	}
	return n;
 8000f90:	68fb      	ldr	r3, [r7, #12]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <lcdWrite>:

/*********** mid level commands, for sending data/cmds */
size_t lcdWrite(uint8_t value) {
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	71fb      	strb	r3, [r7, #7]
	send(value, Rs);
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 f850 	bl	800104e <send>
	return 1;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <command>:

void command(uint8_t value) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	send(value, 0);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f841 	bl	800104e <send>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <setRowOffsets>:

/************ low level data pushing commands **********/
void setRowOffsets(int row0, int row1, int row2, int row3) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <setRowOffsets+0x3c>)
 8000fe8:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <setRowOffsets+0x3c>)
 8000ff0:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <setRowOffsets+0x3c>)
 8000ff8:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <setRowOffsets+0x3c>)
 8001000:	70da      	strb	r2, [r3, #3]
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200000b0 	.word	0x200000b0

08001014 <pulseEnable>:

void pulseEnable(uint8_t _data) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	write8bits(_data | En);		// En high
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f844 	bl	80010b4 <write8bits>
	HAL_Delay(1);
 800102c:	2001      	movs	r0, #1
 800102e:	f002 ffa3 	bl	8003f78 <HAL_Delay>
	//DWT_Delay_us(5);		// enable pulse must be >450ns //To Be Checked

	write8bits(_data & ~En);	// En low
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f023 0304 	bic.w	r3, r3, #4
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f83a 	bl	80010b4 <write8bits>
	HAL_Delay(1);
 8001040:	2001      	movs	r0, #1
 8001042:	f002 ff99 	bl	8003f78 <HAL_Delay>
	//DWT_Delay_us(1);		// commands need > 37us to settle //To Be Checked
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <send>:

// write either command or data
void send(uint8_t value, uint8_t mode) {
 800104e:	b580      	push	{r7, lr}
 8001050:	b084      	sub	sp, #16
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	460a      	mov	r2, r1
 8001058:	71fb      	strb	r3, [r7, #7]
 800105a:	4613      	mov	r3, r2
 800105c:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib = value & 0xf0;
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f023 030f 	bic.w	r3, r3, #15
 8001064:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (value << 4) & 0xf0;
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	73bb      	strb	r3, [r7, #14]
	write4bits((highnib) | mode);
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	4313      	orrs	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f000 f80b 	bl	8001090 <write4bits>
	write4bits((lownib) | mode);
 800107a:	7bba      	ldrb	r2, [r7, #14]
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	4313      	orrs	r3, r2
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f804 	bl	8001090 <write4bits>
}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <write4bits>:

void write4bits(uint8_t value) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	write8bits(value);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f809 	bl	80010b4 <write8bits>
	pulseEnable(value);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ffb5 	bl	8001014 <pulseEnable>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <write8bits>:

void write8bits(uint8_t _data){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	uint8_t data_t[1];
	data_t[0] = _data | _backlightval;
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <write8bits+0x34>)
 80010c0:	781a      	ldrb	r2, [r3, #0]
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit (&hi2c1, _addr, (uint8_t *) data_t, 1, 100);
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <write8bits+0x38>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b299      	uxth	r1, r3
 80010d0:	f107 020c 	add.w	r2, r7, #12
 80010d4:	2364      	movs	r3, #100	; 0x64
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <write8bits+0x3c>)
 80010dc:	f003 fe64 	bl	8004da8 <HAL_I2C_Master_Transmit>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200000af 	.word	0x200000af
 80010ec:	200000a8 	.word	0x200000a8
 80010f0:	200004b4 	.word	0x200004b4

080010f4 <ee_init>:
uint8_t ee_ram[_EE_USE_RAM_BYTE];
#endif

//##########################################################################################################
bool ee_init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  return ee_read(0, _EE_USE_RAM_BYTE, NULL);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 f840 	bl	8001184 <ee_read>
 8001104:	4603      	mov	r3, r0
#else
  return true;
#endif
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <ee_format>:
//##########################################################################################################
bool ee_format(bool keepRamData)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  uint32_t error;
  HAL_FLASH_Unlock();
 8001116:	f003 f8b9 	bl	800428c <HAL_FLASH_Unlock>
#if _EE_PAGE_OR_SECTOR == PAGE
	flashErase.NbPages = 1;
  flashErase.PageAddress = _EE_ADDR_INUSE;
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
#elif _EE_PAGE_OR_SECTOR == SECTOR
  flashErase.NbSectors = 1;
 800111a:	2301      	movs	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
  //flashErase.Sector =  _EE_ADDR_INUSE;
  flashErase.Sector =  _EE_USE_FLASH_PAGE_OR_SECTOR;
 800111e:	2305      	movs	r3, #5
 8001120:	613b      	str	r3, [r7, #16]
  flashErase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
  flashErase.NbPages = 1;
  flashErase.Page = _EE_USE_FLASH_PAGE_OR_SECTOR;
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
#endif
#ifdef _EE_FLASH_BANK
  flashErase.Banks = _EE_FLASH_BANK;
 8001126:	2301      	movs	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
#endif
#ifdef _EE_VOLTAGE_RANGE
  flashErase.VoltageRange = _EE_VOLTAGE_RANGE;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
#endif
  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 800112e:	f107 021c 	add.w	r2, r7, #28
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f003 fa19 	bl	8004570 <HAL_FLASHEx_Erase>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d115      	bne.n	8001170 <ee_format+0x64>
  {
    HAL_FLASH_Lock();
 8001144:	f003 f8c4 	bl	80042d0 <HAL_FLASH_Lock>
    if (error != 0xFFFFFFFF)
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114e:	d001      	beq.n	8001154 <ee_format+0x48>
      return false;
 8001150:	2300      	movs	r3, #0
 8001152:	e010      	b.n	8001176 <ee_format+0x6a>
    else
    {
#if (_EE_USE_RAM_BYTE > 0)
      if (keepRamData == false)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f083 0301 	eor.w	r3, r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <ee_format+0x60>
        memset(ee_ram, 0xFF, _EE_USE_RAM_BYTE);
 8001160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001164:	21ff      	movs	r1, #255	; 0xff
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <ee_format+0x74>)
 8001168:	f005 ff1e 	bl	8006fa8 <memset>
#endif
      return true;
 800116c:	2301      	movs	r3, #1
 800116e:	e002      	b.n	8001176 <ee_format+0x6a>
    }
  }
  HAL_FLASH_Lock();
 8001170:	f003 f8ae 	bl	80042d0 <HAL_FLASH_Lock>
  return false;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3720      	adds	r7, #32
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200000b4 	.word	0x200000b4

08001184 <ee_read>:
//##########################################################################################################
bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	4413      	add	r3, r2
 8001196:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800119a:	d901      	bls.n	80011a0 <ee_read+0x1c>
    return false;
 800119c:	2300      	movs	r3, #0
 800119e:	e02b      	b.n	80011f8 <ee_read+0x74>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	e021      	b.n	80011ea <ee_read+0x66>
  {
    if (data != NULL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00b      	beq.n	80011c4 <ee_read+0x40>
    {
      *data = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80011b2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	701a      	strb	r2, [r3, #0]
      data++;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3301      	adds	r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
    }
#if (_EE_USE_RAM_BYTE > 0)
    if (i < _EE_USE_RAM_BYTE)
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ca:	d20b      	bcs.n	80011e4 <ee_read+0x60>
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80011d2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b2d9      	uxtb	r1, r3
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <ee_read+0x80>)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	4413      	add	r3, r2
 80011e0:	460a      	mov	r2, r1
 80011e2:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	3301      	adds	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3d7      	bcc.n	80011a6 <ee_read+0x22>
#endif
  }
  return true;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	200000b4 	.word	0x200000b4

08001208 <ee_write>:
//##########################################################################################################
bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 8001208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800120c:	b0a6      	sub	sp, #152	; 0x98
 800120e:	af00      	add	r7, sp, #0
 8001210:	67f8      	str	r0, [r7, #124]	; 0x7c
 8001212:	67b9      	str	r1, [r7, #120]	; 0x78
 8001214:	677a      	str	r2, [r7, #116]	; 0x74
  if ((startVirtualAddress + len) > _EE_SIZE)
 8001216:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001218:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800121a:	4413      	add	r3, r2
 800121c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001220:	d901      	bls.n	8001226 <ee_write+0x1e>
    return false;
 8001222:	2300      	movs	r3, #0
 8001224:	e14f      	b.n	80014c6 <ee_write+0x2be>
  if (data == NULL)
 8001226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <ee_write+0x28>
    return false;
 800122c:	2300      	movs	r3, #0
 800122e:	e14a      	b.n	80014c6 <ee_write+0x2be>
  HAL_FLASH_Unlock();
 8001230:	f003 f82c 	bl	800428c <HAL_FLASH_Unlock>
#ifdef FLASH_TYPEPROGRAM_BYTE
  for (uint32_t i = 0; i < len ; i++)
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800123a:	e021      	b.n	8001280 <ee_write+0x78>
  {		
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i])) != HAL_OK)
 800123c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001240:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001242:	4413      	add	r3, r2
 8001244:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8001248:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 800124c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800124e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001252:	4413      	add	r3, r2
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2200      	movs	r2, #0
 800125a:	461c      	mov	r4, r3
 800125c:	4615      	mov	r5, r2
 800125e:	4622      	mov	r2, r4
 8001260:	462b      	mov	r3, r5
 8001262:	2000      	movs	r0, #0
 8001264:	f002 ffbe 	bl	80041e4 <HAL_FLASH_Program>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <ee_write+0x6e>
    {
      HAL_FLASH_Lock();
 800126e:	f003 f82f 	bl	80042d0 <HAL_FLASH_Lock>
      return true;
 8001272:	2301      	movs	r3, #1
 8001274:	e127      	b.n	80014c6 <ee_write+0x2be>
  for (uint32_t i = 0; i < len ; i++)
 8001276:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800127a:	3301      	adds	r3, #1
 800127c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001280:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001286:	429a      	cmp	r2, r3
 8001288:	d3d8      	bcc.n	800123c <ee_write+0x34>
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_HALFWORD
  for (uint32_t i = 0; i < len ; i+=2)
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001290:	e029      	b.n	80012e6 <ee_write+0xde>
  {		
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i] | (data[i+1] << 8))) != HAL_OK)
 8001292:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001296:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001298:	4413      	add	r3, r2
 800129a:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800129e:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 80012a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80012a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012a8:	4413      	add	r3, r2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012b6:	4413      	add	r3, r2
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	4303      	orrs	r3, r0
 80012be:	17da      	asrs	r2, r3, #31
 80012c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80012c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80012c4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80012c8:	2001      	movs	r0, #1
 80012ca:	f002 ff8b 	bl	80041e4 <HAL_FLASH_Program>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <ee_write+0xd4>
    {
      HAL_FLASH_Lock();
 80012d4:	f002 fffc 	bl	80042d0 <HAL_FLASH_Lock>
      return true;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0f4      	b.n	80014c6 <ee_write+0x2be>
  for (uint32_t i = 0; i < len ; i+=2)
 80012dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012e0:	3302      	adds	r3, #2
 80012e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012e6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80012ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d3d0      	bcc.n	8001292 <ee_write+0x8a>
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_DOUBLEWORD
  for (uint32_t i = 0; i < len; i += 8)
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80012f6:	e0dd      	b.n	80014b4 <ee_write+0x2ac>
  {
    uint64_t data64 = data[i];
 80012f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80012fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012fe:	4413      	add	r3, r2
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2200      	movs	r2, #0
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
 8001308:	62fa      	str	r2, [r7, #44]	; 0x2c
 800130a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800130e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 1] * 0x100;
 8001312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800131a:	4413      	add	r3, r2
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	17da      	asrs	r2, r3, #31
 8001322:	663b      	str	r3, [r7, #96]	; 0x60
 8001324:	667a      	str	r2, [r7, #100]	; 0x64
 8001326:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800132a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800132e:	4621      	mov	r1, r4
 8001330:	1851      	adds	r1, r2, r1
 8001332:	6239      	str	r1, [r7, #32]
 8001334:	4629      	mov	r1, r5
 8001336:	414b      	adcs	r3, r1
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
 800133a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800133e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 2] * 0x10000;
 8001342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001346:	1c9a      	adds	r2, r3, #2
 8001348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800134a:	4413      	add	r3, r2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	041b      	lsls	r3, r3, #16
 8001350:	17da      	asrs	r2, r3, #31
 8001352:	65bb      	str	r3, [r7, #88]	; 0x58
 8001354:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001356:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800135a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800135e:	4621      	mov	r1, r4
 8001360:	1851      	adds	r1, r2, r1
 8001362:	61b9      	str	r1, [r7, #24]
 8001364:	4629      	mov	r1, r5
 8001366:	414b      	adcs	r3, r1
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800136e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 3] * 0x1000000;
 8001372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001376:	1cda      	adds	r2, r3, #3
 8001378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	061b      	lsls	r3, r3, #24
 8001380:	17da      	asrs	r2, r3, #31
 8001382:	653b      	str	r3, [r7, #80]	; 0x50
 8001384:	657a      	str	r2, [r7, #84]	; 0x54
 8001386:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800138a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800138e:	4621      	mov	r1, r4
 8001390:	1851      	adds	r1, r2, r1
 8001392:	6139      	str	r1, [r7, #16]
 8001394:	4629      	mov	r1, r5
 8001396:	414b      	adcs	r3, r1
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800139e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 4] * 0x100000000;
 80013a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013a6:	1d1a      	adds	r2, r3, #4
 80013a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2200      	movs	r2, #0
 80013b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80013b4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80013c0:	000b      	movs	r3, r1
 80013c2:	2200      	movs	r2, #0
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80013cc:	1814      	adds	r4, r2, r0
 80013ce:	60bc      	str	r4, [r7, #8]
 80013d0:	414b      	adcs	r3, r1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013d8:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 5] * 0x10000000000;
 80013dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013e0:	1d5a      	adds	r2, r3, #5
 80013e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013e4:	4413      	add	r3, r2
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2200      	movs	r2, #0
 80013ec:	643b      	str	r3, [r7, #64]	; 0x40
 80013ee:	647a      	str	r2, [r7, #68]	; 0x44
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80013fa:	020b      	lsls	r3, r1, #8
 80013fc:	2200      	movs	r2, #0
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001406:	1814      	adds	r4, r2, r0
 8001408:	603c      	str	r4, [r7, #0]
 800140a:	414b      	adcs	r3, r1
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001412:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 6] * 0x1000000000000;
 8001416:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800141a:	1d9a      	adds	r2, r3, #6
 800141c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800141e:	4413      	add	r3, r2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2200      	movs	r2, #0
 8001426:	63bb      	str	r3, [r7, #56]	; 0x38
 8001428:	63fa      	str	r2, [r7, #60]	; 0x3c
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001434:	040b      	lsls	r3, r1, #16
 8001436:	2200      	movs	r2, #0
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001440:	eb12 0a00 	adds.w	sl, r2, r0
 8001444:	eb43 0b01 	adc.w	fp, r3, r1
 8001448:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
    data64 += data[i + 7] * 0x100000000000000;
 800144c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001450:	1dda      	adds	r2, r3, #7
 8001452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001454:	4413      	add	r3, r2
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2200      	movs	r2, #0
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
 800145e:	637a      	str	r2, [r7, #52]	; 0x34
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800146a:	060b      	lsls	r3, r1, #24
 800146c:	2200      	movs	r2, #0
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001476:	eb12 0800 	adds.w	r8, r2, r0
 800147a:	eb43 0901 	adc.w	r9, r3, r1
 800147e:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, data64) != HAL_OK)
 8001482:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001486:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001488:	4413      	add	r3, r2
 800148a:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800148e:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 8001492:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001496:	2003      	movs	r0, #3
 8001498:	f002 fea4 	bl	80041e4 <HAL_FLASH_Program>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <ee_write+0x2a2>
    {
      HAL_FLASH_Lock();
 80014a2:	f002 ff15 	bl	80042d0 <HAL_FLASH_Lock>
      return true;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00d      	b.n	80014c6 <ee_write+0x2be>
  for (uint32_t i = 0; i < len; i += 8)
 80014aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80014ae:	3308      	adds	r3, #8
 80014b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80014b4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80014b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014ba:	429a      	cmp	r2, r3
 80014bc:	f4ff af1c 	bcc.w	80012f8 <ee_write+0xf0>
    }
  }
#endif
  HAL_FLASH_Lock();
 80014c0:	f002 ff06 	bl	80042d0 <HAL_FLASH_Lock>
  return true;
 80014c4:	2301      	movs	r3, #1
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3798      	adds	r7, #152	; 0x98
 80014ca:	46bd      	mov	sp, r7
 80014cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080014d0 <ee_writeToRam>:
//##########################################################################################################
bool ee_writeToRam(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
#if (_EE_USE_RAM_BYTE > 0)
  if ((startVirtualAddress + len) > _EE_USE_RAM_BYTE)
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	4413      	add	r3, r2
 80014e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e6:	d901      	bls.n	80014ec <ee_writeToRam+0x1c>
    return false;
 80014e8:	2300      	movs	r3, #0
 80014ea:	e00d      	b.n	8001508 <ee_writeToRam+0x38>
  if (data == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <ee_writeToRam+0x26>
    return false;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e008      	b.n	8001508 <ee_writeToRam+0x38>
  memcpy(&ee_ram[startVirtualAddress], data, len);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4a05      	ldr	r2, [pc, #20]	; (8001510 <ee_writeToRam+0x40>)
 80014fa:	4413      	add	r3, r2
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	f005 fd43 	bl	8006f8c <memcpy>
  return true;
 8001506:	2301      	movs	r3, #1
#else
  return false;
#endif
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200000b4 	.word	0x200000b4

08001514 <ee_commit>:
//##########################################################################################################
bool  ee_commit(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  if (ee_format(true) == false)
 8001518:	2001      	movs	r0, #1
 800151a:	f7ff fdf7 	bl	800110c <ee_format>
 800151e:	4603      	mov	r3, r0
 8001520:	f083 0301 	eor.w	r3, r3, #1
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <ee_commit+0x1a>
    return false;
 800152a:	2300      	movs	r3, #0
 800152c:	e006      	b.n	800153c <ee_commit+0x28>
  return ee_write(0, _EE_USE_RAM_BYTE, ee_ram);
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <ee_commit+0x2c>)
 8001530:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001534:	2000      	movs	r0, #0
 8001536:	f7ff fe67 	bl	8001208 <ee_write>
 800153a:	4603      	mov	r3, r0
#else
  return false;
#endif
}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200000b4 	.word	0x200000b4
 8001544:	00000000 	.word	0x00000000

08001548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//Initialization Struct
	parameter.en_invert_1 = 0;
 800154c:	4ba6      	ldr	r3, [pc, #664]	; (80017e8 <main+0x2a0>)
 800154e:	2200      	movs	r2, #0
 8001550:	801a      	strh	r2, [r3, #0]
	parameter.dir_invert_1 = 0;
 8001552:	4ba5      	ldr	r3, [pc, #660]	; (80017e8 <main+0x2a0>)
 8001554:	2200      	movs	r2, #0
 8001556:	805a      	strh	r2, [r3, #2]
	parameter.motor_stepsrev_1 = 0;
 8001558:	4ba3      	ldr	r3, [pc, #652]	; (80017e8 <main+0x2a0>)
 800155a:	2200      	movs	r2, #0
 800155c:	809a      	strh	r2, [r3, #4]
	parameter.leadscrew_pitch_1 = 0;
 800155e:	4ba2      	ldr	r3, [pc, #648]	; (80017e8 <main+0x2a0>)
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	f8c3 2006 	str.w	r2, [r3, #6]
	parameter.MAX_FEEDRATE_1 = 0;
 8001568:	4b9f      	ldr	r3, [pc, #636]	; (80017e8 <main+0x2a0>)
 800156a:	2200      	movs	r2, #0
 800156c:	815a      	strh	r2, [r3, #10]
	parameter.FAST_MOVEMENT_FEEDRATE_1 = 0;
 800156e:	4b9e      	ldr	r3, [pc, #632]	; (80017e8 <main+0x2a0>)
 8001570:	2200      	movs	r2, #0
 8001572:	819a      	strh	r2, [r3, #12]
	parameter.ACC_TIME_1 = 0;
 8001574:	4b9c      	ldr	r3, [pc, #624]	; (80017e8 <main+0x2a0>)
 8001576:	2200      	movs	r2, #0
 8001578:	81da      	strh	r2, [r3, #14]
	parameter.ACC_UPDATE_RATIO_1 = 0;
 800157a:	4b9b      	ldr	r3, [pc, #620]	; (80017e8 <main+0x2a0>)
 800157c:	2200      	movs	r2, #0
 800157e:	821a      	strh	r2, [r3, #16]
	parameter.initial_feedrate_1 = 0;
 8001580:	4b99      	ldr	r3, [pc, #612]	; (80017e8 <main+0x2a0>)
 8001582:	2200      	movs	r2, #0
 8001584:	825a      	strh	r2, [r3, #18]
	parameter.first_load = 0;
 8001586:	4b98      	ldr	r3, [pc, #608]	; (80017e8 <main+0x2a0>)
 8001588:	2200      	movs	r2, #0
 800158a:	829a      	strh	r2, [r3, #20]
	//Default values for parameters
	default_parameter.en_invert_1 = 0;
 800158c:	4b97      	ldr	r3, [pc, #604]	; (80017ec <main+0x2a4>)
 800158e:	2200      	movs	r2, #0
 8001590:	801a      	strh	r2, [r3, #0]
	default_parameter.dir_invert_1 = 0;
 8001592:	4b96      	ldr	r3, [pc, #600]	; (80017ec <main+0x2a4>)
 8001594:	2200      	movs	r2, #0
 8001596:	805a      	strh	r2, [r3, #2]
	default_parameter.motor_stepsrev_1 = 1600;
 8001598:	4b94      	ldr	r3, [pc, #592]	; (80017ec <main+0x2a4>)
 800159a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800159e:	809a      	strh	r2, [r3, #4]
	default_parameter.leadscrew_pitch_1 = 2;
 80015a0:	4b92      	ldr	r3, [pc, #584]	; (80017ec <main+0x2a4>)
 80015a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015a6:	f8c3 2006 	str.w	r2, [r3, #6]
	default_parameter.MAX_FEEDRATE_1 = 500;
 80015aa:	4b90      	ldr	r3, [pc, #576]	; (80017ec <main+0x2a4>)
 80015ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015b0:	815a      	strh	r2, [r3, #10]
	default_parameter.FAST_MOVEMENT_FEEDRATE_1 = 500;
 80015b2:	4b8e      	ldr	r3, [pc, #568]	; (80017ec <main+0x2a4>)
 80015b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015b8:	819a      	strh	r2, [r3, #12]
	default_parameter.ACC_TIME_1 = 1000;
 80015ba:	4b8c      	ldr	r3, [pc, #560]	; (80017ec <main+0x2a4>)
 80015bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015c0:	81da      	strh	r2, [r3, #14]
	default_parameter.ACC_UPDATE_RATIO_1 = 50;
 80015c2:	4b8a      	ldr	r3, [pc, #552]	; (80017ec <main+0x2a4>)
 80015c4:	2232      	movs	r2, #50	; 0x32
 80015c6:	821a      	strh	r2, [r3, #16]
	default_parameter.initial_feedrate_1 = 50;
 80015c8:	4b88      	ldr	r3, [pc, #544]	; (80017ec <main+0x2a4>)
 80015ca:	2232      	movs	r2, #50	; 0x32
 80015cc:	825a      	strh	r2, [r3, #18]
	default_parameter.first_load = 0;
 80015ce:	4b87      	ldr	r3, [pc, #540]	; (80017ec <main+0x2a4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	829a      	strh	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d4:	f002 fc5e 	bl	8003e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d8:	f001 f968 	bl	80028ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015dc:	f001 fba6 	bl	8002d2c <MX_GPIO_Init>
  MX_I2C1_Init();
 80015e0:	f001 f9ce 	bl	8002980 <MX_I2C1_Init>
  MX_TIM1_Init();
 80015e4:	f001 f9fa 	bl	80029dc <MX_TIM1_Init>
  MX_TIM2_Init();
 80015e8:	f001 fa58 	bl	8002a9c <MX_TIM2_Init>
  MX_TIM11_Init();
 80015ec:	f001 fb5e 	bl	8002cac <MX_TIM11_Init>
  MX_TIM10_Init();
 80015f0:	f001 fb1c 	bl	8002c2c <MX_TIM10_Init>
  MX_TIM9_Init();
 80015f4:	f001 fac6 	bl	8002b84 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  ee_init();
 80015f8:	f7ff fd7c 	bl	80010f4 <ee_init>

  //static uint8_t data_saved[4] = {1,2,3,4};
  //ee_writeToRam(0, 4, data_saved);
  //ee_commit();

  LiquidCrystal_I2C(0x4E, 20, 4);	//Initialization of LCD (Select your LCD address)
 80015fc:	2204      	movs	r2, #4
 80015fe:	2114      	movs	r1, #20
 8001600:	204e      	movs	r0, #78	; 0x4e
 8001602:	f7ff fba5 	bl	8000d50 <LiquidCrystal_I2C>
  lcdBegin();
 8001606:	f7ff fbcb 	bl	8000da0 <lcdBegin>
  lcdSetCursor(2,1);
 800160a:	2101      	movs	r1, #1
 800160c:	2002      	movs	r0, #2
 800160e:	f7ff fc67 	bl	8000ee0 <lcdSetCursor>
  lcdPrint("Power Feed V2.0");
 8001612:	4877      	ldr	r0, [pc, #476]	; (80017f0 <main+0x2a8>)
 8001614:	f7ff fc96 	bl	8000f44 <lcdPrint>
  //HAL_Delay(2000);
  lcd_update = FALSE;				//LCD has been updated
 8001618:	4b76      	ldr	r3, [pc, #472]	; (80017f4 <main+0x2ac>)
 800161a:	2200      	movs	r2, #0
 800161c:	801a      	strh	r2, [r3, #0]

  /* Encoder Initialization */
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 800161e:	213c      	movs	r1, #60	; 0x3c
 8001620:	4875      	ldr	r0, [pc, #468]	; (80017f8 <main+0x2b0>)
 8001622:	f004 fdd3 	bl	80061cc <HAL_TIM_Encoder_Start_IT>
  /* Initialization Timers */
  HAL_TIM_Base_Start_IT(&htim11);	//Timer for debouncing
 8001626:	4875      	ldr	r0, [pc, #468]	; (80017fc <main+0x2b4>)
 8001628:	f004 fb5a 	bl	8005ce0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);	//Timer for acceleration update
 800162c:	4874      	ldr	r0, [pc, #464]	; (8001800 <main+0x2b8>)
 800162e:	f004 fb57 	bl	8005ce0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);	//Timer for general 100ms counter
 8001632:	4874      	ldr	r0, [pc, #464]	; (8001804 <main+0x2bc>)
 8001634:	f004 fb54 	bl	8005ce0 <HAL_TIM_Base_Start_IT>

  struct_ptr = &parameter;
 8001638:	4b73      	ldr	r3, [pc, #460]	; (8001808 <main+0x2c0>)
 800163a:	4a6b      	ldr	r2, [pc, #428]	; (80017e8 <main+0x2a0>)
 800163c:	601a      	str	r2, [r3, #0]
  default_struct_ptr = &default_parameter;
 800163e:	4b73      	ldr	r3, [pc, #460]	; (800180c <main+0x2c4>)
 8001640:	4a6a      	ldr	r2, [pc, #424]	; (80017ec <main+0x2a4>)
 8001642:	601a      	str	r2, [r3, #0]

  if (!Read_Parameter_Data(struct_ptr)){
 8001644:	4b70      	ldr	r3, [pc, #448]	; (8001808 <main+0x2c0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f002 f99c 	bl	8003986 <Read_Parameter_Data>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d123      	bne.n	800169c <main+0x154>
	  lcdSetCursor(1,1);
 8001654:	2101      	movs	r1, #1
 8001656:	2001      	movs	r0, #1
 8001658:	f7ff fc42 	bl	8000ee0 <lcdSetCursor>
	  lcdPrint("ERROR LOADING DATA");
 800165c:	486c      	ldr	r0, [pc, #432]	; (8001810 <main+0x2c8>)
 800165e:	f7ff fc71 	bl	8000f44 <lcdPrint>
	  lcdSetCursor(1,2);
 8001662:	2102      	movs	r1, #2
 8001664:	2001      	movs	r0, #1
 8001666:	f7ff fc3b 	bl	8000ee0 <lcdSetCursor>
	  lcdPrint("LOADING DEFAULT");
 800166a:	486a      	ldr	r0, [pc, #424]	; (8001814 <main+0x2cc>)
 800166c:	f7ff fc6a 	bl	8000f44 <lcdPrint>
	  *struct_ptr = *default_struct_ptr;
 8001670:	4b66      	ldr	r3, [pc, #408]	; (800180c <main+0x2c4>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b64      	ldr	r3, [pc, #400]	; (8001808 <main+0x2c0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6811      	ldr	r1, [r2, #0]
 800167a:	6855      	ldr	r5, [r2, #4]
 800167c:	6894      	ldr	r4, [r2, #8]
 800167e:	68d0      	ldr	r0, [r2, #12]
 8001680:	6019      	str	r1, [r3, #0]
 8001682:	605d      	str	r5, [r3, #4]
 8001684:	609c      	str	r4, [r3, #8]
 8001686:	60d8      	str	r0, [r3, #12]
 8001688:	6911      	ldr	r1, [r2, #16]
 800168a:	6119      	str	r1, [r3, #16]
 800168c:	8a92      	ldrh	r2, [r2, #20]
 800168e:	829a      	strh	r2, [r3, #20]
	  HAL_Delay(2000);
 8001690:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001694:	f002 fc70 	bl	8003f78 <HAL_Delay>
	  lcdClear();
 8001698:	f7ff fbf8 	bl	8000e8c <lcdClear>
  }
  if (parameter.first_load != 0){
 800169c:	4b52      	ldr	r3, [pc, #328]	; (80017e8 <main+0x2a0>)
 800169e:	8a9b      	ldrh	r3, [r3, #20]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d017      	beq.n	80016d4 <main+0x18c>
	  parameter.first_load = 0;
 80016a4:	4b50      	ldr	r3, [pc, #320]	; (80017e8 <main+0x2a0>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	829a      	strh	r2, [r3, #20]
	  *struct_ptr = *default_struct_ptr;
 80016aa:	4b58      	ldr	r3, [pc, #352]	; (800180c <main+0x2c4>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4b56      	ldr	r3, [pc, #344]	; (8001808 <main+0x2c0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6811      	ldr	r1, [r2, #0]
 80016b4:	6855      	ldr	r5, [r2, #4]
 80016b6:	6894      	ldr	r4, [r2, #8]
 80016b8:	68d0      	ldr	r0, [r2, #12]
 80016ba:	6019      	str	r1, [r3, #0]
 80016bc:	605d      	str	r5, [r3, #4]
 80016be:	609c      	str	r4, [r3, #8]
 80016c0:	60d8      	str	r0, [r3, #12]
 80016c2:	6911      	ldr	r1, [r2, #16]
 80016c4:	6119      	str	r1, [r3, #16]
 80016c6:	8a92      	ldrh	r2, [r2, #20]
 80016c8:	829a      	strh	r2, [r3, #20]
	  Save_Parameter_Data(struct_ptr);
 80016ca:	4b4f      	ldr	r3, [pc, #316]	; (8001808 <main+0x2c0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 f92e 	bl	8003930 <Save_Parameter_Data>
  }
  old_delay100ms_counter = delay100ms_counter; //Update delay counter
 80016d4:	4b50      	ldr	r3, [pc, #320]	; (8001818 <main+0x2d0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a50      	ldr	r2, [pc, #320]	; (800181c <main+0x2d4>)
 80016da:	6013      	str	r3, [r2, #0]
  while(old_delay100ms_counter+30 >= delay100ms_counter){
 80016dc:	e00e      	b.n	80016fc <main+0x1b4>
	  if (Encoder_Switch_Status_Read() == TRUE_HOLD){
 80016de:	f002 f85f 	bl	80037a0 <Encoder_Switch_Status_Read>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d106      	bne.n	80016f6 <main+0x1ae>
		  state = CONFIGURATION;
 80016e8:	4b4d      	ldr	r3, [pc, #308]	; (8001820 <main+0x2d8>)
 80016ea:	2204      	movs	r2, #4
 80016ec:	801a      	strh	r2, [r3, #0]
		  lcd_update=TRUE;
 80016ee:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <main+0x2ac>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	801a      	strh	r2, [r3, #0]
 80016f4:	e002      	b.n	80016fc <main+0x1b4>
	  }else{
		  state = INITIALIZATION;
 80016f6:	4b4a      	ldr	r3, [pc, #296]	; (8001820 <main+0x2d8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	801a      	strh	r2, [r3, #0]
  while(old_delay100ms_counter+30 >= delay100ms_counter){
 80016fc:	4b47      	ldr	r3, [pc, #284]	; (800181c <main+0x2d4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f103 021e 	add.w	r2, r3, #30
 8001704:	4b44      	ldr	r3, [pc, #272]	; (8001818 <main+0x2d0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d2e8      	bcs.n	80016de <main+0x196>
	  }
  }
  lcdClear();
 800170c:	f7ff fbbe 	bl	8000e8c <lcdClear>



  while (1)
  {
	  switch (state)
 8001710:	4b43      	ldr	r3, [pc, #268]	; (8001820 <main+0x2d8>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	2b04      	cmp	r3, #4
 8001716:	d8fb      	bhi.n	8001710 <main+0x1c8>
 8001718:	a201      	add	r2, pc, #4	; (adr r2, 8001720 <main+0x1d8>)
 800171a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171e:	bf00      	nop
 8001720:	08001735 	.word	0x08001735
 8001724:	080018d1 	.word	0x080018d1
 8001728:	08001a73 	.word	0x08001a73
 800172c:	080017ad 	.word	0x080017ad
 8001730:	08001c57 	.word	0x08001c57
	  {
	  	  case INITIALIZATION:	//Initialization state
	  		  if ( Switch_Status_Read() != MID ){	//If the switch is not in MID state, report error
 8001734:	f001 ffa0 	bl	8003678 <Switch_Status_Read>
 8001738:	4603      	mov	r3, r0
 800173a:	2b02      	cmp	r3, #2
 800173c:	d00f      	beq.n	800175e <main+0x216>
	  			  lcdSetCursor(8,1);				//Print Error message
 800173e:	2101      	movs	r1, #1
 8001740:	2008      	movs	r0, #8
 8001742:	f7ff fbcd 	bl	8000ee0 <lcdSetCursor>
	  			  lcdPrint("ERROR!");
 8001746:	4837      	ldr	r0, [pc, #220]	; (8001824 <main+0x2dc>)
 8001748:	f7ff fbfc 	bl	8000f44 <lcdPrint>
	  			  lcdSetCursor(3,2);
 800174c:	2102      	movs	r1, #2
 800174e:	2003      	movs	r0, #3
 8001750:	f7ff fbc6 	bl	8000ee0 <lcdSetCursor>
	  			  lcdPrint("Release Switch");
 8001754:	4834      	ldr	r0, [pc, #208]	; (8001828 <main+0x2e0>)
 8001756:	f7ff fbf5 	bl	8000f44 <lcdPrint>
		  		  target_feedrate = parameter.initial_feedrate_1;
		  		  display_feedrate = target_feedrate;
				  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
				  state = STANDBY;								//Go to standby
	  		  }
	  		  break;
 800175a:	f001 b88a 	b.w	8002872 <main+0x132a>
	  			  lcdClear();
 800175e:	f7ff fb95 	bl	8000e8c <lcdClear>
				  lcdSetCursor(0,0);
 8001762:	2100      	movs	r1, #0
 8001764:	2000      	movs	r0, #0
 8001766:	f7ff fbbb 	bl	8000ee0 <lcdSetCursor>
				  lcdPrint("Feed Rate:");
 800176a:	4830      	ldr	r0, [pc, #192]	; (800182c <main+0x2e4>)
 800176c:	f7ff fbea 	bl	8000f44 <lcdPrint>
				  lcdSetCursor(0,1);
 8001770:	2101      	movs	r1, #1
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff fbb4 	bl	8000ee0 <lcdSetCursor>
				  lcdPrint("Mode: STOP ");
 8001778:	482d      	ldr	r0, [pc, #180]	; (8001830 <main+0x2e8>)
 800177a:	f7ff fbe3 	bl	8000f44 <lcdPrint>
		  		  target_feedrate = parameter.initial_feedrate_1;
 800177e:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <main+0x2a0>)
 8001780:	8a5b      	ldrh	r3, [r3, #18]
 8001782:	b21a      	sxth	r2, r3
 8001784:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <main+0x2ec>)
 8001786:	801a      	strh	r2, [r3, #0]
		  		  display_feedrate = target_feedrate;
 8001788:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <main+0x2ec>)
 800178a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <main+0x2f0>)
 8001790:	801a      	strh	r2, [r3, #0]
				  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 8001792:	4b29      	ldr	r3, [pc, #164]	; (8001838 <main+0x2f0>)
 8001794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001798:	2200      	movs	r2, #0
 800179a:	210b      	movs	r1, #11
 800179c:	4618      	mov	r0, r3
 800179e:	f001 ff4d 	bl	800363c <LCD_Write_Feedrate>
				  state = STANDBY;								//Go to standby
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <main+0x2d8>)
 80017a4:	2203      	movs	r2, #3
 80017a6:	801a      	strh	r2, [r3, #0]
	  		  break;
 80017a8:	f001 b863 	b.w	8002872 <main+0x132a>
	  	  case STANDBY:		//Standby state (Not movement, switch in the middle)
	  		Update_Feedrate(&target_feedrate);				//Update the feedrate from encoder
 80017ac:	4821      	ldr	r0, [pc, #132]	; (8001834 <main+0x2ec>)
 80017ae:	f001 ffad 	bl	800370c <Update_Feedrate>
	  		display_feedrate = target_feedrate;				//Update variable to display the feedrate
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <main+0x2ec>)
 80017b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <main+0x2f0>)
 80017ba:	801a      	strh	r2, [r3, #0]
	  		LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <main+0x2f0>)
 80017be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c2:	2200      	movs	r2, #0
 80017c4:	210b      	movs	r1, #11
 80017c6:	4618      	mov	r0, r3
 80017c8:	f001 ff38 	bl	800363c <LCD_Write_Feedrate>
	  		if ( Encoder_Switch_Status_Read() ){			//Check if the encoder is pressed to change the step mode
 80017cc:	f001 ffe8 	bl	80037a0 <Encoder_Switch_Status_Read>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d03b      	beq.n	800184e <main+0x306>
	  			if (step_mode == STEP_NORMAL){
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <main+0x2f4>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d130      	bne.n	8001840 <main+0x2f8>
	  				step_mode = STEP_x10;
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <main+0x2f4>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	801a      	strh	r2, [r3, #0]
 80017e4:	e033      	b.n	800184e <main+0x306>
 80017e6:	bf00      	nop
 80017e8:	2000067c 	.word	0x2000067c
 80017ec:	20000694 	.word	0x20000694
 80017f0:	08007890 	.word	0x08007890
 80017f4:	200006c8 	.word	0x200006c8
 80017f8:	20000508 	.word	0x20000508
 80017fc:	20000628 	.word	0x20000628
 8001800:	200005e0 	.word	0x200005e0
 8001804:	20000598 	.word	0x20000598
 8001808:	200006ac 	.word	0x200006ac
 800180c:	200006b0 	.word	0x200006b0
 8001810:	080078a0 	.word	0x080078a0
 8001814:	080078b4 	.word	0x080078b4
 8001818:	200006bc 	.word	0x200006bc
 800181c:	200006c0 	.word	0x200006c0
 8001820:	20000670 	.word	0x20000670
 8001824:	080078c4 	.word	0x080078c4
 8001828:	080078cc 	.word	0x080078cc
 800182c:	080078dc 	.word	0x080078dc
 8001830:	080078e8 	.word	0x080078e8
 8001834:	20000014 	.word	0x20000014
 8001838:	20000016 	.word	0x20000016
 800183c:	20000676 	.word	0x20000676
	  			}else if(step_mode == STEP_x10){
 8001840:	4b98      	ldr	r3, [pc, #608]	; (8001aa4 <main+0x55c>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d102      	bne.n	800184e <main+0x306>
	  				step_mode = STEP_NORMAL;
 8001848:	4b96      	ldr	r3, [pc, #600]	; (8001aa4 <main+0x55c>)
 800184a:	2200      	movs	r2, #0
 800184c:	801a      	strh	r2, [r3, #0]
	  			}
	  		}
	  		if (lcd_update){				//Update the LCD coming from others states
 800184e:	4b96      	ldr	r3, [pc, #600]	; (8001aa8 <main+0x560>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <main+0x322>
	  			lcdSetCursor(0,1);
 8001856:	2101      	movs	r1, #1
 8001858:	2000      	movs	r0, #0
 800185a:	f7ff fb41 	bl	8000ee0 <lcdSetCursor>
	  			lcdPrint("Mode: STOP ");
 800185e:	4893      	ldr	r0, [pc, #588]	; (8001aac <main+0x564>)
 8001860:	f7ff fb70 	bl	8000f44 <lcdPrint>
	  			lcd_update = FALSE;			//Reset flag for LCD Update
 8001864:	4b90      	ldr	r3, [pc, #576]	; (8001aa8 <main+0x560>)
 8001866:	2200      	movs	r2, #0
 8001868:	801a      	strh	r2, [r3, #0]
	  		}
	  		if (previous_state != STANDBY){		//If previous status is Standby the enable motor and direction
 800186a:	4b91      	ldr	r3, [pc, #580]	; (8001ab0 <main+0x568>)
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	2b03      	cmp	r3, #3
 8001870:	d002      	beq.n	8001878 <main+0x330>
	  			previous_state = STANDBY;		//Change previous state to current one
 8001872:	4b8f      	ldr	r3, [pc, #572]	; (8001ab0 <main+0x568>)
 8001874:	2203      	movs	r2, #3
 8001876:	801a      	strh	r2, [r3, #0]
	  		}
	  		if ( ( Switch_Status_Read() == RIGHT ) && ( current_feedrate == 0 ) ){		//Check if the switch is on right mode
 8001878:	f001 fefe 	bl	8003678 <Switch_Status_Read>
 800187c:	4603      	mov	r3, r0
 800187e:	2b01      	cmp	r3, #1
 8001880:	d10f      	bne.n	80018a2 <main+0x35a>
 8001882:	4b8c      	ldr	r3, [pc, #560]	; (8001ab4 <main+0x56c>)
 8001884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10a      	bne.n	80018a2 <main+0x35a>
	  			previous_state = STANDBY;		//Setting previous state to STANDBY
 800188c:	4b88      	ldr	r3, [pc, #544]	; (8001ab0 <main+0x568>)
 800188e:	2203      	movs	r2, #3
 8001890:	801a      	strh	r2, [r3, #0]
	  			state = MOVE_RIGHT;				//Change state to RIGHT
 8001892:	4b89      	ldr	r3, [pc, #548]	; (8001ab8 <main+0x570>)
 8001894:	2201      	movs	r2, #1
 8001896:	801a      	strh	r2, [r3, #0]
	  			lcd_update = TRUE;				//Set flag for LCD update
 8001898:	4b83      	ldr	r3, [pc, #524]	; (8001aa8 <main+0x560>)
 800189a:	2201      	movs	r2, #1
 800189c:	801a      	strh	r2, [r3, #0]
	  		}else if ( ( Switch_Status_Read() == LEFT ) && ( current_feedrate == 0 ) ){	//Check if the switch is on left mode
	  			previous_state = STANDBY;		//Setting previous state to STANDBY
	  			state = MOVE_LEFT;				//Change state to RIGHT
	  			lcd_update = TRUE;				//Set flag for LCD update
	  		}
	  		  break;
 800189e:	f000 bfc3 	b.w	8002828 <main+0x12e0>
	  		}else if ( ( Switch_Status_Read() == LEFT ) && ( current_feedrate == 0 ) ){	//Check if the switch is on left mode
 80018a2:	f001 fee9 	bl	8003678 <Switch_Status_Read>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f040 87bd 	bne.w	8002828 <main+0x12e0>
 80018ae:	4b81      	ldr	r3, [pc, #516]	; (8001ab4 <main+0x56c>)
 80018b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f040 87b7 	bne.w	8002828 <main+0x12e0>
	  			previous_state = STANDBY;		//Setting previous state to STANDBY
 80018ba:	4b7d      	ldr	r3, [pc, #500]	; (8001ab0 <main+0x568>)
 80018bc:	2203      	movs	r2, #3
 80018be:	801a      	strh	r2, [r3, #0]
	  			state = MOVE_LEFT;				//Change state to RIGHT
 80018c0:	4b7d      	ldr	r3, [pc, #500]	; (8001ab8 <main+0x570>)
 80018c2:	2202      	movs	r2, #2
 80018c4:	801a      	strh	r2, [r3, #0]
	  			lcd_update = TRUE;				//Set flag for LCD update
 80018c6:	4b78      	ldr	r3, [pc, #480]	; (8001aa8 <main+0x560>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	801a      	strh	r2, [r3, #0]
	  		  break;
 80018cc:	f000 bfac 	b.w	8002828 <main+0x12e0>
	  	  case MOVE_RIGHT:	//Right state, movement to the RIGHT
	  		  encoder_sw_status = Encoder_Switch_Status_Read();
 80018d0:	f001 ff66 	bl	80037a0 <Encoder_Switch_Status_Read>
 80018d4:	4603      	mov	r3, r0
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	4b78      	ldr	r3, [pc, #480]	; (8001abc <main+0x574>)
 80018da:	801a      	strh	r2, [r3, #0]
	  		  aux_sw_status = Aux_Switch_Status_Read();
 80018dc:	f001 ffc4 	bl	8003868 <Aux_Switch_Status_Read>
 80018e0:	4603      	mov	r3, r0
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	4b76      	ldr	r3, [pc, #472]	; (8001ac0 <main+0x578>)
 80018e6:	801a      	strh	r2, [r3, #0]
	  		  if ( encoder_sw_status == TRUE ){	//Check if the encoder is pressed to change the step mode
 80018e8:	4b74      	ldr	r3, [pc, #464]	; (8001abc <main+0x574>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d10e      	bne.n	800190e <main+0x3c6>
	  			  if (step_mode == STEP_NORMAL){
 80018f0:	4b6c      	ldr	r3, [pc, #432]	; (8001aa4 <main+0x55c>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d103      	bne.n	8001900 <main+0x3b8>
	  				  step_mode = STEP_x10;
 80018f8:	4b6a      	ldr	r3, [pc, #424]	; (8001aa4 <main+0x55c>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	801a      	strh	r2, [r3, #0]
 80018fe:	e006      	b.n	800190e <main+0x3c6>
	  			  }else if(step_mode == STEP_x10){
 8001900:	4b68      	ldr	r3, [pc, #416]	; (8001aa4 <main+0x55c>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d102      	bne.n	800190e <main+0x3c6>
	  				  step_mode = STEP_NORMAL;
 8001908:	4b66      	ldr	r3, [pc, #408]	; (8001aa4 <main+0x55c>)
 800190a:	2200      	movs	r2, #0
 800190c:	801a      	strh	r2, [r3, #0]
	  			  }
	  		  }
	  		  if (  aux_sw_status == TRUE_HOLD ){
 800190e:	4b6c      	ldr	r3, [pc, #432]	; (8001ac0 <main+0x578>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	2b03      	cmp	r3, #3
 8001914:	d105      	bne.n	8001922 <main+0x3da>
		  		target_feedrate = FAST_MOVEMENT_FEEDRATE;
 8001916:	4b6b      	ldr	r3, [pc, #428]	; (8001ac4 <main+0x57c>)
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	b21a      	sxth	r2, r3
 800191c:	4b6a      	ldr	r3, [pc, #424]	; (8001ac8 <main+0x580>)
 800191e:	801a      	strh	r2, [r3, #0]
 8001920:	e008      	b.n	8001934 <main+0x3ec>
	  		  }else if ( aux_sw_status == FALSE ){
 8001922:	4b67      	ldr	r3, [pc, #412]	; (8001ac0 <main+0x578>)
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d104      	bne.n	8001934 <main+0x3ec>
		  		target_feedrate = display_feedrate;
 800192a:	4b68      	ldr	r3, [pc, #416]	; (8001acc <main+0x584>)
 800192c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001930:	4b65      	ldr	r3, [pc, #404]	; (8001ac8 <main+0x580>)
 8001932:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  sw_status = Switch_Status_Read();		//Read the switch
 8001934:	f001 fea0 	bl	8003678 <Switch_Status_Read>
 8001938:	4603      	mov	r3, r0
 800193a:	b29a      	uxth	r2, r3
 800193c:	4b64      	ldr	r3, [pc, #400]	; (8001ad0 <main+0x588>)
 800193e:	801a      	strh	r2, [r3, #0]
	  		  if ( sw_status == RIGHT ){			//If it is on right position, update the feedrate target comming from others modes
 8001940:	4b63      	ldr	r3, [pc, #396]	; (8001ad0 <main+0x588>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d126      	bne.n	8001996 <main+0x44e>
	  			  if (target_feedrate == 0){
 8001948:	4b5f      	ldr	r3, [pc, #380]	; (8001ac8 <main+0x580>)
 800194a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d104      	bne.n	800195c <main+0x414>
	  				  target_feedrate = display_feedrate;
 8001952:	4b5e      	ldr	r3, [pc, #376]	; (8001acc <main+0x584>)
 8001954:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001958:	4b5b      	ldr	r3, [pc, #364]	; (8001ac8 <main+0x580>)
 800195a:	801a      	strh	r2, [r3, #0]
	  			  }
	  			  if ( aux_sw_status != TRUE_HOLD ){
 800195c:	4b58      	ldr	r3, [pc, #352]	; (8001ac0 <main+0x578>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d054      	beq.n	8001a0e <main+0x4c6>
					  Update_Feedrate(&target_feedrate);				//Update the feedrate from encoder
 8001964:	4858      	ldr	r0, [pc, #352]	; (8001ac8 <main+0x580>)
 8001966:	f001 fed1 	bl	800370c <Update_Feedrate>
					  if (display_feedrate != target_feedrate){			//Check if the feedrate changed to update LCD
 800196a:	4b58      	ldr	r3, [pc, #352]	; (8001acc <main+0x584>)
 800196c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001970:	4b55      	ldr	r3, [pc, #340]	; (8001ac8 <main+0x580>)
 8001972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001976:	429a      	cmp	r2, r3
 8001978:	d049      	beq.n	8001a0e <main+0x4c6>
						  display_feedrate = target_feedrate;
 800197a:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <main+0x580>)
 800197c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001980:	4b52      	ldr	r3, [pc, #328]	; (8001acc <main+0x584>)
 8001982:	801a      	strh	r2, [r3, #0]
						  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 8001984:	4b51      	ldr	r3, [pc, #324]	; (8001acc <main+0x584>)
 8001986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198a:	2200      	movs	r2, #0
 800198c:	210b      	movs	r1, #11
 800198e:	4618      	mov	r0, r3
 8001990:	f001 fe54 	bl	800363c <LCD_Write_Feedrate>
 8001994:	e03b      	b.n	8001a0e <main+0x4c6>
					  }
	  			  }
	  		  }else if ( sw_status == LEFT){		//If it is on left position, change to left, set feedrate to zero
 8001996:	4b4e      	ldr	r3, [pc, #312]	; (8001ad0 <main+0x588>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d119      	bne.n	80019d2 <main+0x48a>
		  		target_feedrate = 0;
 800199e:	4b4a      	ldr	r3, [pc, #296]	; (8001ac8 <main+0x580>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	801a      	strh	r2, [r3, #0]
			  	if ( current_feedrate == 0 ){		//If motor is stopped then move to left status
 80019a4:	4b43      	ldr	r3, [pc, #268]	; (8001ab4 <main+0x56c>)
 80019a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d12f      	bne.n	8001a0e <main+0x4c6>
			  		state = MOVE_LEFT;				//Change state to left
 80019ae:	4b42      	ldr	r3, [pc, #264]	; (8001ab8 <main+0x570>)
 80019b0:	2202      	movs	r2, #2
 80019b2:	801a      	strh	r2, [r3, #0]
			  		lcd_update = TRUE;				//Set flag to update display
 80019b4:	4b3c      	ldr	r3, [pc, #240]	; (8001aa8 <main+0x560>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	801a      	strh	r2, [r3, #0]
			  		Motor_Disable(en_invert);		//Disable Motor
 80019ba:	4b46      	ldr	r3, [pc, #280]	; (8001ad4 <main+0x58c>)
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f001 fcf4 	bl	80033ac <Motor_Disable>
			  		target_feedrate = display_feedrate;	//Update feedrate
 80019c4:	4b41      	ldr	r3, [pc, #260]	; (8001acc <main+0x584>)
 80019c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019ca:	4b3f      	ldr	r3, [pc, #252]	; (8001ac8 <main+0x580>)
 80019cc:	801a      	strh	r2, [r3, #0]
			  		break;							//Exit this state
 80019ce:	f000 bf50 	b.w	8002872 <main+0x132a>
			  	}
	  		  }else if ( sw_status == MID ){		//If it is on Mid position, change to STOP or STANDBY status
 80019d2:	4b3f      	ldr	r3, [pc, #252]	; (8001ad0 <main+0x588>)
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d119      	bne.n	8001a0e <main+0x4c6>
	  			target_feedrate = 0;
 80019da:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <main+0x580>)
 80019dc:	2200      	movs	r2, #0
 80019de:	801a      	strh	r2, [r3, #0]
	  			if ( current_feedrate == 0 ){
 80019e0:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <main+0x56c>)
 80019e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d111      	bne.n	8001a0e <main+0x4c6>
	  				state = STANDBY;				//Change state to standby
 80019ea:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <main+0x570>)
 80019ec:	2203      	movs	r2, #3
 80019ee:	801a      	strh	r2, [r3, #0]
	  				lcd_update = TRUE;				//Set flag to update display
 80019f0:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <main+0x560>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	801a      	strh	r2, [r3, #0]
	  				Motor_Disable(en_invert);		//Disable Motor
 80019f6:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <main+0x58c>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f001 fcd6 	bl	80033ac <Motor_Disable>
	  				target_feedrate = display_feedrate;	//Update feedrate
 8001a00:	4b32      	ldr	r3, [pc, #200]	; (8001acc <main+0x584>)
 8001a02:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a06:	4b30      	ldr	r3, [pc, #192]	; (8001ac8 <main+0x580>)
 8001a08:	801a      	strh	r2, [r3, #0]
	  				break;							//Exit this state
 8001a0a:	f000 bf32 	b.w	8002872 <main+0x132a>
	  			}
	  		  }
	  		  if (lcd_update){				//Update the LCD coming from others states
 8001a0e:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <main+0x560>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <main+0x4e2>
	  			  lcdSetCursor(0,1);
 8001a16:	2101      	movs	r1, #1
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7ff fa61 	bl	8000ee0 <lcdSetCursor>
	  			  lcdPrint("Mode: RIGHT");
 8001a1e:	482e      	ldr	r0, [pc, #184]	; (8001ad8 <main+0x590>)
 8001a20:	f7ff fa90 	bl	8000f44 <lcdPrint>
	  			  lcd_update = FALSE;			//Reset flag for LCD Update
 8001a24:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <main+0x560>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (previous_state != MOVE_RIGHT){		//If previous status is Standby the enable motor and direcction
 8001a2a:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <main+0x568>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d00d      	beq.n	8001a4e <main+0x506>
				  Motor_Direction(RIGHT, dir_invert);	//Set direction to right
 8001a32:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <main+0x594>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f001 fccf 	bl	80033dc <Motor_Direction>
				  Motor_Enable(en_invert);				//Enable Motor
 8001a3e:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <main+0x58c>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f001 fc9c 	bl	8003380 <Motor_Enable>
				  previous_state = MOVE_RIGHT;			//Change previous state to current one
 8001a48:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <main+0x568>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (update_speed){					//Update speed if the flag is set
 8001a4e:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <main+0x598>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 86eb 	beq.w	800282e <main+0x12e6>
	  			  current_feedrate = Motor_Feedrate_Update(&current_feedrate, &target_feedrate);
 8001a58:	491b      	ldr	r1, [pc, #108]	; (8001ac8 <main+0x580>)
 8001a5a:	4816      	ldr	r0, [pc, #88]	; (8001ab4 <main+0x56c>)
 8001a5c:	f001 fd30 	bl	80034c0 <Motor_Feedrate_Update>
 8001a60:	4603      	mov	r3, r0
 8001a62:	b21a      	sxth	r2, r3
 8001a64:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <main+0x56c>)
 8001a66:	801a      	strh	r2, [r3, #0]
				  update_speed = 0;					//Reset the update_speed flag
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <main+0x598>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  break;
 8001a6e:	f000 bede 	b.w	800282e <main+0x12e6>
	  	  case MOVE_LEFT:	//Left state, movement to the Left
	  		  encoder_sw_status = Encoder_Switch_Status_Read();
 8001a72:	f001 fe95 	bl	80037a0 <Encoder_Switch_Status_Read>
 8001a76:	4603      	mov	r3, r0
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <main+0x574>)
 8001a7c:	801a      	strh	r2, [r3, #0]
	  		  aux_sw_status = Aux_Switch_Status_Read();
 8001a7e:	f001 fef3 	bl	8003868 <Aux_Switch_Status_Read>
 8001a82:	4603      	mov	r3, r0
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <main+0x578>)
 8001a88:	801a      	strh	r2, [r3, #0]
	  		  if ( encoder_sw_status == TRUE ){	//Check if the encoder is pressed to change the step mode
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <main+0x574>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d12f      	bne.n	8001af2 <main+0x5aa>
	  			  if (step_mode == STEP_NORMAL){
 8001a92:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <main+0x55c>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d124      	bne.n	8001ae4 <main+0x59c>
	  				  step_mode = STEP_x10;
 8001a9a:	4b02      	ldr	r3, [pc, #8]	; (8001aa4 <main+0x55c>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	801a      	strh	r2, [r3, #0]
 8001aa0:	e027      	b.n	8001af2 <main+0x5aa>
 8001aa2:	bf00      	nop
 8001aa4:	20000676 	.word	0x20000676
 8001aa8:	200006c8 	.word	0x200006c8
 8001aac:	080078e8 	.word	0x080078e8
 8001ab0:	20000672 	.word	0x20000672
 8001ab4:	200006b4 	.word	0x200006b4
 8001ab8:	20000670 	.word	0x20000670
 8001abc:	200006b8 	.word	0x200006b8
 8001ac0:	200006ba 	.word	0x200006ba
 8001ac4:	20000012 	.word	0x20000012
 8001ac8:	20000014 	.word	0x20000014
 8001acc:	20000016 	.word	0x20000016
 8001ad0:	200006b6 	.word	0x200006b6
 8001ad4:	20000678 	.word	0x20000678
 8001ad8:	080078f4 	.word	0x080078f4
 8001adc:	2000067a 	.word	0x2000067a
 8001ae0:	200006c6 	.word	0x200006c6
	  			  }else if(step_mode == STEP_x10){
 8001ae4:	4ba2      	ldr	r3, [pc, #648]	; (8001d70 <main+0x828>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d102      	bne.n	8001af2 <main+0x5aa>
	  				  step_mode = STEP_NORMAL;
 8001aec:	4ba0      	ldr	r3, [pc, #640]	; (8001d70 <main+0x828>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	801a      	strh	r2, [r3, #0]
	  			  }
	  		  }
	  		  if (  aux_sw_status == TRUE_HOLD ){
 8001af2:	4ba0      	ldr	r3, [pc, #640]	; (8001d74 <main+0x82c>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d105      	bne.n	8001b06 <main+0x5be>
	  			  target_feedrate = FAST_MOVEMENT_FEEDRATE;
 8001afa:	4b9f      	ldr	r3, [pc, #636]	; (8001d78 <main+0x830>)
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	b21a      	sxth	r2, r3
 8001b00:	4b9e      	ldr	r3, [pc, #632]	; (8001d7c <main+0x834>)
 8001b02:	801a      	strh	r2, [r3, #0]
 8001b04:	e008      	b.n	8001b18 <main+0x5d0>
	  		  }else if ( aux_sw_status == FALSE ){
 8001b06:	4b9b      	ldr	r3, [pc, #620]	; (8001d74 <main+0x82c>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d104      	bne.n	8001b18 <main+0x5d0>
	  			  target_feedrate = display_feedrate;
 8001b0e:	4b9c      	ldr	r3, [pc, #624]	; (8001d80 <main+0x838>)
 8001b10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b14:	4b99      	ldr	r3, [pc, #612]	; (8001d7c <main+0x834>)
 8001b16:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  sw_status = Switch_Status_Read();		//Read the switch
 8001b18:	f001 fdae 	bl	8003678 <Switch_Status_Read>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4b98      	ldr	r3, [pc, #608]	; (8001d84 <main+0x83c>)
 8001b22:	801a      	strh	r2, [r3, #0]
	  		  if ( sw_status == LEFT ){				//If it is on left position, update the feedrate target comming from others modes
 8001b24:	4b97      	ldr	r3, [pc, #604]	; (8001d84 <main+0x83c>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d126      	bne.n	8001b7a <main+0x632>
	  			  if (target_feedrate == 0){
 8001b2c:	4b93      	ldr	r3, [pc, #588]	; (8001d7c <main+0x834>)
 8001b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d104      	bne.n	8001b40 <main+0x5f8>
	  				  target_feedrate = display_feedrate;
 8001b36:	4b92      	ldr	r3, [pc, #584]	; (8001d80 <main+0x838>)
 8001b38:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b3c:	4b8f      	ldr	r3, [pc, #572]	; (8001d7c <main+0x834>)
 8001b3e:	801a      	strh	r2, [r3, #0]
	  			  }
	  			  if ( aux_sw_status != TRUE_HOLD ){
 8001b40:	4b8c      	ldr	r3, [pc, #560]	; (8001d74 <main+0x82c>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d054      	beq.n	8001bf2 <main+0x6aa>
					  Update_Feedrate(&target_feedrate);				//Update the feedrate from encoder
 8001b48:	488c      	ldr	r0, [pc, #560]	; (8001d7c <main+0x834>)
 8001b4a:	f001 fddf 	bl	800370c <Update_Feedrate>
					  if (display_feedrate != target_feedrate){			//Check if the feedrate changed to update LCD
 8001b4e:	4b8c      	ldr	r3, [pc, #560]	; (8001d80 <main+0x838>)
 8001b50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b54:	4b89      	ldr	r3, [pc, #548]	; (8001d7c <main+0x834>)
 8001b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d049      	beq.n	8001bf2 <main+0x6aa>
						  display_feedrate = target_feedrate;
 8001b5e:	4b87      	ldr	r3, [pc, #540]	; (8001d7c <main+0x834>)
 8001b60:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b64:	4b86      	ldr	r3, [pc, #536]	; (8001d80 <main+0x838>)
 8001b66:	801a      	strh	r2, [r3, #0]
						  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 8001b68:	4b85      	ldr	r3, [pc, #532]	; (8001d80 <main+0x838>)
 8001b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	210b      	movs	r1, #11
 8001b72:	4618      	mov	r0, r3
 8001b74:	f001 fd62 	bl	800363c <LCD_Write_Feedrate>
 8001b78:	e03b      	b.n	8001bf2 <main+0x6aa>
					  }
	  			  }
	  		  }else if ( sw_status == RIGHT){		//If it is on right position, change to right, set feedrate to zero
 8001b7a:	4b82      	ldr	r3, [pc, #520]	; (8001d84 <main+0x83c>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d119      	bne.n	8001bb6 <main+0x66e>
		  		target_feedrate = 0;
 8001b82:	4b7e      	ldr	r3, [pc, #504]	; (8001d7c <main+0x834>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	801a      	strh	r2, [r3, #0]
		  		if ( current_feedrate == 0 ){		//If motor is stopped then move to right status
 8001b88:	4b7f      	ldr	r3, [pc, #508]	; (8001d88 <main+0x840>)
 8001b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d12f      	bne.n	8001bf2 <main+0x6aa>
		  			state = MOVE_RIGHT;				//Change state to right
 8001b92:	4b7e      	ldr	r3, [pc, #504]	; (8001d8c <main+0x844>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	801a      	strh	r2, [r3, #0]
		  			lcd_update = TRUE;				//Set flag to update display
 8001b98:	4b7d      	ldr	r3, [pc, #500]	; (8001d90 <main+0x848>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	801a      	strh	r2, [r3, #0]
		  			Motor_Disable(en_invert);		//Disable Motor
 8001b9e:	4b7d      	ldr	r3, [pc, #500]	; (8001d94 <main+0x84c>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f001 fc02 	bl	80033ac <Motor_Disable>
		  			target_feedrate = display_feedrate;	//Update feedrate
 8001ba8:	4b75      	ldr	r3, [pc, #468]	; (8001d80 <main+0x838>)
 8001baa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bae:	4b73      	ldr	r3, [pc, #460]	; (8001d7c <main+0x834>)
 8001bb0:	801a      	strh	r2, [r3, #0]
		  			break;							//Exit this state
 8001bb2:	f000 be5e 	b.w	8002872 <main+0x132a>
		  		}
	  		  }else if ( sw_status == MID ){		//If it is on Mid position, change to STOP or STANDBY status
 8001bb6:	4b73      	ldr	r3, [pc, #460]	; (8001d84 <main+0x83c>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d119      	bne.n	8001bf2 <main+0x6aa>
	  			target_feedrate = 0;
 8001bbe:	4b6f      	ldr	r3, [pc, #444]	; (8001d7c <main+0x834>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	801a      	strh	r2, [r3, #0]
	  			if ( current_feedrate == 0 ){
 8001bc4:	4b70      	ldr	r3, [pc, #448]	; (8001d88 <main+0x840>)
 8001bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d111      	bne.n	8001bf2 <main+0x6aa>
	  				state = STANDBY;				//Change state to standby
 8001bce:	4b6f      	ldr	r3, [pc, #444]	; (8001d8c <main+0x844>)
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	801a      	strh	r2, [r3, #0]
	  				lcd_update = TRUE;				//Set flag to update display
 8001bd4:	4b6e      	ldr	r3, [pc, #440]	; (8001d90 <main+0x848>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	801a      	strh	r2, [r3, #0]
	  				Motor_Disable(en_invert);		//Disable Motor
 8001bda:	4b6e      	ldr	r3, [pc, #440]	; (8001d94 <main+0x84c>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f001 fbe4 	bl	80033ac <Motor_Disable>
	  				target_feedrate = display_feedrate;	//Update feedrate
 8001be4:	4b66      	ldr	r3, [pc, #408]	; (8001d80 <main+0x838>)
 8001be6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bea:	4b64      	ldr	r3, [pc, #400]	; (8001d7c <main+0x834>)
 8001bec:	801a      	strh	r2, [r3, #0]
	  				break;							//Exit this state
 8001bee:	f000 be40 	b.w	8002872 <main+0x132a>
	  			}
	  		  }
	  		  if (lcd_update){				//Update the LCD comming from others states
 8001bf2:	4b67      	ldr	r3, [pc, #412]	; (8001d90 <main+0x848>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d009      	beq.n	8001c0e <main+0x6c6>
	  			lcdSetCursor(0,1);
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f7ff f96f 	bl	8000ee0 <lcdSetCursor>
	  			lcdPrint("Mode: LEFT ");
 8001c02:	4865      	ldr	r0, [pc, #404]	; (8001d98 <main+0x850>)
 8001c04:	f7ff f99e 	bl	8000f44 <lcdPrint>
	  			lcd_update = FALSE;			//Reset flag for LCD Update
 8001c08:	4b61      	ldr	r3, [pc, #388]	; (8001d90 <main+0x848>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (previous_state != MOVE_LEFT){		//If previous status is Standby the enable motor and direcction
 8001c0e:	4b63      	ldr	r3, [pc, #396]	; (8001d9c <main+0x854>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d00d      	beq.n	8001c32 <main+0x6ea>
	  		  Motor_Direction(LEFT, dir_invert);	//Set direction to left
 8001c16:	4b62      	ldr	r3, [pc, #392]	; (8001da0 <main+0x858>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f001 fbdd 	bl	80033dc <Motor_Direction>
	  		  Motor_Enable(en_invert);				//Enable Motor
 8001c22:	4b5c      	ldr	r3, [pc, #368]	; (8001d94 <main+0x84c>)
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f001 fbaa 	bl	8003380 <Motor_Enable>
	  		  previous_state = MOVE_LEFT;			//Change previous state to current one
 8001c2c:	4b5b      	ldr	r3, [pc, #364]	; (8001d9c <main+0x854>)
 8001c2e:	2202      	movs	r2, #2
 8001c30:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (update_speed){					//Update speed if the flag is set
 8001c32:	4b5c      	ldr	r3, [pc, #368]	; (8001da4 <main+0x85c>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 85fc 	beq.w	8002834 <main+0x12ec>
	  			  current_feedrate = Motor_Feedrate_Update(&current_feedrate, &target_feedrate);
 8001c3c:	494f      	ldr	r1, [pc, #316]	; (8001d7c <main+0x834>)
 8001c3e:	4852      	ldr	r0, [pc, #328]	; (8001d88 <main+0x840>)
 8001c40:	f001 fc3e 	bl	80034c0 <Motor_Feedrate_Update>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b21a      	sxth	r2, r3
 8001c48:	4b4f      	ldr	r3, [pc, #316]	; (8001d88 <main+0x840>)
 8001c4a:	801a      	strh	r2, [r3, #0]
				  update_speed = 0;					//Reset the update_speed flag
 8001c4c:	4b55      	ldr	r3, [pc, #340]	; (8001da4 <main+0x85c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  break;
 8001c52:	f000 bdef 	b.w	8002834 <main+0x12ec>
	  	  case CONFIGURATION:	//State for Configuration Menu
	  		  switch (configuration_status)
 8001c56:	4b54      	ldr	r3, [pc, #336]	; (8001da8 <main+0x860>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	2b0a      	cmp	r3, #10
 8001c5c:	f63f ad58 	bhi.w	8001710 <main+0x1c8>
 8001c60:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <main+0x720>)
 8001c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c66:	bf00      	nop
 8001c68:	08001c95 	.word	0x08001c95
 8001c6c:	08001dcd 	.word	0x08001dcd
 8001c70:	08001ea9 	.word	0x08001ea9
 8001c74:	08001fe5 	.word	0x08001fe5
 8001c78:	08002125 	.word	0x08002125
 8001c7c:	08002269 	.word	0x08002269
 8001c80:	0800236f 	.word	0x0800236f
 8001c84:	08002499 	.word	0x08002499
 8001c88:	080025a5 	.word	0x080025a5
 8001c8c:	080026a1 	.word	0x080026a1
 8001c90:	080027a9 	.word	0x080027a9
	  		  {
				  case 0:	//Enable PIN configuration
					  if (lcd_update){	//Check if is needed to update LCD
 8001c94:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <main+0x848>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d02d      	beq.n	8001cf8 <main+0x7b0>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8001c9c:	f001 f8fc 	bl	8002e98 <Encoder_Read>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b42      	ldr	r3, [pc, #264]	; (8001dac <main+0x864>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a40      	ldr	r2, [pc, #256]	; (8001dac <main+0x864>)
 8001caa:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8001cac:	f7ff f8ee 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	2003      	movs	r0, #3
 8001cb4:	f7ff f914 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8001cb8:	483d      	ldr	r0, [pc, #244]	; (8001db0 <main+0x868>)
 8001cba:	f7ff f943 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f7ff f90d 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Enable Pin Inverted:");
 8001cc6:	483b      	ldr	r0, [pc, #236]	; (8001db4 <main+0x86c>)
 8001cc8:	f7ff f93c 	bl	8000f44 <lcdPrint>
						  if ( parameter.en_invert_1 == FALSE){		//If parameter is FALSE Print not inverted
 8001ccc:	4b3a      	ldr	r3, [pc, #232]	; (8001db8 <main+0x870>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d107      	bne.n	8001ce4 <main+0x79c>
							lcdSetCursor(0, 2);
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f7ff f902 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("NON_INVERTED");
 8001cdc:	4837      	ldr	r0, [pc, #220]	; (8001dbc <main+0x874>)
 8001cde:	f7ff f931 	bl	8000f44 <lcdPrint>
 8001ce2:	e006      	b.n	8001cf2 <main+0x7aa>
						  }else{									//If parameter is TRUE Print inverted
							lcdSetCursor(0, 2);
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f7ff f8fa 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("INVERTED    ");
 8001cec:	4834      	ldr	r0, [pc, #208]	; (8001dc0 <main+0x878>)
 8001cee:	f7ff f929 	bl	8000f44 <lcdPrint>
						  }
						lcd_update = FALSE;	//Reset LCD Update flag
 8001cf2:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <main+0x848>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8001cf8:	f001 f8ce 	bl	8002e98 <Encoder_Read>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <main+0x87c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4413      	add	r3, r2
 8001d04:	4a2f      	ldr	r2, [pc, #188]	; (8001dc4 <main+0x87c>)
 8001d06:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8001d08:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <main+0x87c>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b27      	ldr	r3, [pc, #156]	; (8001dac <main+0x864>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d01c      	beq.n	8001d4e <main+0x806>
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8001d14:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <main+0x87c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a24      	ldr	r2, [pc, #144]	; (8001dac <main+0x864>)
 8001d1a:	6013      	str	r3, [r2, #0]
						  if (!parameter.en_invert_1){					//Change the value
 8001d1c:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <main+0x870>)
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10a      	bne.n	8001d3a <main+0x7f2>
							lcdSetCursor(0, 2);
 8001d24:	2102      	movs	r1, #2
 8001d26:	2000      	movs	r0, #0
 8001d28:	f7ff f8da 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("INVERTED    ");
 8001d2c:	4824      	ldr	r0, [pc, #144]	; (8001dc0 <main+0x878>)
 8001d2e:	f7ff f909 	bl	8000f44 <lcdPrint>
							parameter.en_invert_1 = TRUE;
 8001d32:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <main+0x870>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	801a      	strh	r2, [r3, #0]
 8001d38:	e009      	b.n	8001d4e <main+0x806>
						  }else{
							lcdSetCursor(0, 2);
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f7ff f8cf 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("NOT_INVERTED");
 8001d42:	4821      	ldr	r0, [pc, #132]	; (8001dc8 <main+0x880>)
 8001d44:	f7ff f8fe 	bl	8000f44 <lcdPrint>
							parameter.en_invert_1 = FALSE;
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <main+0x870>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	801a      	strh	r2, [r3, #0]
						  }
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8001d4e:	f001 fd27 	bl	80037a0 <Encoder_Switch_Status_Read>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	f040 8570 	bne.w	800283a <main+0x12f2>
						configuration_status += 1;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <main+0x860>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <main+0x860>)
 8001d64:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <main+0x848>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8001d6c:	f000 bd65 	b.w	800283a <main+0x12f2>
 8001d70:	20000676 	.word	0x20000676
 8001d74:	200006ba 	.word	0x200006ba
 8001d78:	20000012 	.word	0x20000012
 8001d7c:	20000014 	.word	0x20000014
 8001d80:	20000016 	.word	0x20000016
 8001d84:	200006b6 	.word	0x200006b6
 8001d88:	200006b4 	.word	0x200006b4
 8001d8c:	20000670 	.word	0x20000670
 8001d90:	200006c8 	.word	0x200006c8
 8001d94:	20000678 	.word	0x20000678
 8001d98:	08007900 	.word	0x08007900
 8001d9c:	20000672 	.word	0x20000672
 8001da0:	2000067a 	.word	0x2000067a
 8001da4:	200006c6 	.word	0x200006c6
 8001da8:	20000674 	.word	0x20000674
 8001dac:	20000004 	.word	0x20000004
 8001db0:	0800790c 	.word	0x0800790c
 8001db4:	0800791c 	.word	0x0800791c
 8001db8:	2000067c 	.word	0x2000067c
 8001dbc:	08007934 	.word	0x08007934
 8001dc0:	08007944 	.word	0x08007944
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	08007954 	.word	0x08007954
				  case 1:	//Dir PIN configuration
					  if (lcd_update){
 8001dcc:	4b79      	ldr	r3, [pc, #484]	; (8001fb4 <main+0xa6c>)
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d02d      	beq.n	8001e30 <main+0x8e8>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8001dd4:	f001 f860 	bl	8002e98 <Encoder_Read>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b77      	ldr	r3, [pc, #476]	; (8001fb8 <main+0xa70>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	4a75      	ldr	r2, [pc, #468]	; (8001fb8 <main+0xa70>)
 8001de2:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8001de4:	f7ff f852 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 8001de8:	2100      	movs	r1, #0
 8001dea:	2003      	movs	r0, #3
 8001dec:	f7ff f878 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8001df0:	4872      	ldr	r0, [pc, #456]	; (8001fbc <main+0xa74>)
 8001df2:	f7ff f8a7 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 8001df6:	2101      	movs	r1, #1
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f7ff f871 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Dir Pin Inverted:");
 8001dfe:	4870      	ldr	r0, [pc, #448]	; (8001fc0 <main+0xa78>)
 8001e00:	f7ff f8a0 	bl	8000f44 <lcdPrint>
						  if ( parameter.dir_invert_1 == FALSE){	//If parameter is FALSE Print not inverted
 8001e04:	4b6f      	ldr	r3, [pc, #444]	; (8001fc4 <main+0xa7c>)
 8001e06:	885b      	ldrh	r3, [r3, #2]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d107      	bne.n	8001e1c <main+0x8d4>
							lcdSetCursor(0, 2);
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff f866 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("NON_INVERTED");
 8001e14:	486c      	ldr	r0, [pc, #432]	; (8001fc8 <main+0xa80>)
 8001e16:	f7ff f895 	bl	8000f44 <lcdPrint>
 8001e1a:	e006      	b.n	8001e2a <main+0x8e2>
						  }else{									//If parameter is TRUE Print inverted
							lcdSetCursor(0, 2);
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f7ff f85e 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("INVERTED    ");
 8001e24:	4869      	ldr	r0, [pc, #420]	; (8001fcc <main+0xa84>)
 8001e26:	f7ff f88d 	bl	8000f44 <lcdPrint>
						  }
						lcd_update = FALSE;
 8001e2a:	4b62      	ldr	r3, [pc, #392]	; (8001fb4 <main+0xa6c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8001e30:	f001 f832 	bl	8002e98 <Encoder_Read>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b66      	ldr	r3, [pc, #408]	; (8001fd0 <main+0xa88>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4a64      	ldr	r2, [pc, #400]	; (8001fd0 <main+0xa88>)
 8001e3e:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8001e40:	4b63      	ldr	r3, [pc, #396]	; (8001fd0 <main+0xa88>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b5c      	ldr	r3, [pc, #368]	; (8001fb8 <main+0xa70>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d01c      	beq.n	8001e86 <main+0x93e>
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8001e4c:	4b60      	ldr	r3, [pc, #384]	; (8001fd0 <main+0xa88>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a59      	ldr	r2, [pc, #356]	; (8001fb8 <main+0xa70>)
 8001e52:	6013      	str	r3, [r2, #0]
						  if (!parameter.dir_invert_1){					//Change the value
 8001e54:	4b5b      	ldr	r3, [pc, #364]	; (8001fc4 <main+0xa7c>)
 8001e56:	885b      	ldrh	r3, [r3, #2]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10a      	bne.n	8001e72 <main+0x92a>
							lcdSetCursor(0, 2);
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7ff f83e 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("INVERTED    ");
 8001e64:	4859      	ldr	r0, [pc, #356]	; (8001fcc <main+0xa84>)
 8001e66:	f7ff f86d 	bl	8000f44 <lcdPrint>
							parameter.dir_invert_1 = TRUE;
 8001e6a:	4b56      	ldr	r3, [pc, #344]	; (8001fc4 <main+0xa7c>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	805a      	strh	r2, [r3, #2]
 8001e70:	e009      	b.n	8001e86 <main+0x93e>
						  }else{
							lcdSetCursor(0, 2);
 8001e72:	2102      	movs	r1, #2
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff f833 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("NOT_INVERTED");
 8001e7a:	4856      	ldr	r0, [pc, #344]	; (8001fd4 <main+0xa8c>)
 8001e7c:	f7ff f862 	bl	8000f44 <lcdPrint>
							parameter.dir_invert_1 = FALSE;
 8001e80:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <main+0xa7c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	805a      	strh	r2, [r3, #2]
						  }
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8001e86:	f001 fc8b 	bl	80037a0 <Encoder_Switch_Status_Read>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	f040 84d7 	bne.w	8002840 <main+0x12f8>
						configuration_status += 1;
 8001e92:	4b51      	ldr	r3, [pc, #324]	; (8001fd8 <main+0xa90>)
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	3301      	adds	r3, #1
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	4b4f      	ldr	r3, [pc, #316]	; (8001fd8 <main+0xa90>)
 8001e9c:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8001e9e:	4b45      	ldr	r3, [pc, #276]	; (8001fb4 <main+0xa6c>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8001ea4:	f000 bccc 	b.w	8002840 <main+0x12f8>
				  case 2:
					  if (lcd_update){
 8001ea8:	4b42      	ldr	r3, [pc, #264]	; (8001fb4 <main+0xa6c>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d028      	beq.n	8001f02 <main+0x9ba>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8001eb0:	f000 fff2 	bl	8002e98 <Encoder_Read>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b40      	ldr	r3, [pc, #256]	; (8001fb8 <main+0xa70>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a3e      	ldr	r2, [pc, #248]	; (8001fb8 <main+0xa70>)
 8001ebe:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8001ec0:	f7fe ffe4 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2003      	movs	r0, #3
 8001ec8:	f7ff f80a 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8001ecc:	483b      	ldr	r0, [pc, #236]	; (8001fbc <main+0xa74>)
 8001ece:	f7ff f839 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7ff f803 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Motor Steps per Rev:");
 8001eda:	4840      	ldr	r0, [pc, #256]	; (8001fdc <main+0xa94>)
 8001edc:	f7ff f832 	bl	8000f44 <lcdPrint>
						  LCD_Write_Number(parameter.motor_stepsrev_1, 0, 2);
 8001ee0:	4b38      	ldr	r3, [pc, #224]	; (8001fc4 <main+0xa7c>)
 8001ee2:	889b      	ldrh	r3, [r3, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f001 f815 	bl	8002f18 <LCD_Write_Number>
						  lcdSetCursor(8, 2);
 8001eee:	2102      	movs	r1, #2
 8001ef0:	2008      	movs	r0, #8
 8001ef2:	f7fe fff5 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(pulse/rev)");
 8001ef6:	483a      	ldr	r0, [pc, #232]	; (8001fe0 <main+0xa98>)
 8001ef8:	f7ff f824 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 8001efc:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <main+0xa6c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8001f02:	f000 ffc9 	bl	8002e98 <Encoder_Read>
 8001f06:	4602      	mov	r2, r0
 8001f08:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <main+0xa88>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	4a30      	ldr	r2, [pc, #192]	; (8001fd0 <main+0xa88>)
 8001f10:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8001f12:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <main+0xa88>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <main+0xa70>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d038      	beq.n	8001f90 <main+0xa48>
						  parameter.motor_stepsrev_1 = parameter.motor_stepsrev_1 + ( 100*(current_encoder_value - old_encoder_value) );
 8001f1e:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <main+0xa7c>)
 8001f20:	889a      	ldrh	r2, [r3, #4]
 8001f22:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <main+0xa88>)
 8001f24:	6819      	ldr	r1, [r3, #0]
 8001f26:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <main+0xa70>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	1acb      	subs	r3, r1, r3
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	4619      	mov	r1, r3
 8001f30:	0089      	lsls	r1, r1, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	4619      	mov	r1, r3
 8001f36:	0088      	lsls	r0, r1, #2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	440b      	add	r3, r1
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	4413      	add	r3, r2
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <main+0xa7c>)
 8001f48:	809a      	strh	r2, [r3, #4]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8001f4a:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <main+0xa88>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a1a      	ldr	r2, [pc, #104]	; (8001fb8 <main+0xa70>)
 8001f50:	6013      	str	r3, [r2, #0]
						  if ( parameter.motor_stepsrev_1 < 100 || ( parameter.motor_stepsrev_1 >= (MAX_MOTOR_STEPREV + 20000) )){
 8001f52:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <main+0xa7c>)
 8001f54:	889b      	ldrh	r3, [r3, #4]
 8001f56:	2b63      	cmp	r3, #99	; 0x63
 8001f58:	d905      	bls.n	8001f66 <main+0xa1e>
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <main+0xa7c>)
 8001f5c:	889b      	ldrh	r3, [r3, #4]
 8001f5e:	f648 02b7 	movw	r2, #34999	; 0x88b7
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d903      	bls.n	8001f6e <main+0xa26>
							  parameter.motor_stepsrev_1 = 100;
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <main+0xa7c>)
 8001f68:	2264      	movs	r2, #100	; 0x64
 8001f6a:	809a      	strh	r2, [r3, #4]
 8001f6c:	e009      	b.n	8001f82 <main+0xa3a>
						  }else if ( parameter.motor_stepsrev_1 > MAX_MOTOR_STEPREV){
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <main+0xa7c>)
 8001f70:	889b      	ldrh	r3, [r3, #4]
 8001f72:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d903      	bls.n	8001f82 <main+0xa3a>
							  parameter.motor_stepsrev_1 = MAX_MOTOR_STEPREV;
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <main+0xa7c>)
 8001f7c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001f80:	809a      	strh	r2, [r3, #4]
						  }
						  LCD_Write_Number(parameter.motor_stepsrev_1, 0, 2);
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <main+0xa7c>)
 8001f84:	889b      	ldrh	r3, [r3, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 ffc4 	bl	8002f18 <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8001f90:	f001 fc06 	bl	80037a0 <Encoder_Switch_Status_Read>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	f040 8455 	bne.w	8002846 <main+0x12fe>
						configuration_status += 1;
 8001f9c:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <main+0xa90>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <main+0xa90>)
 8001fa6:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8001fa8:	4b02      	ldr	r3, [pc, #8]	; (8001fb4 <main+0xa6c>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8001fae:	f000 bc4a 	b.w	8002846 <main+0x12fe>
 8001fb2:	bf00      	nop
 8001fb4:	200006c8 	.word	0x200006c8
 8001fb8:	20000004 	.word	0x20000004
 8001fbc:	0800790c 	.word	0x0800790c
 8001fc0:	08007964 	.word	0x08007964
 8001fc4:	2000067c 	.word	0x2000067c
 8001fc8:	08007934 	.word	0x08007934
 8001fcc:	08007944 	.word	0x08007944
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	08007954 	.word	0x08007954
 8001fd8:	20000674 	.word	0x20000674
 8001fdc:	08007978 	.word	0x08007978
 8001fe0:	08007990 	.word	0x08007990
				  case 3:
					  if (lcd_update){
 8001fe4:	4b94      	ldr	r3, [pc, #592]	; (8002238 <main+0xcf0>)
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d02a      	beq.n	8002042 <main+0xafa>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8001fec:	f000 ff54 	bl	8002e98 <Encoder_Read>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b92      	ldr	r3, [pc, #584]	; (800223c <main+0xcf4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4a90      	ldr	r2, [pc, #576]	; (800223c <main+0xcf4>)
 8001ffa:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8001ffc:	f7fe ff46 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 8002000:	2100      	movs	r1, #0
 8002002:	2003      	movs	r0, #3
 8002004:	f7fe ff6c 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8002008:	488d      	ldr	r0, [pc, #564]	; (8002240 <main+0xcf8>)
 800200a:	f7fe ff9b 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 800200e:	2101      	movs	r1, #1
 8002010:	2000      	movs	r0, #0
 8002012:	f7fe ff65 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Leadscrew Pitch:");
 8002016:	488b      	ldr	r0, [pc, #556]	; (8002244 <main+0xcfc>)
 8002018:	f7fe ff94 	bl	8000f44 <lcdPrint>
						  LCD_Write_Float_Number(parameter.leadscrew_pitch_1,0,2);
 800201c:	4b8a      	ldr	r3, [pc, #552]	; (8002248 <main+0xd00>)
 800201e:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002022:	2102      	movs	r1, #2
 8002024:	2000      	movs	r0, #0
 8002026:	ee00 3a10 	vmov	s0, r3
 800202a:	f001 f963 	bl	80032f4 <LCD_Write_Float_Number>
						  lcdSetCursor(10, 2);
 800202e:	2102      	movs	r1, #2
 8002030:	200a      	movs	r0, #10
 8002032:	f7fe ff55 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(mm/rev)");
 8002036:	4885      	ldr	r0, [pc, #532]	; (800224c <main+0xd04>)
 8002038:	f7fe ff84 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 800203c:	4b7e      	ldr	r3, [pc, #504]	; (8002238 <main+0xcf0>)
 800203e:	2200      	movs	r2, #0
 8002040:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8002042:	f000 ff29 	bl	8002e98 <Encoder_Read>
 8002046:	4602      	mov	r2, r0
 8002048:	4b81      	ldr	r3, [pc, #516]	; (8002250 <main+0xd08>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4413      	add	r3, r2
 800204e:	4a80      	ldr	r2, [pc, #512]	; (8002250 <main+0xd08>)
 8002050:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8002052:	4b7f      	ldr	r3, [pc, #508]	; (8002250 <main+0xd08>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	4b79      	ldr	r3, [pc, #484]	; (800223c <main+0xcf4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d052      	beq.n	8002104 <main+0xbbc>
						  parameter.leadscrew_pitch_1 = parameter.leadscrew_pitch_1 + (float)( 0.01*(current_encoder_value - old_encoder_value) );
 800205e:	4b7a      	ldr	r3, [pc, #488]	; (8002248 <main+0xd00>)
 8002060:	f8d3 4006 	ldr.w	r4, [r3, #6]
 8002064:	4623      	mov	r3, r4
 8002066:	461c      	mov	r4, r3
 8002068:	4b79      	ldr	r3, [pc, #484]	; (8002250 <main+0xd08>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b73      	ldr	r3, [pc, #460]	; (800223c <main+0xcf4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fb88 	bl	8000788 <__aeabi_i2d>
 8002078:	a36d      	add	r3, pc, #436	; (adr r3, 8002230 <main+0xce8>)
 800207a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207e:	f7fe f907 	bl	8000290 <__aeabi_dmul>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	f7fe fc8f 	bl	80009ac <__aeabi_d2f>
 800208e:	ee07 0a90 	vmov	s15, r0
 8002092:	ee07 4a10 	vmov	s14, r4
 8002096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209a:	4b6b      	ldr	r3, [pc, #428]	; (8002248 <main+0xd00>)
 800209c:	ee17 2a90 	vmov	r2, s15
 80020a0:	f8c3 2006 	str.w	r2, [r3, #6]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 80020a4:	4b6a      	ldr	r3, [pc, #424]	; (8002250 <main+0xd08>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a64      	ldr	r2, [pc, #400]	; (800223c <main+0xcf4>)
 80020aa:	6013      	str	r3, [r2, #0]
						  if ( parameter.leadscrew_pitch_1 < 0.01){
 80020ac:	4b66      	ldr	r3, [pc, #408]	; (8002248 <main+0xd00>)
 80020ae:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fb7a 	bl	80007ac <__aeabi_f2d>
 80020b8:	a35d      	add	r3, pc, #372	; (adr r3, 8002230 <main+0xce8>)
 80020ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020be:	f7fe fc2d 	bl	800091c <__aeabi_dcmplt>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d004      	beq.n	80020d2 <main+0xb8a>
							  parameter.leadscrew_pitch_1 = 0.01;
 80020c8:	4b5f      	ldr	r3, [pc, #380]	; (8002248 <main+0xd00>)
 80020ca:	4a62      	ldr	r2, [pc, #392]	; (8002254 <main+0xd0c>)
 80020cc:	f8c3 2006 	str.w	r2, [r3, #6]
 80020d0:	e00f      	b.n	80020f2 <main+0xbaa>
						  }else if ( parameter.leadscrew_pitch_1 > MAX_LEADSCREWPITCH){
 80020d2:	4b5d      	ldr	r3, [pc, #372]	; (8002248 <main+0xd00>)
 80020d4:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80020d8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80020dc:	ee07 3a10 	vmov	s14, r3
 80020e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e8:	dd03      	ble.n	80020f2 <main+0xbaa>
							  parameter.leadscrew_pitch_1 = MAX_LEADSCREWPITCH;
 80020ea:	4b57      	ldr	r3, [pc, #348]	; (8002248 <main+0xd00>)
 80020ec:	4a5a      	ldr	r2, [pc, #360]	; (8002258 <main+0xd10>)
 80020ee:	f8c3 2006 	str.w	r2, [r3, #6]
						  }
						  LCD_Write_Float_Number(parameter.leadscrew_pitch_1,0,2);
 80020f2:	4b55      	ldr	r3, [pc, #340]	; (8002248 <main+0xd00>)
 80020f4:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80020f8:	2102      	movs	r1, #2
 80020fa:	2000      	movs	r0, #0
 80020fc:	ee00 3a10 	vmov	s0, r3
 8002100:	f001 f8f8 	bl	80032f4 <LCD_Write_Float_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8002104:	f001 fb4c 	bl	80037a0 <Encoder_Switch_Status_Read>
 8002108:	4603      	mov	r3, r0
 800210a:	2b01      	cmp	r3, #1
 800210c:	f040 839e 	bne.w	800284c <main+0x1304>
						configuration_status += 1;
 8002110:	4b52      	ldr	r3, [pc, #328]	; (800225c <main+0xd14>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	4b50      	ldr	r3, [pc, #320]	; (800225c <main+0xd14>)
 800211a:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 800211c:	4b46      	ldr	r3, [pc, #280]	; (8002238 <main+0xcf0>)
 800211e:	2201      	movs	r2, #1
 8002120:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8002122:	e393      	b.n	800284c <main+0x1304>
				  case 4:
					  if (lcd_update){
 8002124:	4b44      	ldr	r3, [pc, #272]	; (8002238 <main+0xcf0>)
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d028      	beq.n	800217e <main+0xc36>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 800212c:	f000 feb4 	bl	8002e98 <Encoder_Read>
 8002130:	4602      	mov	r2, r0
 8002132:	4b42      	ldr	r3, [pc, #264]	; (800223c <main+0xcf4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4413      	add	r3, r2
 8002138:	4a40      	ldr	r2, [pc, #256]	; (800223c <main+0xcf4>)
 800213a:	6013      	str	r3, [r2, #0]
						  lcdClear();
 800213c:	f7fe fea6 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 8002140:	2100      	movs	r1, #0
 8002142:	2003      	movs	r0, #3
 8002144:	f7fe fecc 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8002148:	483d      	ldr	r0, [pc, #244]	; (8002240 <main+0xcf8>)
 800214a:	f7fe fefb 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 800214e:	2101      	movs	r1, #1
 8002150:	2000      	movs	r0, #0
 8002152:	f7fe fec5 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Maximum Feedrate:");
 8002156:	4842      	ldr	r0, [pc, #264]	; (8002260 <main+0xd18>)
 8002158:	f7fe fef4 	bl	8000f44 <lcdPrint>
						  LCD_Write_Number(parameter.MAX_FEEDRATE_1, 0, 2);
 800215c:	4b3a      	ldr	r3, [pc, #232]	; (8002248 <main+0xd00>)
 800215e:	895b      	ldrh	r3, [r3, #10]
 8002160:	2202      	movs	r2, #2
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f000 fed7 	bl	8002f18 <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 800216a:	2102      	movs	r1, #2
 800216c:	200a      	movs	r0, #10
 800216e:	f7fe feb7 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(mm/min)");
 8002172:	483c      	ldr	r0, [pc, #240]	; (8002264 <main+0xd1c>)
 8002174:	f7fe fee6 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 8002178:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <main+0xcf0>)
 800217a:	2200      	movs	r2, #0
 800217c:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 800217e:	f000 fe8b 	bl	8002e98 <Encoder_Read>
 8002182:	4602      	mov	r2, r0
 8002184:	4b32      	ldr	r3, [pc, #200]	; (8002250 <main+0xd08>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4413      	add	r3, r2
 800218a:	4a31      	ldr	r2, [pc, #196]	; (8002250 <main+0xd08>)
 800218c:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 800218e:	4b30      	ldr	r3, [pc, #192]	; (8002250 <main+0xd08>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4b2a      	ldr	r3, [pc, #168]	; (800223c <main+0xcf4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d037      	beq.n	800220a <main+0xcc2>
						  parameter.MAX_FEEDRATE_1 = parameter.MAX_FEEDRATE_1 + ( 50*(current_encoder_value - old_encoder_value) );
 800219a:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <main+0xd00>)
 800219c:	895a      	ldrh	r2, [r3, #10]
 800219e:	4b2c      	ldr	r3, [pc, #176]	; (8002250 <main+0xd08>)
 80021a0:	6819      	ldr	r1, [r3, #0]
 80021a2:	4b26      	ldr	r3, [pc, #152]	; (800223c <main+0xcf4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	1acb      	subs	r3, r1, r3
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	4619      	mov	r1, r3
 80021ac:	0089      	lsls	r1, r1, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	4619      	mov	r1, r3
 80021b2:	0088      	lsls	r0, r1, #2
 80021b4:	4619      	mov	r1, r3
 80021b6:	4603      	mov	r3, r0
 80021b8:	440b      	add	r3, r1
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	b29b      	uxth	r3, r3
 80021be:	4413      	add	r3, r2
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	4b21      	ldr	r3, [pc, #132]	; (8002248 <main+0xd00>)
 80021c4:	815a      	strh	r2, [r3, #10]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 80021c6:	4b22      	ldr	r3, [pc, #136]	; (8002250 <main+0xd08>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1c      	ldr	r2, [pc, #112]	; (800223c <main+0xcf4>)
 80021cc:	6013      	str	r3, [r2, #0]
						  if ( parameter.MAX_FEEDRATE_1 < 100 || ( parameter.MAX_FEEDRATE_1 >= (MAX_LIMIT_FEEDRATE + 20000) ) ){
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <main+0xd00>)
 80021d0:	895b      	ldrh	r3, [r3, #10]
 80021d2:	2b63      	cmp	r3, #99	; 0x63
 80021d4:	d905      	bls.n	80021e2 <main+0xc9a>
 80021d6:	4b1c      	ldr	r3, [pc, #112]	; (8002248 <main+0xd00>)
 80021d8:	895b      	ldrh	r3, [r3, #10]
 80021da:	f245 02db 	movw	r2, #20699	; 0x50db
 80021de:	4293      	cmp	r3, r2
 80021e0:	d903      	bls.n	80021ea <main+0xca2>
							  parameter.MAX_FEEDRATE_1 = 100;
 80021e2:	4b19      	ldr	r3, [pc, #100]	; (8002248 <main+0xd00>)
 80021e4:	2264      	movs	r2, #100	; 0x64
 80021e6:	815a      	strh	r2, [r3, #10]
 80021e8:	e008      	b.n	80021fc <main+0xcb4>
						  }else if ( parameter.MAX_FEEDRATE_1 > MAX_LIMIT_FEEDRATE){
 80021ea:	4b17      	ldr	r3, [pc, #92]	; (8002248 <main+0xd00>)
 80021ec:	895b      	ldrh	r3, [r3, #10]
 80021ee:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80021f2:	d903      	bls.n	80021fc <main+0xcb4>
							  parameter.MAX_FEEDRATE_1 = MAX_LIMIT_FEEDRATE;
 80021f4:	4b14      	ldr	r3, [pc, #80]	; (8002248 <main+0xd00>)
 80021f6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80021fa:	815a      	strh	r2, [r3, #10]
						  }
						  LCD_Write_Number(parameter.MAX_FEEDRATE_1, 0, 2);
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <main+0xd00>)
 80021fe:	895b      	ldrh	r3, [r3, #10]
 8002200:	2202      	movs	r2, #2
 8002202:	2100      	movs	r1, #0
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fe87 	bl	8002f18 <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 800220a:	f001 fac9 	bl	80037a0 <Encoder_Switch_Status_Read>
 800220e:	4603      	mov	r3, r0
 8002210:	2b01      	cmp	r3, #1
 8002212:	f040 831e 	bne.w	8002852 <main+0x130a>
						configuration_status += 1;
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <main+0xd14>)
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	3301      	adds	r3, #1
 800221c:	b29a      	uxth	r2, r3
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <main+0xd14>)
 8002220:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <main+0xcf0>)
 8002224:	2201      	movs	r2, #1
 8002226:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8002228:	e313      	b.n	8002852 <main+0x130a>
 800222a:	bf00      	nop
 800222c:	f3af 8000 	nop.w
 8002230:	47ae147b 	.word	0x47ae147b
 8002234:	3f847ae1 	.word	0x3f847ae1
 8002238:	200006c8 	.word	0x200006c8
 800223c:	20000004 	.word	0x20000004
 8002240:	0800790c 	.word	0x0800790c
 8002244:	0800799c 	.word	0x0800799c
 8002248:	2000067c 	.word	0x2000067c
 800224c:	080079b0 	.word	0x080079b0
 8002250:	20000000 	.word	0x20000000
 8002254:	3c23d70a 	.word	0x3c23d70a
 8002258:	41200000 	.word	0x41200000
 800225c:	20000674 	.word	0x20000674
 8002260:	080079bc 	.word	0x080079bc
 8002264:	080079d0 	.word	0x080079d0
				  case 5:
					  if (lcd_update){
 8002268:	4b82      	ldr	r3, [pc, #520]	; (8002474 <main+0xf2c>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d028      	beq.n	80022c2 <main+0xd7a>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8002270:	f000 fe12 	bl	8002e98 <Encoder_Read>
 8002274:	4602      	mov	r2, r0
 8002276:	4b80      	ldr	r3, [pc, #512]	; (8002478 <main+0xf30>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4413      	add	r3, r2
 800227c:	4a7e      	ldr	r2, [pc, #504]	; (8002478 <main+0xf30>)
 800227e:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8002280:	f7fe fe04 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 8002284:	2100      	movs	r1, #0
 8002286:	2003      	movs	r0, #3
 8002288:	f7fe fe2a 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 800228c:	487b      	ldr	r0, [pc, #492]	; (800247c <main+0xf34>)
 800228e:	f7fe fe59 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 8002292:	2101      	movs	r1, #1
 8002294:	2000      	movs	r0, #0
 8002296:	f7fe fe23 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Fast Mov Feedrate:");
 800229a:	4879      	ldr	r0, [pc, #484]	; (8002480 <main+0xf38>)
 800229c:	f7fe fe52 	bl	8000f44 <lcdPrint>
						  LCD_Write_Number(parameter.FAST_MOVEMENT_FEEDRATE_1, 0, 2);
 80022a0:	4b78      	ldr	r3, [pc, #480]	; (8002484 <main+0xf3c>)
 80022a2:	899b      	ldrh	r3, [r3, #12]
 80022a4:	2202      	movs	r2, #2
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fe35 	bl	8002f18 <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 80022ae:	2102      	movs	r1, #2
 80022b0:	200a      	movs	r0, #10
 80022b2:	f7fe fe15 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(mm/min)");
 80022b6:	4874      	ldr	r0, [pc, #464]	; (8002488 <main+0xf40>)
 80022b8:	f7fe fe44 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 80022bc:	4b6d      	ldr	r3, [pc, #436]	; (8002474 <main+0xf2c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 80022c2:	f000 fde9 	bl	8002e98 <Encoder_Read>
 80022c6:	4602      	mov	r2, r0
 80022c8:	4b70      	ldr	r3, [pc, #448]	; (800248c <main+0xf44>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	4a6f      	ldr	r2, [pc, #444]	; (800248c <main+0xf44>)
 80022d0:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 80022d2:	4b6e      	ldr	r3, [pc, #440]	; (800248c <main+0xf44>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	4b68      	ldr	r3, [pc, #416]	; (8002478 <main+0xf30>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d037      	beq.n	800234e <main+0xe06>
						  parameter.FAST_MOVEMENT_FEEDRATE_1 = parameter.FAST_MOVEMENT_FEEDRATE_1 + ( 50*(current_encoder_value - old_encoder_value) );
 80022de:	4b69      	ldr	r3, [pc, #420]	; (8002484 <main+0xf3c>)
 80022e0:	899a      	ldrh	r2, [r3, #12]
 80022e2:	4b6a      	ldr	r3, [pc, #424]	; (800248c <main+0xf44>)
 80022e4:	6819      	ldr	r1, [r3, #0]
 80022e6:	4b64      	ldr	r3, [pc, #400]	; (8002478 <main+0xf30>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	1acb      	subs	r3, r1, r3
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	4619      	mov	r1, r3
 80022f0:	0089      	lsls	r1, r1, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	4619      	mov	r1, r3
 80022f6:	0088      	lsls	r0, r1, #2
 80022f8:	4619      	mov	r1, r3
 80022fa:	4603      	mov	r3, r0
 80022fc:	440b      	add	r3, r1
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	b29b      	uxth	r3, r3
 8002302:	4413      	add	r3, r2
 8002304:	b29a      	uxth	r2, r3
 8002306:	4b5f      	ldr	r3, [pc, #380]	; (8002484 <main+0xf3c>)
 8002308:	819a      	strh	r2, [r3, #12]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 800230a:	4b60      	ldr	r3, [pc, #384]	; (800248c <main+0xf44>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a5a      	ldr	r2, [pc, #360]	; (8002478 <main+0xf30>)
 8002310:	6013      	str	r3, [r2, #0]
						  if ( parameter.FAST_MOVEMENT_FEEDRATE_1 < 50 || ( parameter.FAST_MOVEMENT_FEEDRATE_1 >= (MAX_FAST_MOVEMENT_FEEDRATE + 20000) )){
 8002312:	4b5c      	ldr	r3, [pc, #368]	; (8002484 <main+0xf3c>)
 8002314:	899b      	ldrh	r3, [r3, #12]
 8002316:	2b31      	cmp	r3, #49	; 0x31
 8002318:	d905      	bls.n	8002326 <main+0xdde>
 800231a:	4b5a      	ldr	r3, [pc, #360]	; (8002484 <main+0xf3c>)
 800231c:	899b      	ldrh	r3, [r3, #12]
 800231e:	f245 02db 	movw	r2, #20699	; 0x50db
 8002322:	4293      	cmp	r3, r2
 8002324:	d903      	bls.n	800232e <main+0xde6>
							  parameter.FAST_MOVEMENT_FEEDRATE_1 = 50;
 8002326:	4b57      	ldr	r3, [pc, #348]	; (8002484 <main+0xf3c>)
 8002328:	2232      	movs	r2, #50	; 0x32
 800232a:	819a      	strh	r2, [r3, #12]
 800232c:	e008      	b.n	8002340 <main+0xdf8>
						  }else if ( parameter.FAST_MOVEMENT_FEEDRATE_1 > MAX_FAST_MOVEMENT_FEEDRATE){
 800232e:	4b55      	ldr	r3, [pc, #340]	; (8002484 <main+0xf3c>)
 8002330:	899b      	ldrh	r3, [r3, #12]
 8002332:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002336:	d903      	bls.n	8002340 <main+0xdf8>
							  parameter.FAST_MOVEMENT_FEEDRATE_1 = MAX_FAST_MOVEMENT_FEEDRATE;
 8002338:	4b52      	ldr	r3, [pc, #328]	; (8002484 <main+0xf3c>)
 800233a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800233e:	819a      	strh	r2, [r3, #12]
						  }
						  LCD_Write_Number(parameter.FAST_MOVEMENT_FEEDRATE_1, 0, 2);
 8002340:	4b50      	ldr	r3, [pc, #320]	; (8002484 <main+0xf3c>)
 8002342:	899b      	ldrh	r3, [r3, #12]
 8002344:	2202      	movs	r2, #2
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fde5 	bl	8002f18 <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 800234e:	f001 fa27 	bl	80037a0 <Encoder_Switch_Status_Read>
 8002352:	4603      	mov	r3, r0
 8002354:	2b01      	cmp	r3, #1
 8002356:	f040 827f 	bne.w	8002858 <main+0x1310>
						configuration_status += 1;
 800235a:	4b4d      	ldr	r3, [pc, #308]	; (8002490 <main+0xf48>)
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	3301      	adds	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	4b4b      	ldr	r3, [pc, #300]	; (8002490 <main+0xf48>)
 8002364:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8002366:	4b43      	ldr	r3, [pc, #268]	; (8002474 <main+0xf2c>)
 8002368:	2201      	movs	r2, #1
 800236a:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 800236c:	e274      	b.n	8002858 <main+0x1310>
				  case 6:
					  if (lcd_update){
 800236e:	4b41      	ldr	r3, [pc, #260]	; (8002474 <main+0xf2c>)
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d028      	beq.n	80023c8 <main+0xe80>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8002376:	f000 fd8f 	bl	8002e98 <Encoder_Read>
 800237a:	4602      	mov	r2, r0
 800237c:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <main+0xf30>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4413      	add	r3, r2
 8002382:	4a3d      	ldr	r2, [pc, #244]	; (8002478 <main+0xf30>)
 8002384:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8002386:	f7fe fd81 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 800238a:	2100      	movs	r1, #0
 800238c:	2003      	movs	r0, #3
 800238e:	f7fe fda7 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8002392:	483a      	ldr	r0, [pc, #232]	; (800247c <main+0xf34>)
 8002394:	f7fe fdd6 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 8002398:	2101      	movs	r1, #1
 800239a:	2000      	movs	r0, #0
 800239c:	f7fe fda0 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Initial Feedrate:");
 80023a0:	483c      	ldr	r0, [pc, #240]	; (8002494 <main+0xf4c>)
 80023a2:	f7fe fdcf 	bl	8000f44 <lcdPrint>
						  LCD_Write_Number(parameter.initial_feedrate_1, 0, 2);
 80023a6:	4b37      	ldr	r3, [pc, #220]	; (8002484 <main+0xf3c>)
 80023a8:	8a5b      	ldrh	r3, [r3, #18]
 80023aa:	2202      	movs	r2, #2
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fdb2 	bl	8002f18 <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 80023b4:	2102      	movs	r1, #2
 80023b6:	200a      	movs	r0, #10
 80023b8:	f7fe fd92 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(mm/min)");
 80023bc:	4832      	ldr	r0, [pc, #200]	; (8002488 <main+0xf40>)
 80023be:	f7fe fdc1 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 80023c2:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <main+0xf2c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 80023c8:	f000 fd66 	bl	8002e98 <Encoder_Read>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b2f      	ldr	r3, [pc, #188]	; (800248c <main+0xf44>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	4a2d      	ldr	r2, [pc, #180]	; (800248c <main+0xf44>)
 80023d6:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 80023d8:	4b2c      	ldr	r3, [pc, #176]	; (800248c <main+0xf44>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b26      	ldr	r3, [pc, #152]	; (8002478 <main+0xf30>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d036      	beq.n	8002452 <main+0xf0a>
						  parameter.initial_feedrate_1 = parameter.initial_feedrate_1 + ( 10*(current_encoder_value - old_encoder_value) );
 80023e4:	4b27      	ldr	r3, [pc, #156]	; (8002484 <main+0xf3c>)
 80023e6:	8a5a      	ldrh	r2, [r3, #18]
 80023e8:	4b28      	ldr	r3, [pc, #160]	; (800248c <main+0xf44>)
 80023ea:	6819      	ldr	r1, [r3, #0]
 80023ec:	4b22      	ldr	r3, [pc, #136]	; (8002478 <main+0xf30>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	1acb      	subs	r3, r1, r3
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4619      	mov	r1, r3
 80023f6:	0089      	lsls	r1, r1, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	4413      	add	r3, r2
 8002400:	b29a      	uxth	r2, r3
 8002402:	4b20      	ldr	r3, [pc, #128]	; (8002484 <main+0xf3c>)
 8002404:	825a      	strh	r2, [r3, #18]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8002406:	4b21      	ldr	r3, [pc, #132]	; (800248c <main+0xf44>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a1b      	ldr	r2, [pc, #108]	; (8002478 <main+0xf30>)
 800240c:	6013      	str	r3, [r2, #0]
						  if ( parameter.initial_feedrate_1 < 50 || ( parameter.initial_feedrate_1 >= (parameter.MAX_FEEDRATE_1 + 20000) )){
 800240e:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <main+0xf3c>)
 8002410:	8a5b      	ldrh	r3, [r3, #18]
 8002412:	2b31      	cmp	r3, #49	; 0x31
 8002414:	d908      	bls.n	8002428 <main+0xee0>
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <main+0xf3c>)
 8002418:	895b      	ldrh	r3, [r3, #10]
 800241a:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800241e:	331f      	adds	r3, #31
 8002420:	4a18      	ldr	r2, [pc, #96]	; (8002484 <main+0xf3c>)
 8002422:	8a52      	ldrh	r2, [r2, #18]
 8002424:	4293      	cmp	r3, r2
 8002426:	da03      	bge.n	8002430 <main+0xee8>
							  parameter.initial_feedrate_1 = 50;
 8002428:	4b16      	ldr	r3, [pc, #88]	; (8002484 <main+0xf3c>)
 800242a:	2232      	movs	r2, #50	; 0x32
 800242c:	825a      	strh	r2, [r3, #18]
 800242e:	e009      	b.n	8002444 <main+0xefc>
						  }else if ( parameter.initial_feedrate_1 > parameter.MAX_FEEDRATE_1){
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <main+0xf3c>)
 8002432:	8a5a      	ldrh	r2, [r3, #18]
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <main+0xf3c>)
 8002436:	895b      	ldrh	r3, [r3, #10]
 8002438:	429a      	cmp	r2, r3
 800243a:	d903      	bls.n	8002444 <main+0xefc>
							  parameter.initial_feedrate_1 = parameter.MAX_FEEDRATE_1;
 800243c:	4b11      	ldr	r3, [pc, #68]	; (8002484 <main+0xf3c>)
 800243e:	895a      	ldrh	r2, [r3, #10]
 8002440:	4b10      	ldr	r3, [pc, #64]	; (8002484 <main+0xf3c>)
 8002442:	825a      	strh	r2, [r3, #18]
						  }
						  LCD_Write_Number(parameter.initial_feedrate_1, 0, 2);
 8002444:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <main+0xf3c>)
 8002446:	8a5b      	ldrh	r3, [r3, #18]
 8002448:	2202      	movs	r2, #2
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f000 fd63 	bl	8002f18 <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8002452:	f001 f9a5 	bl	80037a0 <Encoder_Switch_Status_Read>
 8002456:	4603      	mov	r3, r0
 8002458:	2b01      	cmp	r3, #1
 800245a:	f040 8200 	bne.w	800285e <main+0x1316>
						configuration_status += 1;
 800245e:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <main+0xf48>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	3301      	adds	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <main+0xf48>)
 8002468:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 800246a:	4b02      	ldr	r3, [pc, #8]	; (8002474 <main+0xf2c>)
 800246c:	2201      	movs	r2, #1
 800246e:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8002470:	e1f5      	b.n	800285e <main+0x1316>
 8002472:	bf00      	nop
 8002474:	200006c8 	.word	0x200006c8
 8002478:	20000004 	.word	0x20000004
 800247c:	0800790c 	.word	0x0800790c
 8002480:	080079dc 	.word	0x080079dc
 8002484:	2000067c 	.word	0x2000067c
 8002488:	080079d0 	.word	0x080079d0
 800248c:	20000000 	.word	0x20000000
 8002490:	20000674 	.word	0x20000674
 8002494:	080079f0 	.word	0x080079f0
				  case 7:
					  if (lcd_update){
 8002498:	4b95      	ldr	r3, [pc, #596]	; (80026f0 <main+0x11a8>)
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d028      	beq.n	80024f2 <main+0xfaa>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 80024a0:	f000 fcfa 	bl	8002e98 <Encoder_Read>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b93      	ldr	r3, [pc, #588]	; (80026f4 <main+0x11ac>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4413      	add	r3, r2
 80024ac:	4a91      	ldr	r2, [pc, #580]	; (80026f4 <main+0x11ac>)
 80024ae:	6013      	str	r3, [r2, #0]
						  lcdClear();
 80024b0:	f7fe fcec 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 80024b4:	2100      	movs	r1, #0
 80024b6:	2003      	movs	r0, #3
 80024b8:	f7fe fd12 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 80024bc:	488e      	ldr	r0, [pc, #568]	; (80026f8 <main+0x11b0>)
 80024be:	f7fe fd41 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 80024c2:	2101      	movs	r1, #1
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7fe fd0b 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Acc Time:");
 80024ca:	488c      	ldr	r0, [pc, #560]	; (80026fc <main+0x11b4>)
 80024cc:	f7fe fd3a 	bl	8000f44 <lcdPrint>
						  LCD_Write_Number(parameter.ACC_TIME_1, 0, 2);
 80024d0:	4b8b      	ldr	r3, [pc, #556]	; (8002700 <main+0x11b8>)
 80024d2:	89db      	ldrh	r3, [r3, #14]
 80024d4:	2202      	movs	r2, #2
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 fd1d 	bl	8002f18 <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 80024de:	2102      	movs	r1, #2
 80024e0:	200a      	movs	r0, #10
 80024e2:	f7fe fcfd 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(ms)");
 80024e6:	4887      	ldr	r0, [pc, #540]	; (8002704 <main+0x11bc>)
 80024e8:	f7fe fd2c 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 80024ec:	4b80      	ldr	r3, [pc, #512]	; (80026f0 <main+0x11a8>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 80024f2:	f000 fcd1 	bl	8002e98 <Encoder_Read>
 80024f6:	4602      	mov	r2, r0
 80024f8:	4b83      	ldr	r3, [pc, #524]	; (8002708 <main+0x11c0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4413      	add	r3, r2
 80024fe:	4a82      	ldr	r2, [pc, #520]	; (8002708 <main+0x11c0>)
 8002500:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8002502:	4b81      	ldr	r3, [pc, #516]	; (8002708 <main+0x11c0>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4b7b      	ldr	r3, [pc, #492]	; (80026f4 <main+0x11ac>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d03a      	beq.n	8002584 <main+0x103c>
						  parameter.ACC_TIME_1 = parameter.ACC_TIME_1 + ( 100*(current_encoder_value - old_encoder_value) );
 800250e:	4b7c      	ldr	r3, [pc, #496]	; (8002700 <main+0x11b8>)
 8002510:	89da      	ldrh	r2, [r3, #14]
 8002512:	4b7d      	ldr	r3, [pc, #500]	; (8002708 <main+0x11c0>)
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	4b77      	ldr	r3, [pc, #476]	; (80026f4 <main+0x11ac>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	1acb      	subs	r3, r1, r3
 800251c:	b29b      	uxth	r3, r3
 800251e:	4619      	mov	r1, r3
 8002520:	0089      	lsls	r1, r1, #2
 8002522:	440b      	add	r3, r1
 8002524:	4619      	mov	r1, r3
 8002526:	0088      	lsls	r0, r1, #2
 8002528:	4619      	mov	r1, r3
 800252a:	4603      	mov	r3, r0
 800252c:	440b      	add	r3, r1
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	b29b      	uxth	r3, r3
 8002532:	4413      	add	r3, r2
 8002534:	b29a      	uxth	r2, r3
 8002536:	4b72      	ldr	r3, [pc, #456]	; (8002700 <main+0x11b8>)
 8002538:	81da      	strh	r2, [r3, #14]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 800253a:	4b73      	ldr	r3, [pc, #460]	; (8002708 <main+0x11c0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a6d      	ldr	r2, [pc, #436]	; (80026f4 <main+0x11ac>)
 8002540:	6013      	str	r3, [r2, #0]
						  if ( ( parameter.ACC_TIME_1 < MIN_ACCELERATION_TIME ) || ( parameter.ACC_TIME_1 >= (MAX_ACCELERATION_TIME + 20000) )){
 8002542:	4b6f      	ldr	r3, [pc, #444]	; (8002700 <main+0x11b8>)
 8002544:	89db      	ldrh	r3, [r3, #14]
 8002546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800254a:	d305      	bcc.n	8002558 <main+0x1010>
 800254c:	4b6c      	ldr	r3, [pc, #432]	; (8002700 <main+0x11b8>)
 800254e:	89db      	ldrh	r3, [r3, #14]
 8002550:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8002554:	4293      	cmp	r3, r2
 8002556:	d904      	bls.n	8002562 <main+0x101a>
							  parameter.ACC_TIME_1 = MIN_ACCELERATION_TIME;
 8002558:	4b69      	ldr	r3, [pc, #420]	; (8002700 <main+0x11b8>)
 800255a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800255e:	81da      	strh	r2, [r3, #14]
 8002560:	e009      	b.n	8002576 <main+0x102e>
						  }else if ( parameter.ACC_TIME_1 > MAX_ACCELERATION_TIME){
 8002562:	4b67      	ldr	r3, [pc, #412]	; (8002700 <main+0x11b8>)
 8002564:	89db      	ldrh	r3, [r3, #14]
 8002566:	f241 3288 	movw	r2, #5000	; 0x1388
 800256a:	4293      	cmp	r3, r2
 800256c:	d903      	bls.n	8002576 <main+0x102e>
							  parameter.ACC_TIME_1 = MAX_ACCELERATION_TIME;
 800256e:	4b64      	ldr	r3, [pc, #400]	; (8002700 <main+0x11b8>)
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	81da      	strh	r2, [r3, #14]
						  }
						  LCD_Write_Number(parameter.ACC_TIME_1, 0, 2);
 8002576:	4b62      	ldr	r3, [pc, #392]	; (8002700 <main+0x11b8>)
 8002578:	89db      	ldrh	r3, [r3, #14]
 800257a:	2202      	movs	r2, #2
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fcca 	bl	8002f18 <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8002584:	f001 f90c 	bl	80037a0 <Encoder_Switch_Status_Read>
 8002588:	4603      	mov	r3, r0
 800258a:	2b01      	cmp	r3, #1
 800258c:	f040 816a 	bne.w	8002864 <main+0x131c>
						configuration_status += 1;
 8002590:	4b5e      	ldr	r3, [pc, #376]	; (800270c <main+0x11c4>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	3301      	adds	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	4b5c      	ldr	r3, [pc, #368]	; (800270c <main+0x11c4>)
 800259a:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 800259c:	4b54      	ldr	r3, [pc, #336]	; (80026f0 <main+0x11a8>)
 800259e:	2201      	movs	r2, #1
 80025a0:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 80025a2:	e15f      	b.n	8002864 <main+0x131c>
				  case 8:
					  if (lcd_update){
 80025a4:	4b52      	ldr	r3, [pc, #328]	; (80026f0 <main+0x11a8>)
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d028      	beq.n	80025fe <main+0x10b6>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 80025ac:	f000 fc74 	bl	8002e98 <Encoder_Read>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <main+0x11ac>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	4a4e      	ldr	r2, [pc, #312]	; (80026f4 <main+0x11ac>)
 80025ba:	6013      	str	r3, [r2, #0]
						  lcdClear();
 80025bc:	f7fe fc66 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 80025c0:	2100      	movs	r1, #0
 80025c2:	2003      	movs	r0, #3
 80025c4:	f7fe fc8c 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 80025c8:	484b      	ldr	r0, [pc, #300]	; (80026f8 <main+0x11b0>)
 80025ca:	f7fe fcbb 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 80025ce:	2101      	movs	r1, #1
 80025d0:	2000      	movs	r0, #0
 80025d2:	f7fe fc85 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Acc Update Ratio:");
 80025d6:	484e      	ldr	r0, [pc, #312]	; (8002710 <main+0x11c8>)
 80025d8:	f7fe fcb4 	bl	8000f44 <lcdPrint>
						  LCD_Write_Number(parameter.ACC_UPDATE_RATIO_1, 0, 2);
 80025dc:	4b48      	ldr	r3, [pc, #288]	; (8002700 <main+0x11b8>)
 80025de:	8a1b      	ldrh	r3, [r3, #16]
 80025e0:	2202      	movs	r2, #2
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 fc97 	bl	8002f18 <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 80025ea:	2102      	movs	r1, #2
 80025ec:	200a      	movs	r0, #10
 80025ee:	f7fe fc77 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("(ms)");
 80025f2:	4844      	ldr	r0, [pc, #272]	; (8002704 <main+0x11bc>)
 80025f4:	f7fe fca6 	bl	8000f44 <lcdPrint>
						  lcd_update = FALSE;
 80025f8:	4b3d      	ldr	r3, [pc, #244]	; (80026f0 <main+0x11a8>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 80025fe:	f000 fc4b 	bl	8002e98 <Encoder_Read>
 8002602:	4602      	mov	r2, r0
 8002604:	4b40      	ldr	r3, [pc, #256]	; (8002708 <main+0x11c0>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4413      	add	r3, r2
 800260a:	4a3f      	ldr	r2, [pc, #252]	; (8002708 <main+0x11c0>)
 800260c:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 800260e:	4b3e      	ldr	r3, [pc, #248]	; (8002708 <main+0x11c0>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	4b38      	ldr	r3, [pc, #224]	; (80026f4 <main+0x11ac>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d032      	beq.n	8002680 <main+0x1138>
						  parameter.ACC_UPDATE_RATIO_1 = parameter.ACC_UPDATE_RATIO_1 + ( 10*(current_encoder_value - old_encoder_value) );
 800261a:	4b39      	ldr	r3, [pc, #228]	; (8002700 <main+0x11b8>)
 800261c:	8a1a      	ldrh	r2, [r3, #16]
 800261e:	4b3a      	ldr	r3, [pc, #232]	; (8002708 <main+0x11c0>)
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	4b34      	ldr	r3, [pc, #208]	; (80026f4 <main+0x11ac>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	1acb      	subs	r3, r1, r3
 8002628:	b29b      	uxth	r3, r3
 800262a:	4619      	mov	r1, r3
 800262c:	0089      	lsls	r1, r1, #2
 800262e:	440b      	add	r3, r1
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	b29b      	uxth	r3, r3
 8002634:	4413      	add	r3, r2
 8002636:	b29a      	uxth	r2, r3
 8002638:	4b31      	ldr	r3, [pc, #196]	; (8002700 <main+0x11b8>)
 800263a:	821a      	strh	r2, [r3, #16]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 800263c:	4b32      	ldr	r3, [pc, #200]	; (8002708 <main+0x11c0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a2c      	ldr	r2, [pc, #176]	; (80026f4 <main+0x11ac>)
 8002642:	6013      	str	r3, [r2, #0]
						  if ( ( parameter.ACC_UPDATE_RATIO_1 < MIN_ACC_UPDATE_RATIO ) || ( parameter.ACC_UPDATE_RATIO_1 >= (MAX_ACC_UPDATE_RATIO + 20000) )){
 8002644:	4b2e      	ldr	r3, [pc, #184]	; (8002700 <main+0x11b8>)
 8002646:	8a1b      	ldrh	r3, [r3, #16]
 8002648:	2b13      	cmp	r3, #19
 800264a:	d905      	bls.n	8002658 <main+0x1110>
 800264c:	4b2c      	ldr	r3, [pc, #176]	; (8002700 <main+0x11b8>)
 800264e:	8a1b      	ldrh	r3, [r3, #16]
 8002650:	f644 724b 	movw	r2, #20299	; 0x4f4b
 8002654:	4293      	cmp	r3, r2
 8002656:	d903      	bls.n	8002660 <main+0x1118>
							  parameter.ACC_UPDATE_RATIO_1 = MIN_ACC_UPDATE_RATIO;
 8002658:	4b29      	ldr	r3, [pc, #164]	; (8002700 <main+0x11b8>)
 800265a:	2214      	movs	r2, #20
 800265c:	821a      	strh	r2, [r3, #16]
 800265e:	e008      	b.n	8002672 <main+0x112a>
						  }else if ( parameter.ACC_UPDATE_RATIO_1 > MAX_ACC_UPDATE_RATIO){
 8002660:	4b27      	ldr	r3, [pc, #156]	; (8002700 <main+0x11b8>)
 8002662:	8a1b      	ldrh	r3, [r3, #16]
 8002664:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002668:	d903      	bls.n	8002672 <main+0x112a>
							  parameter.ACC_UPDATE_RATIO_1 = MAX_ACC_UPDATE_RATIO;
 800266a:	4b25      	ldr	r3, [pc, #148]	; (8002700 <main+0x11b8>)
 800266c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002670:	821a      	strh	r2, [r3, #16]
						  }
						  LCD_Write_Number(parameter.ACC_UPDATE_RATIO_1, 0, 2);
 8002672:	4b23      	ldr	r3, [pc, #140]	; (8002700 <main+0x11b8>)
 8002674:	8a1b      	ldrh	r3, [r3, #16]
 8002676:	2202      	movs	r2, #2
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fc4c 	bl	8002f18 <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8002680:	f001 f88e 	bl	80037a0 <Encoder_Switch_Status_Read>
 8002684:	4603      	mov	r3, r0
 8002686:	2b01      	cmp	r3, #1
 8002688:	f040 80ef 	bne.w	800286a <main+0x1322>
						configuration_status += 1;
 800268c:	4b1f      	ldr	r3, [pc, #124]	; (800270c <main+0x11c4>)
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	3301      	adds	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <main+0x11c4>)
 8002696:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8002698:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <main+0x11a8>)
 800269a:	2201      	movs	r2, #1
 800269c:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 800269e:	e0e4      	b.n	800286a <main+0x1322>
				  case 9:
					  if (lcd_update){
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <main+0x11a8>)
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d045      	beq.n	8002734 <main+0x11ec>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 80026a8:	f000 fbf6 	bl	8002e98 <Encoder_Read>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <main+0x11ac>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <main+0x11ac>)
 80026b6:	6013      	str	r3, [r2, #0]
						  lcdClear();
 80026b8:	f7fe fbe8 	bl	8000e8c <lcdClear>
						  lcdSetCursor(3, 0);
 80026bc:	2100      	movs	r1, #0
 80026be:	2003      	movs	r0, #3
 80026c0:	f7fe fc0e 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 80026c4:	480c      	ldr	r0, [pc, #48]	; (80026f8 <main+0x11b0>)
 80026c6:	f7fe fc3d 	bl	8000f44 <lcdPrint>
						  lcdSetCursor(0, 1);
 80026ca:	2101      	movs	r1, #1
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7fe fc07 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("Save Configuration");
 80026d2:	4810      	ldr	r0, [pc, #64]	; (8002714 <main+0x11cc>)
 80026d4:	f7fe fc36 	bl	8000f44 <lcdPrint>
						  if ( save_bool == FALSE){		//If parameter is FALSE Print not inverted
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <main+0x11d0>)
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d11f      	bne.n	8002720 <main+0x11d8>
							lcdSetCursor(0, 2);
 80026e0:	2102      	movs	r1, #2
 80026e2:	2000      	movs	r0, #0
 80026e4:	f7fe fbfc 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("EXIT WITHOUT SAVE");
 80026e8:	480c      	ldr	r0, [pc, #48]	; (800271c <main+0x11d4>)
 80026ea:	f7fe fc2b 	bl	8000f44 <lcdPrint>
 80026ee:	e01e      	b.n	800272e <main+0x11e6>
 80026f0:	200006c8 	.word	0x200006c8
 80026f4:	20000004 	.word	0x20000004
 80026f8:	0800790c 	.word	0x0800790c
 80026fc:	08007a04 	.word	0x08007a04
 8002700:	2000067c 	.word	0x2000067c
 8002704:	08007a10 	.word	0x08007a10
 8002708:	20000000 	.word	0x20000000
 800270c:	20000674 	.word	0x20000674
 8002710:	08007a18 	.word	0x08007a18
 8002714:	08007a2c 	.word	0x08007a2c
 8002718:	200006c4 	.word	0x200006c4
 800271c:	08007a40 	.word	0x08007a40
						  }else{									//If parameter is TRUE Print inverted
							lcdSetCursor(0, 2);
 8002720:	2102      	movs	r1, #2
 8002722:	2000      	movs	r0, #0
 8002724:	f7fe fbdc 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("SAVE PARAMETERS  ");
 8002728:	4853      	ldr	r0, [pc, #332]	; (8002878 <main+0x1330>)
 800272a:	f7fe fc0b 	bl	8000f44 <lcdPrint>
						  }
						  lcd_update = FALSE;
 800272e:	4b53      	ldr	r3, [pc, #332]	; (800287c <main+0x1334>)
 8002730:	2200      	movs	r2, #0
 8002732:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8002734:	f000 fbb0 	bl	8002e98 <Encoder_Read>
 8002738:	4602      	mov	r2, r0
 800273a:	4b51      	ldr	r3, [pc, #324]	; (8002880 <main+0x1338>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4413      	add	r3, r2
 8002740:	4a4f      	ldr	r2, [pc, #316]	; (8002880 <main+0x1338>)
 8002742:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8002744:	4b4e      	ldr	r3, [pc, #312]	; (8002880 <main+0x1338>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b4e      	ldr	r3, [pc, #312]	; (8002884 <main+0x133c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d01c      	beq.n	800278a <main+0x1242>
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8002750:	4b4b      	ldr	r3, [pc, #300]	; (8002880 <main+0x1338>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a4b      	ldr	r2, [pc, #300]	; (8002884 <main+0x133c>)
 8002756:	6013      	str	r3, [r2, #0]
						  if (save_bool){					//Change the value
 8002758:	4b4b      	ldr	r3, [pc, #300]	; (8002888 <main+0x1340>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00a      	beq.n	8002776 <main+0x122e>
							lcdSetCursor(0, 2);
 8002760:	2102      	movs	r1, #2
 8002762:	2000      	movs	r0, #0
 8002764:	f7fe fbbc 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("EXIT WITHOUT SAVE");
 8002768:	4848      	ldr	r0, [pc, #288]	; (800288c <main+0x1344>)
 800276a:	f7fe fbeb 	bl	8000f44 <lcdPrint>
							save_bool = FALSE;
 800276e:	4b46      	ldr	r3, [pc, #280]	; (8002888 <main+0x1340>)
 8002770:	2200      	movs	r2, #0
 8002772:	801a      	strh	r2, [r3, #0]
 8002774:	e009      	b.n	800278a <main+0x1242>
						  }else{
							lcdSetCursor(0, 2);
 8002776:	2102      	movs	r1, #2
 8002778:	2000      	movs	r0, #0
 800277a:	f7fe fbb1 	bl	8000ee0 <lcdSetCursor>
							lcdPrint("SAVE PARAMETERS  ");
 800277e:	483e      	ldr	r0, [pc, #248]	; (8002878 <main+0x1330>)
 8002780:	f7fe fbe0 	bl	8000f44 <lcdPrint>
							save_bool = TRUE;
 8002784:	4b40      	ldr	r3, [pc, #256]	; (8002888 <main+0x1340>)
 8002786:	2201      	movs	r2, #1
 8002788:	801a      	strh	r2, [r3, #0]
						  }
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 800278a:	f001 f809 	bl	80037a0 <Encoder_Switch_Status_Read>
 800278e:	4603      	mov	r3, r0
 8002790:	2b01      	cmp	r3, #1
 8002792:	d16d      	bne.n	8002870 <main+0x1328>
						configuration_status += 1;
 8002794:	4b3e      	ldr	r3, [pc, #248]	; (8002890 <main+0x1348>)
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	3301      	adds	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	4b3c      	ldr	r3, [pc, #240]	; (8002890 <main+0x1348>)
 800279e:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 80027a0:	4b36      	ldr	r3, [pc, #216]	; (800287c <main+0x1334>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 80027a6:	e063      	b.n	8002870 <main+0x1328>
				  case 10:
					  if (save_bool == TRUE){
 80027a8:	4b37      	ldr	r3, [pc, #220]	; (8002888 <main+0x1340>)
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d12a      	bne.n	8002806 <main+0x12be>
						  if (Save_Parameter_Data(struct_ptr)){
 80027b0:	4b38      	ldr	r3, [pc, #224]	; (8002894 <main+0x134c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f001 f8bb 	bl	8003930 <Save_Parameter_Data>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00d      	beq.n	80027dc <main+0x1294>
							  lcdClear();
 80027c0:	f7fe fb64 	bl	8000e8c <lcdClear>
							  lcdSetCursor(5,1);
 80027c4:	2101      	movs	r1, #1
 80027c6:	2005      	movs	r0, #5
 80027c8:	f7fe fb8a 	bl	8000ee0 <lcdSetCursor>
							  lcdPrint("DATA SAVED");
 80027cc:	4832      	ldr	r0, [pc, #200]	; (8002898 <main+0x1350>)
 80027ce:	f7fe fbb9 	bl	8000f44 <lcdPrint>
							  HAL_Delay(1500);
 80027d2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80027d6:	f001 fbcf 	bl	8003f78 <HAL_Delay>
 80027da:	e021      	b.n	8002820 <main+0x12d8>
						  }else{
							  lcdClear();
 80027dc:	f7fe fb56 	bl	8000e8c <lcdClear>
							  lcdSetCursor(0,1);
 80027e0:	2101      	movs	r1, #1
 80027e2:	2000      	movs	r0, #0
 80027e4:	f7fe fb7c 	bl	8000ee0 <lcdSetCursor>
							  lcdPrint("ERROR DEFAULT VALUES");
 80027e8:	482c      	ldr	r0, [pc, #176]	; (800289c <main+0x1354>)
 80027ea:	f7fe fbab 	bl	8000f44 <lcdPrint>
							  lcdSetCursor(7,2);
 80027ee:	2102      	movs	r1, #2
 80027f0:	2007      	movs	r0, #7
 80027f2:	f7fe fb75 	bl	8000ee0 <lcdSetCursor>
							  lcdPrint("LOADED");
 80027f6:	482a      	ldr	r0, [pc, #168]	; (80028a0 <main+0x1358>)
 80027f8:	f7fe fba4 	bl	8000f44 <lcdPrint>
							  HAL_Delay(1500);
 80027fc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002800:	f001 fbba 	bl	8003f78 <HAL_Delay>
 8002804:	e00c      	b.n	8002820 <main+0x12d8>
						  }
					  }else{
						  lcdClear();
 8002806:	f7fe fb41 	bl	8000e8c <lcdClear>
						  lcdSetCursor(2, 1);
 800280a:	2101      	movs	r1, #1
 800280c:	2002      	movs	r0, #2
 800280e:	f7fe fb67 	bl	8000ee0 <lcdSetCursor>
						  lcdPrint("DATA NOT SAVED");
 8002812:	4824      	ldr	r0, [pc, #144]	; (80028a4 <main+0x135c>)
 8002814:	f7fe fb96 	bl	8000f44 <lcdPrint>
						  HAL_Delay(1500);
 8002818:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800281c:	f001 fbac 	bl	8003f78 <HAL_Delay>
					  }
					  state = INITIALIZATION;
 8002820:	4b21      	ldr	r3, [pc, #132]	; (80028a8 <main+0x1360>)
 8002822:	2200      	movs	r2, #0
 8002824:	801a      	strh	r2, [r3, #0]
					  break;
 8002826:	e024      	b.n	8002872 <main+0x132a>
	  		  break;
 8002828:	bf00      	nop
 800282a:	f7fe bf71 	b.w	8001710 <main+0x1c8>
	  		  break;
 800282e:	bf00      	nop
 8002830:	f7fe bf6e 	b.w	8001710 <main+0x1c8>
	  		  break;
 8002834:	bf00      	nop
 8002836:	f7fe bf6b 	b.w	8001710 <main+0x1c8>
					  break;
 800283a:	bf00      	nop
 800283c:	f7fe bf68 	b.w	8001710 <main+0x1c8>
					  break;
 8002840:	bf00      	nop
 8002842:	f7fe bf65 	b.w	8001710 <main+0x1c8>
					  break;
 8002846:	bf00      	nop
 8002848:	f7fe bf62 	b.w	8001710 <main+0x1c8>
					  break;
 800284c:	bf00      	nop
 800284e:	f7fe bf5f 	b.w	8001710 <main+0x1c8>
					  break;
 8002852:	bf00      	nop
 8002854:	f7fe bf5c 	b.w	8001710 <main+0x1c8>
					  break;
 8002858:	bf00      	nop
 800285a:	f7fe bf59 	b.w	8001710 <main+0x1c8>
					  break;
 800285e:	bf00      	nop
 8002860:	f7fe bf56 	b.w	8001710 <main+0x1c8>
					  break;
 8002864:	bf00      	nop
 8002866:	f7fe bf53 	b.w	8001710 <main+0x1c8>
					  break;
 800286a:	bf00      	nop
 800286c:	f7fe bf50 	b.w	8001710 <main+0x1c8>
					  break;
 8002870:	bf00      	nop
	  switch (state)
 8002872:	f7fe bf4d 	b.w	8001710 <main+0x1c8>
 8002876:	bf00      	nop
 8002878:	08007a54 	.word	0x08007a54
 800287c:	200006c8 	.word	0x200006c8
 8002880:	20000000 	.word	0x20000000
 8002884:	20000004 	.word	0x20000004
 8002888:	200006c4 	.word	0x200006c4
 800288c:	08007a40 	.word	0x08007a40
 8002890:	20000674 	.word	0x20000674
 8002894:	200006ac 	.word	0x200006ac
 8002898:	08007a68 	.word	0x08007a68
 800289c:	08007a74 	.word	0x08007a74
 80028a0:	08007a8c 	.word	0x08007a8c
 80028a4:	08007a94 	.word	0x08007a94
 80028a8:	20000670 	.word	0x20000670

080028ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b094      	sub	sp, #80	; 0x50
 80028b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028b2:	f107 0320 	add.w	r3, r7, #32
 80028b6:	2230      	movs	r2, #48	; 0x30
 80028b8:	2100      	movs	r1, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	f004 fb74 	bl	8006fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028c0:	f107 030c 	add.w	r3, r7, #12
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028d0:	2300      	movs	r3, #0
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	4b28      	ldr	r3, [pc, #160]	; (8002978 <SystemClock_Config+0xcc>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	4a27      	ldr	r2, [pc, #156]	; (8002978 <SystemClock_Config+0xcc>)
 80028da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028de:	6413      	str	r3, [r2, #64]	; 0x40
 80028e0:	4b25      	ldr	r3, [pc, #148]	; (8002978 <SystemClock_Config+0xcc>)
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80028ec:	2300      	movs	r3, #0
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	4b22      	ldr	r3, [pc, #136]	; (800297c <SystemClock_Config+0xd0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80028f8:	4a20      	ldr	r2, [pc, #128]	; (800297c <SystemClock_Config+0xd0>)
 80028fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b1e      	ldr	r3, [pc, #120]	; (800297c <SystemClock_Config+0xd0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800290c:	2301      	movs	r3, #1
 800290e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002916:	2302      	movs	r3, #2
 8002918:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800291a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800291e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002920:	2319      	movs	r3, #25
 8002922:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002924:	23a8      	movs	r3, #168	; 0xa8
 8002926:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002928:	2304      	movs	r3, #4
 800292a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800292c:	2304      	movs	r3, #4
 800292e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002930:	f107 0320 	add.w	r3, r7, #32
 8002934:	4618      	mov	r0, r3
 8002936:	f002 fd3f 	bl	80053b8 <HAL_RCC_OscConfig>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002940:	f001 f85c 	bl	80039fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002944:	230f      	movs	r3, #15
 8002946:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002948:	2302      	movs	r3, #2
 800294a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002950:	2300      	movs	r3, #0
 8002952:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002954:	2300      	movs	r3, #0
 8002956:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002958:	f107 030c 	add.w	r3, r7, #12
 800295c:	2101      	movs	r1, #1
 800295e:	4618      	mov	r0, r3
 8002960:	f002 ffa2 	bl	80058a8 <HAL_RCC_ClockConfig>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800296a:	f001 f847 	bl	80039fc <Error_Handler>
  }
}
 800296e:	bf00      	nop
 8002970:	3750      	adds	r7, #80	; 0x50
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800
 800297c:	40007000 	.word	0x40007000

08002980 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002984:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <MX_I2C1_Init+0x50>)
 8002986:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <MX_I2C1_Init+0x54>)
 8002988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <MX_I2C1_Init+0x50>)
 800298c:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <MX_I2C1_Init+0x58>)
 800298e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <MX_I2C1_Init+0x50>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <MX_I2C1_Init+0x50>)
 8002998:	2200      	movs	r2, #0
 800299a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <MX_I2C1_Init+0x50>)
 800299e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029a4:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <MX_I2C1_Init+0x50>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <MX_I2C1_Init+0x50>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029b0:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <MX_I2C1_Init+0x50>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <MX_I2C1_Init+0x50>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029bc:	4804      	ldr	r0, [pc, #16]	; (80029d0 <MX_I2C1_Init+0x50>)
 80029be:	f002 f8af 	bl	8004b20 <HAL_I2C_Init>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029c8:	f001 f818 	bl	80039fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	200004b4 	.word	0x200004b4
 80029d4:	40005400 	.word	0x40005400
 80029d8:	000186a0 	.word	0x000186a0

080029dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08c      	sub	sp, #48	; 0x30
 80029e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029e2:	f107 030c 	add.w	r3, r7, #12
 80029e6:	2224      	movs	r2, #36	; 0x24
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f004 fadc 	bl	8006fa8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f0:	1d3b      	adds	r3, r7, #4
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029f8:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <MX_TIM1_Init+0xb8>)
 80029fa:	4a27      	ldr	r2, [pc, #156]	; (8002a98 <MX_TIM1_Init+0xbc>)
 80029fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029fe:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <MX_TIM1_Init+0xb8>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a04:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <MX_TIM1_Init+0xb8>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002a0a:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <MX_TIM1_Init+0xb8>)
 8002a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a12:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <MX_TIM1_Init+0xb8>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a18:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <MX_TIM1_Init+0xb8>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <MX_TIM1_Init+0xb8>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a24:	2301      	movs	r3, #1
 8002a26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8002a34:	2302      	movs	r3, #2
 8002a36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8002a44:	2302      	movs	r3, #2
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002a48:	f107 030c 	add.w	r3, r7, #12
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4811      	ldr	r0, [pc, #68]	; (8002a94 <MX_TIM1_Init+0xb8>)
 8002a50:	f003 fb16 	bl	8006080 <HAL_TIM_Encoder_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002a5a:	f000 ffcf 	bl	80039fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	4619      	mov	r1, r3
 8002a6a:	480a      	ldr	r0, [pc, #40]	; (8002a94 <MX_TIM1_Init+0xb8>)
 8002a6c:	f004 f9e2 	bl	8006e34 <HAL_TIMEx_MasterConfigSynchronization>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002a76:	f000 ffc1 	bl	80039fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->CNT = 0x7FFF;		//Initialization CNT in middle value to avoid Over/Under flow
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <MX_TIM1_Init+0xbc>)
 8002a7c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24
  TIM1->SR = ~(1UL << 0);	//Clear UIF flag
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <MX_TIM1_Init+0xbc>)
 8002a84:	f06f 0201 	mvn.w	r2, #1
 8002a88:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM1_Init 2 */

}
 8002a8a:	bf00      	nop
 8002a8c:	3730      	adds	r7, #48	; 0x30
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000508 	.word	0x20000508
 8002a98:	40010000 	.word	0x40010000

08002a9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08e      	sub	sp, #56	; 0x38
 8002aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
 8002aac:	609a      	str	r2, [r3, #8]
 8002aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab0:	f107 0320 	add.w	r3, r7, #32
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
 8002ac8:	615a      	str	r2, [r3, #20]
 8002aca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002acc:	4b2c      	ldr	r3, [pc, #176]	; (8002b80 <MX_TIM2_Init+0xe4>)
 8002ace:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ad2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002ad4:	4b2a      	ldr	r3, [pc, #168]	; (8002b80 <MX_TIM2_Init+0xe4>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ada:	4b29      	ldr	r3, [pc, #164]	; (8002b80 <MX_TIM2_Init+0xe4>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 8002ae0:	4b27      	ldr	r3, [pc, #156]	; (8002b80 <MX_TIM2_Init+0xe4>)
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae6:	4b26      	ldr	r3, [pc, #152]	; (8002b80 <MX_TIM2_Init+0xe4>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002aec:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <MX_TIM2_Init+0xe4>)
 8002aee:	2280      	movs	r2, #128	; 0x80
 8002af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002af2:	4823      	ldr	r0, [pc, #140]	; (8002b80 <MX_TIM2_Init+0xe4>)
 8002af4:	f003 f8a4 	bl	8005c40 <HAL_TIM_Base_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002afe:	f000 ff7d 	bl	80039fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	481c      	ldr	r0, [pc, #112]	; (8002b80 <MX_TIM2_Init+0xe4>)
 8002b10:	f003 fdd4 	bl	80066bc <HAL_TIM_ConfigClockSource>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002b1a:	f000 ff6f 	bl	80039fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b1e:	4818      	ldr	r0, [pc, #96]	; (8002b80 <MX_TIM2_Init+0xe4>)
 8002b20:	f003 f940 	bl	8005da4 <HAL_TIM_PWM_Init>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002b2a:	f000 ff67 	bl	80039fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b32:	2300      	movs	r3, #0
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b36:	f107 0320 	add.w	r3, r7, #32
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4810      	ldr	r0, [pc, #64]	; (8002b80 <MX_TIM2_Init+0xe4>)
 8002b3e:	f004 f979 	bl	8006e34 <HAL_TIMEx_MasterConfigSynchronization>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002b48:	f000 ff58 	bl	80039fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b4c:	2360      	movs	r3, #96	; 0x60
 8002b4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8002b50:	2301      	movs	r3, #1
 8002b52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002b58:	2304      	movs	r3, #4
 8002b5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	2200      	movs	r2, #0
 8002b60:	4619      	mov	r1, r3
 8002b62:	4807      	ldr	r0, [pc, #28]	; (8002b80 <MX_TIM2_Init+0xe4>)
 8002b64:	f003 fce8 	bl	8006538 <HAL_TIM_PWM_ConfigChannel>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002b6e:	f000 ff45 	bl	80039fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b72:	4803      	ldr	r0, [pc, #12]	; (8002b80 <MX_TIM2_Init+0xe4>)
 8002b74:	f001 f890 	bl	8003c98 <HAL_TIM_MspPostInit>

}
 8002b78:	bf00      	nop
 8002b7a:	3738      	adds	r7, #56	; 0x38
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000550 	.word	0x20000550

08002b84 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */
	float TIM9_period_ms = (float)TIMER9_PERIOD/1000;		//Period to load into the timer, calculated from Define
 8002b8a:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <MX_TIM9_Init+0x98>)
 8002b8c:	617b      	str	r3, [r7, #20]
	uint16_t TIM9_preescaler = 642;							//Preescaler, max 1 second
 8002b8e:	f240 2382 	movw	r3, #642	; 0x282
 8002b92:	827b      	strh	r3, [r7, #18]
	uint16_t TIM9_ARR;
	TIM9_ARR = ( (float) (CLK_FREQ_T2/(TIM9_preescaler+1))*TIM9_period_ms );	//Calculation value for ARR register to set correct period
 8002b94:	8a7b      	ldrh	r3, [r7, #18]
 8002b96:	3301      	adds	r3, #1
 8002b98:	4a21      	ldr	r2, [pc, #132]	; (8002c20 <MX_TIM9_Init+0x9c>)
 8002b9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b9e:	ee07 3a90 	vmov	s15, r3
 8002ba2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ba6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bb2:	ee17 3a90 	vmov	r3, s15
 8002bb6:	823b      	strh	r3, [r7, #16]
  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bb8:	463b      	mov	r3, r7
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
 8002bc2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002bc4:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <MX_TIM9_Init+0xa0>)
 8002bc6:	4a18      	ldr	r2, [pc, #96]	; (8002c28 <MX_TIM9_Init+0xa4>)
 8002bc8:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = TIM9_preescaler;
 8002bca:	8a7b      	ldrh	r3, [r7, #18]
 8002bcc:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <MX_TIM9_Init+0xa0>)
 8002bce:	6053      	str	r3, [r2, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd0:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <MX_TIM9_Init+0xa0>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = TIM9_ARR;
 8002bd6:	8a3b      	ldrh	r3, [r7, #16]
 8002bd8:	4a12      	ldr	r2, [pc, #72]	; (8002c24 <MX_TIM9_Init+0xa0>)
 8002bda:	60d3      	str	r3, [r2, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <MX_TIM9_Init+0xa0>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <MX_TIM9_Init+0xa0>)
 8002be4:	2280      	movs	r2, #128	; 0x80
 8002be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002be8:	480e      	ldr	r0, [pc, #56]	; (8002c24 <MX_TIM9_Init+0xa0>)
 8002bea:	f003 f829 	bl	8005c40 <HAL_TIM_Base_Init>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8002bf4:	f000 ff02 	bl	80039fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bfc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002bfe:	463b      	mov	r3, r7
 8002c00:	4619      	mov	r1, r3
 8002c02:	4808      	ldr	r0, [pc, #32]	; (8002c24 <MX_TIM9_Init+0xa0>)
 8002c04:	f003 fd5a 	bl	80066bc <HAL_TIM_ConfigClockSource>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_TIM9_Init+0x8e>
  {
    Error_Handler();
 8002c0e:	f000 fef5 	bl	80039fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	3dcccccd 	.word	0x3dcccccd
 8002c20:	0280de80 	.word	0x0280de80
 8002c24:	20000598 	.word	0x20000598
 8002c28:	40014000 	.word	0x40014000

08002c2c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */
	float TIM10_period_ms = (float)DEBOUNCING_TIME/1000;		//Period to load into the timer, calculated from Define
 8002c32:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <MX_TIM10_Init+0x70>)
 8002c34:	607b      	str	r3, [r7, #4]
	uint16_t TIM10_preescaler = 642;							//Preescaler, max 1 second
 8002c36:	f240 2382 	movw	r3, #642	; 0x282
 8002c3a:	807b      	strh	r3, [r7, #2]
	uint16_t TIM10_ARR;
	TIM10_ARR = ( (float) (CLK_FREQ_T2/(TIM10_preescaler+1))*TIM10_period_ms );	//Calculation value for ARR register to set correct period
 8002c3c:	887b      	ldrh	r3, [r7, #2]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	4a17      	ldr	r2, [pc, #92]	; (8002ca0 <MX_TIM10_Init+0x74>)
 8002c42:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c5a:	ee17 3a90 	vmov	r3, s15
 8002c5e:	803b      	strh	r3, [r7, #0]
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002c60:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <MX_TIM10_Init+0x78>)
 8002c62:	4a11      	ldr	r2, [pc, #68]	; (8002ca8 <MX_TIM10_Init+0x7c>)
 8002c64:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = TIM10_preescaler;
 8002c66:	887b      	ldrh	r3, [r7, #2]
 8002c68:	4a0e      	ldr	r2, [pc, #56]	; (8002ca4 <MX_TIM10_Init+0x78>)
 8002c6a:	6053      	str	r3, [r2, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <MX_TIM10_Init+0x78>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = TIM10_ARR;
 8002c72:	883b      	ldrh	r3, [r7, #0]
 8002c74:	4a0b      	ldr	r2, [pc, #44]	; (8002ca4 <MX_TIM10_Init+0x78>)
 8002c76:	60d3      	str	r3, [r2, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c78:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <MX_TIM10_Init+0x78>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <MX_TIM10_Init+0x78>)
 8002c80:	2280      	movs	r2, #128	; 0x80
 8002c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002c84:	4807      	ldr	r0, [pc, #28]	; (8002ca4 <MX_TIM10_Init+0x78>)
 8002c86:	f002 ffdb 	bl	8005c40 <HAL_TIM_Base_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_TIM10_Init+0x68>
  {
    Error_Handler();
 8002c90:	f000 feb4 	bl	80039fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	3dcccccd 	.word	0x3dcccccd
 8002ca0:	0280de80 	.word	0x0280de80
 8002ca4:	200005e0 	.word	0x200005e0
 8002ca8:	40014400 	.word	0x40014400

08002cac <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */
  float TIM11_period_ms = (float)ACC_UPDATE_RATIO/1000;		//Period to load into the timer, calculated from Define
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <MX_TIM11_Init+0x70>)
 8002cb4:	607b      	str	r3, [r7, #4]
  uint16_t TIM11_preescaler = 642;							//Preescaler, max 1 second
 8002cb6:	f240 2382 	movw	r3, #642	; 0x282
 8002cba:	807b      	strh	r3, [r7, #2]
  uint16_t TIM11_ARR;
  TIM11_ARR = ( (float) (CLK_FREQ_T2/(TIM11_preescaler+1))*TIM11_period_ms );	//Calculation value for ARR register to set correct period
 8002cbc:	887b      	ldrh	r3, [r7, #2]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	4a17      	ldr	r2, [pc, #92]	; (8002d20 <MX_TIM11_Init+0x74>)
 8002cc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cce:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cda:	ee17 3a90 	vmov	r3, s15
 8002cde:	803b      	strh	r3, [r7, #0]
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002ce0:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <MX_TIM11_Init+0x78>)
 8002ce2:	4a11      	ldr	r2, [pc, #68]	; (8002d28 <MX_TIM11_Init+0x7c>)
 8002ce4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = TIM11_preescaler;
 8002ce6:	887b      	ldrh	r3, [r7, #2]
 8002ce8:	4a0e      	ldr	r2, [pc, #56]	; (8002d24 <MX_TIM11_Init+0x78>)
 8002cea:	6053      	str	r3, [r2, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cec:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <MX_TIM11_Init+0x78>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = TIM11_ARR;
 8002cf2:	883b      	ldrh	r3, [r7, #0]
 8002cf4:	4a0b      	ldr	r2, [pc, #44]	; (8002d24 <MX_TIM11_Init+0x78>)
 8002cf6:	60d3      	str	r3, [r2, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <MX_TIM11_Init+0x78>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <MX_TIM11_Init+0x78>)
 8002d00:	2280      	movs	r2, #128	; 0x80
 8002d02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002d04:	4807      	ldr	r0, [pc, #28]	; (8002d24 <MX_TIM11_Init+0x78>)
 8002d06:	f002 ff9b 	bl	8005c40 <HAL_TIM_Base_Init>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_TIM11_Init+0x68>
  {
    Error_Handler();
 8002d10:	f000 fe74 	bl	80039fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	3d4ccccd 	.word	0x3d4ccccd
 8002d20:	0280de80 	.word	0x0280de80
 8002d24:	20000628 	.word	0x20000628
 8002d28:	40014800 	.word	0x40014800

08002d2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d32:	f107 030c 	add.w	r3, r7, #12
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
 8002d40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <MX_GPIO_Init+0xb4>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a25      	ldr	r2, [pc, #148]	; (8002de0 <MX_GPIO_Init+0xb4>)
 8002d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <MX_GPIO_Init+0xb4>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	607b      	str	r3, [r7, #4]
 8002d62:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <MX_GPIO_Init+0xb4>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	4a1e      	ldr	r2, [pc, #120]	; (8002de0 <MX_GPIO_Init+0xb4>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6e:	4b1c      	ldr	r3, [pc, #112]	; (8002de0 <MX_GPIO_Init+0xb4>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <MX_GPIO_Init+0xb4>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	4a17      	ldr	r2, [pc, #92]	; (8002de0 <MX_GPIO_Init+0xb4>)
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <MX_GPIO_Init+0xb4>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_Pin|DIR_Pin, GPIO_PIN_RESET);
 8002d96:	2200      	movs	r2, #0
 8002d98:	2106      	movs	r1, #6
 8002d9a:	4812      	ldr	r0, [pc, #72]	; (8002de4 <MX_GPIO_Init+0xb8>)
 8002d9c:	f001 fea6 	bl	8004aec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENABLE_Pin DIR_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin|DIR_Pin;
 8002da0:	2306      	movs	r3, #6
 8002da2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da4:	2301      	movs	r3, #1
 8002da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db0:	f107 030c 	add.w	r3, r7, #12
 8002db4:	4619      	mov	r1, r3
 8002db6:	480b      	ldr	r0, [pc, #44]	; (8002de4 <MX_GPIO_Init+0xb8>)
 8002db8:	f001 fcfc 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_LEFT_Pin SW_RIGHT_Pin SEC_SW_Pin EN_SW_Pin */
  GPIO_InitStruct.Pin = SW_LEFT_Pin|SW_RIGHT_Pin|SEC_SW_Pin|EN_SW_Pin;
 8002dbc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002dc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dca:	f107 030c 	add.w	r3, r7, #12
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4805      	ldr	r0, [pc, #20]	; (8002de8 <MX_GPIO_Init+0xbc>)
 8002dd2:	f001 fcef 	bl	80047b4 <HAL_GPIO_Init>

}
 8002dd6:	bf00      	nop
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40020000 	.word	0x40020000
 8002de8:	40020400 	.word	0x40020400

08002dec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
	if (htim == &htim11 ){		//Checking if the IRQ is from Timer11 Acceleration
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a1f      	ldr	r2, [pc, #124]	; (8002e74 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d103      	bne.n	8002e04 <HAL_TIM_PeriodElapsedCallback+0x18>
		update_speed = 1;
 8002dfc:	4b1e      	ldr	r3, [pc, #120]	; (8002e78 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	801a      	strh	r2, [r3, #0]
			aux_debouncing = 0;
		}
	}else if( htim == &htim9 ){
		delay100ms_counter += 1;
	}
}
 8002e02:	e031      	b.n	8002e68 <HAL_TIM_PeriodElapsedCallback+0x7c>
	}else if ( htim == &htim10 ){	//Checking if the IRQ is from Timer10 Debouncing
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a1d      	ldr	r2, [pc, #116]	; (8002e7c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d124      	bne.n	8002e56 <HAL_TIM_PeriodElapsedCallback+0x6a>
		if (debouncing_en_sw){		//If debouncing enable, increment counter
 8002e0c:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d006      	beq.n	8002e22 <HAL_TIM_PeriodElapsedCallback+0x36>
			debouncing = debouncing + 1;
 8002e14:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002e1e:	801a      	strh	r2, [r3, #0]
 8002e20:	e006      	b.n	8002e30 <HAL_TIM_PeriodElapsedCallback+0x44>
		}else if (!debouncing_en_sw){	//If debouncing disable reset counter
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <HAL_TIM_PeriodElapsedCallback+0x44>
			debouncing = 0;
 8002e2a:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	801a      	strh	r2, [r3, #0]
		if (debouncing_aux_sw){		//If debouncing enable, increment counter
 8002e30:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d006      	beq.n	8002e46 <HAL_TIM_PeriodElapsedCallback+0x5a>
			aux_debouncing = aux_debouncing + 1;
 8002e38:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002e42:	801a      	strh	r2, [r3, #0]
}
 8002e44:	e010      	b.n	8002e68 <HAL_TIM_PeriodElapsedCallback+0x7c>
		}else if (!debouncing_aux_sw){	//If debouncing disable reset counter
 8002e46:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10c      	bne.n	8002e68 <HAL_TIM_PeriodElapsedCallback+0x7c>
			aux_debouncing = 0;
 8002e4e:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	801a      	strh	r2, [r3, #0]
}
 8002e54:	e008      	b.n	8002e68 <HAL_TIM_PeriodElapsedCallback+0x7c>
	}else if( htim == &htim9 ){
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a0d      	ldr	r2, [pc, #52]	; (8002e90 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d104      	bne.n	8002e68 <HAL_TIM_PeriodElapsedCallback+0x7c>
		delay100ms_counter += 1;
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3301      	adds	r3, #1
 8002e64:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002e66:	6013      	str	r3, [r2, #0]
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	20000628 	.word	0x20000628
 8002e78:	200006c6 	.word	0x200006c6
 8002e7c:	200005e0 	.word	0x200005e0
 8002e80:	200006ca 	.word	0x200006ca
 8002e84:	200006ce 	.word	0x200006ce
 8002e88:	200006cc 	.word	0x200006cc
 8002e8c:	200006d0 	.word	0x200006d0
 8002e90:	20000598 	.word	0x20000598
 8002e94:	200006bc 	.word	0x200006bc

08002e98 <Encoder_Read>:
  * @brief Encoder Steps Read Function
  * @param old_value - Pointer to the value storage as latest encoder value
  * @retval encoder_steps - Number of steps increased or decreased on the encoder
  */
int32_t Encoder_Read(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
	int32_t encoder_steps;
	static int32_t old_value = 0x7FFF;		//Initialisation old_value variable

	if (TIM1->SR & (1 << 0)){		//If overflow or underflow occurs reset the CNT value
 8002e9e:	4b1c      	ldr	r3, [pc, #112]	; (8002f10 <Encoder_Read+0x78>)
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <Encoder_Read+0x2e>
		TIM1->SR = ~(1UL << 0);		//Reset UIF bit
 8002eaa:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <Encoder_Read+0x78>)
 8002eac:	f06f 0201 	mvn.w	r2, #1
 8002eb0:	611a      	str	r2, [r3, #16]
		TIM1->CNT = 0x7FFF;			//Reload CNT register to ox7FFF
 8002eb2:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <Encoder_Read+0x78>)
 8002eb4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002eb8:	625a      	str	r2, [r3, #36]	; 0x24
		old_value = 0x7FFF;
 8002eba:	4b16      	ldr	r3, [pc, #88]	; (8002f14 <Encoder_Read+0x7c>)
 8002ebc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002ec0:	601a      	str	r2, [r3, #0]
		return 0;					//Return 0
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e01d      	b.n	8002f02 <Encoder_Read+0x6a>
	}

	uint16_t encoder_value = TIM1->CNT;		//Variable to storage the CNT register value
 8002ec6:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <Encoder_Read+0x78>)
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	80fb      	strh	r3, [r7, #6]
	if ( ( encoder_value - old_value >= 2 ) || ( encoder_value - old_value <= -2 ) ){		//If the value in the encoder register changed (At least 2, to avoid glitches) calculate increment
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <Encoder_Read+0x7c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	dc06      	bgt.n	8002ee6 <Encoder_Read+0x4e>
 8002ed8:	88fa      	ldrh	r2, [r7, #6]
 8002eda:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <Encoder_Read+0x7c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	da0c      	bge.n	8002f00 <Encoder_Read+0x68>
		encoder_steps = (old_value - encoder_value)/2;	//Divide by 2 is needed due to increments by two on the encoder
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <Encoder_Read+0x7c>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	0fda      	lsrs	r2, r3, #31
 8002ef0:	4413      	add	r3, r2
 8002ef2:	105b      	asrs	r3, r3, #1
 8002ef4:	603b      	str	r3, [r7, #0]
		old_value = encoder_value;			//Reload the old_value
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	4a06      	ldr	r2, [pc, #24]	; (8002f14 <Encoder_Read+0x7c>)
 8002efa:	6013      	str	r3, [r2, #0]
		return encoder_steps;				//Return the increments, can be positive or negative
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	e000      	b.n	8002f02 <Encoder_Read+0x6a>
	}else{
		return 0;							//Return 0 in case no changes
 8002f00:	2300      	movs	r3, #0
	}
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40010000 	.word	0x40010000
 8002f14:	20000018 	.word	0x20000018

08002f18 <LCD_Write_Number>:
  * 		col_pos - column position for the number
  * 		row_pos - raw position for the number
  * @retval
  */
void LCD_Write_Number(int32_t value, int32_t col_pos, int32_t row_pos)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
	char str[10];					//Variable to storage the string
	sprintf(str, "%ld", value);		//Convert number to string
 8002f24:	f107 0314 	add.w	r3, r7, #20
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	498e      	ldr	r1, [pc, #568]	; (8003164 <LCD_Write_Number+0x24c>)
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f004 f843 	bl	8006fb8 <siprintf>
	if (value > 0){					//If value is positive
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f340 809b 	ble.w	8003070 <LCD_Write_Number+0x158>
		if (value < 10){			//If value is lower than 10
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2b09      	cmp	r3, #9
 8002f3e:	dc1a      	bgt.n	8002f76 <LCD_Write_Number+0x5e>
			lcdSetCursor(col_pos+1,row_pos);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd ffc6 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(" ");
 8002f54:	4884      	ldr	r0, [pc, #528]	; (8003168 <LCD_Write_Number+0x250>)
 8002f56:	f7fd fff5 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd ffbb 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 8002f6a:	f107 0314 	add.w	r3, r7, #20
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd ffe8 	bl	8000f44 <lcdPrint>
		lcdSetCursor(col_pos,row_pos);
		lcdPrint("  ");
		lcdSetCursor(col_pos,row_pos);
		lcdPrint("0");
	}
}
 8002f74:	e0f2      	b.n	800315c <LCD_Write_Number+0x244>
		}else if (value < 100){		//If value is lower than 100
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b63      	cmp	r3, #99	; 0x63
 8002f7a:	dc1a      	bgt.n	8002fb2 <LCD_Write_Number+0x9a>
			lcdSetCursor(col_pos+2,row_pos);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	3302      	adds	r3, #2
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd ffa8 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(" ");
 8002f90:	4875      	ldr	r0, [pc, #468]	; (8003168 <LCD_Write_Number+0x250>)
 8002f92:	f7fd ffd7 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fd ff9d 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 8002fa6:	f107 0314 	add.w	r3, r7, #20
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd ffca 	bl	8000f44 <lcdPrint>
}
 8002fb0:	e0d4      	b.n	800315c <LCD_Write_Number+0x244>
		}else if (value < 1000){	//If value is lower than 1000
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fb8:	da1a      	bge.n	8002ff0 <LCD_Write_Number+0xd8>
			lcdSetCursor(col_pos+3,row_pos);
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	3303      	adds	r3, #3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fd ff89 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(" ");
 8002fce:	4866      	ldr	r0, [pc, #408]	; (8003168 <LCD_Write_Number+0x250>)
 8002fd0:	f7fd ffb8 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd ff7e 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd ffab 	bl	8000f44 <lcdPrint>
}
 8002fee:	e0b5      	b.n	800315c <LCD_Write_Number+0x244>
		}else if (value < 10000){	//If value is lower than 10000
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f242 720f 	movw	r2, #9999	; 0x270f
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	dc1a      	bgt.n	8003030 <LCD_Write_Number+0x118>
			lcdSetCursor(col_pos+4,row_pos);
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	3304      	adds	r3, #4
 8003000:	b2db      	uxtb	r3, r3
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd ff69 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(" ");
 800300e:	4856      	ldr	r0, [pc, #344]	; (8003168 <LCD_Write_Number+0x250>)
 8003010:	f7fd ff98 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd ff5e 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	4618      	mov	r0, r3
 800302a:	f7fd ff8b 	bl	8000f44 <lcdPrint>
}
 800302e:	e095      	b.n	800315c <LCD_Write_Number+0x244>
		}else if (value < 100000){	//If value is lower than 100000
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4a4e      	ldr	r2, [pc, #312]	; (800316c <LCD_Write_Number+0x254>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f300 8091 	bgt.w	800315c <LCD_Write_Number+0x244>
			lcdSetCursor(col_pos+5,row_pos);
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	b2db      	uxtb	r3, r3
 800303e:	3305      	adds	r3, #5
 8003040:	b2db      	uxtb	r3, r3
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd ff49 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(" ");
 800304e:	4846      	ldr	r0, [pc, #280]	; (8003168 <LCD_Write_Number+0x250>)
 8003050:	f7fd ff78 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd ff3e 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd ff6b 	bl	8000f44 <lcdPrint>
}
 800306e:	e075      	b.n	800315c <LCD_Write_Number+0x244>
	}else if (value < 0) {			//If value is negative
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	da5c      	bge.n	8003130 <LCD_Write_Number+0x218>
		if (value > -10){			//If value is higher than -10
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f113 0f09 	cmn.w	r3, #9
 800307c:	db1a      	blt.n	80030b4 <LCD_Write_Number+0x19c>
			lcdSetCursor(col_pos+2,row_pos);
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	3302      	adds	r3, #2
 8003084:	b2db      	uxtb	r3, r3
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f7fd ff27 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(" ");
 8003092:	4835      	ldr	r0, [pc, #212]	; (8003168 <LCD_Write_Number+0x250>)
 8003094:	f7fd ff56 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd ff1c 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 80030a8:	f107 0314 	add.w	r3, r7, #20
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fd ff49 	bl	8000f44 <lcdPrint>
}
 80030b2:	e053      	b.n	800315c <LCD_Write_Number+0x244>
		}else if (value > -100){	//If value is higher than -100
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80030ba:	db1a      	blt.n	80030f2 <LCD_Write_Number+0x1da>
			lcdSetCursor(col_pos+2,row_pos);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	3302      	adds	r3, #2
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd ff08 	bl	8000ee0 <lcdSetCursor>
			lcdPrint("  ");
 80030d0:	4827      	ldr	r0, [pc, #156]	; (8003170 <LCD_Write_Number+0x258>)
 80030d2:	f7fd ff37 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd fefd 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 80030e6:	f107 0314 	add.w	r3, r7, #20
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd ff2a 	bl	8000f44 <lcdPrint>
}
 80030f0:	e034      	b.n	800315c <LCD_Write_Number+0x244>
		}else if (value > -1000){	//If value is higher than -1000
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80030f8:	dd30      	ble.n	800315c <LCD_Write_Number+0x244>
			lcdSetCursor(col_pos+2,row_pos);
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	3302      	adds	r3, #2
 8003100:	b2db      	uxtb	r3, r3
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd fee9 	bl	8000ee0 <lcdSetCursor>
			lcdPrint("   ");
 800310e:	4819      	ldr	r0, [pc, #100]	; (8003174 <LCD_Write_Number+0x25c>)
 8003110:	f7fd ff18 	bl	8000f44 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	4611      	mov	r1, r2
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd fede 	bl	8000ee0 <lcdSetCursor>
			lcdPrint(str);
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	4618      	mov	r0, r3
 800312a:	f7fd ff0b 	bl	8000f44 <lcdPrint>
}
 800312e:	e015      	b.n	800315c <LCD_Write_Number+0x244>
		lcdSetCursor(col_pos,row_pos);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd fed0 	bl	8000ee0 <lcdSetCursor>
		lcdPrint("  ");
 8003140:	480b      	ldr	r0, [pc, #44]	; (8003170 <LCD_Write_Number+0x258>)
 8003142:	f7fd feff 	bl	8000f44 <lcdPrint>
		lcdSetCursor(col_pos,row_pos);
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd fec5 	bl	8000ee0 <lcdSetCursor>
		lcdPrint("0");
 8003156:	4808      	ldr	r0, [pc, #32]	; (8003178 <LCD_Write_Number+0x260>)
 8003158:	f7fd fef4 	bl	8000f44 <lcdPrint>
}
 800315c:	bf00      	nop
 800315e:	3720      	adds	r7, #32
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	08007aa4 	.word	0x08007aa4
 8003168:	08007aa8 	.word	0x08007aa8
 800316c:	0001869f 	.word	0x0001869f
 8003170:	08007aac 	.word	0x08007aac
 8003174:	08007ab0 	.word	0x08007ab0
 8003178:	08007ab4 	.word	0x08007ab4

0800317c <_float_to_char>:
  * @brief Function to convert float number to char
  * @param 	x - float value which expected to be converted
  * 		p - char used for the conversion
  * @retval Pointer to the char in which the value will be loaded
  */
static char * _float_to_char(float x, char *p) {
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	ed87 0a01 	vstr	s0, [r7, #4]
 8003186:	6038      	str	r0, [r7, #0]
    char *s = p + CHAR_BUFF_SIZE; // go to end of buffer
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	3304      	adds	r3, #4
 800318c:	617b      	str	r3, [r7, #20]
    uint16_t decimals;  // variable to store the decimals
    int units;  // variable to store the units (part to left of decimal place)
    if (x < 0) { // take care of negative numbers
 800318e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003192:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319a:	d51e      	bpl.n	80031da <_float_to_char+0x5e>
        decimals = (int)(x * -100) % 100; // make 1000 for 3 decimals etc.
 800319c:	edd7 7a01 	vldr	s15, [r7, #4]
 80031a0:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80032e0 <_float_to_char+0x164>
 80031a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031ac:	ee17 2a90 	vmov	r2, s15
 80031b0:	4b4c      	ldr	r3, [pc, #304]	; (80032e4 <_float_to_char+0x168>)
 80031b2:	fb83 1302 	smull	r1, r3, r3, r2
 80031b6:	1159      	asrs	r1, r3, #5
 80031b8:	17d3      	asrs	r3, r2, #31
 80031ba:	1acb      	subs	r3, r1, r3
 80031bc:	2164      	movs	r1, #100	; 0x64
 80031be:	fb01 f303 	mul.w	r3, r1, r3
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	827b      	strh	r3, [r7, #18]
        units = (int)(-1 * x);
 80031c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80031ca:	eef1 7a67 	vneg.f32	s15, s15
 80031ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031d2:	ee17 3a90 	vmov	r3, s15
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e01b      	b.n	8003212 <_float_to_char+0x96>
    } else { // positive numbers
        decimals = (int)(x * 100) % 100;
 80031da:	edd7 7a01 	vldr	s15, [r7, #4]
 80031de:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80032e8 <_float_to_char+0x16c>
 80031e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031ea:	ee17 2a90 	vmov	r2, s15
 80031ee:	4b3d      	ldr	r3, [pc, #244]	; (80032e4 <_float_to_char+0x168>)
 80031f0:	fb83 1302 	smull	r1, r3, r3, r2
 80031f4:	1159      	asrs	r1, r3, #5
 80031f6:	17d3      	asrs	r3, r2, #31
 80031f8:	1acb      	subs	r3, r1, r3
 80031fa:	2164      	movs	r1, #100	; 0x64
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	827b      	strh	r3, [r7, #18]
        units = (int)x;
 8003204:	edd7 7a01 	vldr	s15, [r7, #4]
 8003208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800320c:	ee17 3a90 	vmov	r3, s15
 8003210:	60fb      	str	r3, [r7, #12]
    }

    *--s = (decimals % 10) + '0';
 8003212:	8a7a      	ldrh	r2, [r7, #18]
 8003214:	4b35      	ldr	r3, [pc, #212]	; (80032ec <_float_to_char+0x170>)
 8003216:	fba3 1302 	umull	r1, r3, r3, r2
 800321a:	08d9      	lsrs	r1, r3, #3
 800321c:	460b      	mov	r3, r1
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	b29b      	uxth	r3, r3
 8003228:	b2db      	uxtb	r3, r3
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	3a01      	subs	r2, #1
 800322e:	617a      	str	r2, [r7, #20]
 8003230:	3330      	adds	r3, #48	; 0x30
 8003232:	b2da      	uxtb	r2, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	701a      	strb	r2, [r3, #0]
    decimals /= 10; // repeat for as many decimal places as you need
 8003238:	8a7b      	ldrh	r3, [r7, #18]
 800323a:	4a2c      	ldr	r2, [pc, #176]	; (80032ec <_float_to_char+0x170>)
 800323c:	fba2 2303 	umull	r2, r3, r2, r3
 8003240:	08db      	lsrs	r3, r3, #3
 8003242:	827b      	strh	r3, [r7, #18]
    *--s = (decimals % 10) + '0';
 8003244:	8a7a      	ldrh	r2, [r7, #18]
 8003246:	4b29      	ldr	r3, [pc, #164]	; (80032ec <_float_to_char+0x170>)
 8003248:	fba3 1302 	umull	r1, r3, r3, r2
 800324c:	08d9      	lsrs	r1, r3, #3
 800324e:	460b      	mov	r3, r1
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	b29b      	uxth	r3, r3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	3a01      	subs	r2, #1
 8003260:	617a      	str	r2, [r7, #20]
 8003262:	3330      	adds	r3, #48	; 0x30
 8003264:	b2da      	uxtb	r2, r3
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	701a      	strb	r2, [r3, #0]
    *--s = '.';
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	3b01      	subs	r3, #1
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	222e      	movs	r2, #46	; 0x2e
 8003274:	701a      	strb	r2, [r3, #0]

    while (units > 0) {
 8003276:	e01b      	b.n	80032b0 <_float_to_char+0x134>
        *--s = (units % 10) + '0';
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4b1d      	ldr	r3, [pc, #116]	; (80032f0 <_float_to_char+0x174>)
 800327c:	fb83 1302 	smull	r1, r3, r3, r2
 8003280:	1099      	asrs	r1, r3, #2
 8003282:	17d3      	asrs	r3, r2, #31
 8003284:	1ac9      	subs	r1, r1, r3
 8003286:	460b      	mov	r3, r1
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	1ad1      	subs	r1, r2, r3
 8003290:	b2cb      	uxtb	r3, r1
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	3a01      	subs	r2, #1
 8003296:	617a      	str	r2, [r7, #20]
 8003298:	3330      	adds	r3, #48	; 0x30
 800329a:	b2da      	uxtb	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	701a      	strb	r2, [r3, #0]
        units /= 10;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <_float_to_char+0x174>)
 80032a4:	fb82 1203 	smull	r1, r2, r2, r3
 80032a8:	1092      	asrs	r2, r2, #2
 80032aa:	17db      	asrs	r3, r3, #31
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	60fb      	str	r3, [r7, #12]
    while (units > 0) {
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	dce0      	bgt.n	8003278 <_float_to_char+0xfc>
    }
    if (x < 0) *--s = '-'; // unary minus sign for negative numbers
 80032b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80032ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c2:	d505      	bpl.n	80032d0 <_float_to_char+0x154>
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	222d      	movs	r2, #45	; 0x2d
 80032ce:	701a      	strb	r2, [r3, #0]
    return s;
 80032d0:	697b      	ldr	r3, [r7, #20]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	371c      	adds	r7, #28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	c2c80000 	.word	0xc2c80000
 80032e4:	51eb851f 	.word	0x51eb851f
 80032e8:	42c80000 	.word	0x42c80000
 80032ec:	cccccccd 	.word	0xcccccccd
 80032f0:	66666667 	.word	0x66666667

080032f4 <LCD_Write_Float_Number>:
  * @param 	float_char - char expected to be writen
  * 		col_pos - column position for the number
  * 		row_pos - raw position for the number
  * @retval
  */
void LCD_Write_Float_Number(float float_char, int32_t col_pos_float, int32_t row_pos_float){
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80032fe:	60b8      	str	r0, [r7, #8]
 8003300:	6079      	str	r1, [r7, #4]
	char float2char[CHAR_BUFF_SIZE+1];
	float2char[CHAR_BUFF_SIZE] = '\0';
 8003302:	2300      	movs	r3, #0
 8003304:	763b      	strb	r3, [r7, #24]
	char float1[4];						//Initualization array to save the output
	char *ptr = float1;
 8003306:	f107 0310 	add.w	r3, r7, #16
 800330a:	61fb      	str	r3, [r7, #28]
	if (float_char < 1 ){				//If float is lower than 1 print an extra 0 on the left
 800330c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331c:	d516      	bpl.n	800334c <LCD_Write_Float_Number+0x58>
		lcdSetCursor(col_pos_float, row_pos_float);
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f7fd fdd9 	bl	8000ee0 <lcdSetCursor>
		lcdPrint("0");
 800332e:	4813      	ldr	r0, [pc, #76]	; (800337c <LCD_Write_Float_Number+0x88>)
 8003330:	f7fd fe08 	bl	8000f44 <lcdPrint>
		ptr = _float_to_char(float_char,&float2char[0]);
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	4618      	mov	r0, r3
 800333a:	ed97 0a03 	vldr	s0, [r7, #12]
 800333e:	f7ff ff1d 	bl	800317c <_float_to_char>
 8003342:	61f8      	str	r0, [r7, #28]
		lcdPrint(ptr);
 8003344:	69f8      	ldr	r0, [r7, #28]
 8003346:	f7fd fdfd 	bl	8000f44 <lcdPrint>
	}else{
		ptr = _float_to_char(float_char,&float2char[0]);
		lcdSetCursor(col_pos_float, row_pos_float);
		lcdPrint(ptr);
	}
}
 800334a:	e012      	b.n	8003372 <LCD_Write_Float_Number+0x7e>
		ptr = _float_to_char(float_char,&float2char[0]);
 800334c:	f107 0314 	add.w	r3, r7, #20
 8003350:	4618      	mov	r0, r3
 8003352:	ed97 0a03 	vldr	s0, [r7, #12]
 8003356:	f7ff ff11 	bl	800317c <_float_to_char>
 800335a:	61f8      	str	r0, [r7, #28]
		lcdSetCursor(col_pos_float, row_pos_float);
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	4611      	mov	r1, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f7fd fdba 	bl	8000ee0 <lcdSetCursor>
		lcdPrint(ptr);
 800336c:	69f8      	ldr	r0, [r7, #28]
 800336e:	f7fd fde9 	bl	8000f44 <lcdPrint>
}
 8003372:	bf00      	nop
 8003374:	3720      	adds	r7, #32
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	08007ab4 	.word	0x08007ab4

08003380 <Motor_Enable>:
/**
  * @brief Function to Enable EN signal for Motor Driver
  * @param 	invert - variable to invert the EN pin logic
  * @retval
  */
void Motor_Enable(uint16_t invert){
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, ENABLE_Pin, (GPIO_PIN_SET^invert));	//Enable Motor, XOR with SET to invert it if selected
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f083 0301 	eor.w	r3, r3, #1
 8003392:	b2db      	uxtb	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	2102      	movs	r1, #2
 8003398:	4803      	ldr	r0, [pc, #12]	; (80033a8 <Motor_Enable+0x28>)
 800339a:	f001 fba7 	bl	8004aec <HAL_GPIO_WritePin>
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40020000 	.word	0x40020000

080033ac <Motor_Disable>:
/**
  * @brief Function to Disable EN signal for Motor Driver
  * @param 	invert - variable to invert the EN pin logic
  * @retval
  */
void Motor_Disable(uint16_t invert){
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, ENABLE_Pin, (GPIO_PIN_RESET^invert));	//Disable Motor, XOR with SET to invert it if selected
 80033b6:	88fb      	ldrh	r3, [r7, #6]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	2102      	movs	r1, #2
 80033be:	4805      	ldr	r0, [pc, #20]	; (80033d4 <Motor_Disable+0x28>)
 80033c0:	f001 fb94 	bl	8004aec <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80033c4:	2100      	movs	r1, #0
 80033c6:	4804      	ldr	r0, [pc, #16]	; (80033d8 <Motor_Disable+0x2c>)
 80033c8:	f002 fdf6 	bl	8005fb8 <HAL_TIM_PWM_Stop>
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40020000 	.word	0x40020000
 80033d8:	20000550 	.word	0x20000550

080033dc <Motor_Direction>:
  * @brief Function to select the direction of the motor
  * @param 	direction - variable to set the direction of the motor (RIGHT or LEFT)
  * 		invert - variable to invert the DIR pin logic
  * @retval
  */
void Motor_Direction(uint16_t direction, uint16_t invert){
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	460a      	mov	r2, r1
 80033e6:	80fb      	strh	r3, [r7, #6]
 80033e8:	4613      	mov	r3, r2
 80033ea:	80bb      	strh	r3, [r7, #4]
	if ( direction == RIGHT ){
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d10a      	bne.n	8003408 <Motor_Direction+0x2c>
		HAL_GPIO_WritePin(GPIOA, DIR_Pin, (GPIO_PIN_SET^invert));	//Disable Motor, XOR with SET to invert it if selected
 80033f2:	88bb      	ldrh	r3, [r7, #4]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f083 0301 	eor.w	r3, r3, #1
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	2104      	movs	r1, #4
 8003400:	4808      	ldr	r0, [pc, #32]	; (8003424 <Motor_Direction+0x48>)
 8003402:	f001 fb73 	bl	8004aec <HAL_GPIO_WritePin>
	}else if (direction == LEFT){
		HAL_GPIO_WritePin(GPIOA, DIR_Pin, (GPIO_PIN_RESET^invert));	//Disable Motor, XOR with SET to invert it if selected
	}

}
 8003406:	e009      	b.n	800341c <Motor_Direction+0x40>
	}else if (direction == LEFT){
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <Motor_Direction+0x40>
		HAL_GPIO_WritePin(GPIOA, DIR_Pin, (GPIO_PIN_RESET^invert));	//Disable Motor, XOR with SET to invert it if selected
 800340e:	88bb      	ldrh	r3, [r7, #4]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	2104      	movs	r1, #4
 8003416:	4803      	ldr	r0, [pc, #12]	; (8003424 <Motor_Direction+0x48>)
 8003418:	f001 fb68 	bl	8004aec <HAL_GPIO_WritePin>
}
 800341c:	bf00      	nop
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40020000 	.word	0x40020000

08003428 <Motor_Speed_RPM>:
/**
  * @brief Function to select the speed of the motor in RPM
  * @param 	rpm - Speed value in RPM it is wanted
  * @retval
  */
void Motor_Speed_RPM(uint16_t speed){
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	80fb      	strh	r3, [r7, #6]
	float ARR_value_temp = 0;
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
	uint32_t ARR_value;
	if ((TIM2->CR1 & (1 << 0)) ^ (1 << 0)){			//Checking if the Timer is already enabled, if not, enable it
 8003438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <Motor_Speed_RPM+0x22>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <Motor_Speed_RPM+0x24>
 800344a:	2300      	movs	r3, #0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <Motor_Speed_RPM+0x30>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	//Enable Timer2 on PWM Mode
 8003450:	2100      	movs	r1, #0
 8003452:	4818      	ldr	r0, [pc, #96]	; (80034b4 <Motor_Speed_RPM+0x8c>)
 8003454:	f002 fd00 	bl	8005e58 <HAL_TIM_PWM_Start>
	}
	if (speed > 0){
 8003458:	88fb      	ldrh	r3, [r7, #6]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d021      	beq.n	80034a2 <Motor_Speed_RPM+0x7a>
	ARR_value_temp = ((60 * (float) CLK_FREQ_T2)/(speed*motor_stepsrev));	//Calculation Value to load in ARR
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	4a15      	ldr	r2, [pc, #84]	; (80034b8 <Motor_Speed_RPM+0x90>)
 8003462:	8812      	ldrh	r2, [r2, #0]
 8003464:	fb02 f303 	mul.w	r3, r2, r3
 8003468:	ee07 3a90 	vmov	s15, r3
 800346c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003470:	eddf 6a12 	vldr	s13, [pc, #72]	; 80034bc <Motor_Speed_RPM+0x94>
 8003474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003478:	edc7 7a03 	vstr	s15, [r7, #12]
	ARR_value = (uint32_t) ARR_value_temp;	//Uint32 casting
 800347c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003484:	ee17 3a90 	vmov	r3, s15
 8003488:	60bb      	str	r3, [r7, #8]
	TIM2->ARR = ARR_value+1;				//Load ARR + 1
 800348a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	3301      	adds	r3, #1
 8003492:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CCR1 = (uint32_t) (ARR_value+1)/2;	//Load CCR1 to have always 50% Duty Cycle
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	3301      	adds	r3, #1
 8003498:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800349c:	085b      	lsrs	r3, r3, #1
 800349e:	6353      	str	r3, [r2, #52]	; 0x34
	}else{
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);	//Disable Timer2 on PWM Mode
	}
}
 80034a0:	e003      	b.n	80034aa <Motor_Speed_RPM+0x82>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);	//Disable Timer2 on PWM Mode
 80034a2:	2100      	movs	r1, #0
 80034a4:	4803      	ldr	r0, [pc, #12]	; (80034b4 <Motor_Speed_RPM+0x8c>)
 80034a6:	f002 fd87 	bl	8005fb8 <HAL_TIM_PWM_Stop>
}
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000550 	.word	0x20000550
 80034b8:	20000008 	.word	0x20000008
 80034bc:	4f163426 	.word	0x4f163426

080034c0 <Motor_Feedrate_Update>:
  * @brief Function to update the feedrate of the motor following the acceleration
  * @param 	current_feedrate - Current feedrate
  * 		target_speed - Target feedrate
  * @retval updated_feedrate - Updated feedrate
  */
uint16_t Motor_Feedrate_Update(int16_t *current_feedrate, int16_t *target_feedrate){
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
	static uint16_t prev_target_feedrate;	//Static Variable to storage the previous target feedrate
	static uint16_t acc_step_increment;		//Static Variable to storage the acceleration step increment
	static uint16_t diff_feedrate;			//Static variable to storage the delta feedrate

	uint16_t acc_step = ceil(ACC_TIME/ACC_UPDATE_RATIO);	//Calculation acc_step with the desired time in ms, and the refresh ratio on acc update
 80034ca:	2314      	movs	r3, #20
 80034cc:	81fb      	strh	r3, [r7, #14]
															//This will provide the number of steps we need to do to accelerate on the desired ACC_TIME

	diff_feedrate = *target_feedrate - *current_feedrate;	//Calculation for the Delta feedrate
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	4b52      	ldr	r3, [pc, #328]	; (800362c <Motor_Feedrate_Update+0x16c>)
 80034e4:	801a      	strh	r2, [r3, #0]

	if (prev_target_feedrate != *target_feedrate){			//If the storaged feedrate changed since last time
 80034e6:	4b52      	ldr	r3, [pc, #328]	; (8003630 <Motor_Feedrate_Update+0x170>)
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d026      	beq.n	8003544 <Motor_Feedrate_Update+0x84>
		prev_target_feedrate = *target_feedrate;				//Reload the prev_target_feedrate with latest value
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	4b4c      	ldr	r3, [pc, #304]	; (8003630 <Motor_Feedrate_Update+0x170>)
 8003500:	801a      	strh	r2, [r3, #0]
		diff_feedrate = abs(*target_feedrate - *current_feedrate);	//Re-calculate the delta feedrate
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003508:	461a      	mov	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	bfb8      	it	lt
 8003516:	425b      	neglt	r3, r3
 8003518:	b29a      	uxth	r2, r3
 800351a:	4b44      	ldr	r3, [pc, #272]	; (800362c <Motor_Feedrate_Update+0x16c>)
 800351c:	801a      	strh	r2, [r3, #0]
		acc_step_increment = ceil(diff_feedrate / acc_step);	//Re-calculate the acceleration step increment, so we take the Delta feedrate and divide it by
 800351e:	4b43      	ldr	r3, [pc, #268]	; (800362c <Motor_Feedrate_Update+0x16c>)
 8003520:	881a      	ldrh	r2, [r3, #0]
 8003522:	89fb      	ldrh	r3, [r7, #14]
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	b29b      	uxth	r3, r3
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd f92c 	bl	8000788 <__aeabi_i2d>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4610      	mov	r0, r2
 8003536:	4619      	mov	r1, r3
 8003538:	f7fd fa18 	bl	800096c <__aeabi_d2uiz>
 800353c:	4603      	mov	r3, r0
 800353e:	b29a      	uxth	r2, r3
 8003540:	4b3c      	ldr	r3, [pc, #240]	; (8003634 <Motor_Feedrate_Update+0x174>)
 8003542:	801a      	strh	r2, [r3, #0]
																//the numbers of step required to meeting the timing
	}

	if ( *current_feedrate < *target_feedrate){			//If the current feedrate is lower than the target, accelerate
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f9b3 2000 	ldrsh.w	r2, [r3]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003550:	429a      	cmp	r2, r3
 8003552:	da1f      	bge.n	8003594 <Motor_Feedrate_Update+0xd4>
		if (  (acc_step_increment >= diff_feedrate) || (!acc_step_increment) ){	//If the step increment is lower than the delta feedrate then we increase by one to reach the target
 8003554:	4b37      	ldr	r3, [pc, #220]	; (8003634 <Motor_Feedrate_Update+0x174>)
 8003556:	881a      	ldrh	r2, [r3, #0]
 8003558:	4b34      	ldr	r3, [pc, #208]	; (800362c <Motor_Feedrate_Update+0x16c>)
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d203      	bcs.n	8003568 <Motor_Feedrate_Update+0xa8>
 8003560:	4b34      	ldr	r3, [pc, #208]	; (8003634 <Motor_Feedrate_Update+0x174>)
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d109      	bne.n	800357c <Motor_Feedrate_Update+0xbc>
																				//Or if the acceleration step increment is zero (If the delta feedrate is lower than the acceleration step)
			*current_feedrate = *current_feedrate + 1;	//Increment by one
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800356e:	b29b      	uxth	r3, r3
 8003570:	3301      	adds	r3, #1
 8003572:	b29b      	uxth	r3, r3
 8003574:	b21a      	sxth	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	801a      	strh	r2, [r3, #0]
 800357a:	e03a      	b.n	80035f2 <Motor_Feedrate_Update+0x132>
		}else{											//If the delta feedrate is bigger than acc_step and the the step incrmenet is lower than the delta feedrate the we increase
			*current_feedrate = *current_feedrate + acc_step_increment;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003582:	b29a      	uxth	r2, r3
 8003584:	4b2b      	ldr	r3, [pc, #172]	; (8003634 <Motor_Feedrate_Update+0x174>)
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	4413      	add	r3, r2
 800358a:	b29b      	uxth	r3, r3
 800358c:	b21a      	sxth	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	801a      	strh	r2, [r3, #0]
 8003592:	e02e      	b.n	80035f2 <Motor_Feedrate_Update+0x132>
		}
	}else if (*current_feedrate == *target_feedrate){	//If the target is achieved
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f9b3 2000 	ldrsh.w	r2, [r3]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d026      	beq.n	80035f2 <Motor_Feedrate_Update+0x132>

	}else if ( *current_feedrate > *target_feedrate ){	//If the current feedrate is higher than the target, decelerate
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	dd1e      	ble.n	80035f2 <Motor_Feedrate_Update+0x132>
		if (  (acc_step_increment >= diff_feedrate) || (!acc_step_increment) ){	//If the step increment is lower than the delta feedrate then we increase by one to reach the target
 80035b4:	4b1f      	ldr	r3, [pc, #124]	; (8003634 <Motor_Feedrate_Update+0x174>)
 80035b6:	881a      	ldrh	r2, [r3, #0]
 80035b8:	4b1c      	ldr	r3, [pc, #112]	; (800362c <Motor_Feedrate_Update+0x16c>)
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d203      	bcs.n	80035c8 <Motor_Feedrate_Update+0x108>
 80035c0:	4b1c      	ldr	r3, [pc, #112]	; (8003634 <Motor_Feedrate_Update+0x174>)
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d109      	bne.n	80035dc <Motor_Feedrate_Update+0x11c>
																						//Or if the acceleration step increment is zero (If the delta feedrate is lower than the acceleration step)
			*current_feedrate = *current_feedrate - 1;	//Decrement by one
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	b21a      	sxth	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	801a      	strh	r2, [r3, #0]
 80035da:	e00a      	b.n	80035f2 <Motor_Feedrate_Update+0x132>
		}else{											//If the delta feedrate is bigger than acc_step and the the step incrmenet is lower than the delta feedrate the we increase
			*current_feedrate = *current_feedrate - acc_step_increment;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	4b13      	ldr	r3, [pc, #76]	; (8003634 <Motor_Feedrate_Update+0x174>)
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	b21a      	sxth	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	801a      	strh	r2, [r3, #0]
		}
	}

	uint16_t rpm = *current_feedrate/leadscrew_pitch;	//Calculation for RPM with the leadscrew pitch
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f8:	ee07 3a90 	vmov	s15, r3
 80035fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003600:	4b0d      	ldr	r3, [pc, #52]	; (8003638 <Motor_Feedrate_Update+0x178>)
 8003602:	ed93 7a00 	vldr	s14, [r3]
 8003606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800360a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800360e:	ee17 3a90 	vmov	r3, s15
 8003612:	81bb      	strh	r3, [r7, #12]
	Motor_Speed_RPM(rpm);	//Set the motor speed
 8003614:	89bb      	ldrh	r3, [r7, #12]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff ff06 	bl	8003428 <Motor_Speed_RPM>

	return *current_feedrate;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003622:	b29b      	uxth	r3, r3
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	200006d2 	.word	0x200006d2
 8003630:	200006d4 	.word	0x200006d4
 8003634:	200006d6 	.word	0x200006d6
 8003638:	2000000c 	.word	0x2000000c

0800363c <LCD_Write_Feedrate>:
  * @param 	feedrate - feedrate value which expected to be writen into the LCD
  * 		col_pos - column position for the number
  * 		row_pos - raw position for the number
  * @retval
  */
void LCD_Write_Feedrate(int32_t feedrate, int32_t col_pos, int32_t row_pos){
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
	static int32_t saved_feedrate;
	if ( saved_feedrate != feedrate ){					//Print only if the feedrate changed
 8003648:	4b09      	ldr	r3, [pc, #36]	; (8003670 <LCD_Write_Feedrate+0x34>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	429a      	cmp	r2, r3
 8003650:	d00a      	beq.n	8003668 <LCD_Write_Feedrate+0x2c>
		LCD_Write_Number(feedrate,col_pos,row_pos);		//Write the number in the desired position
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f7ff fc5e 	bl	8002f18 <LCD_Write_Number>
		lcdPrint("mm/min ");							//Adding mm/min
 800365c:	4805      	ldr	r0, [pc, #20]	; (8003674 <LCD_Write_Feedrate+0x38>)
 800365e:	f7fd fc71 	bl	8000f44 <lcdPrint>
		saved_feedrate = feedrate;						//Updating Feedrate Saved
 8003662:	4a03      	ldr	r2, [pc, #12]	; (8003670 <LCD_Write_Feedrate+0x34>)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6013      	str	r3, [r2, #0]
	}
}
 8003668:	bf00      	nop
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	200006d8 	.word	0x200006d8
 8003674:	08007ab8 	.word	0x08007ab8

08003678 <Switch_Status_Read>:
/**
  * @brief Function to read the value for the switchs
  * @param	- NONE
  * @retval	- Switch Status RIGHT, LEFT, MID, FAIL
  */
int16_t Switch_Status_Read(void){
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
	int16_t switch_right, switch_left, sw_status;
	switch_right = HAL_GPIO_ReadPin(SW_RIGHT_GPIO_Port, SW_RIGHT_Pin);	//Storage value of RIGHT pin
 800367e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003682:	4821      	ldr	r0, [pc, #132]	; (8003708 <Switch_Status_Read+0x90>)
 8003684:	f001 fa1a 	bl	8004abc <HAL_GPIO_ReadPin>
 8003688:	4603      	mov	r3, r0
 800368a:	80bb      	strh	r3, [r7, #4]
	switch_left = HAL_GPIO_ReadPin(SW_LEFT_GPIO_Port, SW_LEFT_Pin);		//Storage value of LEFT pin
 800368c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003690:	481d      	ldr	r0, [pc, #116]	; (8003708 <Switch_Status_Read+0x90>)
 8003692:	f001 fa13 	bl	8004abc <HAL_GPIO_ReadPin>
 8003696:	4603      	mov	r3, r0
 8003698:	807b      	strh	r3, [r7, #2]
	if ( !switch_right & !switch_left ){	//If both are enabled at same time, return FAIL
 800369a:	88ba      	ldrh	r2, [r7, #4]
 800369c:	887b      	ldrh	r3, [r7, #2]
 800369e:	4313      	orrs	r3, r2
 80036a0:	b21b      	sxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d103      	bne.n	80036ae <Switch_Status_Read+0x36>
		sw_status = FAIL;
 80036a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036aa:	80fb      	strh	r3, [r7, #6]
 80036ac:	e026      	b.n	80036fc <Switch_Status_Read+0x84>
	}else if( switch_right & switch_left ){	//If none are enabled return MID point
 80036ae:	88ba      	ldrh	r2, [r7, #4]
 80036b0:	887b      	ldrh	r3, [r7, #2]
 80036b2:	4013      	ands	r3, r2
 80036b4:	b21b      	sxth	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <Switch_Status_Read+0x48>
		sw_status = MID;
 80036ba:	2302      	movs	r3, #2
 80036bc:	80fb      	strh	r3, [r7, #6]
 80036be:	e01d      	b.n	80036fc <Switch_Status_Read+0x84>
	}else if ( ( !switch_right ) & switch_left ){	//If right is enable return RIGHT
 80036c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <Switch_Status_Read+0x68>
		sw_status = RIGHT;
 80036da:	2301      	movs	r3, #1
 80036dc:	80fb      	strh	r3, [r7, #6]
 80036de:	e00d      	b.n	80036fc <Switch_Status_Read+0x84>
	}else if ( switch_right & ( !switch_left ) ){	//If left is enable return LEFT
 80036e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80036e4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80036e8:	2a00      	cmp	r2, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2201      	moveq	r2, #1
 80036ee:	2200      	movne	r2, #0
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <Switch_Status_Read+0x84>
		sw_status = LEFT;
 80036f8:	2300      	movs	r3, #0
 80036fa:	80fb      	strh	r3, [r7, #6]
	}
	return sw_status;
 80036fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40020400 	.word	0x40020400

0800370c <Update_Feedrate>:
/**
  * @brief Update Feedrate Function
  * @param old_value - Pointer to the value storaged as latest feedrate value
  * @retval new_feedrate - Updated Feedrate
  */
void Update_Feedrate(int16_t *feedrate){
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
	if (step_mode == STEP_NORMAL){
 8003714:	4b20      	ldr	r3, [pc, #128]	; (8003798 <Update_Feedrate+0x8c>)
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10d      	bne.n	8003738 <Update_Feedrate+0x2c>
		*feedrate += Encoder_Read();	//Update Feedrate
 800371c:	f7ff fbbc 	bl	8002e98 <Encoder_Read>
 8003720:	4601      	mov	r1, r0
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003728:	b29a      	uxth	r2, r3
 800372a:	b28b      	uxth	r3, r1
 800372c:	4413      	add	r3, r2
 800372e:	b29b      	uxth	r3, r3
 8003730:	b21a      	sxth	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	801a      	strh	r2, [r3, #0]
 8003736:	e015      	b.n	8003764 <Update_Feedrate+0x58>
	}else if (step_mode == STEP_x10){
 8003738:	4b17      	ldr	r3, [pc, #92]	; (8003798 <Update_Feedrate+0x8c>)
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d111      	bne.n	8003764 <Update_Feedrate+0x58>
		*feedrate += ( 10 * Encoder_Read());	//Update Feedrate
 8003740:	f7ff fbaa 	bl	8002e98 <Encoder_Read>
 8003744:	4602      	mov	r2, r0
 8003746:	4613      	mov	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	4619      	mov	r1, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003756:	b29a      	uxth	r2, r3
 8003758:	b28b      	uxth	r3, r1
 800375a:	4413      	add	r3, r2
 800375c:	b29b      	uxth	r3, r3
 800375e:	b21a      	sxth	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	801a      	strh	r2, [r3, #0]
	}
	if (*feedrate <= 0 ){	//Limit the min value to zero
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800376a:	2b00      	cmp	r3, #0
 800376c:	dc03      	bgt.n	8003776 <Update_Feedrate+0x6a>
		*feedrate = 1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	801a      	strh	r2, [r3, #0]
	}else if (*feedrate > MAX_FEEDRATE){
		*feedrate = MAX_FEEDRATE;
	}
}
 8003774:	e00c      	b.n	8003790 <Update_Feedrate+0x84>
	}else if (*feedrate > MAX_FEEDRATE){
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800377c:	461a      	mov	r2, r3
 800377e:	4b07      	ldr	r3, [pc, #28]	; (800379c <Update_Feedrate+0x90>)
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	dd04      	ble.n	8003790 <Update_Feedrate+0x84>
		*feedrate = MAX_FEEDRATE;
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <Update_Feedrate+0x90>)
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b21a      	sxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	801a      	strh	r2, [r3, #0]
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	20000676 	.word	0x20000676
 800379c:	20000010 	.word	0x20000010

080037a0 <Encoder_Switch_Status_Read>:
/**
  * @brief Function to read the value for the encoder switch
  * @param	- NONE
  * @retval	- Encoder Switch Status TRUE, FALSE or TRUE_HOLD
  */
int16_t Encoder_Switch_Status_Read(void){
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
	static uint16_t temp_debouncing = 0;	//Temporal variable to storage the debouncing
	static uint16_t previous_en_sw_status;	//Variable to storage the previous status of the encoder switch
	uint16_t en_sw_status;
	uint16_t encoder_sw_read_value;

	encoder_sw_read_value = HAL_GPIO_ReadPin(EN_SW_GPIO_Port, EN_SW_Pin);
 80037a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037aa:	482a      	ldr	r0, [pc, #168]	; (8003854 <Encoder_Switch_Status_Read+0xb4>)
 80037ac:	f001 f986 	bl	8004abc <HAL_GPIO_ReadPin>
 80037b0:	4603      	mov	r3, r0
 80037b2:	80bb      	strh	r3, [r7, #4]

	if ( ( !encoder_sw_read_value ) && ( !debouncing_en_sw ) ){	//If encoder is pressed and debouncing not enable
 80037b4:	88bb      	ldrh	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10d      	bne.n	80037d6 <Encoder_Switch_Status_Read+0x36>
 80037ba:	4b27      	ldr	r3, [pc, #156]	; (8003858 <Encoder_Switch_Status_Read+0xb8>)
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <Encoder_Switch_Status_Read+0x36>
		debouncing_en_sw = TRUE;	//Enable debouncing
 80037c2:	4b25      	ldr	r3, [pc, #148]	; (8003858 <Encoder_Switch_Status_Read+0xb8>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	801a      	strh	r2, [r3, #0]
		temp_debouncing = debouncing;	//Load value from debouncing
 80037c8:	4b24      	ldr	r3, [pc, #144]	; (800385c <Encoder_Switch_Status_Read+0xbc>)
 80037ca:	881a      	ldrh	r2, [r3, #0]
 80037cc:	4b24      	ldr	r3, [pc, #144]	; (8003860 <Encoder_Switch_Status_Read+0xc0>)
 80037ce:	801a      	strh	r2, [r3, #0]
		en_sw_status = FALSE;			//SW status still disable waiting debouncing time
 80037d0:	2300      	movs	r3, #0
 80037d2:	80fb      	strh	r3, [r7, #6]
 80037d4:	e037      	b.n	8003846 <Encoder_Switch_Status_Read+0xa6>
	}else if ( ( !encoder_sw_read_value ) && ( temp_debouncing+2 <= debouncing )){ //If encoder still pressed and debouncing +2 already passed
 80037d6:	88bb      	ldrh	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d118      	bne.n	800380e <Encoder_Switch_Status_Read+0x6e>
 80037dc:	4b20      	ldr	r3, [pc, #128]	; (8003860 <Encoder_Switch_Status_Read+0xc0>)
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	3301      	adds	r3, #1
 80037e2:	4a1e      	ldr	r2, [pc, #120]	; (800385c <Encoder_Switch_Status_Read+0xbc>)
 80037e4:	8812      	ldrh	r2, [r2, #0]
 80037e6:	4293      	cmp	r3, r2
 80037e8:	da11      	bge.n	800380e <Encoder_Switch_Status_Read+0x6e>
		en_sw_status = FALSE;	//Status still FALSE
 80037ea:	2300      	movs	r3, #0
 80037ec:	80fb      	strh	r3, [r7, #6]
		//debouncing_en_sw = FALSE;	//Disable debouncing
		previous_en_sw_status = TRUE;	//Set previous status of enable TRUE
 80037ee:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <Encoder_Switch_Status_Read+0xc4>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	801a      	strh	r2, [r3, #0]
		if ( temp_debouncing+SW_HOLD_TIME <= debouncing ){	//If we keep the button pressed more than the time defines
 80037f4:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <Encoder_Switch_Status_Read+0xc0>)
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	3309      	adds	r3, #9
 80037fa:	4a18      	ldr	r2, [pc, #96]	; (800385c <Encoder_Switch_Status_Read+0xbc>)
 80037fc:	8812      	ldrh	r2, [r2, #0]
 80037fe:	4293      	cmp	r3, r2
 8003800:	da21      	bge.n	8003846 <Encoder_Switch_Status_Read+0xa6>
			en_sw_status = TRUE_HOLD;
 8003802:	2303      	movs	r3, #3
 8003804:	80fb      	strh	r3, [r7, #6]
			previous_en_sw_status = TRUE_HOLD;
 8003806:	4b17      	ldr	r3, [pc, #92]	; (8003864 <Encoder_Switch_Status_Read+0xc4>)
 8003808:	2203      	movs	r2, #3
 800380a:	801a      	strh	r2, [r3, #0]
		if ( temp_debouncing+SW_HOLD_TIME <= debouncing ){	//If we keep the button pressed more than the time defines
 800380c:	e01b      	b.n	8003846 <Encoder_Switch_Status_Read+0xa6>
		}
	}else if( ( encoder_sw_read_value )){
 800380e:	88bb      	ldrh	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d018      	beq.n	8003846 <Encoder_Switch_Status_Read+0xa6>
		if ( previous_en_sw_status == TRUE_HOLD ){	//If previous status was HOLD< do not report push
 8003814:	4b13      	ldr	r3, [pc, #76]	; (8003864 <Encoder_Switch_Status_Read+0xc4>)
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d102      	bne.n	8003822 <Encoder_Switch_Status_Read+0x82>
			en_sw_status = FALSE;
 800381c:	2300      	movs	r3, #0
 800381e:	80fb      	strh	r3, [r7, #6]
 8003820:	e00e      	b.n	8003840 <Encoder_Switch_Status_Read+0xa0>
		}else if ( previous_en_sw_status == TRUE ){
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <Encoder_Switch_Status_Read+0xc4>)
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d105      	bne.n	8003836 <Encoder_Switch_Status_Read+0x96>
			en_sw_status = TRUE;	//If button released then send status TRUE
 800382a:	2301      	movs	r3, #1
 800382c:	80fb      	strh	r3, [r7, #6]
			debouncing_en_sw = FALSE;	//Disable debouncing
 800382e:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <Encoder_Switch_Status_Read+0xb8>)
 8003830:	2200      	movs	r2, #0
 8003832:	801a      	strh	r2, [r3, #0]
 8003834:	e004      	b.n	8003840 <Encoder_Switch_Status_Read+0xa0>
		}else{
			en_sw_status = FALSE;
 8003836:	2300      	movs	r3, #0
 8003838:	80fb      	strh	r3, [r7, #6]
			debouncing_en_sw = FALSE;	//Disable debouncing
 800383a:	4b07      	ldr	r3, [pc, #28]	; (8003858 <Encoder_Switch_Status_Read+0xb8>)
 800383c:	2200      	movs	r2, #0
 800383e:	801a      	strh	r2, [r3, #0]
		}
		previous_en_sw_status = FALSE;	//Reset variable of previous status
 8003840:	4b08      	ldr	r3, [pc, #32]	; (8003864 <Encoder_Switch_Status_Read+0xc4>)
 8003842:	2200      	movs	r2, #0
 8003844:	801a      	strh	r2, [r3, #0]
	}else{
		//en_sw_status = FALSE;	//In case other condition, send FALSE
	}
	return en_sw_status;
 8003846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40020400 	.word	0x40020400
 8003858:	200006ca 	.word	0x200006ca
 800385c:	200006ce 	.word	0x200006ce
 8003860:	200006dc 	.word	0x200006dc
 8003864:	200006de 	.word	0x200006de

08003868 <Aux_Switch_Status_Read>:
/**
  * @brief Function to read the value for auxiliary switch
  * @param	- NONE
  * @retval	- Aux Switch Status TRUE, FALSE or TRUE_HOLD
  */
int16_t Aux_Switch_Status_Read(void){
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
	static uint16_t aux_temp_debouncing = 0;	//Temporal variable to storage the debouncing
	static uint16_t previous_aux_sw_status;	//Variable to storage the previous status of the encoder switch
	uint16_t aux_sw_status;
	uint16_t aux_sw_read_value;

	aux_sw_read_value = HAL_GPIO_ReadPin(SEC_SW_GPIO_Port, SEC_SW_Pin);
 800386e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003872:	482a      	ldr	r0, [pc, #168]	; (800391c <Aux_Switch_Status_Read+0xb4>)
 8003874:	f001 f922 	bl	8004abc <HAL_GPIO_ReadPin>
 8003878:	4603      	mov	r3, r0
 800387a:	80bb      	strh	r3, [r7, #4]

	if ( ( !aux_sw_read_value ) && ( !debouncing_aux_sw ) ){	//If encoder is pressed and debouncing not enable
 800387c:	88bb      	ldrh	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10d      	bne.n	800389e <Aux_Switch_Status_Read+0x36>
 8003882:	4b27      	ldr	r3, [pc, #156]	; (8003920 <Aux_Switch_Status_Read+0xb8>)
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <Aux_Switch_Status_Read+0x36>
		debouncing_aux_sw = TRUE;	//Enable debouncing
 800388a:	4b25      	ldr	r3, [pc, #148]	; (8003920 <Aux_Switch_Status_Read+0xb8>)
 800388c:	2201      	movs	r2, #1
 800388e:	801a      	strh	r2, [r3, #0]
		aux_temp_debouncing = aux_debouncing;	//Load value from debouncing
 8003890:	4b24      	ldr	r3, [pc, #144]	; (8003924 <Aux_Switch_Status_Read+0xbc>)
 8003892:	881a      	ldrh	r2, [r3, #0]
 8003894:	4b24      	ldr	r3, [pc, #144]	; (8003928 <Aux_Switch_Status_Read+0xc0>)
 8003896:	801a      	strh	r2, [r3, #0]
		aux_sw_status = FALSE;			//SW status still disable waiting debouncing time
 8003898:	2300      	movs	r3, #0
 800389a:	80fb      	strh	r3, [r7, #6]
 800389c:	e037      	b.n	800390e <Aux_Switch_Status_Read+0xa6>
	}else if ( ( !aux_sw_read_value ) && ( aux_temp_debouncing+2 <= aux_debouncing )){ //If encoder still pressed and debouncing +2 already passed
 800389e:	88bb      	ldrh	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d118      	bne.n	80038d6 <Aux_Switch_Status_Read+0x6e>
 80038a4:	4b20      	ldr	r3, [pc, #128]	; (8003928 <Aux_Switch_Status_Read+0xc0>)
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	4a1e      	ldr	r2, [pc, #120]	; (8003924 <Aux_Switch_Status_Read+0xbc>)
 80038ac:	8812      	ldrh	r2, [r2, #0]
 80038ae:	4293      	cmp	r3, r2
 80038b0:	da11      	bge.n	80038d6 <Aux_Switch_Status_Read+0x6e>
		aux_sw_status = FALSE;	//Status still FALSE
 80038b2:	2300      	movs	r3, #0
 80038b4:	80fb      	strh	r3, [r7, #6]
		//debouncing_aux_sw = FALSE;	//Disable debouncing
		previous_aux_sw_status = TRUE;	//Set previous status of enable TRUE
 80038b6:	4b1d      	ldr	r3, [pc, #116]	; (800392c <Aux_Switch_Status_Read+0xc4>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	801a      	strh	r2, [r3, #0]
		if ( aux_temp_debouncing+SW_HOLD_TIME <= aux_debouncing ){	//If we keep the button pressed more than the time defines
 80038bc:	4b1a      	ldr	r3, [pc, #104]	; (8003928 <Aux_Switch_Status_Read+0xc0>)
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	3309      	adds	r3, #9
 80038c2:	4a18      	ldr	r2, [pc, #96]	; (8003924 <Aux_Switch_Status_Read+0xbc>)
 80038c4:	8812      	ldrh	r2, [r2, #0]
 80038c6:	4293      	cmp	r3, r2
 80038c8:	da21      	bge.n	800390e <Aux_Switch_Status_Read+0xa6>
			aux_sw_status = TRUE_HOLD;
 80038ca:	2303      	movs	r3, #3
 80038cc:	80fb      	strh	r3, [r7, #6]
			previous_aux_sw_status = TRUE_HOLD;
 80038ce:	4b17      	ldr	r3, [pc, #92]	; (800392c <Aux_Switch_Status_Read+0xc4>)
 80038d0:	2203      	movs	r2, #3
 80038d2:	801a      	strh	r2, [r3, #0]
		if ( aux_temp_debouncing+SW_HOLD_TIME <= aux_debouncing ){	//If we keep the button pressed more than the time defines
 80038d4:	e01b      	b.n	800390e <Aux_Switch_Status_Read+0xa6>
		}
	}else if( ( aux_sw_read_value )){
 80038d6:	88bb      	ldrh	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d018      	beq.n	800390e <Aux_Switch_Status_Read+0xa6>
		if ( previous_aux_sw_status == TRUE_HOLD ){	//If previous status was HOLD< do not report push
 80038dc:	4b13      	ldr	r3, [pc, #76]	; (800392c <Aux_Switch_Status_Read+0xc4>)
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d102      	bne.n	80038ea <Aux_Switch_Status_Read+0x82>
			aux_sw_status = FALSE;
 80038e4:	2300      	movs	r3, #0
 80038e6:	80fb      	strh	r3, [r7, #6]
 80038e8:	e00e      	b.n	8003908 <Aux_Switch_Status_Read+0xa0>
		}else if ( previous_aux_sw_status == TRUE ){
 80038ea:	4b10      	ldr	r3, [pc, #64]	; (800392c <Aux_Switch_Status_Read+0xc4>)
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d105      	bne.n	80038fe <Aux_Switch_Status_Read+0x96>
			aux_sw_status = TRUE;	//If button released then send status TRUE
 80038f2:	2301      	movs	r3, #1
 80038f4:	80fb      	strh	r3, [r7, #6]
			debouncing_aux_sw = FALSE;	//Disable debouncing
 80038f6:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <Aux_Switch_Status_Read+0xb8>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	801a      	strh	r2, [r3, #0]
 80038fc:	e004      	b.n	8003908 <Aux_Switch_Status_Read+0xa0>
		}else{
			aux_sw_status = FALSE;
 80038fe:	2300      	movs	r3, #0
 8003900:	80fb      	strh	r3, [r7, #6]
			debouncing_aux_sw = FALSE;	//Disable debouncing
 8003902:	4b07      	ldr	r3, [pc, #28]	; (8003920 <Aux_Switch_Status_Read+0xb8>)
 8003904:	2200      	movs	r2, #0
 8003906:	801a      	strh	r2, [r3, #0]
		}
		previous_aux_sw_status = FALSE;	//Reset variable of previous status
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <Aux_Switch_Status_Read+0xc4>)
 800390a:	2200      	movs	r2, #0
 800390c:	801a      	strh	r2, [r3, #0]
	}else{
		//aux_sw_status = FALSE;	//In case other condition, send FALSE
	}
	return aux_sw_status;
 800390e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40020400 	.word	0x40020400
 8003920:	200006cc 	.word	0x200006cc
 8003924:	200006d0 	.word	0x200006d0
 8003928:	200006e0 	.word	0x200006e0
 800392c:	200006e2 	.word	0x200006e2

08003930 <Save_Parameter_Data>:
/**
  * @brief Function to save the data into flash (EEPROM Emulation)
  * @param	- Pointer to the struct to be saved
  * @retval
  */
uint16_t Save_Parameter_Data(str_parameters *struct_ptr){
 8003930:	b5b0      	push	{r4, r5, r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	  {
	    str_parameters temp;
	    uint8_t bytes[sizeof(*struct_ptr)];
	  }save_union_par;

	  save_union_par.temp = *struct_ptr; //Copy values from value struct to uniun
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f107 0408 	add.w	r4, r7, #8
 800393e:	461d      	mov	r5, r3
 8003940:	6828      	ldr	r0, [r5, #0]
 8003942:	6869      	ldr	r1, [r5, #4]
 8003944:	68aa      	ldr	r2, [r5, #8]
 8003946:	68eb      	ldr	r3, [r5, #12]
 8003948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800394a:	6928      	ldr	r0, [r5, #16]
 800394c:	6020      	str	r0, [r4, #0]
 800394e:	8aab      	ldrh	r3, [r5, #20]
 8003950:	80a3      	strh	r3, [r4, #4]

	  for (uint8_t i=0; i<sizeof(*struct_ptr); i++)  //Transfers values to Union
 8003952:	2300      	movs	r3, #0
 8003954:	77fb      	strb	r3, [r7, #31]
 8003956:	e00b      	b.n	8003970 <Save_Parameter_Data+0x40>
	  {
	    ee_writeToRam(i, 1, &save_union_par.bytes[i]);
 8003958:	7ff8      	ldrb	r0, [r7, #31]
 800395a:	7ffb      	ldrb	r3, [r7, #31]
 800395c:	f107 0208 	add.w	r2, r7, #8
 8003960:	4413      	add	r3, r2
 8003962:	461a      	mov	r2, r3
 8003964:	2101      	movs	r1, #1
 8003966:	f7fd fdb3 	bl	80014d0 <ee_writeToRam>
	  for (uint8_t i=0; i<sizeof(*struct_ptr); i++)  //Transfers values to Union
 800396a:	7ffb      	ldrb	r3, [r7, #31]
 800396c:	3301      	adds	r3, #1
 800396e:	77fb      	strb	r3, [r7, #31]
 8003970:	7ffb      	ldrb	r3, [r7, #31]
 8003972:	2b15      	cmp	r3, #21
 8003974:	d9f0      	bls.n	8003958 <Save_Parameter_Data+0x28>
	  }
	  return ee_commit();
 8003976:	f7fd fdcd 	bl	8001514 <ee_commit>
 800397a:	4603      	mov	r3, r0
 800397c:	b29b      	uxth	r3, r3
}
 800397e:	4618      	mov	r0, r3
 8003980:	3720      	adds	r7, #32
 8003982:	46bd      	mov	sp, r7
 8003984:	bdb0      	pop	{r4, r5, r7, pc}

08003986 <Read_Parameter_Data>:
/**
  * @brief Function to read the data from flash (EEPROM Emulation)
  * @param	- Pointer to the struct in which the data needs to be loaded
  * @retval
  */
uint16_t Read_Parameter_Data(str_parameters *struct_ptr){
 8003986:	b5b0      	push	{r4, r5, r7, lr}
 8003988:	b08a      	sub	sp, #40	; 0x28
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
		str_parameters temp;
		uint8_t bytes[sizeof(*struct_ptr)];
	}save_union_par;

	uint16_t status_read;
	uint16_t read_fail = 1;
 800398e:	2301      	movs	r3, #1
 8003990:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t data;             //Temporal variable to copy each data from EEPROM to Union
	for (uint8_t i=0; i<sizeof(*struct_ptr); i++)  //Transfers values to Union
 8003992:	2300      	movs	r3, #0
 8003994:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003998:	e01a      	b.n	80039d0 <Read_Parameter_Data+0x4a>
	{
		status_read = ee_read(i, 1, &data);
 800399a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800399e:	f107 020b 	add.w	r2, r7, #11
 80039a2:	2101      	movs	r1, #1
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fd fbed 	bl	8001184 <ee_read>
 80039aa:	4603      	mov	r3, r0
 80039ac:	847b      	strh	r3, [r7, #34]	; 0x22
		save_union_par.bytes[i] = data;   //Save data on union
 80039ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80039b2:	7afa      	ldrb	r2, [r7, #11]
 80039b4:	3328      	adds	r3, #40	; 0x28
 80039b6:	443b      	add	r3, r7
 80039b8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		if (!status_read){
 80039bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <Read_Parameter_Data+0x40>
			read_fail = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (uint8_t i=0; i<sizeof(*struct_ptr); i++)  //Transfers values to Union
 80039c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80039ca:	3301      	adds	r3, #1
 80039cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80039d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80039d4:	2b15      	cmp	r3, #21
 80039d6:	d9e0      	bls.n	800399a <Read_Parameter_Data+0x14>
		}
	}
	*struct_ptr = save_union_par.temp;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	461d      	mov	r5, r3
 80039dc:	f107 040c 	add.w	r4, r7, #12
 80039e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e2:	6028      	str	r0, [r5, #0]
 80039e4:	6069      	str	r1, [r5, #4]
 80039e6:	60aa      	str	r2, [r5, #8]
 80039e8:	60eb      	str	r3, [r5, #12]
 80039ea:	6820      	ldr	r0, [r4, #0]
 80039ec:	6128      	str	r0, [r5, #16]
 80039ee:	88a3      	ldrh	r3, [r4, #4]
 80039f0:	82ab      	strh	r3, [r5, #20]
	return read_fail;
 80039f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3728      	adds	r7, #40	; 0x28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bdb0      	pop	{r4, r5, r7, pc}

080039fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a00:	b672      	cpsid	i
}
 8003a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a04:	e7fe      	b.n	8003a04 <Error_Handler+0x8>
	...

08003a08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	607b      	str	r3, [r7, #4]
 8003a12:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <HAL_MspInit+0x4c>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	4a0f      	ldr	r2, [pc, #60]	; (8003a54 <HAL_MspInit+0x4c>)
 8003a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a1e:	4b0d      	ldr	r3, [pc, #52]	; (8003a54 <HAL_MspInit+0x4c>)
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a26:	607b      	str	r3, [r7, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	603b      	str	r3, [r7, #0]
 8003a2e:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <HAL_MspInit+0x4c>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	4a08      	ldr	r2, [pc, #32]	; (8003a54 <HAL_MspInit+0x4c>)
 8003a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a38:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <HAL_MspInit+0x4c>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40023800 	.word	0x40023800

08003a58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08a      	sub	sp, #40	; 0x28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a60:	f107 0314 	add.w	r3, r7, #20
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a19      	ldr	r2, [pc, #100]	; (8003adc <HAL_I2C_MspInit+0x84>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d12b      	bne.n	8003ad2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	4b18      	ldr	r3, [pc, #96]	; (8003ae0 <HAL_I2C_MspInit+0x88>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	4a17      	ldr	r2, [pc, #92]	; (8003ae0 <HAL_I2C_MspInit+0x88>)
 8003a84:	f043 0302 	orr.w	r3, r3, #2
 8003a88:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8a:	4b15      	ldr	r3, [pc, #84]	; (8003ae0 <HAL_I2C_MspInit+0x88>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a96:	23c0      	movs	r3, #192	; 0xc0
 8003a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a9a:	2312      	movs	r3, #18
 8003a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aaa:	f107 0314 	add.w	r3, r7, #20
 8003aae:	4619      	mov	r1, r3
 8003ab0:	480c      	ldr	r0, [pc, #48]	; (8003ae4 <HAL_I2C_MspInit+0x8c>)
 8003ab2:	f000 fe7f 	bl	80047b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <HAL_I2C_MspInit+0x88>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	4a08      	ldr	r2, [pc, #32]	; (8003ae0 <HAL_I2C_MspInit+0x88>)
 8003ac0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac6:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <HAL_I2C_MspInit+0x88>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ad2:	bf00      	nop
 8003ad4:	3728      	adds	r7, #40	; 0x28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40005400 	.word	0x40005400
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	40020400 	.word	0x40020400

08003ae8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	; 0x28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af0:	f107 0314 	add.w	r3, r7, #20
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	60da      	str	r2, [r3, #12]
 8003afe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a25      	ldr	r2, [pc, #148]	; (8003b9c <HAL_TIM_Encoder_MspInit+0xb4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d144      	bne.n	8003b94 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	4a23      	ldr	r2, [pc, #140]	; (8003ba0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	6453      	str	r3, [r2, #68]	; 0x44
 8003b1a:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	4a1c      	ldr	r2, [pc, #112]	; (8003ba0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	6313      	str	r3, [r2, #48]	; 0x30
 8003b36:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN_A_Pin|EN_B_Pin;
 8003b42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b50:	2300      	movs	r3, #0
 8003b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b54:	2301      	movs	r3, #1
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b58:	f107 0314 	add.w	r3, r7, #20
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4811      	ldr	r0, [pc, #68]	; (8003ba4 <HAL_TIM_Encoder_MspInit+0xbc>)
 8003b60:	f000 fe28 	bl	80047b4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003b64:	2200      	movs	r2, #0
 8003b66:	2100      	movs	r1, #0
 8003b68:	2018      	movs	r0, #24
 8003b6a:	f000 fb04 	bl	8004176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003b6e:	2018      	movs	r0, #24
 8003b70:	f000 fb1d 	bl	80041ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003b74:	2200      	movs	r2, #0
 8003b76:	2100      	movs	r1, #0
 8003b78:	2019      	movs	r0, #25
 8003b7a:	f000 fafc 	bl	8004176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003b7e:	2019      	movs	r0, #25
 8003b80:	f000 fb15 	bl	80041ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003b84:	2200      	movs	r2, #0
 8003b86:	2100      	movs	r1, #0
 8003b88:	201a      	movs	r0, #26
 8003b8a:	f000 faf4 	bl	8004176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003b8e:	201a      	movs	r0, #26
 8003b90:	f000 fb0d 	bl	80041ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003b94:	bf00      	nop
 8003b96:	3728      	adds	r7, #40	; 0x28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40010000 	.word	0x40010000
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	40020000 	.word	0x40020000

08003ba8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb8:	d10e      	bne.n	8003bd8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	4b32      	ldr	r3, [pc, #200]	; (8003c88 <HAL_TIM_Base_MspInit+0xe0>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	4a31      	ldr	r2, [pc, #196]	; (8003c88 <HAL_TIM_Base_MspInit+0xe0>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bca:	4b2f      	ldr	r3, [pc, #188]	; (8003c88 <HAL_TIM_Base_MspInit+0xe0>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003bd6:	e052      	b.n	8003c7e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM9)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a2b      	ldr	r2, [pc, #172]	; (8003c8c <HAL_TIM_Base_MspInit+0xe4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d116      	bne.n	8003c10 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	4b28      	ldr	r3, [pc, #160]	; (8003c88 <HAL_TIM_Base_MspInit+0xe0>)
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	4a27      	ldr	r2, [pc, #156]	; (8003c88 <HAL_TIM_Base_MspInit+0xe0>)
 8003bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bf2:	4b25      	ldr	r3, [pc, #148]	; (8003c88 <HAL_TIM_Base_MspInit+0xe0>)
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2100      	movs	r1, #0
 8003c02:	2018      	movs	r0, #24
 8003c04:	f000 fab7 	bl	8004176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003c08:	2018      	movs	r0, #24
 8003c0a:	f000 fad0 	bl	80041ae <HAL_NVIC_EnableIRQ>
}
 8003c0e:	e036      	b.n	8003c7e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1e      	ldr	r2, [pc, #120]	; (8003c90 <HAL_TIM_Base_MspInit+0xe8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d116      	bne.n	8003c48 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	4b1a      	ldr	r3, [pc, #104]	; (8003c88 <HAL_TIM_Base_MspInit+0xe0>)
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <HAL_TIM_Base_MspInit+0xe0>)
 8003c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c28:	6453      	str	r3, [r2, #68]	; 0x44
 8003c2a:	4b17      	ldr	r3, [pc, #92]	; (8003c88 <HAL_TIM_Base_MspInit+0xe0>)
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003c36:	2200      	movs	r2, #0
 8003c38:	2100      	movs	r1, #0
 8003c3a:	2019      	movs	r0, #25
 8003c3c:	f000 fa9b 	bl	8004176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003c40:	2019      	movs	r0, #25
 8003c42:	f000 fab4 	bl	80041ae <HAL_NVIC_EnableIRQ>
}
 8003c46:	e01a      	b.n	8003c7e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a11      	ldr	r2, [pc, #68]	; (8003c94 <HAL_TIM_Base_MspInit+0xec>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d115      	bne.n	8003c7e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <HAL_TIM_Base_MspInit+0xe0>)
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	4a0b      	ldr	r2, [pc, #44]	; (8003c88 <HAL_TIM_Base_MspInit+0xe0>)
 8003c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c60:	6453      	str	r3, [r2, #68]	; 0x44
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <HAL_TIM_Base_MspInit+0xe0>)
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2100      	movs	r1, #0
 8003c72:	201a      	movs	r0, #26
 8003c74:	f000 fa7f 	bl	8004176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003c78:	201a      	movs	r0, #26
 8003c7a:	f000 fa98 	bl	80041ae <HAL_NVIC_EnableIRQ>
}
 8003c7e:	bf00      	nop
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	40014000 	.word	0x40014000
 8003c90:	40014400 	.word	0x40014400
 8003c94:	40014800 	.word	0x40014800

08003c98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca0:	f107 030c 	add.w	r3, r7, #12
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb8:	d11d      	bne.n	8003cf6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <HAL_TIM_MspPostInit+0x68>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	4a0f      	ldr	r2, [pc, #60]	; (8003d00 <HAL_TIM_MspPostInit+0x68>)
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cca:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <HAL_TIM_MspPostInit+0x68>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	60bb      	str	r3, [r7, #8]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PULSE_Pin;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PULSE_GPIO_Port, &GPIO_InitStruct);
 8003cea:	f107 030c 	add.w	r3, r7, #12
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4804      	ldr	r0, [pc, #16]	; (8003d04 <HAL_TIM_MspPostInit+0x6c>)
 8003cf2:	f000 fd5f 	bl	80047b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003cf6:	bf00      	nop
 8003cf8:	3720      	adds	r7, #32
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40020000 	.word	0x40020000

08003d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d0c:	e7fe      	b.n	8003d0c <NMI_Handler+0x4>

08003d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d12:	e7fe      	b.n	8003d12 <HardFault_Handler+0x4>

08003d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d18:	e7fe      	b.n	8003d18 <MemManage_Handler+0x4>

08003d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d1e:	e7fe      	b.n	8003d1e <BusFault_Handler+0x4>

08003d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d24:	e7fe      	b.n	8003d24 <UsageFault_Handler+0x4>

08003d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d2a:	bf00      	nop
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d42:	b480      	push	{r7}
 8003d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d46:	bf00      	nop
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d54:	f000 f8f0 	bl	8003f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d58:	bf00      	nop
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d60:	4803      	ldr	r0, [pc, #12]	; (8003d70 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8003d62:	f002 fae1 	bl	8006328 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8003d66:	4803      	ldr	r0, [pc, #12]	; (8003d74 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003d68:	f002 fade 	bl	8006328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003d6c:	bf00      	nop
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000508 	.word	0x20000508
 8003d74:	20000598 	.word	0x20000598

08003d78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d7c:	4803      	ldr	r0, [pc, #12]	; (8003d8c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003d7e:	f002 fad3 	bl	8006328 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003d82:	4803      	ldr	r0, [pc, #12]	; (8003d90 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003d84:	f002 fad0 	bl	8006328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003d88:	bf00      	nop
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20000508 	.word	0x20000508
 8003d90:	200005e0 	.word	0x200005e0

08003d94 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d98:	4803      	ldr	r0, [pc, #12]	; (8003da8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003d9a:	f002 fac5 	bl	8006328 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003d9e:	4803      	ldr	r0, [pc, #12]	; (8003dac <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003da0:	f002 fac2 	bl	8006328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003da4:	bf00      	nop
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000508 	.word	0x20000508
 8003dac:	20000628 	.word	0x20000628

08003db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003db8:	4a14      	ldr	r2, [pc, #80]	; (8003e0c <_sbrk+0x5c>)
 8003dba:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <_sbrk+0x60>)
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dc4:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <_sbrk+0x64>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d102      	bne.n	8003dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dcc:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <_sbrk+0x64>)
 8003dce:	4a12      	ldr	r2, [pc, #72]	; (8003e18 <_sbrk+0x68>)
 8003dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dd2:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <_sbrk+0x64>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4413      	add	r3, r2
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d207      	bcs.n	8003df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003de0:	f003 f8aa 	bl	8006f38 <__errno>
 8003de4:	4603      	mov	r3, r0
 8003de6:	220c      	movs	r2, #12
 8003de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dea:	f04f 33ff 	mov.w	r3, #4294967295
 8003dee:	e009      	b.n	8003e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003df0:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <_sbrk+0x64>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003df6:	4b07      	ldr	r3, [pc, #28]	; (8003e14 <_sbrk+0x64>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	4a05      	ldr	r2, [pc, #20]	; (8003e14 <_sbrk+0x64>)
 8003e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e02:	68fb      	ldr	r3, [r7, #12]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	20010000 	.word	0x20010000
 8003e10:	00000400 	.word	0x00000400
 8003e14:	200006e4 	.word	0x200006e4
 8003e18:	20000720 	.word	0x20000720

08003e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e20:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <SystemInit+0x20>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e26:	4a05      	ldr	r2, [pc, #20]	; (8003e3c <SystemInit+0x20>)
 8003e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	e000ed00 	.word	0xe000ed00

08003e40 <Reset_Handler>:
 8003e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e78 <LoopFillZerobss+0x12>
 8003e44:	480d      	ldr	r0, [pc, #52]	; (8003e7c <LoopFillZerobss+0x16>)
 8003e46:	490e      	ldr	r1, [pc, #56]	; (8003e80 <LoopFillZerobss+0x1a>)
 8003e48:	4a0e      	ldr	r2, [pc, #56]	; (8003e84 <LoopFillZerobss+0x1e>)
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e002      	b.n	8003e54 <LoopCopyDataInit>

08003e4e <CopyDataInit>:
 8003e4e:	58d4      	ldr	r4, [r2, r3]
 8003e50:	50c4      	str	r4, [r0, r3]
 8003e52:	3304      	adds	r3, #4

08003e54 <LoopCopyDataInit>:
 8003e54:	18c4      	adds	r4, r0, r3
 8003e56:	428c      	cmp	r4, r1
 8003e58:	d3f9      	bcc.n	8003e4e <CopyDataInit>
 8003e5a:	4a0b      	ldr	r2, [pc, #44]	; (8003e88 <LoopFillZerobss+0x22>)
 8003e5c:	4c0b      	ldr	r4, [pc, #44]	; (8003e8c <LoopFillZerobss+0x26>)
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e001      	b.n	8003e66 <LoopFillZerobss>

08003e62 <FillZerobss>:
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	3204      	adds	r2, #4

08003e66 <LoopFillZerobss>:
 8003e66:	42a2      	cmp	r2, r4
 8003e68:	d3fb      	bcc.n	8003e62 <FillZerobss>
 8003e6a:	f7ff ffd7 	bl	8003e1c <SystemInit>
 8003e6e:	f003 f869 	bl	8006f44 <__libc_init_array>
 8003e72:	f7fd fb69 	bl	8001548 <main>
 8003e76:	4770      	bx	lr
 8003e78:	20010000 	.word	0x20010000
 8003e7c:	20000000 	.word	0x20000000
 8003e80:	2000008c 	.word	0x2000008c
 8003e84:	08007b1c 	.word	0x08007b1c
 8003e88:	2000008c 	.word	0x2000008c
 8003e8c:	2000071c 	.word	0x2000071c

08003e90 <ADC_IRQHandler>:
 8003e90:	e7fe      	b.n	8003e90 <ADC_IRQHandler>
	...

08003e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e98:	4b0e      	ldr	r3, [pc, #56]	; (8003ed4 <HAL_Init+0x40>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a0d      	ldr	r2, [pc, #52]	; (8003ed4 <HAL_Init+0x40>)
 8003e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <HAL_Init+0x40>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a0a      	ldr	r2, [pc, #40]	; (8003ed4 <HAL_Init+0x40>)
 8003eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003eb0:	4b08      	ldr	r3, [pc, #32]	; (8003ed4 <HAL_Init+0x40>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a07      	ldr	r2, [pc, #28]	; (8003ed4 <HAL_Init+0x40>)
 8003eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ebc:	2003      	movs	r0, #3
 8003ebe:	f000 f94f 	bl	8004160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ec2:	200f      	movs	r0, #15
 8003ec4:	f000 f808 	bl	8003ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ec8:	f7ff fd9e 	bl	8003a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40023c00 	.word	0x40023c00

08003ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ee0:	4b12      	ldr	r3, [pc, #72]	; (8003f2c <HAL_InitTick+0x54>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <HAL_InitTick+0x58>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f967 	bl	80041ca <HAL_SYSTICK_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e00e      	b.n	8003f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b0f      	cmp	r3, #15
 8003f0a:	d80a      	bhi.n	8003f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	f04f 30ff 	mov.w	r0, #4294967295
 8003f14:	f000 f92f 	bl	8004176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f18:	4a06      	ldr	r2, [pc, #24]	; (8003f34 <HAL_InitTick+0x5c>)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e000      	b.n	8003f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	2000001c 	.word	0x2000001c
 8003f30:	20000024 	.word	0x20000024
 8003f34:	20000020 	.word	0x20000020

08003f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f3c:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_IncTick+0x20>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <HAL_IncTick+0x24>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4413      	add	r3, r2
 8003f48:	4a04      	ldr	r2, [pc, #16]	; (8003f5c <HAL_IncTick+0x24>)
 8003f4a:	6013      	str	r3, [r2, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000024 	.word	0x20000024
 8003f5c:	200006e8 	.word	0x200006e8

08003f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  return uwTick;
 8003f64:	4b03      	ldr	r3, [pc, #12]	; (8003f74 <HAL_GetTick+0x14>)
 8003f66:	681b      	ldr	r3, [r3, #0]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	200006e8 	.word	0x200006e8

08003f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f80:	f7ff ffee 	bl	8003f60 <HAL_GetTick>
 8003f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f90:	d005      	beq.n	8003f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f92:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <HAL_Delay+0x44>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f9e:	bf00      	nop
 8003fa0:	f7ff ffde 	bl	8003f60 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d8f7      	bhi.n	8003fa0 <HAL_Delay+0x28>
  {
  }
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000024 	.word	0x20000024

08003fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <__NVIC_SetPriorityGrouping+0x44>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fdc:	4013      	ands	r3, r2
 8003fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ff2:	4a04      	ldr	r2, [pc, #16]	; (8004004 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	60d3      	str	r3, [r2, #12]
}
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	e000ed00 	.word	0xe000ed00

08004008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800400c:	4b04      	ldr	r3, [pc, #16]	; (8004020 <__NVIC_GetPriorityGrouping+0x18>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	0a1b      	lsrs	r3, r3, #8
 8004012:	f003 0307 	and.w	r3, r3, #7
}
 8004016:	4618      	mov	r0, r3
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	e000ed00 	.word	0xe000ed00

08004024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800402e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004032:	2b00      	cmp	r3, #0
 8004034:	db0b      	blt.n	800404e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	f003 021f 	and.w	r2, r3, #31
 800403c:	4907      	ldr	r1, [pc, #28]	; (800405c <__NVIC_EnableIRQ+0x38>)
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	2001      	movs	r0, #1
 8004046:	fa00 f202 	lsl.w	r2, r0, r2
 800404a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	e000e100 	.word	0xe000e100

08004060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	6039      	str	r1, [r7, #0]
 800406a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800406c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004070:	2b00      	cmp	r3, #0
 8004072:	db0a      	blt.n	800408a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	b2da      	uxtb	r2, r3
 8004078:	490c      	ldr	r1, [pc, #48]	; (80040ac <__NVIC_SetPriority+0x4c>)
 800407a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407e:	0112      	lsls	r2, r2, #4
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	440b      	add	r3, r1
 8004084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004088:	e00a      	b.n	80040a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	4908      	ldr	r1, [pc, #32]	; (80040b0 <__NVIC_SetPriority+0x50>)
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	3b04      	subs	r3, #4
 8004098:	0112      	lsls	r2, r2, #4
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	440b      	add	r3, r1
 800409e:	761a      	strb	r2, [r3, #24]
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	e000e100 	.word	0xe000e100
 80040b0:	e000ed00 	.word	0xe000ed00

080040b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b089      	sub	sp, #36	; 0x24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f1c3 0307 	rsb	r3, r3, #7
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	bf28      	it	cs
 80040d2:	2304      	movcs	r3, #4
 80040d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	3304      	adds	r3, #4
 80040da:	2b06      	cmp	r3, #6
 80040dc:	d902      	bls.n	80040e4 <NVIC_EncodePriority+0x30>
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3b03      	subs	r3, #3
 80040e2:	e000      	b.n	80040e6 <NVIC_EncodePriority+0x32>
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e8:	f04f 32ff 	mov.w	r2, #4294967295
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43da      	mvns	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	401a      	ands	r2, r3
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	fa01 f303 	lsl.w	r3, r1, r3
 8004106:	43d9      	mvns	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800410c:	4313      	orrs	r3, r2
         );
}
 800410e:	4618      	mov	r0, r3
 8004110:	3724      	adds	r7, #36	; 0x24
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
	...

0800411c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3b01      	subs	r3, #1
 8004128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800412c:	d301      	bcc.n	8004132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800412e:	2301      	movs	r3, #1
 8004130:	e00f      	b.n	8004152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004132:	4a0a      	ldr	r2, [pc, #40]	; (800415c <SysTick_Config+0x40>)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3b01      	subs	r3, #1
 8004138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800413a:	210f      	movs	r1, #15
 800413c:	f04f 30ff 	mov.w	r0, #4294967295
 8004140:	f7ff ff8e 	bl	8004060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <SysTick_Config+0x40>)
 8004146:	2200      	movs	r2, #0
 8004148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800414a:	4b04      	ldr	r3, [pc, #16]	; (800415c <SysTick_Config+0x40>)
 800414c:	2207      	movs	r2, #7
 800414e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	e000e010 	.word	0xe000e010

08004160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff ff29 	bl	8003fc0 <__NVIC_SetPriorityGrouping>
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004176:	b580      	push	{r7, lr}
 8004178:	b086      	sub	sp, #24
 800417a:	af00      	add	r7, sp, #0
 800417c:	4603      	mov	r3, r0
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	607a      	str	r2, [r7, #4]
 8004182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004188:	f7ff ff3e 	bl	8004008 <__NVIC_GetPriorityGrouping>
 800418c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	68b9      	ldr	r1, [r7, #8]
 8004192:	6978      	ldr	r0, [r7, #20]
 8004194:	f7ff ff8e 	bl	80040b4 <NVIC_EncodePriority>
 8004198:	4602      	mov	r2, r0
 800419a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800419e:	4611      	mov	r1, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff ff5d 	bl	8004060 <__NVIC_SetPriority>
}
 80041a6:	bf00      	nop
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b082      	sub	sp, #8
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	4603      	mov	r3, r0
 80041b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff ff31 	bl	8004024 <__NVIC_EnableIRQ>
}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7ff ffa2 	bl	800411c <SysTick_Config>
 80041d8:	4603      	mov	r3, r0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80041f6:	4b23      	ldr	r3, [pc, #140]	; (8004284 <HAL_FLASH_Program+0xa0>)
 80041f8:	7e1b      	ldrb	r3, [r3, #24]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_FLASH_Program+0x1e>
 80041fe:	2302      	movs	r3, #2
 8004200:	e03b      	b.n	800427a <HAL_FLASH_Program+0x96>
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <HAL_FLASH_Program+0xa0>)
 8004204:	2201      	movs	r2, #1
 8004206:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004208:	f24c 3050 	movw	r0, #50000	; 0xc350
 800420c:	f000 f870 	bl	80042f0 <FLASH_WaitForLastOperation>
 8004210:	4603      	mov	r3, r0
 8004212:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004214:	7dfb      	ldrb	r3, [r7, #23]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d12b      	bne.n	8004272 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d105      	bne.n	800422c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004220:	783b      	ldrb	r3, [r7, #0]
 8004222:	4619      	mov	r1, r3
 8004224:	68b8      	ldr	r0, [r7, #8]
 8004226:	f000 f91b 	bl	8004460 <FLASH_Program_Byte>
 800422a:	e016      	b.n	800425a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d105      	bne.n	800423e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004232:	883b      	ldrh	r3, [r7, #0]
 8004234:	4619      	mov	r1, r3
 8004236:	68b8      	ldr	r0, [r7, #8]
 8004238:	f000 f8ee 	bl	8004418 <FLASH_Program_HalfWord>
 800423c:	e00d      	b.n	800425a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2b02      	cmp	r3, #2
 8004242:	d105      	bne.n	8004250 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	4619      	mov	r1, r3
 8004248:	68b8      	ldr	r0, [r7, #8]
 800424a:	f000 f8c3 	bl	80043d4 <FLASH_Program_Word>
 800424e:	e004      	b.n	800425a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004254:	68b8      	ldr	r0, [r7, #8]
 8004256:	f000 f88b 	bl	8004370 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800425a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800425e:	f000 f847 	bl	80042f0 <FLASH_WaitForLastOperation>
 8004262:	4603      	mov	r3, r0
 8004264:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004266:	4b08      	ldr	r3, [pc, #32]	; (8004288 <HAL_FLASH_Program+0xa4>)
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	4a07      	ldr	r2, [pc, #28]	; (8004288 <HAL_FLASH_Program+0xa4>)
 800426c:	f023 0301 	bic.w	r3, r3, #1
 8004270:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004272:	4b04      	ldr	r3, [pc, #16]	; (8004284 <HAL_FLASH_Program+0xa0>)
 8004274:	2200      	movs	r2, #0
 8004276:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004278:	7dfb      	ldrb	r3, [r7, #23]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	200006ec 	.word	0x200006ec
 8004288:	40023c00 	.word	0x40023c00

0800428c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004296:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <HAL_FLASH_Unlock+0x38>)
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	da0b      	bge.n	80042b6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <HAL_FLASH_Unlock+0x38>)
 80042a0:	4a09      	ldr	r2, [pc, #36]	; (80042c8 <HAL_FLASH_Unlock+0x3c>)
 80042a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80042a4:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <HAL_FLASH_Unlock+0x38>)
 80042a6:	4a09      	ldr	r2, [pc, #36]	; (80042cc <HAL_FLASH_Unlock+0x40>)
 80042a8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_FLASH_Unlock+0x38>)
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	da01      	bge.n	80042b6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80042b6:	79fb      	ldrb	r3, [r7, #7]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	40023c00 	.word	0x40023c00
 80042c8:	45670123 	.word	0x45670123
 80042cc:	cdef89ab 	.word	0xcdef89ab

080042d0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80042d4:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_FLASH_Lock+0x1c>)
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	4a04      	ldr	r2, [pc, #16]	; (80042ec <HAL_FLASH_Lock+0x1c>)
 80042da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042de:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	40023c00 	.word	0x40023c00

080042f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80042fc:	4b1a      	ldr	r3, [pc, #104]	; (8004368 <FLASH_WaitForLastOperation+0x78>)
 80042fe:	2200      	movs	r2, #0
 8004300:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004302:	f7ff fe2d 	bl	8003f60 <HAL_GetTick>
 8004306:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004308:	e010      	b.n	800432c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d00c      	beq.n	800432c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <FLASH_WaitForLastOperation+0x38>
 8004318:	f7ff fe22 	bl	8003f60 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	429a      	cmp	r2, r3
 8004326:	d201      	bcs.n	800432c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e019      	b.n	8004360 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800432c:	4b0f      	ldr	r3, [pc, #60]	; (800436c <FLASH_WaitForLastOperation+0x7c>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e8      	bne.n	800430a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004338:	4b0c      	ldr	r3, [pc, #48]	; (800436c <FLASH_WaitForLastOperation+0x7c>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004344:	4b09      	ldr	r3, [pc, #36]	; (800436c <FLASH_WaitForLastOperation+0x7c>)
 8004346:	2201      	movs	r2, #1
 8004348:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800434a:	4b08      	ldr	r3, [pc, #32]	; (800436c <FLASH_WaitForLastOperation+0x7c>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004356:	f000 f8a5 	bl	80044a4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
  
}  
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	200006ec 	.word	0x200006ec
 800436c:	40023c00 	.word	0x40023c00

08004370 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800437c:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <FLASH_Program_DoubleWord+0x60>)
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	4a13      	ldr	r2, [pc, #76]	; (80043d0 <FLASH_Program_DoubleWord+0x60>)
 8004382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004386:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004388:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <FLASH_Program_DoubleWord+0x60>)
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	4a10      	ldr	r2, [pc, #64]	; (80043d0 <FLASH_Program_DoubleWord+0x60>)
 800438e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004392:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004394:	4b0e      	ldr	r3, [pc, #56]	; (80043d0 <FLASH_Program_DoubleWord+0x60>)
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	4a0d      	ldr	r2, [pc, #52]	; (80043d0 <FLASH_Program_DoubleWord+0x60>)
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80043a6:	f3bf 8f6f 	isb	sy
}
 80043aa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80043ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	000a      	movs	r2, r1
 80043ba:	2300      	movs	r3, #0
 80043bc:	68f9      	ldr	r1, [r7, #12]
 80043be:	3104      	adds	r1, #4
 80043c0:	4613      	mov	r3, r2
 80043c2:	600b      	str	r3, [r1, #0]
}
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	40023c00 	.word	0x40023c00

080043d4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80043de:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <FLASH_Program_Word+0x40>)
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	4a0c      	ldr	r2, [pc, #48]	; (8004414 <FLASH_Program_Word+0x40>)
 80043e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80043ea:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <FLASH_Program_Word+0x40>)
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	4a09      	ldr	r2, [pc, #36]	; (8004414 <FLASH_Program_Word+0x40>)
 80043f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80043f6:	4b07      	ldr	r3, [pc, #28]	; (8004414 <FLASH_Program_Word+0x40>)
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	4a06      	ldr	r2, [pc, #24]	; (8004414 <FLASH_Program_Word+0x40>)
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	601a      	str	r2, [r3, #0]
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	40023c00 	.word	0x40023c00

08004418 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004424:	4b0d      	ldr	r3, [pc, #52]	; (800445c <FLASH_Program_HalfWord+0x44>)
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	4a0c      	ldr	r2, [pc, #48]	; (800445c <FLASH_Program_HalfWord+0x44>)
 800442a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004430:	4b0a      	ldr	r3, [pc, #40]	; (800445c <FLASH_Program_HalfWord+0x44>)
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	4a09      	ldr	r2, [pc, #36]	; (800445c <FLASH_Program_HalfWord+0x44>)
 8004436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800443c:	4b07      	ldr	r3, [pc, #28]	; (800445c <FLASH_Program_HalfWord+0x44>)
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	4a06      	ldr	r2, [pc, #24]	; (800445c <FLASH_Program_HalfWord+0x44>)
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	887a      	ldrh	r2, [r7, #2]
 800444c:	801a      	strh	r2, [r3, #0]
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40023c00 	.word	0x40023c00

08004460 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <FLASH_Program_Byte+0x40>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	4a0b      	ldr	r2, [pc, #44]	; (80044a0 <FLASH_Program_Byte+0x40>)
 8004472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004476:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <FLASH_Program_Byte+0x40>)
 800447a:	4a09      	ldr	r2, [pc, #36]	; (80044a0 <FLASH_Program_Byte+0x40>)
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <FLASH_Program_Byte+0x40>)
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	4a06      	ldr	r2, [pc, #24]	; (80044a0 <FLASH_Program_Byte+0x40>)
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	701a      	strb	r2, [r3, #0]
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40023c00 	.word	0x40023c00

080044a4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80044a8:	4b2f      	ldr	r3, [pc, #188]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80044b4:	4b2d      	ldr	r3, [pc, #180]	; (800456c <FLASH_SetErrorCode+0xc8>)
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	f043 0310 	orr.w	r3, r3, #16
 80044bc:	4a2b      	ldr	r2, [pc, #172]	; (800456c <FLASH_SetErrorCode+0xc8>)
 80044be:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80044c0:	4b29      	ldr	r3, [pc, #164]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 80044c2:	2210      	movs	r2, #16
 80044c4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80044c6:	4b28      	ldr	r3, [pc, #160]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d008      	beq.n	80044e4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80044d2:	4b26      	ldr	r3, [pc, #152]	; (800456c <FLASH_SetErrorCode+0xc8>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f043 0308 	orr.w	r3, r3, #8
 80044da:	4a24      	ldr	r2, [pc, #144]	; (800456c <FLASH_SetErrorCode+0xc8>)
 80044dc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80044de:	4b22      	ldr	r3, [pc, #136]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 80044e0:	2220      	movs	r2, #32
 80044e2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80044e4:	4b20      	ldr	r3, [pc, #128]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80044f0:	4b1e      	ldr	r3, [pc, #120]	; (800456c <FLASH_SetErrorCode+0xc8>)
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	f043 0304 	orr.w	r3, r3, #4
 80044f8:	4a1c      	ldr	r2, [pc, #112]	; (800456c <FLASH_SetErrorCode+0xc8>)
 80044fa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80044fc:	4b1a      	ldr	r3, [pc, #104]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 80044fe:	2240      	movs	r2, #64	; 0x40
 8004500:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004502:	4b19      	ldr	r3, [pc, #100]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450a:	2b00      	cmp	r3, #0
 800450c:	d008      	beq.n	8004520 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800450e:	4b17      	ldr	r3, [pc, #92]	; (800456c <FLASH_SetErrorCode+0xc8>)
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	f043 0302 	orr.w	r3, r3, #2
 8004516:	4a15      	ldr	r2, [pc, #84]	; (800456c <FLASH_SetErrorCode+0xc8>)
 8004518:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800451a:	4b13      	ldr	r3, [pc, #76]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 800451c:	2280      	movs	r2, #128	; 0x80
 800451e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004520:	4b11      	ldr	r3, [pc, #68]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004528:	2b00      	cmp	r3, #0
 800452a:	d009      	beq.n	8004540 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800452c:	4b0f      	ldr	r3, [pc, #60]	; (800456c <FLASH_SetErrorCode+0xc8>)
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f043 0301 	orr.w	r3, r3, #1
 8004534:	4a0d      	ldr	r2, [pc, #52]	; (800456c <FLASH_SetErrorCode+0xc8>)
 8004536:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004538:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 800453a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800453e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004540:	4b09      	ldr	r3, [pc, #36]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800454c:	4b07      	ldr	r3, [pc, #28]	; (800456c <FLASH_SetErrorCode+0xc8>)
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	f043 0320 	orr.w	r3, r3, #32
 8004554:	4a05      	ldr	r2, [pc, #20]	; (800456c <FLASH_SetErrorCode+0xc8>)
 8004556:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004558:	4b03      	ldr	r3, [pc, #12]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 800455a:	2202      	movs	r2, #2
 800455c:	60da      	str	r2, [r3, #12]
  }
}
 800455e:	bf00      	nop
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	40023c00 	.word	0x40023c00
 800456c:	200006ec 	.word	0x200006ec

08004570 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004582:	4b31      	ldr	r3, [pc, #196]	; (8004648 <HAL_FLASHEx_Erase+0xd8>)
 8004584:	7e1b      	ldrb	r3, [r3, #24]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_FLASHEx_Erase+0x1e>
 800458a:	2302      	movs	r3, #2
 800458c:	e058      	b.n	8004640 <HAL_FLASHEx_Erase+0xd0>
 800458e:	4b2e      	ldr	r3, [pc, #184]	; (8004648 <HAL_FLASHEx_Erase+0xd8>)
 8004590:	2201      	movs	r2, #1
 8004592:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004594:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004598:	f7ff feaa 	bl	80042f0 <FLASH_WaitForLastOperation>
 800459c:	4603      	mov	r3, r0
 800459e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d148      	bne.n	8004638 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	f04f 32ff 	mov.w	r2, #4294967295
 80045ac:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d115      	bne.n	80045e2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	4619      	mov	r1, r3
 80045c2:	4610      	mov	r0, r2
 80045c4:	f000 f844 	bl	8004650 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80045c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80045cc:	f7ff fe90 	bl	80042f0 <FLASH_WaitForLastOperation>
 80045d0:	4603      	mov	r3, r0
 80045d2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80045d4:	4b1d      	ldr	r3, [pc, #116]	; (800464c <HAL_FLASHEx_Erase+0xdc>)
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	4a1c      	ldr	r2, [pc, #112]	; (800464c <HAL_FLASHEx_Erase+0xdc>)
 80045da:	f023 0304 	bic.w	r3, r3, #4
 80045de:	6113      	str	r3, [r2, #16]
 80045e0:	e028      	b.n	8004634 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	60bb      	str	r3, [r7, #8]
 80045e8:	e01c      	b.n	8004624 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	4619      	mov	r1, r3
 80045f2:	68b8      	ldr	r0, [r7, #8]
 80045f4:	f000 f850 	bl	8004698 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80045f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80045fc:	f7ff fe78 	bl	80042f0 <FLASH_WaitForLastOperation>
 8004600:	4603      	mov	r3, r0
 8004602:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004604:	4b11      	ldr	r3, [pc, #68]	; (800464c <HAL_FLASHEx_Erase+0xdc>)
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	4a10      	ldr	r2, [pc, #64]	; (800464c <HAL_FLASHEx_Erase+0xdc>)
 800460a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800460e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	601a      	str	r2, [r3, #0]
          break;
 800461c:	e00a      	b.n	8004634 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	3301      	adds	r3, #1
 8004622:	60bb      	str	r3, [r7, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4413      	add	r3, r2
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	429a      	cmp	r2, r3
 8004632:	d3da      	bcc.n	80045ea <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004634:	f000 f878 	bl	8004728 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004638:	4b03      	ldr	r3, [pc, #12]	; (8004648 <HAL_FLASHEx_Erase+0xd8>)
 800463a:	2200      	movs	r2, #0
 800463c:	761a      	strb	r2, [r3, #24]

  return status;
 800463e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	200006ec 	.word	0x200006ec
 800464c:	40023c00 	.word	0x40023c00

08004650 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	6039      	str	r1, [r7, #0]
 800465a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800465c:	4b0d      	ldr	r3, [pc, #52]	; (8004694 <FLASH_MassErase+0x44>)
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	4a0c      	ldr	r2, [pc, #48]	; (8004694 <FLASH_MassErase+0x44>)
 8004662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004666:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004668:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <FLASH_MassErase+0x44>)
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	4a09      	ldr	r2, [pc, #36]	; (8004694 <FLASH_MassErase+0x44>)
 800466e:	f043 0304 	orr.w	r3, r3, #4
 8004672:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004674:	4b07      	ldr	r3, [pc, #28]	; (8004694 <FLASH_MassErase+0x44>)
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	4313      	orrs	r3, r2
 800467e:	4a05      	ldr	r2, [pc, #20]	; (8004694 <FLASH_MassErase+0x44>)
 8004680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004684:	6113      	str	r3, [r2, #16]
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40023c00 	.word	0x40023c00

08004698 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d102      	bne.n	80046b4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	e010      	b.n	80046d6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80046b4:	78fb      	ldrb	r3, [r7, #3]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d103      	bne.n	80046c2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80046ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	e009      	b.n	80046d6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d103      	bne.n	80046d0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80046c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e002      	b.n	80046d6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80046d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80046d4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80046d6:	4b13      	ldr	r3, [pc, #76]	; (8004724 <FLASH_Erase_Sector+0x8c>)
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	4a12      	ldr	r2, [pc, #72]	; (8004724 <FLASH_Erase_Sector+0x8c>)
 80046dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80046e2:	4b10      	ldr	r3, [pc, #64]	; (8004724 <FLASH_Erase_Sector+0x8c>)
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	490f      	ldr	r1, [pc, #60]	; (8004724 <FLASH_Erase_Sector+0x8c>)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80046ee:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <FLASH_Erase_Sector+0x8c>)
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	4a0c      	ldr	r2, [pc, #48]	; (8004724 <FLASH_Erase_Sector+0x8c>)
 80046f4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80046f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80046fa:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <FLASH_Erase_Sector+0x8c>)
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	4313      	orrs	r3, r2
 8004704:	4a07      	ldr	r2, [pc, #28]	; (8004724 <FLASH_Erase_Sector+0x8c>)
 8004706:	f043 0302 	orr.w	r3, r3, #2
 800470a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <FLASH_Erase_Sector+0x8c>)
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	4a04      	ldr	r2, [pc, #16]	; (8004724 <FLASH_Erase_Sector+0x8c>)
 8004712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004716:	6113      	str	r3, [r2, #16]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	40023c00 	.word	0x40023c00

08004728 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800472c:	4b20      	ldr	r3, [pc, #128]	; (80047b0 <FLASH_FlushCaches+0x88>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004734:	2b00      	cmp	r3, #0
 8004736:	d017      	beq.n	8004768 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004738:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <FLASH_FlushCaches+0x88>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a1c      	ldr	r2, [pc, #112]	; (80047b0 <FLASH_FlushCaches+0x88>)
 800473e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004742:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004744:	4b1a      	ldr	r3, [pc, #104]	; (80047b0 <FLASH_FlushCaches+0x88>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <FLASH_FlushCaches+0x88>)
 800474a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	4b17      	ldr	r3, [pc, #92]	; (80047b0 <FLASH_FlushCaches+0x88>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a16      	ldr	r2, [pc, #88]	; (80047b0 <FLASH_FlushCaches+0x88>)
 8004756:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800475a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800475c:	4b14      	ldr	r3, [pc, #80]	; (80047b0 <FLASH_FlushCaches+0x88>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a13      	ldr	r2, [pc, #76]	; (80047b0 <FLASH_FlushCaches+0x88>)
 8004762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004766:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004768:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <FLASH_FlushCaches+0x88>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004770:	2b00      	cmp	r3, #0
 8004772:	d017      	beq.n	80047a4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004774:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <FLASH_FlushCaches+0x88>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a0d      	ldr	r2, [pc, #52]	; (80047b0 <FLASH_FlushCaches+0x88>)
 800477a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800477e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <FLASH_FlushCaches+0x88>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a0a      	ldr	r2, [pc, #40]	; (80047b0 <FLASH_FlushCaches+0x88>)
 8004786:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <FLASH_FlushCaches+0x88>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a07      	ldr	r2, [pc, #28]	; (80047b0 <FLASH_FlushCaches+0x88>)
 8004792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004796:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <FLASH_FlushCaches+0x88>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <FLASH_FlushCaches+0x88>)
 800479e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047a2:	6013      	str	r3, [r2, #0]
  }
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40023c00 	.word	0x40023c00

080047b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b089      	sub	sp, #36	; 0x24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	e159      	b.n	8004a84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047d0:	2201      	movs	r2, #1
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4013      	ands	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	f040 8148 	bne.w	8004a7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d005      	beq.n	8004806 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004802:	2b02      	cmp	r3, #2
 8004804:	d130      	bne.n	8004868 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	2203      	movs	r2, #3
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	43db      	mvns	r3, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4013      	ands	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4313      	orrs	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800483c:	2201      	movs	r2, #1
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	43db      	mvns	r3, r3
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	4013      	ands	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	f003 0201 	and.w	r2, r3, #1
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	4313      	orrs	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f003 0303 	and.w	r3, r3, #3
 8004870:	2b03      	cmp	r3, #3
 8004872:	d017      	beq.n	80048a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	2203      	movs	r2, #3
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	43db      	mvns	r3, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4013      	ands	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4313      	orrs	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d123      	bne.n	80048f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	08da      	lsrs	r2, r3, #3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3208      	adds	r2, #8
 80048b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	220f      	movs	r2, #15
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4013      	ands	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	08da      	lsrs	r2, r3, #3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3208      	adds	r2, #8
 80048f2:	69b9      	ldr	r1, [r7, #24]
 80048f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	2203      	movs	r2, #3
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4013      	ands	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f003 0203 	and.w	r2, r3, #3
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4313      	orrs	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 80a2 	beq.w	8004a7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	4b57      	ldr	r3, [pc, #348]	; (8004a9c <HAL_GPIO_Init+0x2e8>)
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	4a56      	ldr	r2, [pc, #344]	; (8004a9c <HAL_GPIO_Init+0x2e8>)
 8004944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004948:	6453      	str	r3, [r2, #68]	; 0x44
 800494a:	4b54      	ldr	r3, [pc, #336]	; (8004a9c <HAL_GPIO_Init+0x2e8>)
 800494c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004956:	4a52      	ldr	r2, [pc, #328]	; (8004aa0 <HAL_GPIO_Init+0x2ec>)
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	089b      	lsrs	r3, r3, #2
 800495c:	3302      	adds	r3, #2
 800495e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	220f      	movs	r2, #15
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4013      	ands	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a49      	ldr	r2, [pc, #292]	; (8004aa4 <HAL_GPIO_Init+0x2f0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d019      	beq.n	80049b6 <HAL_GPIO_Init+0x202>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a48      	ldr	r2, [pc, #288]	; (8004aa8 <HAL_GPIO_Init+0x2f4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d013      	beq.n	80049b2 <HAL_GPIO_Init+0x1fe>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a47      	ldr	r2, [pc, #284]	; (8004aac <HAL_GPIO_Init+0x2f8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d00d      	beq.n	80049ae <HAL_GPIO_Init+0x1fa>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a46      	ldr	r2, [pc, #280]	; (8004ab0 <HAL_GPIO_Init+0x2fc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d007      	beq.n	80049aa <HAL_GPIO_Init+0x1f6>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a45      	ldr	r2, [pc, #276]	; (8004ab4 <HAL_GPIO_Init+0x300>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d101      	bne.n	80049a6 <HAL_GPIO_Init+0x1f2>
 80049a2:	2304      	movs	r3, #4
 80049a4:	e008      	b.n	80049b8 <HAL_GPIO_Init+0x204>
 80049a6:	2307      	movs	r3, #7
 80049a8:	e006      	b.n	80049b8 <HAL_GPIO_Init+0x204>
 80049aa:	2303      	movs	r3, #3
 80049ac:	e004      	b.n	80049b8 <HAL_GPIO_Init+0x204>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e002      	b.n	80049b8 <HAL_GPIO_Init+0x204>
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <HAL_GPIO_Init+0x204>
 80049b6:	2300      	movs	r3, #0
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	f002 0203 	and.w	r2, r2, #3
 80049be:	0092      	lsls	r2, r2, #2
 80049c0:	4093      	lsls	r3, r2
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049c8:	4935      	ldr	r1, [pc, #212]	; (8004aa0 <HAL_GPIO_Init+0x2ec>)
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	089b      	lsrs	r3, r3, #2
 80049ce:	3302      	adds	r3, #2
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049d6:	4b38      	ldr	r3, [pc, #224]	; (8004ab8 <HAL_GPIO_Init+0x304>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	43db      	mvns	r3, r3
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	4013      	ands	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049fa:	4a2f      	ldr	r2, [pc, #188]	; (8004ab8 <HAL_GPIO_Init+0x304>)
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a00:	4b2d      	ldr	r3, [pc, #180]	; (8004ab8 <HAL_GPIO_Init+0x304>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a24:	4a24      	ldr	r2, [pc, #144]	; (8004ab8 <HAL_GPIO_Init+0x304>)
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a2a:	4b23      	ldr	r3, [pc, #140]	; (8004ab8 <HAL_GPIO_Init+0x304>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	43db      	mvns	r3, r3
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	4013      	ands	r3, r2
 8004a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a4e:	4a1a      	ldr	r2, [pc, #104]	; (8004ab8 <HAL_GPIO_Init+0x304>)
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a54:	4b18      	ldr	r3, [pc, #96]	; (8004ab8 <HAL_GPIO_Init+0x304>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	4013      	ands	r3, r2
 8004a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a78:	4a0f      	ldr	r2, [pc, #60]	; (8004ab8 <HAL_GPIO_Init+0x304>)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	3301      	adds	r3, #1
 8004a82:	61fb      	str	r3, [r7, #28]
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	2b0f      	cmp	r3, #15
 8004a88:	f67f aea2 	bls.w	80047d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	3724      	adds	r7, #36	; 0x24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	40013800 	.word	0x40013800
 8004aa4:	40020000 	.word	0x40020000
 8004aa8:	40020400 	.word	0x40020400
 8004aac:	40020800 	.word	0x40020800
 8004ab0:	40020c00 	.word	0x40020c00
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40013c00 	.word	0x40013c00

08004abc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	887b      	ldrh	r3, [r7, #2]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	73fb      	strb	r3, [r7, #15]
 8004ad8:	e001      	b.n	8004ade <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ada:	2300      	movs	r3, #0
 8004adc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	807b      	strh	r3, [r7, #2]
 8004af8:	4613      	mov	r3, r2
 8004afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004afc:	787b      	ldrb	r3, [r7, #1]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b02:	887a      	ldrh	r2, [r7, #2]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b08:	e003      	b.n	8004b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b0a:	887b      	ldrh	r3, [r7, #2]
 8004b0c:	041a      	lsls	r2, r3, #16
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	619a      	str	r2, [r3, #24]
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
	...

08004b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e12b      	b.n	8004d8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fe ff86 	bl	8003a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2224      	movs	r2, #36	; 0x24
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0201 	bic.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b84:	f001 f848 	bl	8005c18 <HAL_RCC_GetPCLK1Freq>
 8004b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	4a81      	ldr	r2, [pc, #516]	; (8004d94 <HAL_I2C_Init+0x274>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d807      	bhi.n	8004ba4 <HAL_I2C_Init+0x84>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4a80      	ldr	r2, [pc, #512]	; (8004d98 <HAL_I2C_Init+0x278>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	bf94      	ite	ls
 8004b9c:	2301      	movls	r3, #1
 8004b9e:	2300      	movhi	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	e006      	b.n	8004bb2 <HAL_I2C_Init+0x92>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4a7d      	ldr	r2, [pc, #500]	; (8004d9c <HAL_I2C_Init+0x27c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	bf94      	ite	ls
 8004bac:	2301      	movls	r3, #1
 8004bae:	2300      	movhi	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e0e7      	b.n	8004d8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4a78      	ldr	r2, [pc, #480]	; (8004da0 <HAL_I2C_Init+0x280>)
 8004bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc2:	0c9b      	lsrs	r3, r3, #18
 8004bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4a6a      	ldr	r2, [pc, #424]	; (8004d94 <HAL_I2C_Init+0x274>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d802      	bhi.n	8004bf4 <HAL_I2C_Init+0xd4>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	e009      	b.n	8004c08 <HAL_I2C_Init+0xe8>
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004bfa:	fb02 f303 	mul.w	r3, r2, r3
 8004bfe:	4a69      	ldr	r2, [pc, #420]	; (8004da4 <HAL_I2C_Init+0x284>)
 8004c00:	fba2 2303 	umull	r2, r3, r2, r3
 8004c04:	099b      	lsrs	r3, r3, #6
 8004c06:	3301      	adds	r3, #1
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	495c      	ldr	r1, [pc, #368]	; (8004d94 <HAL_I2C_Init+0x274>)
 8004c24:	428b      	cmp	r3, r1
 8004c26:	d819      	bhi.n	8004c5c <HAL_I2C_Init+0x13c>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	1e59      	subs	r1, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c36:	1c59      	adds	r1, r3, #1
 8004c38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c3c:	400b      	ands	r3, r1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_I2C_Init+0x138>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	1e59      	subs	r1, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c50:	3301      	adds	r3, #1
 8004c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c56:	e051      	b.n	8004cfc <HAL_I2C_Init+0x1dc>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	e04f      	b.n	8004cfc <HAL_I2C_Init+0x1dc>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d111      	bne.n	8004c88 <HAL_I2C_Init+0x168>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	1e58      	subs	r0, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6859      	ldr	r1, [r3, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	440b      	add	r3, r1
 8004c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c76:	3301      	adds	r3, #1
 8004c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	bf0c      	ite	eq
 8004c80:	2301      	moveq	r3, #1
 8004c82:	2300      	movne	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	e012      	b.n	8004cae <HAL_I2C_Init+0x18e>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	1e58      	subs	r0, r3, #1
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6859      	ldr	r1, [r3, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	0099      	lsls	r1, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	bf0c      	ite	eq
 8004ca8:	2301      	moveq	r3, #1
 8004caa:	2300      	movne	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_I2C_Init+0x196>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e022      	b.n	8004cfc <HAL_I2C_Init+0x1dc>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10e      	bne.n	8004cdc <HAL_I2C_Init+0x1bc>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1e58      	subs	r0, r3, #1
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6859      	ldr	r1, [r3, #4]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	440b      	add	r3, r1
 8004ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cda:	e00f      	b.n	8004cfc <HAL_I2C_Init+0x1dc>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	1e58      	subs	r0, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6859      	ldr	r1, [r3, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	0099      	lsls	r1, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	6809      	ldr	r1, [r1, #0]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69da      	ldr	r2, [r3, #28]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6911      	ldr	r1, [r2, #16]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	68d2      	ldr	r2, [r2, #12]
 8004d36:	4311      	orrs	r1, r2
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6812      	ldr	r2, [r2, #0]
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695a      	ldr	r2, [r3, #20]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	000186a0 	.word	0x000186a0
 8004d98:	001e847f 	.word	0x001e847f
 8004d9c:	003d08ff 	.word	0x003d08ff
 8004da0:	431bde83 	.word	0x431bde83
 8004da4:	10624dd3 	.word	0x10624dd3

08004da8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	607a      	str	r2, [r7, #4]
 8004db2:	461a      	mov	r2, r3
 8004db4:	460b      	mov	r3, r1
 8004db6:	817b      	strh	r3, [r7, #10]
 8004db8:	4613      	mov	r3, r2
 8004dba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dbc:	f7ff f8d0 	bl	8003f60 <HAL_GetTick>
 8004dc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	f040 80e0 	bne.w	8004f90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	2319      	movs	r3, #25
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	4970      	ldr	r1, [pc, #448]	; (8004f9c <HAL_I2C_Master_Transmit+0x1f4>)
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f964 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004de6:	2302      	movs	r3, #2
 8004de8:	e0d3      	b.n	8004f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_I2C_Master_Transmit+0x50>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e0cc      	b.n	8004f92 <HAL_I2C_Master_Transmit+0x1ea>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d007      	beq.n	8004e1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f042 0201 	orr.w	r2, r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2221      	movs	r2, #33	; 0x21
 8004e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2210      	movs	r2, #16
 8004e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	893a      	ldrh	r2, [r7, #8]
 8004e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4a50      	ldr	r2, [pc, #320]	; (8004fa0 <HAL_I2C_Master_Transmit+0x1f8>)
 8004e5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e60:	8979      	ldrh	r1, [r7, #10]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	6a3a      	ldr	r2, [r7, #32]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 f89c 	bl	8004fa4 <I2C_MasterRequestWrite>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e08d      	b.n	8004f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e76:	2300      	movs	r3, #0
 8004e78:	613b      	str	r3, [r7, #16]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	613b      	str	r3, [r7, #16]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e8c:	e066      	b.n	8004f5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	6a39      	ldr	r1, [r7, #32]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f9de 	bl	8005254 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00d      	beq.n	8004eba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d107      	bne.n	8004eb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e06b      	b.n	8004f92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	781a      	ldrb	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d11b      	bne.n	8004f30 <HAL_I2C_Master_Transmit+0x188>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d017      	beq.n	8004f30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	781a      	ldrb	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	6a39      	ldr	r1, [r7, #32]
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f9ce 	bl	80052d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00d      	beq.n	8004f5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d107      	bne.n	8004f58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e01a      	b.n	8004f92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d194      	bne.n	8004e8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	e000      	b.n	8004f92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f90:	2302      	movs	r3, #2
  }
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	00100002 	.word	0x00100002
 8004fa0:	ffff0000 	.word	0xffff0000

08004fa4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	607a      	str	r2, [r7, #4]
 8004fae:	603b      	str	r3, [r7, #0]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d006      	beq.n	8004fce <I2C_MasterRequestWrite+0x2a>
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d003      	beq.n	8004fce <I2C_MasterRequestWrite+0x2a>
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fcc:	d108      	bne.n	8004fe0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e00b      	b.n	8004ff8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe4:	2b12      	cmp	r3, #18
 8004fe6:	d107      	bne.n	8004ff8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ff6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f84f 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00d      	beq.n	800502c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800501e:	d103      	bne.n	8005028 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005026:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e035      	b.n	8005098 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005034:	d108      	bne.n	8005048 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005036:	897b      	ldrh	r3, [r7, #10]
 8005038:	b2db      	uxtb	r3, r3
 800503a:	461a      	mov	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005044:	611a      	str	r2, [r3, #16]
 8005046:	e01b      	b.n	8005080 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005048:	897b      	ldrh	r3, [r7, #10]
 800504a:	11db      	asrs	r3, r3, #7
 800504c:	b2db      	uxtb	r3, r3
 800504e:	f003 0306 	and.w	r3, r3, #6
 8005052:	b2db      	uxtb	r3, r3
 8005054:	f063 030f 	orn	r3, r3, #15
 8005058:	b2da      	uxtb	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	490e      	ldr	r1, [pc, #56]	; (80050a0 <I2C_MasterRequestWrite+0xfc>)
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f875 	bl	8005156 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e010      	b.n	8005098 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005076:	897b      	ldrh	r3, [r7, #10]
 8005078:	b2da      	uxtb	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	4907      	ldr	r1, [pc, #28]	; (80050a4 <I2C_MasterRequestWrite+0x100>)
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f865 	bl	8005156 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	00010008 	.word	0x00010008
 80050a4:	00010002 	.word	0x00010002

080050a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	4613      	mov	r3, r2
 80050b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050b8:	e025      	b.n	8005106 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c0:	d021      	beq.n	8005106 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c2:	f7fe ff4d 	bl	8003f60 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d302      	bcc.n	80050d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d116      	bne.n	8005106 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	f043 0220 	orr.w	r2, r3, #32
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e023      	b.n	800514e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	0c1b      	lsrs	r3, r3, #16
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	d10d      	bne.n	800512c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	43da      	mvns	r2, r3
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4013      	ands	r3, r2
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	bf0c      	ite	eq
 8005122:	2301      	moveq	r3, #1
 8005124:	2300      	movne	r3, #0
 8005126:	b2db      	uxtb	r3, r3
 8005128:	461a      	mov	r2, r3
 800512a:	e00c      	b.n	8005146 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	43da      	mvns	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4013      	ands	r3, r2
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	bf0c      	ite	eq
 800513e:	2301      	moveq	r3, #1
 8005140:	2300      	movne	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	429a      	cmp	r2, r3
 800514a:	d0b6      	beq.n	80050ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
 8005162:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005164:	e051      	b.n	800520a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005174:	d123      	bne.n	80051be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005184:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800518e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2220      	movs	r2, #32
 800519a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f043 0204 	orr.w	r2, r3, #4
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e046      	b.n	800524c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c4:	d021      	beq.n	800520a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c6:	f7fe fecb 	bl	8003f60 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d302      	bcc.n	80051dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d116      	bne.n	800520a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	f043 0220 	orr.w	r2, r3, #32
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e020      	b.n	800524c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	0c1b      	lsrs	r3, r3, #16
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b01      	cmp	r3, #1
 8005212:	d10c      	bne.n	800522e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	43da      	mvns	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4013      	ands	r3, r2
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	bf14      	ite	ne
 8005226:	2301      	movne	r3, #1
 8005228:	2300      	moveq	r3, #0
 800522a:	b2db      	uxtb	r3, r3
 800522c:	e00b      	b.n	8005246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	43da      	mvns	r2, r3
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4013      	ands	r3, r2
 800523a:	b29b      	uxth	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	bf14      	ite	ne
 8005240:	2301      	movne	r3, #1
 8005242:	2300      	moveq	r3, #0
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d18d      	bne.n	8005166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005260:	e02d      	b.n	80052be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 f878 	bl	8005358 <I2C_IsAcknowledgeFailed>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e02d      	b.n	80052ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005278:	d021      	beq.n	80052be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527a:	f7fe fe71 	bl	8003f60 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	429a      	cmp	r2, r3
 8005288:	d302      	bcc.n	8005290 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d116      	bne.n	80052be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f043 0220 	orr.w	r2, r3, #32
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e007      	b.n	80052ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c8:	2b80      	cmp	r3, #128	; 0x80
 80052ca:	d1ca      	bne.n	8005262 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052e2:	e02d      	b.n	8005340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f837 	bl	8005358 <I2C_IsAcknowledgeFailed>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e02d      	b.n	8005350 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fa:	d021      	beq.n	8005340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fc:	f7fe fe30 	bl	8003f60 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	429a      	cmp	r2, r3
 800530a:	d302      	bcc.n	8005312 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d116      	bne.n	8005340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532c:	f043 0220 	orr.w	r2, r3, #32
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e007      	b.n	8005350 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b04      	cmp	r3, #4
 800534c:	d1ca      	bne.n	80052e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800536a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536e:	d11b      	bne.n	80053a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005378:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	f043 0204 	orr.w	r2, r3, #4
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
	...

080053b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e267      	b.n	800589a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d075      	beq.n	80054c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053d6:	4b88      	ldr	r3, [pc, #544]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 030c 	and.w	r3, r3, #12
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d00c      	beq.n	80053fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053e2:	4b85      	ldr	r3, [pc, #532]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d112      	bne.n	8005414 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ee:	4b82      	ldr	r3, [pc, #520]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053fa:	d10b      	bne.n	8005414 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053fc:	4b7e      	ldr	r3, [pc, #504]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d05b      	beq.n	80054c0 <HAL_RCC_OscConfig+0x108>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d157      	bne.n	80054c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e242      	b.n	800589a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800541c:	d106      	bne.n	800542c <HAL_RCC_OscConfig+0x74>
 800541e:	4b76      	ldr	r3, [pc, #472]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a75      	ldr	r2, [pc, #468]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	e01d      	b.n	8005468 <HAL_RCC_OscConfig+0xb0>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005434:	d10c      	bne.n	8005450 <HAL_RCC_OscConfig+0x98>
 8005436:	4b70      	ldr	r3, [pc, #448]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a6f      	ldr	r2, [pc, #444]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 800543c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	4b6d      	ldr	r3, [pc, #436]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a6c      	ldr	r2, [pc, #432]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	e00b      	b.n	8005468 <HAL_RCC_OscConfig+0xb0>
 8005450:	4b69      	ldr	r3, [pc, #420]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a68      	ldr	r2, [pc, #416]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	4b66      	ldr	r3, [pc, #408]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a65      	ldr	r2, [pc, #404]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d013      	beq.n	8005498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005470:	f7fe fd76 	bl	8003f60 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005478:	f7fe fd72 	bl	8003f60 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b64      	cmp	r3, #100	; 0x64
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e207      	b.n	800589a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548a:	4b5b      	ldr	r3, [pc, #364]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f0      	beq.n	8005478 <HAL_RCC_OscConfig+0xc0>
 8005496:	e014      	b.n	80054c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005498:	f7fe fd62 	bl	8003f60 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a0:	f7fe fd5e 	bl	8003f60 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b64      	cmp	r3, #100	; 0x64
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e1f3      	b.n	800589a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054b2:	4b51      	ldr	r3, [pc, #324]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1f0      	bne.n	80054a0 <HAL_RCC_OscConfig+0xe8>
 80054be:	e000      	b.n	80054c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d063      	beq.n	8005596 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054ce:	4b4a      	ldr	r3, [pc, #296]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 030c 	and.w	r3, r3, #12
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00b      	beq.n	80054f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054da:	4b47      	ldr	r3, [pc, #284]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d11c      	bne.n	8005520 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054e6:	4b44      	ldr	r3, [pc, #272]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d116      	bne.n	8005520 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054f2:	4b41      	ldr	r3, [pc, #260]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d005      	beq.n	800550a <HAL_RCC_OscConfig+0x152>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d001      	beq.n	800550a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e1c7      	b.n	800589a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800550a:	4b3b      	ldr	r3, [pc, #236]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	4937      	ldr	r1, [pc, #220]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 800551a:	4313      	orrs	r3, r2
 800551c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800551e:	e03a      	b.n	8005596 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d020      	beq.n	800556a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005528:	4b34      	ldr	r3, [pc, #208]	; (80055fc <HAL_RCC_OscConfig+0x244>)
 800552a:	2201      	movs	r2, #1
 800552c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552e:	f7fe fd17 	bl	8003f60 <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005536:	f7fe fd13 	bl	8003f60 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e1a8      	b.n	800589a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005548:	4b2b      	ldr	r3, [pc, #172]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0f0      	beq.n	8005536 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005554:	4b28      	ldr	r3, [pc, #160]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	4925      	ldr	r1, [pc, #148]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005564:	4313      	orrs	r3, r2
 8005566:	600b      	str	r3, [r1, #0]
 8005568:	e015      	b.n	8005596 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800556a:	4b24      	ldr	r3, [pc, #144]	; (80055fc <HAL_RCC_OscConfig+0x244>)
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005570:	f7fe fcf6 	bl	8003f60 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005578:	f7fe fcf2 	bl	8003f60 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e187      	b.n	800589a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800558a:	4b1b      	ldr	r3, [pc, #108]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f0      	bne.n	8005578 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d036      	beq.n	8005610 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d016      	beq.n	80055d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055aa:	4b15      	ldr	r3, [pc, #84]	; (8005600 <HAL_RCC_OscConfig+0x248>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b0:	f7fe fcd6 	bl	8003f60 <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055b8:	f7fe fcd2 	bl	8003f60 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e167      	b.n	800589a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ca:	4b0b      	ldr	r3, [pc, #44]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80055cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0f0      	beq.n	80055b8 <HAL_RCC_OscConfig+0x200>
 80055d6:	e01b      	b.n	8005610 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055d8:	4b09      	ldr	r3, [pc, #36]	; (8005600 <HAL_RCC_OscConfig+0x248>)
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055de:	f7fe fcbf 	bl	8003f60 <HAL_GetTick>
 80055e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e4:	e00e      	b.n	8005604 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055e6:	f7fe fcbb 	bl	8003f60 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d907      	bls.n	8005604 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e150      	b.n	800589a <HAL_RCC_OscConfig+0x4e2>
 80055f8:	40023800 	.word	0x40023800
 80055fc:	42470000 	.word	0x42470000
 8005600:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005604:	4b88      	ldr	r3, [pc, #544]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 8005606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1ea      	bne.n	80055e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8097 	beq.w	800574c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800561e:	2300      	movs	r3, #0
 8005620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005622:	4b81      	ldr	r3, [pc, #516]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10f      	bne.n	800564e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800562e:	2300      	movs	r3, #0
 8005630:	60bb      	str	r3, [r7, #8]
 8005632:	4b7d      	ldr	r3, [pc, #500]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	4a7c      	ldr	r2, [pc, #496]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 8005638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800563c:	6413      	str	r3, [r2, #64]	; 0x40
 800563e:	4b7a      	ldr	r3, [pc, #488]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005646:	60bb      	str	r3, [r7, #8]
 8005648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800564a:	2301      	movs	r3, #1
 800564c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800564e:	4b77      	ldr	r3, [pc, #476]	; (800582c <HAL_RCC_OscConfig+0x474>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005656:	2b00      	cmp	r3, #0
 8005658:	d118      	bne.n	800568c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800565a:	4b74      	ldr	r3, [pc, #464]	; (800582c <HAL_RCC_OscConfig+0x474>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a73      	ldr	r2, [pc, #460]	; (800582c <HAL_RCC_OscConfig+0x474>)
 8005660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005666:	f7fe fc7b 	bl	8003f60 <HAL_GetTick>
 800566a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566c:	e008      	b.n	8005680 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800566e:	f7fe fc77 	bl	8003f60 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b02      	cmp	r3, #2
 800567a:	d901      	bls.n	8005680 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e10c      	b.n	800589a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005680:	4b6a      	ldr	r3, [pc, #424]	; (800582c <HAL_RCC_OscConfig+0x474>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0f0      	beq.n	800566e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d106      	bne.n	80056a2 <HAL_RCC_OscConfig+0x2ea>
 8005694:	4b64      	ldr	r3, [pc, #400]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 8005696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005698:	4a63      	ldr	r2, [pc, #396]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 800569a:	f043 0301 	orr.w	r3, r3, #1
 800569e:	6713      	str	r3, [r2, #112]	; 0x70
 80056a0:	e01c      	b.n	80056dc <HAL_RCC_OscConfig+0x324>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	2b05      	cmp	r3, #5
 80056a8:	d10c      	bne.n	80056c4 <HAL_RCC_OscConfig+0x30c>
 80056aa:	4b5f      	ldr	r3, [pc, #380]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 80056ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ae:	4a5e      	ldr	r2, [pc, #376]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 80056b0:	f043 0304 	orr.w	r3, r3, #4
 80056b4:	6713      	str	r3, [r2, #112]	; 0x70
 80056b6:	4b5c      	ldr	r3, [pc, #368]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 80056b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ba:	4a5b      	ldr	r2, [pc, #364]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 80056bc:	f043 0301 	orr.w	r3, r3, #1
 80056c0:	6713      	str	r3, [r2, #112]	; 0x70
 80056c2:	e00b      	b.n	80056dc <HAL_RCC_OscConfig+0x324>
 80056c4:	4b58      	ldr	r3, [pc, #352]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 80056c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c8:	4a57      	ldr	r2, [pc, #348]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 80056ca:	f023 0301 	bic.w	r3, r3, #1
 80056ce:	6713      	str	r3, [r2, #112]	; 0x70
 80056d0:	4b55      	ldr	r3, [pc, #340]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 80056d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d4:	4a54      	ldr	r2, [pc, #336]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 80056d6:	f023 0304 	bic.w	r3, r3, #4
 80056da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d015      	beq.n	8005710 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e4:	f7fe fc3c 	bl	8003f60 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ea:	e00a      	b.n	8005702 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ec:	f7fe fc38 	bl	8003f60 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e0cb      	b.n	800589a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005702:	4b49      	ldr	r3, [pc, #292]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 8005704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0ee      	beq.n	80056ec <HAL_RCC_OscConfig+0x334>
 800570e:	e014      	b.n	800573a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005710:	f7fe fc26 	bl	8003f60 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005716:	e00a      	b.n	800572e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005718:	f7fe fc22 	bl	8003f60 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	f241 3288 	movw	r2, #5000	; 0x1388
 8005726:	4293      	cmp	r3, r2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e0b5      	b.n	800589a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800572e:	4b3e      	ldr	r3, [pc, #248]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 8005730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1ee      	bne.n	8005718 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800573a:	7dfb      	ldrb	r3, [r7, #23]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d105      	bne.n	800574c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005740:	4b39      	ldr	r3, [pc, #228]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	4a38      	ldr	r2, [pc, #224]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 8005746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800574a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 80a1 	beq.w	8005898 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005756:	4b34      	ldr	r3, [pc, #208]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 030c 	and.w	r3, r3, #12
 800575e:	2b08      	cmp	r3, #8
 8005760:	d05c      	beq.n	800581c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	2b02      	cmp	r3, #2
 8005768:	d141      	bne.n	80057ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800576a:	4b31      	ldr	r3, [pc, #196]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005770:	f7fe fbf6 	bl	8003f60 <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005778:	f7fe fbf2 	bl	8003f60 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e087      	b.n	800589a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800578a:	4b27      	ldr	r3, [pc, #156]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1f0      	bne.n	8005778 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69da      	ldr	r2, [r3, #28]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	019b      	lsls	r3, r3, #6
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	085b      	lsrs	r3, r3, #1
 80057ae:	3b01      	subs	r3, #1
 80057b0:	041b      	lsls	r3, r3, #16
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	061b      	lsls	r3, r3, #24
 80057ba:	491b      	ldr	r1, [pc, #108]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057c0:	4b1b      	ldr	r3, [pc, #108]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 80057c2:	2201      	movs	r2, #1
 80057c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c6:	f7fe fbcb 	bl	8003f60 <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057cc:	e008      	b.n	80057e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ce:	f7fe fbc7 	bl	8003f60 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e05c      	b.n	800589a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e0:	4b11      	ldr	r3, [pc, #68]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0f0      	beq.n	80057ce <HAL_RCC_OscConfig+0x416>
 80057ec:	e054      	b.n	8005898 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ee:	4b10      	ldr	r3, [pc, #64]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f4:	f7fe fbb4 	bl	8003f60 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057fc:	f7fe fbb0 	bl	8003f60 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e045      	b.n	800589a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800580e:	4b06      	ldr	r3, [pc, #24]	; (8005828 <HAL_RCC_OscConfig+0x470>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1f0      	bne.n	80057fc <HAL_RCC_OscConfig+0x444>
 800581a:	e03d      	b.n	8005898 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d107      	bne.n	8005834 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e038      	b.n	800589a <HAL_RCC_OscConfig+0x4e2>
 8005828:	40023800 	.word	0x40023800
 800582c:	40007000 	.word	0x40007000
 8005830:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005834:	4b1b      	ldr	r3, [pc, #108]	; (80058a4 <HAL_RCC_OscConfig+0x4ec>)
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d028      	beq.n	8005894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800584c:	429a      	cmp	r2, r3
 800584e:	d121      	bne.n	8005894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800585a:	429a      	cmp	r2, r3
 800585c:	d11a      	bne.n	8005894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005864:	4013      	ands	r3, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800586a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800586c:	4293      	cmp	r3, r2
 800586e:	d111      	bne.n	8005894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	085b      	lsrs	r3, r3, #1
 800587c:	3b01      	subs	r3, #1
 800587e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005880:	429a      	cmp	r2, r3
 8005882:	d107      	bne.n	8005894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005890:	429a      	cmp	r2, r3
 8005892:	d001      	beq.n	8005898 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e000      	b.n	800589a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	40023800 	.word	0x40023800

080058a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e0cc      	b.n	8005a56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058bc:	4b68      	ldr	r3, [pc, #416]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d90c      	bls.n	80058e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ca:	4b65      	ldr	r3, [pc, #404]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058d2:	4b63      	ldr	r3, [pc, #396]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d001      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0b8      	b.n	8005a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d020      	beq.n	8005932 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058fc:	4b59      	ldr	r3, [pc, #356]	; (8005a64 <HAL_RCC_ClockConfig+0x1bc>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	4a58      	ldr	r2, [pc, #352]	; (8005a64 <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005906:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005914:	4b53      	ldr	r3, [pc, #332]	; (8005a64 <HAL_RCC_ClockConfig+0x1bc>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	4a52      	ldr	r2, [pc, #328]	; (8005a64 <HAL_RCC_ClockConfig+0x1bc>)
 800591a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800591e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005920:	4b50      	ldr	r3, [pc, #320]	; (8005a64 <HAL_RCC_ClockConfig+0x1bc>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	494d      	ldr	r1, [pc, #308]	; (8005a64 <HAL_RCC_ClockConfig+0x1bc>)
 800592e:	4313      	orrs	r3, r2
 8005930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d044      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d107      	bne.n	8005956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005946:	4b47      	ldr	r3, [pc, #284]	; (8005a64 <HAL_RCC_ClockConfig+0x1bc>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d119      	bne.n	8005986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e07f      	b.n	8005a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b02      	cmp	r3, #2
 800595c:	d003      	beq.n	8005966 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005962:	2b03      	cmp	r3, #3
 8005964:	d107      	bne.n	8005976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005966:	4b3f      	ldr	r3, [pc, #252]	; (8005a64 <HAL_RCC_ClockConfig+0x1bc>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d109      	bne.n	8005986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e06f      	b.n	8005a56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005976:	4b3b      	ldr	r3, [pc, #236]	; (8005a64 <HAL_RCC_ClockConfig+0x1bc>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e067      	b.n	8005a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005986:	4b37      	ldr	r3, [pc, #220]	; (8005a64 <HAL_RCC_ClockConfig+0x1bc>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f023 0203 	bic.w	r2, r3, #3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	4934      	ldr	r1, [pc, #208]	; (8005a64 <HAL_RCC_ClockConfig+0x1bc>)
 8005994:	4313      	orrs	r3, r2
 8005996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005998:	f7fe fae2 	bl	8003f60 <HAL_GetTick>
 800599c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599e:	e00a      	b.n	80059b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a0:	f7fe fade 	bl	8003f60 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e04f      	b.n	8005a56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b6:	4b2b      	ldr	r3, [pc, #172]	; (8005a64 <HAL_RCC_ClockConfig+0x1bc>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 020c 	and.w	r2, r3, #12
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d1eb      	bne.n	80059a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059c8:	4b25      	ldr	r3, [pc, #148]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d20c      	bcs.n	80059f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d6:	4b22      	ldr	r3, [pc, #136]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059de:	4b20      	ldr	r3, [pc, #128]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d001      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e032      	b.n	8005a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d008      	beq.n	8005a0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059fc:	4b19      	ldr	r3, [pc, #100]	; (8005a64 <HAL_RCC_ClockConfig+0x1bc>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	4916      	ldr	r1, [pc, #88]	; (8005a64 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d009      	beq.n	8005a2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a1a:	4b12      	ldr	r3, [pc, #72]	; (8005a64 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	490e      	ldr	r1, [pc, #56]	; (8005a64 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a2e:	f000 f821 	bl	8005a74 <HAL_RCC_GetSysClockFreq>
 8005a32:	4602      	mov	r2, r0
 8005a34:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	091b      	lsrs	r3, r3, #4
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	490a      	ldr	r1, [pc, #40]	; (8005a68 <HAL_RCC_ClockConfig+0x1c0>)
 8005a40:	5ccb      	ldrb	r3, [r1, r3]
 8005a42:	fa22 f303 	lsr.w	r3, r2, r3
 8005a46:	4a09      	ldr	r2, [pc, #36]	; (8005a6c <HAL_RCC_ClockConfig+0x1c4>)
 8005a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a4a:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <HAL_RCC_ClockConfig+0x1c8>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fe fa42 	bl	8003ed8 <HAL_InitTick>

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	40023c00 	.word	0x40023c00
 8005a64:	40023800 	.word	0x40023800
 8005a68:	08007ac0 	.word	0x08007ac0
 8005a6c:	2000001c 	.word	0x2000001c
 8005a70:	20000020 	.word	0x20000020

08005a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a78:	b090      	sub	sp, #64	; 0x40
 8005a7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a80:	2300      	movs	r3, #0
 8005a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a84:	2300      	movs	r3, #0
 8005a86:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a8c:	4b59      	ldr	r3, [pc, #356]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f003 030c 	and.w	r3, r3, #12
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d00d      	beq.n	8005ab4 <HAL_RCC_GetSysClockFreq+0x40>
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	f200 80a1 	bhi.w	8005be0 <HAL_RCC_GetSysClockFreq+0x16c>
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d003      	beq.n	8005aae <HAL_RCC_GetSysClockFreq+0x3a>
 8005aa6:	e09b      	b.n	8005be0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005aa8:	4b53      	ldr	r3, [pc, #332]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005aaa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005aac:	e09b      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005aae:	4b53      	ldr	r3, [pc, #332]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x188>)
 8005ab0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ab2:	e098      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ab4:	4b4f      	ldr	r3, [pc, #316]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005abc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005abe:	4b4d      	ldr	r3, [pc, #308]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d028      	beq.n	8005b1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aca:	4b4a      	ldr	r3, [pc, #296]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	099b      	lsrs	r3, r3, #6
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	623b      	str	r3, [r7, #32]
 8005ad4:	627a      	str	r2, [r7, #36]	; 0x24
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005adc:	2100      	movs	r1, #0
 8005ade:	4b47      	ldr	r3, [pc, #284]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x188>)
 8005ae0:	fb03 f201 	mul.w	r2, r3, r1
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	fb00 f303 	mul.w	r3, r0, r3
 8005aea:	4413      	add	r3, r2
 8005aec:	4a43      	ldr	r2, [pc, #268]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x188>)
 8005aee:	fba0 1202 	umull	r1, r2, r0, r2
 8005af2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005af4:	460a      	mov	r2, r1
 8005af6:	62ba      	str	r2, [r7, #40]	; 0x28
 8005af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005afa:	4413      	add	r3, r2
 8005afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b00:	2200      	movs	r2, #0
 8005b02:	61bb      	str	r3, [r7, #24]
 8005b04:	61fa      	str	r2, [r7, #28]
 8005b06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005b0e:	f7fa ff9d 	bl	8000a4c <__aeabi_uldivmod>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4613      	mov	r3, r2
 8005b18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b1a:	e053      	b.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b1c:	4b35      	ldr	r3, [pc, #212]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	099b      	lsrs	r3, r3, #6
 8005b22:	2200      	movs	r2, #0
 8005b24:	613b      	str	r3, [r7, #16]
 8005b26:	617a      	str	r2, [r7, #20]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005b2e:	f04f 0b00 	mov.w	fp, #0
 8005b32:	4652      	mov	r2, sl
 8005b34:	465b      	mov	r3, fp
 8005b36:	f04f 0000 	mov.w	r0, #0
 8005b3a:	f04f 0100 	mov.w	r1, #0
 8005b3e:	0159      	lsls	r1, r3, #5
 8005b40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b44:	0150      	lsls	r0, r2, #5
 8005b46:	4602      	mov	r2, r0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	ebb2 080a 	subs.w	r8, r2, sl
 8005b4e:	eb63 090b 	sbc.w	r9, r3, fp
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	f04f 0300 	mov.w	r3, #0
 8005b5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005b5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005b62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005b66:	ebb2 0408 	subs.w	r4, r2, r8
 8005b6a:	eb63 0509 	sbc.w	r5, r3, r9
 8005b6e:	f04f 0200 	mov.w	r2, #0
 8005b72:	f04f 0300 	mov.w	r3, #0
 8005b76:	00eb      	lsls	r3, r5, #3
 8005b78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b7c:	00e2      	lsls	r2, r4, #3
 8005b7e:	4614      	mov	r4, r2
 8005b80:	461d      	mov	r5, r3
 8005b82:	eb14 030a 	adds.w	r3, r4, sl
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	eb45 030b 	adc.w	r3, r5, fp
 8005b8c:	607b      	str	r3, [r7, #4]
 8005b8e:	f04f 0200 	mov.w	r2, #0
 8005b92:	f04f 0300 	mov.w	r3, #0
 8005b96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	028b      	lsls	r3, r1, #10
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	028a      	lsls	r2, r1, #10
 8005ba8:	4610      	mov	r0, r2
 8005baa:	4619      	mov	r1, r3
 8005bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bae:	2200      	movs	r2, #0
 8005bb0:	60bb      	str	r3, [r7, #8]
 8005bb2:	60fa      	str	r2, [r7, #12]
 8005bb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bb8:	f7fa ff48 	bl	8000a4c <__aeabi_uldivmod>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	0c1b      	lsrs	r3, r3, #16
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	3301      	adds	r3, #1
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005bd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bdc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005bde:	e002      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005be0:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005be2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3740      	adds	r7, #64	; 0x40
 8005bec:	46bd      	mov	sp, r7
 8005bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bf2:	bf00      	nop
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	00f42400 	.word	0x00f42400
 8005bfc:	017d7840 	.word	0x017d7840

08005c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c04:	4b03      	ldr	r3, [pc, #12]	; (8005c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c06:	681b      	ldr	r3, [r3, #0]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	2000001c 	.word	0x2000001c

08005c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c1c:	f7ff fff0 	bl	8005c00 <HAL_RCC_GetHCLKFreq>
 8005c20:	4602      	mov	r2, r0
 8005c22:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	0a9b      	lsrs	r3, r3, #10
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	4903      	ldr	r1, [pc, #12]	; (8005c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c2e:	5ccb      	ldrb	r3, [r1, r3]
 8005c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	08007ad0 	.word	0x08007ad0

08005c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e041      	b.n	8005cd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fd ff9e 	bl	8003ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4610      	mov	r0, r2
 8005c80:	f000 fe0c 	bl	800689c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
	...

08005ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d001      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e044      	b.n	8005d82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1e      	ldr	r2, [pc, #120]	; (8005d90 <HAL_TIM_Base_Start_IT+0xb0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d018      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x6c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d22:	d013      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x6c>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1a      	ldr	r2, [pc, #104]	; (8005d94 <HAL_TIM_Base_Start_IT+0xb4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00e      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x6c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a19      	ldr	r2, [pc, #100]	; (8005d98 <HAL_TIM_Base_Start_IT+0xb8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d009      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x6c>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a17      	ldr	r2, [pc, #92]	; (8005d9c <HAL_TIM_Base_Start_IT+0xbc>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d004      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x6c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a16      	ldr	r2, [pc, #88]	; (8005da0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d111      	bne.n	8005d70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b06      	cmp	r3, #6
 8005d5c:	d010      	beq.n	8005d80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0201 	orr.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6e:	e007      	b.n	8005d80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0201 	orr.w	r2, r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	40010000 	.word	0x40010000
 8005d94:	40000400 	.word	0x40000400
 8005d98:	40000800 	.word	0x40000800
 8005d9c:	40000c00 	.word	0x40000c00
 8005da0:	40014000 	.word	0x40014000

08005da4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e041      	b.n	8005e3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d106      	bne.n	8005dd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f839 	bl	8005e42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3304      	adds	r3, #4
 8005de0:	4619      	mov	r1, r3
 8005de2:	4610      	mov	r0, r2
 8005de4:	f000 fd5a 	bl	800689c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
	...

08005e58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d109      	bne.n	8005e7c <HAL_TIM_PWM_Start+0x24>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	bf14      	ite	ne
 8005e74:	2301      	movne	r3, #1
 8005e76:	2300      	moveq	r3, #0
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	e022      	b.n	8005ec2 <HAL_TIM_PWM_Start+0x6a>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d109      	bne.n	8005e96 <HAL_TIM_PWM_Start+0x3e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	bf14      	ite	ne
 8005e8e:	2301      	movne	r3, #1
 8005e90:	2300      	moveq	r3, #0
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	e015      	b.n	8005ec2 <HAL_TIM_PWM_Start+0x6a>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d109      	bne.n	8005eb0 <HAL_TIM_PWM_Start+0x58>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	bf14      	ite	ne
 8005ea8:	2301      	movne	r3, #1
 8005eaa:	2300      	moveq	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	e008      	b.n	8005ec2 <HAL_TIM_PWM_Start+0x6a>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	bf14      	ite	ne
 8005ebc:	2301      	movne	r3, #1
 8005ebe:	2300      	moveq	r3, #0
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e068      	b.n	8005f9c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_PWM_Start+0x82>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ed8:	e013      	b.n	8005f02 <HAL_TIM_PWM_Start+0xaa>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_PWM_Start+0x92>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ee8:	e00b      	b.n	8005f02 <HAL_TIM_PWM_Start+0xaa>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d104      	bne.n	8005efa <HAL_TIM_PWM_Start+0xa2>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ef8:	e003      	b.n	8005f02 <HAL_TIM_PWM_Start+0xaa>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2202      	movs	r2, #2
 8005efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2201      	movs	r2, #1
 8005f08:	6839      	ldr	r1, [r7, #0]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 ff6c 	bl	8006de8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a23      	ldr	r2, [pc, #140]	; (8005fa4 <HAL_TIM_PWM_Start+0x14c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d107      	bne.n	8005f2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a1d      	ldr	r2, [pc, #116]	; (8005fa4 <HAL_TIM_PWM_Start+0x14c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d018      	beq.n	8005f66 <HAL_TIM_PWM_Start+0x10e>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3c:	d013      	beq.n	8005f66 <HAL_TIM_PWM_Start+0x10e>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a19      	ldr	r2, [pc, #100]	; (8005fa8 <HAL_TIM_PWM_Start+0x150>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00e      	beq.n	8005f66 <HAL_TIM_PWM_Start+0x10e>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a17      	ldr	r2, [pc, #92]	; (8005fac <HAL_TIM_PWM_Start+0x154>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d009      	beq.n	8005f66 <HAL_TIM_PWM_Start+0x10e>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a16      	ldr	r2, [pc, #88]	; (8005fb0 <HAL_TIM_PWM_Start+0x158>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d004      	beq.n	8005f66 <HAL_TIM_PWM_Start+0x10e>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a14      	ldr	r2, [pc, #80]	; (8005fb4 <HAL_TIM_PWM_Start+0x15c>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d111      	bne.n	8005f8a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b06      	cmp	r3, #6
 8005f76:	d010      	beq.n	8005f9a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0201 	orr.w	r2, r2, #1
 8005f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f88:	e007      	b.n	8005f9a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f042 0201 	orr.w	r2, r2, #1
 8005f98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	40010000 	.word	0x40010000
 8005fa8:	40000400 	.word	0x40000400
 8005fac:	40000800 	.word	0x40000800
 8005fb0:	40000c00 	.word	0x40000c00
 8005fb4:	40014000 	.word	0x40014000

08005fb8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	6839      	ldr	r1, [r7, #0]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 ff0c 	bl	8006de8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a29      	ldr	r2, [pc, #164]	; (800607c <HAL_TIM_PWM_Stop+0xc4>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d117      	bne.n	800600a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6a1a      	ldr	r2, [r3, #32]
 8005fe0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10f      	bne.n	800600a <HAL_TIM_PWM_Stop+0x52>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6a1a      	ldr	r2, [r3, #32]
 8005ff0:	f240 4344 	movw	r3, #1092	; 0x444
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d107      	bne.n	800600a <HAL_TIM_PWM_Stop+0x52>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006008:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6a1a      	ldr	r2, [r3, #32]
 8006010:	f241 1311 	movw	r3, #4369	; 0x1111
 8006014:	4013      	ands	r3, r2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10f      	bne.n	800603a <HAL_TIM_PWM_Stop+0x82>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6a1a      	ldr	r2, [r3, #32]
 8006020:	f240 4344 	movw	r3, #1092	; 0x444
 8006024:	4013      	ands	r3, r2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d107      	bne.n	800603a <HAL_TIM_PWM_Stop+0x82>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0201 	bic.w	r2, r2, #1
 8006038:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d104      	bne.n	800604a <HAL_TIM_PWM_Stop+0x92>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006048:	e013      	b.n	8006072 <HAL_TIM_PWM_Stop+0xba>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b04      	cmp	r3, #4
 800604e:	d104      	bne.n	800605a <HAL_TIM_PWM_Stop+0xa2>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006058:	e00b      	b.n	8006072 <HAL_TIM_PWM_Stop+0xba>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b08      	cmp	r3, #8
 800605e:	d104      	bne.n	800606a <HAL_TIM_PWM_Stop+0xb2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006068:	e003      	b.n	8006072 <HAL_TIM_PWM_Stop+0xba>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40010000 	.word	0x40010000

08006080 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e097      	b.n	80061c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d106      	bne.n	80060ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7fd fd1d 	bl	8003ae8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2202      	movs	r2, #2
 80060b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	6812      	ldr	r2, [r2, #0]
 80060c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060c4:	f023 0307 	bic.w	r3, r3, #7
 80060c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3304      	adds	r3, #4
 80060d2:	4619      	mov	r1, r3
 80060d4:	4610      	mov	r0, r2
 80060d6:	f000 fbe1 	bl	800689c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006102:	f023 0303 	bic.w	r3, r3, #3
 8006106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	021b      	lsls	r3, r3, #8
 8006112:	4313      	orrs	r3, r2
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006120:	f023 030c 	bic.w	r3, r3, #12
 8006124:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800612c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68da      	ldr	r2, [r3, #12]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	021b      	lsls	r3, r3, #8
 800613c:	4313      	orrs	r3, r2
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	011a      	lsls	r2, r3, #4
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	031b      	lsls	r3, r3, #12
 8006150:	4313      	orrs	r3, r2
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800615e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006166:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	4313      	orrs	r3, r2
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d110      	bne.n	800621e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d102      	bne.n	8006208 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006202:	7b7b      	ldrb	r3, [r7, #13]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d001      	beq.n	800620c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e089      	b.n	8006320 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800621c:	e031      	b.n	8006282 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b04      	cmp	r3, #4
 8006222:	d110      	bne.n	8006246 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006224:	7bbb      	ldrb	r3, [r7, #14]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d102      	bne.n	8006230 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800622a:	7b3b      	ldrb	r3, [r7, #12]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d001      	beq.n	8006234 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e075      	b.n	8006320 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006244:	e01d      	b.n	8006282 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006246:	7bfb      	ldrb	r3, [r7, #15]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d108      	bne.n	800625e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800624c:	7bbb      	ldrb	r3, [r7, #14]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d105      	bne.n	800625e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006252:	7b7b      	ldrb	r3, [r7, #13]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d102      	bne.n	800625e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006258:	7b3b      	ldrb	r3, [r7, #12]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d001      	beq.n	8006262 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e05e      	b.n	8006320 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2202      	movs	r2, #2
 8006266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2202      	movs	r2, #2
 800626e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2202      	movs	r2, #2
 8006276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2202      	movs	r2, #2
 800627e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b04      	cmp	r3, #4
 800628c:	d010      	beq.n	80062b0 <HAL_TIM_Encoder_Start_IT+0xe4>
 800628e:	e01f      	b.n	80062d0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2201      	movs	r2, #1
 8006296:	2100      	movs	r1, #0
 8006298:	4618      	mov	r0, r3
 800629a:	f000 fda5 	bl	8006de8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f042 0202 	orr.w	r2, r2, #2
 80062ac:	60da      	str	r2, [r3, #12]
      break;
 80062ae:	e02e      	b.n	800630e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2201      	movs	r2, #1
 80062b6:	2104      	movs	r1, #4
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fd95 	bl	8006de8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f042 0204 	orr.w	r2, r2, #4
 80062cc:	60da      	str	r2, [r3, #12]
      break;
 80062ce:	e01e      	b.n	800630e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2201      	movs	r2, #1
 80062d6:	2100      	movs	r1, #0
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 fd85 	bl	8006de8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2201      	movs	r2, #1
 80062e4:	2104      	movs	r1, #4
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 fd7e 	bl	8006de8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0202 	orr.w	r2, r2, #2
 80062fa:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68da      	ldr	r2, [r3, #12]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0204 	orr.w	r2, r2, #4
 800630a:	60da      	str	r2, [r3, #12]
      break;
 800630c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f042 0201 	orr.w	r2, r2, #1
 800631c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b02      	cmp	r3, #2
 800633c:	d122      	bne.n	8006384 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b02      	cmp	r3, #2
 800634a:	d11b      	bne.n	8006384 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f06f 0202 	mvn.w	r2, #2
 8006354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	f003 0303 	and.w	r3, r3, #3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fa77 	bl	800685e <HAL_TIM_IC_CaptureCallback>
 8006370:	e005      	b.n	800637e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fa69 	bl	800684a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fa7a 	bl	8006872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	f003 0304 	and.w	r3, r3, #4
 800638e:	2b04      	cmp	r3, #4
 8006390:	d122      	bne.n	80063d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b04      	cmp	r3, #4
 800639e:	d11b      	bne.n	80063d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f06f 0204 	mvn.w	r2, #4
 80063a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2202      	movs	r2, #2
 80063ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fa4d 	bl	800685e <HAL_TIM_IC_CaptureCallback>
 80063c4:	e005      	b.n	80063d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fa3f 	bl	800684a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fa50 	bl	8006872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d122      	bne.n	800642c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f003 0308 	and.w	r3, r3, #8
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d11b      	bne.n	800642c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f06f 0208 	mvn.w	r2, #8
 80063fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2204      	movs	r2, #4
 8006402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fa23 	bl	800685e <HAL_TIM_IC_CaptureCallback>
 8006418:	e005      	b.n	8006426 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fa15 	bl	800684a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fa26 	bl	8006872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f003 0310 	and.w	r3, r3, #16
 8006436:	2b10      	cmp	r3, #16
 8006438:	d122      	bne.n	8006480 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f003 0310 	and.w	r3, r3, #16
 8006444:	2b10      	cmp	r3, #16
 8006446:	d11b      	bne.n	8006480 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f06f 0210 	mvn.w	r2, #16
 8006450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2208      	movs	r2, #8
 8006456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f9f9 	bl	800685e <HAL_TIM_IC_CaptureCallback>
 800646c:	e005      	b.n	800647a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f9eb 	bl	800684a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f9fc 	bl	8006872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b01      	cmp	r3, #1
 800648c:	d10e      	bne.n	80064ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b01      	cmp	r3, #1
 800649a:	d107      	bne.n	80064ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f06f 0201 	mvn.w	r2, #1
 80064a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7fc fca0 	bl	8002dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b6:	2b80      	cmp	r3, #128	; 0x80
 80064b8:	d10e      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c4:	2b80      	cmp	r3, #128	; 0x80
 80064c6:	d107      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fd26 	bl	8006f24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	d10e      	bne.n	8006504 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f0:	2b40      	cmp	r3, #64	; 0x40
 80064f2:	d107      	bne.n	8006504 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f9c1 	bl	8006886 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b20      	cmp	r3, #32
 8006510:	d10e      	bne.n	8006530 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f003 0320 	and.w	r3, r3, #32
 800651c:	2b20      	cmp	r3, #32
 800651e:	d107      	bne.n	8006530 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0220 	mvn.w	r2, #32
 8006528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fcf0 	bl	8006f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006530:	bf00      	nop
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800654e:	2b01      	cmp	r3, #1
 8006550:	d101      	bne.n	8006556 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006552:	2302      	movs	r3, #2
 8006554:	e0ae      	b.n	80066b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b0c      	cmp	r3, #12
 8006562:	f200 809f 	bhi.w	80066a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006566:	a201      	add	r2, pc, #4	; (adr r2, 800656c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656c:	080065a1 	.word	0x080065a1
 8006570:	080066a5 	.word	0x080066a5
 8006574:	080066a5 	.word	0x080066a5
 8006578:	080066a5 	.word	0x080066a5
 800657c:	080065e1 	.word	0x080065e1
 8006580:	080066a5 	.word	0x080066a5
 8006584:	080066a5 	.word	0x080066a5
 8006588:	080066a5 	.word	0x080066a5
 800658c:	08006623 	.word	0x08006623
 8006590:	080066a5 	.word	0x080066a5
 8006594:	080066a5 	.word	0x080066a5
 8006598:	080066a5 	.word	0x080066a5
 800659c:	08006663 	.word	0x08006663
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68b9      	ldr	r1, [r7, #8]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 f9f8 	bl	800699c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699a      	ldr	r2, [r3, #24]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0208 	orr.w	r2, r2, #8
 80065ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0204 	bic.w	r2, r2, #4
 80065ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6999      	ldr	r1, [r3, #24]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	691a      	ldr	r2, [r3, #16]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	619a      	str	r2, [r3, #24]
      break;
 80065de:	e064      	b.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fa3e 	bl	8006a68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699a      	ldr	r2, [r3, #24]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800660a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6999      	ldr	r1, [r3, #24]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	021a      	lsls	r2, r3, #8
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	619a      	str	r2, [r3, #24]
      break;
 8006620:	e043      	b.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fa89 	bl	8006b40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69da      	ldr	r2, [r3, #28]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0208 	orr.w	r2, r2, #8
 800663c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69da      	ldr	r2, [r3, #28]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0204 	bic.w	r2, r2, #4
 800664c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69d9      	ldr	r1, [r3, #28]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	691a      	ldr	r2, [r3, #16]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	61da      	str	r2, [r3, #28]
      break;
 8006660:	e023      	b.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fad3 	bl	8006c14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	69da      	ldr	r2, [r3, #28]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800667c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	69da      	ldr	r2, [r3, #28]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	69d9      	ldr	r1, [r3, #28]
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	021a      	lsls	r2, r3, #8
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	61da      	str	r2, [r3, #28]
      break;
 80066a2:	e002      	b.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	75fb      	strb	r3, [r7, #23]
      break;
 80066a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3718      	adds	r7, #24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d101      	bne.n	80066d8 <HAL_TIM_ConfigClockSource+0x1c>
 80066d4:	2302      	movs	r3, #2
 80066d6:	e0b4      	b.n	8006842 <HAL_TIM_ConfigClockSource+0x186>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006710:	d03e      	beq.n	8006790 <HAL_TIM_ConfigClockSource+0xd4>
 8006712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006716:	f200 8087 	bhi.w	8006828 <HAL_TIM_ConfigClockSource+0x16c>
 800671a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671e:	f000 8086 	beq.w	800682e <HAL_TIM_ConfigClockSource+0x172>
 8006722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006726:	d87f      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x16c>
 8006728:	2b70      	cmp	r3, #112	; 0x70
 800672a:	d01a      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0xa6>
 800672c:	2b70      	cmp	r3, #112	; 0x70
 800672e:	d87b      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x16c>
 8006730:	2b60      	cmp	r3, #96	; 0x60
 8006732:	d050      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0x11a>
 8006734:	2b60      	cmp	r3, #96	; 0x60
 8006736:	d877      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x16c>
 8006738:	2b50      	cmp	r3, #80	; 0x50
 800673a:	d03c      	beq.n	80067b6 <HAL_TIM_ConfigClockSource+0xfa>
 800673c:	2b50      	cmp	r3, #80	; 0x50
 800673e:	d873      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x16c>
 8006740:	2b40      	cmp	r3, #64	; 0x40
 8006742:	d058      	beq.n	80067f6 <HAL_TIM_ConfigClockSource+0x13a>
 8006744:	2b40      	cmp	r3, #64	; 0x40
 8006746:	d86f      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x16c>
 8006748:	2b30      	cmp	r3, #48	; 0x30
 800674a:	d064      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x15a>
 800674c:	2b30      	cmp	r3, #48	; 0x30
 800674e:	d86b      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x16c>
 8006750:	2b20      	cmp	r3, #32
 8006752:	d060      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x15a>
 8006754:	2b20      	cmp	r3, #32
 8006756:	d867      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x16c>
 8006758:	2b00      	cmp	r3, #0
 800675a:	d05c      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x15a>
 800675c:	2b10      	cmp	r3, #16
 800675e:	d05a      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x15a>
 8006760:	e062      	b.n	8006828 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6818      	ldr	r0, [r3, #0]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	6899      	ldr	r1, [r3, #8]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f000 fb19 	bl	8006da8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006784:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	609a      	str	r2, [r3, #8]
      break;
 800678e:	e04f      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	6899      	ldr	r1, [r3, #8]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f000 fb02 	bl	8006da8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689a      	ldr	r2, [r3, #8]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067b2:	609a      	str	r2, [r3, #8]
      break;
 80067b4:	e03c      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6818      	ldr	r0, [r3, #0]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	6859      	ldr	r1, [r3, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	461a      	mov	r2, r3
 80067c4:	f000 fa76 	bl	8006cb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2150      	movs	r1, #80	; 0x50
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 facf 	bl	8006d72 <TIM_ITRx_SetConfig>
      break;
 80067d4:	e02c      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6818      	ldr	r0, [r3, #0]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	6859      	ldr	r1, [r3, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	461a      	mov	r2, r3
 80067e4:	f000 fa95 	bl	8006d12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2160      	movs	r1, #96	; 0x60
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fabf 	bl	8006d72 <TIM_ITRx_SetConfig>
      break;
 80067f4:	e01c      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	6859      	ldr	r1, [r3, #4]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	461a      	mov	r2, r3
 8006804:	f000 fa56 	bl	8006cb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2140      	movs	r1, #64	; 0x40
 800680e:	4618      	mov	r0, r3
 8006810:	f000 faaf 	bl	8006d72 <TIM_ITRx_SetConfig>
      break;
 8006814:	e00c      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4619      	mov	r1, r3
 8006820:	4610      	mov	r0, r2
 8006822:	f000 faa6 	bl	8006d72 <TIM_ITRx_SetConfig>
      break;
 8006826:	e003      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	73fb      	strb	r3, [r7, #15]
      break;
 800682c:	e000      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800682e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006840:	7bfb      	ldrb	r3, [r7, #15]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006852:	bf00      	nop
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800687a:	bf00      	nop
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006886:	b480      	push	{r7}
 8006888:	b083      	sub	sp, #12
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800688e:	bf00      	nop
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
	...

0800689c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a34      	ldr	r2, [pc, #208]	; (8006980 <TIM_Base_SetConfig+0xe4>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00f      	beq.n	80068d4 <TIM_Base_SetConfig+0x38>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ba:	d00b      	beq.n	80068d4 <TIM_Base_SetConfig+0x38>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a31      	ldr	r2, [pc, #196]	; (8006984 <TIM_Base_SetConfig+0xe8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d007      	beq.n	80068d4 <TIM_Base_SetConfig+0x38>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a30      	ldr	r2, [pc, #192]	; (8006988 <TIM_Base_SetConfig+0xec>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d003      	beq.n	80068d4 <TIM_Base_SetConfig+0x38>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a2f      	ldr	r2, [pc, #188]	; (800698c <TIM_Base_SetConfig+0xf0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d108      	bne.n	80068e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a25      	ldr	r2, [pc, #148]	; (8006980 <TIM_Base_SetConfig+0xe4>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d01b      	beq.n	8006926 <TIM_Base_SetConfig+0x8a>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f4:	d017      	beq.n	8006926 <TIM_Base_SetConfig+0x8a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a22      	ldr	r2, [pc, #136]	; (8006984 <TIM_Base_SetConfig+0xe8>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d013      	beq.n	8006926 <TIM_Base_SetConfig+0x8a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a21      	ldr	r2, [pc, #132]	; (8006988 <TIM_Base_SetConfig+0xec>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d00f      	beq.n	8006926 <TIM_Base_SetConfig+0x8a>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a20      	ldr	r2, [pc, #128]	; (800698c <TIM_Base_SetConfig+0xf0>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d00b      	beq.n	8006926 <TIM_Base_SetConfig+0x8a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a1f      	ldr	r2, [pc, #124]	; (8006990 <TIM_Base_SetConfig+0xf4>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d007      	beq.n	8006926 <TIM_Base_SetConfig+0x8a>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a1e      	ldr	r2, [pc, #120]	; (8006994 <TIM_Base_SetConfig+0xf8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d003      	beq.n	8006926 <TIM_Base_SetConfig+0x8a>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a1d      	ldr	r2, [pc, #116]	; (8006998 <TIM_Base_SetConfig+0xfc>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d108      	bne.n	8006938 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800692c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4313      	orrs	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a08      	ldr	r2, [pc, #32]	; (8006980 <TIM_Base_SetConfig+0xe4>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d103      	bne.n	800696c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	691a      	ldr	r2, [r3, #16]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	615a      	str	r2, [r3, #20]
}
 8006972:	bf00      	nop
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	40010000 	.word	0x40010000
 8006984:	40000400 	.word	0x40000400
 8006988:	40000800 	.word	0x40000800
 800698c:	40000c00 	.word	0x40000c00
 8006990:	40014000 	.word	0x40014000
 8006994:	40014400 	.word	0x40014400
 8006998:	40014800 	.word	0x40014800

0800699c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	f023 0201 	bic.w	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0303 	bic.w	r3, r3, #3
 80069d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f023 0302 	bic.w	r3, r3, #2
 80069e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a1c      	ldr	r2, [pc, #112]	; (8006a64 <TIM_OC1_SetConfig+0xc8>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d10c      	bne.n	8006a12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f023 0308 	bic.w	r3, r3, #8
 80069fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f023 0304 	bic.w	r3, r3, #4
 8006a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a13      	ldr	r2, [pc, #76]	; (8006a64 <TIM_OC1_SetConfig+0xc8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d111      	bne.n	8006a3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	621a      	str	r2, [r3, #32]
}
 8006a58:	bf00      	nop
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	40010000 	.word	0x40010000

08006a68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	f023 0210 	bic.w	r2, r3, #16
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	021b      	lsls	r3, r3, #8
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f023 0320 	bic.w	r3, r3, #32
 8006ab2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	011b      	lsls	r3, r3, #4
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a1e      	ldr	r2, [pc, #120]	; (8006b3c <TIM_OC2_SetConfig+0xd4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d10d      	bne.n	8006ae4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	011b      	lsls	r3, r3, #4
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ae2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a15      	ldr	r2, [pc, #84]	; (8006b3c <TIM_OC2_SetConfig+0xd4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d113      	bne.n	8006b14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006af2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006afa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	621a      	str	r2, [r3, #32]
}
 8006b2e:	bf00      	nop
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	40010000 	.word	0x40010000

08006b40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f023 0303 	bic.w	r3, r3, #3
 8006b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	021b      	lsls	r3, r3, #8
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a1d      	ldr	r2, [pc, #116]	; (8006c10 <TIM_OC3_SetConfig+0xd0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d10d      	bne.n	8006bba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ba4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	021b      	lsls	r3, r3, #8
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a14      	ldr	r2, [pc, #80]	; (8006c10 <TIM_OC3_SetConfig+0xd0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d113      	bne.n	8006bea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	011b      	lsls	r3, r3, #4
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	011b      	lsls	r3, r3, #4
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	621a      	str	r2, [r3, #32]
}
 8006c04:	bf00      	nop
 8006c06:	371c      	adds	r7, #28
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	40010000 	.word	0x40010000

08006c14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	021b      	lsls	r3, r3, #8
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	031b      	lsls	r3, r3, #12
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a10      	ldr	r2, [pc, #64]	; (8006cb0 <TIM_OC4_SetConfig+0x9c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d109      	bne.n	8006c88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	019b      	lsls	r3, r3, #6
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	621a      	str	r2, [r3, #32]
}
 8006ca2:	bf00      	nop
 8006ca4:	371c      	adds	r7, #28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	40010000 	.word	0x40010000

08006cb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	f023 0201 	bic.w	r2, r3, #1
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	011b      	lsls	r3, r3, #4
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f023 030a 	bic.w	r3, r3, #10
 8006cf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	621a      	str	r2, [r3, #32]
}
 8006d06:	bf00      	nop
 8006d08:	371c      	adds	r7, #28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b087      	sub	sp, #28
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	60f8      	str	r0, [r7, #12]
 8006d1a:	60b9      	str	r1, [r7, #8]
 8006d1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	f023 0210 	bic.w	r2, r3, #16
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	031b      	lsls	r3, r3, #12
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	011b      	lsls	r3, r3, #4
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	621a      	str	r2, [r3, #32]
}
 8006d66:	bf00      	nop
 8006d68:	371c      	adds	r7, #28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b085      	sub	sp, #20
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	f043 0307 	orr.w	r3, r3, #7
 8006d94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	609a      	str	r2, [r3, #8]
}
 8006d9c:	bf00      	nop
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	021a      	lsls	r2, r3, #8
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	609a      	str	r2, [r3, #8]
}
 8006ddc:	bf00      	nop
 8006dde:	371c      	adds	r7, #28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f003 031f 	and.w	r3, r3, #31
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006e00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6a1a      	ldr	r2, [r3, #32]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	43db      	mvns	r3, r3
 8006e0a:	401a      	ands	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a1a      	ldr	r2, [r3, #32]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f003 031f 	and.w	r3, r3, #31
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e20:	431a      	orrs	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	621a      	str	r2, [r3, #32]
}
 8006e26:	bf00      	nop
 8006e28:	371c      	adds	r7, #28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
	...

08006e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d101      	bne.n	8006e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	e050      	b.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a1c      	ldr	r2, [pc, #112]	; (8006efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d018      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e98:	d013      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a18      	ldr	r2, [pc, #96]	; (8006f00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d00e      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a16      	ldr	r2, [pc, #88]	; (8006f04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d009      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a15      	ldr	r2, [pc, #84]	; (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d004      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a13      	ldr	r2, [pc, #76]	; (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d10c      	bne.n	8006edc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ec8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	40010000 	.word	0x40010000
 8006f00:	40000400 	.word	0x40000400
 8006f04:	40000800 	.word	0x40000800
 8006f08:	40000c00 	.word	0x40000c00
 8006f0c:	40014000 	.word	0x40014000

08006f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <__errno>:
 8006f38:	4b01      	ldr	r3, [pc, #4]	; (8006f40 <__errno+0x8>)
 8006f3a:	6818      	ldr	r0, [r3, #0]
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	20000028 	.word	0x20000028

08006f44 <__libc_init_array>:
 8006f44:	b570      	push	{r4, r5, r6, lr}
 8006f46:	4d0d      	ldr	r5, [pc, #52]	; (8006f7c <__libc_init_array+0x38>)
 8006f48:	4c0d      	ldr	r4, [pc, #52]	; (8006f80 <__libc_init_array+0x3c>)
 8006f4a:	1b64      	subs	r4, r4, r5
 8006f4c:	10a4      	asrs	r4, r4, #2
 8006f4e:	2600      	movs	r6, #0
 8006f50:	42a6      	cmp	r6, r4
 8006f52:	d109      	bne.n	8006f68 <__libc_init_array+0x24>
 8006f54:	4d0b      	ldr	r5, [pc, #44]	; (8006f84 <__libc_init_array+0x40>)
 8006f56:	4c0c      	ldr	r4, [pc, #48]	; (8006f88 <__libc_init_array+0x44>)
 8006f58:	f000 fc8e 	bl	8007878 <_init>
 8006f5c:	1b64      	subs	r4, r4, r5
 8006f5e:	10a4      	asrs	r4, r4, #2
 8006f60:	2600      	movs	r6, #0
 8006f62:	42a6      	cmp	r6, r4
 8006f64:	d105      	bne.n	8006f72 <__libc_init_array+0x2e>
 8006f66:	bd70      	pop	{r4, r5, r6, pc}
 8006f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6c:	4798      	blx	r3
 8006f6e:	3601      	adds	r6, #1
 8006f70:	e7ee      	b.n	8006f50 <__libc_init_array+0xc>
 8006f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f76:	4798      	blx	r3
 8006f78:	3601      	adds	r6, #1
 8006f7a:	e7f2      	b.n	8006f62 <__libc_init_array+0x1e>
 8006f7c:	08007b14 	.word	0x08007b14
 8006f80:	08007b14 	.word	0x08007b14
 8006f84:	08007b14 	.word	0x08007b14
 8006f88:	08007b18 	.word	0x08007b18

08006f8c <memcpy>:
 8006f8c:	440a      	add	r2, r1
 8006f8e:	4291      	cmp	r1, r2
 8006f90:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f94:	d100      	bne.n	8006f98 <memcpy+0xc>
 8006f96:	4770      	bx	lr
 8006f98:	b510      	push	{r4, lr}
 8006f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fa2:	4291      	cmp	r1, r2
 8006fa4:	d1f9      	bne.n	8006f9a <memcpy+0xe>
 8006fa6:	bd10      	pop	{r4, pc}

08006fa8 <memset>:
 8006fa8:	4402      	add	r2, r0
 8006faa:	4603      	mov	r3, r0
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d100      	bne.n	8006fb2 <memset+0xa>
 8006fb0:	4770      	bx	lr
 8006fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fb6:	e7f9      	b.n	8006fac <memset+0x4>

08006fb8 <siprintf>:
 8006fb8:	b40e      	push	{r1, r2, r3}
 8006fba:	b500      	push	{lr}
 8006fbc:	b09c      	sub	sp, #112	; 0x70
 8006fbe:	ab1d      	add	r3, sp, #116	; 0x74
 8006fc0:	9002      	str	r0, [sp, #8]
 8006fc2:	9006      	str	r0, [sp, #24]
 8006fc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fc8:	4809      	ldr	r0, [pc, #36]	; (8006ff0 <siprintf+0x38>)
 8006fca:	9107      	str	r1, [sp, #28]
 8006fcc:	9104      	str	r1, [sp, #16]
 8006fce:	4909      	ldr	r1, [pc, #36]	; (8006ff4 <siprintf+0x3c>)
 8006fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fd4:	9105      	str	r1, [sp, #20]
 8006fd6:	6800      	ldr	r0, [r0, #0]
 8006fd8:	9301      	str	r3, [sp, #4]
 8006fda:	a902      	add	r1, sp, #8
 8006fdc:	f000 f868 	bl	80070b0 <_svfiprintf_r>
 8006fe0:	9b02      	ldr	r3, [sp, #8]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	701a      	strb	r2, [r3, #0]
 8006fe6:	b01c      	add	sp, #112	; 0x70
 8006fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fec:	b003      	add	sp, #12
 8006fee:	4770      	bx	lr
 8006ff0:	20000028 	.word	0x20000028
 8006ff4:	ffff0208 	.word	0xffff0208

08006ff8 <__ssputs_r>:
 8006ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ffc:	688e      	ldr	r6, [r1, #8]
 8006ffe:	429e      	cmp	r6, r3
 8007000:	4682      	mov	sl, r0
 8007002:	460c      	mov	r4, r1
 8007004:	4690      	mov	r8, r2
 8007006:	461f      	mov	r7, r3
 8007008:	d838      	bhi.n	800707c <__ssputs_r+0x84>
 800700a:	898a      	ldrh	r2, [r1, #12]
 800700c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007010:	d032      	beq.n	8007078 <__ssputs_r+0x80>
 8007012:	6825      	ldr	r5, [r4, #0]
 8007014:	6909      	ldr	r1, [r1, #16]
 8007016:	eba5 0901 	sub.w	r9, r5, r1
 800701a:	6965      	ldr	r5, [r4, #20]
 800701c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007020:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007024:	3301      	adds	r3, #1
 8007026:	444b      	add	r3, r9
 8007028:	106d      	asrs	r5, r5, #1
 800702a:	429d      	cmp	r5, r3
 800702c:	bf38      	it	cc
 800702e:	461d      	movcc	r5, r3
 8007030:	0553      	lsls	r3, r2, #21
 8007032:	d531      	bpl.n	8007098 <__ssputs_r+0xa0>
 8007034:	4629      	mov	r1, r5
 8007036:	f000 fb55 	bl	80076e4 <_malloc_r>
 800703a:	4606      	mov	r6, r0
 800703c:	b950      	cbnz	r0, 8007054 <__ssputs_r+0x5c>
 800703e:	230c      	movs	r3, #12
 8007040:	f8ca 3000 	str.w	r3, [sl]
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800704a:	81a3      	strh	r3, [r4, #12]
 800704c:	f04f 30ff 	mov.w	r0, #4294967295
 8007050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007054:	6921      	ldr	r1, [r4, #16]
 8007056:	464a      	mov	r2, r9
 8007058:	f7ff ff98 	bl	8006f8c <memcpy>
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007066:	81a3      	strh	r3, [r4, #12]
 8007068:	6126      	str	r6, [r4, #16]
 800706a:	6165      	str	r5, [r4, #20]
 800706c:	444e      	add	r6, r9
 800706e:	eba5 0509 	sub.w	r5, r5, r9
 8007072:	6026      	str	r6, [r4, #0]
 8007074:	60a5      	str	r5, [r4, #8]
 8007076:	463e      	mov	r6, r7
 8007078:	42be      	cmp	r6, r7
 800707a:	d900      	bls.n	800707e <__ssputs_r+0x86>
 800707c:	463e      	mov	r6, r7
 800707e:	6820      	ldr	r0, [r4, #0]
 8007080:	4632      	mov	r2, r6
 8007082:	4641      	mov	r1, r8
 8007084:	f000 faa8 	bl	80075d8 <memmove>
 8007088:	68a3      	ldr	r3, [r4, #8]
 800708a:	1b9b      	subs	r3, r3, r6
 800708c:	60a3      	str	r3, [r4, #8]
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	4433      	add	r3, r6
 8007092:	6023      	str	r3, [r4, #0]
 8007094:	2000      	movs	r0, #0
 8007096:	e7db      	b.n	8007050 <__ssputs_r+0x58>
 8007098:	462a      	mov	r2, r5
 800709a:	f000 fb97 	bl	80077cc <_realloc_r>
 800709e:	4606      	mov	r6, r0
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d1e1      	bne.n	8007068 <__ssputs_r+0x70>
 80070a4:	6921      	ldr	r1, [r4, #16]
 80070a6:	4650      	mov	r0, sl
 80070a8:	f000 fab0 	bl	800760c <_free_r>
 80070ac:	e7c7      	b.n	800703e <__ssputs_r+0x46>
	...

080070b0 <_svfiprintf_r>:
 80070b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b4:	4698      	mov	r8, r3
 80070b6:	898b      	ldrh	r3, [r1, #12]
 80070b8:	061b      	lsls	r3, r3, #24
 80070ba:	b09d      	sub	sp, #116	; 0x74
 80070bc:	4607      	mov	r7, r0
 80070be:	460d      	mov	r5, r1
 80070c0:	4614      	mov	r4, r2
 80070c2:	d50e      	bpl.n	80070e2 <_svfiprintf_r+0x32>
 80070c4:	690b      	ldr	r3, [r1, #16]
 80070c6:	b963      	cbnz	r3, 80070e2 <_svfiprintf_r+0x32>
 80070c8:	2140      	movs	r1, #64	; 0x40
 80070ca:	f000 fb0b 	bl	80076e4 <_malloc_r>
 80070ce:	6028      	str	r0, [r5, #0]
 80070d0:	6128      	str	r0, [r5, #16]
 80070d2:	b920      	cbnz	r0, 80070de <_svfiprintf_r+0x2e>
 80070d4:	230c      	movs	r3, #12
 80070d6:	603b      	str	r3, [r7, #0]
 80070d8:	f04f 30ff 	mov.w	r0, #4294967295
 80070dc:	e0d1      	b.n	8007282 <_svfiprintf_r+0x1d2>
 80070de:	2340      	movs	r3, #64	; 0x40
 80070e0:	616b      	str	r3, [r5, #20]
 80070e2:	2300      	movs	r3, #0
 80070e4:	9309      	str	r3, [sp, #36]	; 0x24
 80070e6:	2320      	movs	r3, #32
 80070e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80070f0:	2330      	movs	r3, #48	; 0x30
 80070f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800729c <_svfiprintf_r+0x1ec>
 80070f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070fa:	f04f 0901 	mov.w	r9, #1
 80070fe:	4623      	mov	r3, r4
 8007100:	469a      	mov	sl, r3
 8007102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007106:	b10a      	cbz	r2, 800710c <_svfiprintf_r+0x5c>
 8007108:	2a25      	cmp	r2, #37	; 0x25
 800710a:	d1f9      	bne.n	8007100 <_svfiprintf_r+0x50>
 800710c:	ebba 0b04 	subs.w	fp, sl, r4
 8007110:	d00b      	beq.n	800712a <_svfiprintf_r+0x7a>
 8007112:	465b      	mov	r3, fp
 8007114:	4622      	mov	r2, r4
 8007116:	4629      	mov	r1, r5
 8007118:	4638      	mov	r0, r7
 800711a:	f7ff ff6d 	bl	8006ff8 <__ssputs_r>
 800711e:	3001      	adds	r0, #1
 8007120:	f000 80aa 	beq.w	8007278 <_svfiprintf_r+0x1c8>
 8007124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007126:	445a      	add	r2, fp
 8007128:	9209      	str	r2, [sp, #36]	; 0x24
 800712a:	f89a 3000 	ldrb.w	r3, [sl]
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 80a2 	beq.w	8007278 <_svfiprintf_r+0x1c8>
 8007134:	2300      	movs	r3, #0
 8007136:	f04f 32ff 	mov.w	r2, #4294967295
 800713a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800713e:	f10a 0a01 	add.w	sl, sl, #1
 8007142:	9304      	str	r3, [sp, #16]
 8007144:	9307      	str	r3, [sp, #28]
 8007146:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800714a:	931a      	str	r3, [sp, #104]	; 0x68
 800714c:	4654      	mov	r4, sl
 800714e:	2205      	movs	r2, #5
 8007150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007154:	4851      	ldr	r0, [pc, #324]	; (800729c <_svfiprintf_r+0x1ec>)
 8007156:	f7f9 f84b 	bl	80001f0 <memchr>
 800715a:	9a04      	ldr	r2, [sp, #16]
 800715c:	b9d8      	cbnz	r0, 8007196 <_svfiprintf_r+0xe6>
 800715e:	06d0      	lsls	r0, r2, #27
 8007160:	bf44      	itt	mi
 8007162:	2320      	movmi	r3, #32
 8007164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007168:	0711      	lsls	r1, r2, #28
 800716a:	bf44      	itt	mi
 800716c:	232b      	movmi	r3, #43	; 0x2b
 800716e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007172:	f89a 3000 	ldrb.w	r3, [sl]
 8007176:	2b2a      	cmp	r3, #42	; 0x2a
 8007178:	d015      	beq.n	80071a6 <_svfiprintf_r+0xf6>
 800717a:	9a07      	ldr	r2, [sp, #28]
 800717c:	4654      	mov	r4, sl
 800717e:	2000      	movs	r0, #0
 8007180:	f04f 0c0a 	mov.w	ip, #10
 8007184:	4621      	mov	r1, r4
 8007186:	f811 3b01 	ldrb.w	r3, [r1], #1
 800718a:	3b30      	subs	r3, #48	; 0x30
 800718c:	2b09      	cmp	r3, #9
 800718e:	d94e      	bls.n	800722e <_svfiprintf_r+0x17e>
 8007190:	b1b0      	cbz	r0, 80071c0 <_svfiprintf_r+0x110>
 8007192:	9207      	str	r2, [sp, #28]
 8007194:	e014      	b.n	80071c0 <_svfiprintf_r+0x110>
 8007196:	eba0 0308 	sub.w	r3, r0, r8
 800719a:	fa09 f303 	lsl.w	r3, r9, r3
 800719e:	4313      	orrs	r3, r2
 80071a0:	9304      	str	r3, [sp, #16]
 80071a2:	46a2      	mov	sl, r4
 80071a4:	e7d2      	b.n	800714c <_svfiprintf_r+0x9c>
 80071a6:	9b03      	ldr	r3, [sp, #12]
 80071a8:	1d19      	adds	r1, r3, #4
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	9103      	str	r1, [sp, #12]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	bfbb      	ittet	lt
 80071b2:	425b      	neglt	r3, r3
 80071b4:	f042 0202 	orrlt.w	r2, r2, #2
 80071b8:	9307      	strge	r3, [sp, #28]
 80071ba:	9307      	strlt	r3, [sp, #28]
 80071bc:	bfb8      	it	lt
 80071be:	9204      	strlt	r2, [sp, #16]
 80071c0:	7823      	ldrb	r3, [r4, #0]
 80071c2:	2b2e      	cmp	r3, #46	; 0x2e
 80071c4:	d10c      	bne.n	80071e0 <_svfiprintf_r+0x130>
 80071c6:	7863      	ldrb	r3, [r4, #1]
 80071c8:	2b2a      	cmp	r3, #42	; 0x2a
 80071ca:	d135      	bne.n	8007238 <_svfiprintf_r+0x188>
 80071cc:	9b03      	ldr	r3, [sp, #12]
 80071ce:	1d1a      	adds	r2, r3, #4
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	9203      	str	r2, [sp, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	bfb8      	it	lt
 80071d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80071dc:	3402      	adds	r4, #2
 80071de:	9305      	str	r3, [sp, #20]
 80071e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80072ac <_svfiprintf_r+0x1fc>
 80071e4:	7821      	ldrb	r1, [r4, #0]
 80071e6:	2203      	movs	r2, #3
 80071e8:	4650      	mov	r0, sl
 80071ea:	f7f9 f801 	bl	80001f0 <memchr>
 80071ee:	b140      	cbz	r0, 8007202 <_svfiprintf_r+0x152>
 80071f0:	2340      	movs	r3, #64	; 0x40
 80071f2:	eba0 000a 	sub.w	r0, r0, sl
 80071f6:	fa03 f000 	lsl.w	r0, r3, r0
 80071fa:	9b04      	ldr	r3, [sp, #16]
 80071fc:	4303      	orrs	r3, r0
 80071fe:	3401      	adds	r4, #1
 8007200:	9304      	str	r3, [sp, #16]
 8007202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007206:	4826      	ldr	r0, [pc, #152]	; (80072a0 <_svfiprintf_r+0x1f0>)
 8007208:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800720c:	2206      	movs	r2, #6
 800720e:	f7f8 ffef 	bl	80001f0 <memchr>
 8007212:	2800      	cmp	r0, #0
 8007214:	d038      	beq.n	8007288 <_svfiprintf_r+0x1d8>
 8007216:	4b23      	ldr	r3, [pc, #140]	; (80072a4 <_svfiprintf_r+0x1f4>)
 8007218:	bb1b      	cbnz	r3, 8007262 <_svfiprintf_r+0x1b2>
 800721a:	9b03      	ldr	r3, [sp, #12]
 800721c:	3307      	adds	r3, #7
 800721e:	f023 0307 	bic.w	r3, r3, #7
 8007222:	3308      	adds	r3, #8
 8007224:	9303      	str	r3, [sp, #12]
 8007226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007228:	4433      	add	r3, r6
 800722a:	9309      	str	r3, [sp, #36]	; 0x24
 800722c:	e767      	b.n	80070fe <_svfiprintf_r+0x4e>
 800722e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007232:	460c      	mov	r4, r1
 8007234:	2001      	movs	r0, #1
 8007236:	e7a5      	b.n	8007184 <_svfiprintf_r+0xd4>
 8007238:	2300      	movs	r3, #0
 800723a:	3401      	adds	r4, #1
 800723c:	9305      	str	r3, [sp, #20]
 800723e:	4619      	mov	r1, r3
 8007240:	f04f 0c0a 	mov.w	ip, #10
 8007244:	4620      	mov	r0, r4
 8007246:	f810 2b01 	ldrb.w	r2, [r0], #1
 800724a:	3a30      	subs	r2, #48	; 0x30
 800724c:	2a09      	cmp	r2, #9
 800724e:	d903      	bls.n	8007258 <_svfiprintf_r+0x1a8>
 8007250:	2b00      	cmp	r3, #0
 8007252:	d0c5      	beq.n	80071e0 <_svfiprintf_r+0x130>
 8007254:	9105      	str	r1, [sp, #20]
 8007256:	e7c3      	b.n	80071e0 <_svfiprintf_r+0x130>
 8007258:	fb0c 2101 	mla	r1, ip, r1, r2
 800725c:	4604      	mov	r4, r0
 800725e:	2301      	movs	r3, #1
 8007260:	e7f0      	b.n	8007244 <_svfiprintf_r+0x194>
 8007262:	ab03      	add	r3, sp, #12
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	462a      	mov	r2, r5
 8007268:	4b0f      	ldr	r3, [pc, #60]	; (80072a8 <_svfiprintf_r+0x1f8>)
 800726a:	a904      	add	r1, sp, #16
 800726c:	4638      	mov	r0, r7
 800726e:	f3af 8000 	nop.w
 8007272:	1c42      	adds	r2, r0, #1
 8007274:	4606      	mov	r6, r0
 8007276:	d1d6      	bne.n	8007226 <_svfiprintf_r+0x176>
 8007278:	89ab      	ldrh	r3, [r5, #12]
 800727a:	065b      	lsls	r3, r3, #25
 800727c:	f53f af2c 	bmi.w	80070d8 <_svfiprintf_r+0x28>
 8007280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007282:	b01d      	add	sp, #116	; 0x74
 8007284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007288:	ab03      	add	r3, sp, #12
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	462a      	mov	r2, r5
 800728e:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <_svfiprintf_r+0x1f8>)
 8007290:	a904      	add	r1, sp, #16
 8007292:	4638      	mov	r0, r7
 8007294:	f000 f87a 	bl	800738c <_printf_i>
 8007298:	e7eb      	b.n	8007272 <_svfiprintf_r+0x1c2>
 800729a:	bf00      	nop
 800729c:	08007ad8 	.word	0x08007ad8
 80072a0:	08007ae2 	.word	0x08007ae2
 80072a4:	00000000 	.word	0x00000000
 80072a8:	08006ff9 	.word	0x08006ff9
 80072ac:	08007ade 	.word	0x08007ade

080072b0 <_printf_common>:
 80072b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b4:	4616      	mov	r6, r2
 80072b6:	4699      	mov	r9, r3
 80072b8:	688a      	ldr	r2, [r1, #8]
 80072ba:	690b      	ldr	r3, [r1, #16]
 80072bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072c0:	4293      	cmp	r3, r2
 80072c2:	bfb8      	it	lt
 80072c4:	4613      	movlt	r3, r2
 80072c6:	6033      	str	r3, [r6, #0]
 80072c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072cc:	4607      	mov	r7, r0
 80072ce:	460c      	mov	r4, r1
 80072d0:	b10a      	cbz	r2, 80072d6 <_printf_common+0x26>
 80072d2:	3301      	adds	r3, #1
 80072d4:	6033      	str	r3, [r6, #0]
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	0699      	lsls	r1, r3, #26
 80072da:	bf42      	ittt	mi
 80072dc:	6833      	ldrmi	r3, [r6, #0]
 80072de:	3302      	addmi	r3, #2
 80072e0:	6033      	strmi	r3, [r6, #0]
 80072e2:	6825      	ldr	r5, [r4, #0]
 80072e4:	f015 0506 	ands.w	r5, r5, #6
 80072e8:	d106      	bne.n	80072f8 <_printf_common+0x48>
 80072ea:	f104 0a19 	add.w	sl, r4, #25
 80072ee:	68e3      	ldr	r3, [r4, #12]
 80072f0:	6832      	ldr	r2, [r6, #0]
 80072f2:	1a9b      	subs	r3, r3, r2
 80072f4:	42ab      	cmp	r3, r5
 80072f6:	dc26      	bgt.n	8007346 <_printf_common+0x96>
 80072f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072fc:	1e13      	subs	r3, r2, #0
 80072fe:	6822      	ldr	r2, [r4, #0]
 8007300:	bf18      	it	ne
 8007302:	2301      	movne	r3, #1
 8007304:	0692      	lsls	r2, r2, #26
 8007306:	d42b      	bmi.n	8007360 <_printf_common+0xb0>
 8007308:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800730c:	4649      	mov	r1, r9
 800730e:	4638      	mov	r0, r7
 8007310:	47c0      	blx	r8
 8007312:	3001      	adds	r0, #1
 8007314:	d01e      	beq.n	8007354 <_printf_common+0xa4>
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	68e5      	ldr	r5, [r4, #12]
 800731a:	6832      	ldr	r2, [r6, #0]
 800731c:	f003 0306 	and.w	r3, r3, #6
 8007320:	2b04      	cmp	r3, #4
 8007322:	bf08      	it	eq
 8007324:	1aad      	subeq	r5, r5, r2
 8007326:	68a3      	ldr	r3, [r4, #8]
 8007328:	6922      	ldr	r2, [r4, #16]
 800732a:	bf0c      	ite	eq
 800732c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007330:	2500      	movne	r5, #0
 8007332:	4293      	cmp	r3, r2
 8007334:	bfc4      	itt	gt
 8007336:	1a9b      	subgt	r3, r3, r2
 8007338:	18ed      	addgt	r5, r5, r3
 800733a:	2600      	movs	r6, #0
 800733c:	341a      	adds	r4, #26
 800733e:	42b5      	cmp	r5, r6
 8007340:	d11a      	bne.n	8007378 <_printf_common+0xc8>
 8007342:	2000      	movs	r0, #0
 8007344:	e008      	b.n	8007358 <_printf_common+0xa8>
 8007346:	2301      	movs	r3, #1
 8007348:	4652      	mov	r2, sl
 800734a:	4649      	mov	r1, r9
 800734c:	4638      	mov	r0, r7
 800734e:	47c0      	blx	r8
 8007350:	3001      	adds	r0, #1
 8007352:	d103      	bne.n	800735c <_printf_common+0xac>
 8007354:	f04f 30ff 	mov.w	r0, #4294967295
 8007358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800735c:	3501      	adds	r5, #1
 800735e:	e7c6      	b.n	80072ee <_printf_common+0x3e>
 8007360:	18e1      	adds	r1, r4, r3
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	2030      	movs	r0, #48	; 0x30
 8007366:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800736a:	4422      	add	r2, r4
 800736c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007370:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007374:	3302      	adds	r3, #2
 8007376:	e7c7      	b.n	8007308 <_printf_common+0x58>
 8007378:	2301      	movs	r3, #1
 800737a:	4622      	mov	r2, r4
 800737c:	4649      	mov	r1, r9
 800737e:	4638      	mov	r0, r7
 8007380:	47c0      	blx	r8
 8007382:	3001      	adds	r0, #1
 8007384:	d0e6      	beq.n	8007354 <_printf_common+0xa4>
 8007386:	3601      	adds	r6, #1
 8007388:	e7d9      	b.n	800733e <_printf_common+0x8e>
	...

0800738c <_printf_i>:
 800738c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007390:	7e0f      	ldrb	r7, [r1, #24]
 8007392:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007394:	2f78      	cmp	r7, #120	; 0x78
 8007396:	4691      	mov	r9, r2
 8007398:	4680      	mov	r8, r0
 800739a:	460c      	mov	r4, r1
 800739c:	469a      	mov	sl, r3
 800739e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073a2:	d807      	bhi.n	80073b4 <_printf_i+0x28>
 80073a4:	2f62      	cmp	r7, #98	; 0x62
 80073a6:	d80a      	bhi.n	80073be <_printf_i+0x32>
 80073a8:	2f00      	cmp	r7, #0
 80073aa:	f000 80d8 	beq.w	800755e <_printf_i+0x1d2>
 80073ae:	2f58      	cmp	r7, #88	; 0x58
 80073b0:	f000 80a3 	beq.w	80074fa <_printf_i+0x16e>
 80073b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073bc:	e03a      	b.n	8007434 <_printf_i+0xa8>
 80073be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073c2:	2b15      	cmp	r3, #21
 80073c4:	d8f6      	bhi.n	80073b4 <_printf_i+0x28>
 80073c6:	a101      	add	r1, pc, #4	; (adr r1, 80073cc <_printf_i+0x40>)
 80073c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073cc:	08007425 	.word	0x08007425
 80073d0:	08007439 	.word	0x08007439
 80073d4:	080073b5 	.word	0x080073b5
 80073d8:	080073b5 	.word	0x080073b5
 80073dc:	080073b5 	.word	0x080073b5
 80073e0:	080073b5 	.word	0x080073b5
 80073e4:	08007439 	.word	0x08007439
 80073e8:	080073b5 	.word	0x080073b5
 80073ec:	080073b5 	.word	0x080073b5
 80073f0:	080073b5 	.word	0x080073b5
 80073f4:	080073b5 	.word	0x080073b5
 80073f8:	08007545 	.word	0x08007545
 80073fc:	08007469 	.word	0x08007469
 8007400:	08007527 	.word	0x08007527
 8007404:	080073b5 	.word	0x080073b5
 8007408:	080073b5 	.word	0x080073b5
 800740c:	08007567 	.word	0x08007567
 8007410:	080073b5 	.word	0x080073b5
 8007414:	08007469 	.word	0x08007469
 8007418:	080073b5 	.word	0x080073b5
 800741c:	080073b5 	.word	0x080073b5
 8007420:	0800752f 	.word	0x0800752f
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	1d1a      	adds	r2, r3, #4
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	602a      	str	r2, [r5, #0]
 800742c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007434:	2301      	movs	r3, #1
 8007436:	e0a3      	b.n	8007580 <_printf_i+0x1f4>
 8007438:	6820      	ldr	r0, [r4, #0]
 800743a:	6829      	ldr	r1, [r5, #0]
 800743c:	0606      	lsls	r6, r0, #24
 800743e:	f101 0304 	add.w	r3, r1, #4
 8007442:	d50a      	bpl.n	800745a <_printf_i+0xce>
 8007444:	680e      	ldr	r6, [r1, #0]
 8007446:	602b      	str	r3, [r5, #0]
 8007448:	2e00      	cmp	r6, #0
 800744a:	da03      	bge.n	8007454 <_printf_i+0xc8>
 800744c:	232d      	movs	r3, #45	; 0x2d
 800744e:	4276      	negs	r6, r6
 8007450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007454:	485e      	ldr	r0, [pc, #376]	; (80075d0 <_printf_i+0x244>)
 8007456:	230a      	movs	r3, #10
 8007458:	e019      	b.n	800748e <_printf_i+0x102>
 800745a:	680e      	ldr	r6, [r1, #0]
 800745c:	602b      	str	r3, [r5, #0]
 800745e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007462:	bf18      	it	ne
 8007464:	b236      	sxthne	r6, r6
 8007466:	e7ef      	b.n	8007448 <_printf_i+0xbc>
 8007468:	682b      	ldr	r3, [r5, #0]
 800746a:	6820      	ldr	r0, [r4, #0]
 800746c:	1d19      	adds	r1, r3, #4
 800746e:	6029      	str	r1, [r5, #0]
 8007470:	0601      	lsls	r1, r0, #24
 8007472:	d501      	bpl.n	8007478 <_printf_i+0xec>
 8007474:	681e      	ldr	r6, [r3, #0]
 8007476:	e002      	b.n	800747e <_printf_i+0xf2>
 8007478:	0646      	lsls	r6, r0, #25
 800747a:	d5fb      	bpl.n	8007474 <_printf_i+0xe8>
 800747c:	881e      	ldrh	r6, [r3, #0]
 800747e:	4854      	ldr	r0, [pc, #336]	; (80075d0 <_printf_i+0x244>)
 8007480:	2f6f      	cmp	r7, #111	; 0x6f
 8007482:	bf0c      	ite	eq
 8007484:	2308      	moveq	r3, #8
 8007486:	230a      	movne	r3, #10
 8007488:	2100      	movs	r1, #0
 800748a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800748e:	6865      	ldr	r5, [r4, #4]
 8007490:	60a5      	str	r5, [r4, #8]
 8007492:	2d00      	cmp	r5, #0
 8007494:	bfa2      	ittt	ge
 8007496:	6821      	ldrge	r1, [r4, #0]
 8007498:	f021 0104 	bicge.w	r1, r1, #4
 800749c:	6021      	strge	r1, [r4, #0]
 800749e:	b90e      	cbnz	r6, 80074a4 <_printf_i+0x118>
 80074a0:	2d00      	cmp	r5, #0
 80074a2:	d04d      	beq.n	8007540 <_printf_i+0x1b4>
 80074a4:	4615      	mov	r5, r2
 80074a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80074aa:	fb03 6711 	mls	r7, r3, r1, r6
 80074ae:	5dc7      	ldrb	r7, [r0, r7]
 80074b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074b4:	4637      	mov	r7, r6
 80074b6:	42bb      	cmp	r3, r7
 80074b8:	460e      	mov	r6, r1
 80074ba:	d9f4      	bls.n	80074a6 <_printf_i+0x11a>
 80074bc:	2b08      	cmp	r3, #8
 80074be:	d10b      	bne.n	80074d8 <_printf_i+0x14c>
 80074c0:	6823      	ldr	r3, [r4, #0]
 80074c2:	07de      	lsls	r6, r3, #31
 80074c4:	d508      	bpl.n	80074d8 <_printf_i+0x14c>
 80074c6:	6923      	ldr	r3, [r4, #16]
 80074c8:	6861      	ldr	r1, [r4, #4]
 80074ca:	4299      	cmp	r1, r3
 80074cc:	bfde      	ittt	le
 80074ce:	2330      	movle	r3, #48	; 0x30
 80074d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074d8:	1b52      	subs	r2, r2, r5
 80074da:	6122      	str	r2, [r4, #16]
 80074dc:	f8cd a000 	str.w	sl, [sp]
 80074e0:	464b      	mov	r3, r9
 80074e2:	aa03      	add	r2, sp, #12
 80074e4:	4621      	mov	r1, r4
 80074e6:	4640      	mov	r0, r8
 80074e8:	f7ff fee2 	bl	80072b0 <_printf_common>
 80074ec:	3001      	adds	r0, #1
 80074ee:	d14c      	bne.n	800758a <_printf_i+0x1fe>
 80074f0:	f04f 30ff 	mov.w	r0, #4294967295
 80074f4:	b004      	add	sp, #16
 80074f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074fa:	4835      	ldr	r0, [pc, #212]	; (80075d0 <_printf_i+0x244>)
 80074fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007500:	6829      	ldr	r1, [r5, #0]
 8007502:	6823      	ldr	r3, [r4, #0]
 8007504:	f851 6b04 	ldr.w	r6, [r1], #4
 8007508:	6029      	str	r1, [r5, #0]
 800750a:	061d      	lsls	r5, r3, #24
 800750c:	d514      	bpl.n	8007538 <_printf_i+0x1ac>
 800750e:	07df      	lsls	r7, r3, #31
 8007510:	bf44      	itt	mi
 8007512:	f043 0320 	orrmi.w	r3, r3, #32
 8007516:	6023      	strmi	r3, [r4, #0]
 8007518:	b91e      	cbnz	r6, 8007522 <_printf_i+0x196>
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	f023 0320 	bic.w	r3, r3, #32
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	2310      	movs	r3, #16
 8007524:	e7b0      	b.n	8007488 <_printf_i+0xfc>
 8007526:	6823      	ldr	r3, [r4, #0]
 8007528:	f043 0320 	orr.w	r3, r3, #32
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	2378      	movs	r3, #120	; 0x78
 8007530:	4828      	ldr	r0, [pc, #160]	; (80075d4 <_printf_i+0x248>)
 8007532:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007536:	e7e3      	b.n	8007500 <_printf_i+0x174>
 8007538:	0659      	lsls	r1, r3, #25
 800753a:	bf48      	it	mi
 800753c:	b2b6      	uxthmi	r6, r6
 800753e:	e7e6      	b.n	800750e <_printf_i+0x182>
 8007540:	4615      	mov	r5, r2
 8007542:	e7bb      	b.n	80074bc <_printf_i+0x130>
 8007544:	682b      	ldr	r3, [r5, #0]
 8007546:	6826      	ldr	r6, [r4, #0]
 8007548:	6961      	ldr	r1, [r4, #20]
 800754a:	1d18      	adds	r0, r3, #4
 800754c:	6028      	str	r0, [r5, #0]
 800754e:	0635      	lsls	r5, r6, #24
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	d501      	bpl.n	8007558 <_printf_i+0x1cc>
 8007554:	6019      	str	r1, [r3, #0]
 8007556:	e002      	b.n	800755e <_printf_i+0x1d2>
 8007558:	0670      	lsls	r0, r6, #25
 800755a:	d5fb      	bpl.n	8007554 <_printf_i+0x1c8>
 800755c:	8019      	strh	r1, [r3, #0]
 800755e:	2300      	movs	r3, #0
 8007560:	6123      	str	r3, [r4, #16]
 8007562:	4615      	mov	r5, r2
 8007564:	e7ba      	b.n	80074dc <_printf_i+0x150>
 8007566:	682b      	ldr	r3, [r5, #0]
 8007568:	1d1a      	adds	r2, r3, #4
 800756a:	602a      	str	r2, [r5, #0]
 800756c:	681d      	ldr	r5, [r3, #0]
 800756e:	6862      	ldr	r2, [r4, #4]
 8007570:	2100      	movs	r1, #0
 8007572:	4628      	mov	r0, r5
 8007574:	f7f8 fe3c 	bl	80001f0 <memchr>
 8007578:	b108      	cbz	r0, 800757e <_printf_i+0x1f2>
 800757a:	1b40      	subs	r0, r0, r5
 800757c:	6060      	str	r0, [r4, #4]
 800757e:	6863      	ldr	r3, [r4, #4]
 8007580:	6123      	str	r3, [r4, #16]
 8007582:	2300      	movs	r3, #0
 8007584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007588:	e7a8      	b.n	80074dc <_printf_i+0x150>
 800758a:	6923      	ldr	r3, [r4, #16]
 800758c:	462a      	mov	r2, r5
 800758e:	4649      	mov	r1, r9
 8007590:	4640      	mov	r0, r8
 8007592:	47d0      	blx	sl
 8007594:	3001      	adds	r0, #1
 8007596:	d0ab      	beq.n	80074f0 <_printf_i+0x164>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	079b      	lsls	r3, r3, #30
 800759c:	d413      	bmi.n	80075c6 <_printf_i+0x23a>
 800759e:	68e0      	ldr	r0, [r4, #12]
 80075a0:	9b03      	ldr	r3, [sp, #12]
 80075a2:	4298      	cmp	r0, r3
 80075a4:	bfb8      	it	lt
 80075a6:	4618      	movlt	r0, r3
 80075a8:	e7a4      	b.n	80074f4 <_printf_i+0x168>
 80075aa:	2301      	movs	r3, #1
 80075ac:	4632      	mov	r2, r6
 80075ae:	4649      	mov	r1, r9
 80075b0:	4640      	mov	r0, r8
 80075b2:	47d0      	blx	sl
 80075b4:	3001      	adds	r0, #1
 80075b6:	d09b      	beq.n	80074f0 <_printf_i+0x164>
 80075b8:	3501      	adds	r5, #1
 80075ba:	68e3      	ldr	r3, [r4, #12]
 80075bc:	9903      	ldr	r1, [sp, #12]
 80075be:	1a5b      	subs	r3, r3, r1
 80075c0:	42ab      	cmp	r3, r5
 80075c2:	dcf2      	bgt.n	80075aa <_printf_i+0x21e>
 80075c4:	e7eb      	b.n	800759e <_printf_i+0x212>
 80075c6:	2500      	movs	r5, #0
 80075c8:	f104 0619 	add.w	r6, r4, #25
 80075cc:	e7f5      	b.n	80075ba <_printf_i+0x22e>
 80075ce:	bf00      	nop
 80075d0:	08007ae9 	.word	0x08007ae9
 80075d4:	08007afa 	.word	0x08007afa

080075d8 <memmove>:
 80075d8:	4288      	cmp	r0, r1
 80075da:	b510      	push	{r4, lr}
 80075dc:	eb01 0402 	add.w	r4, r1, r2
 80075e0:	d902      	bls.n	80075e8 <memmove+0x10>
 80075e2:	4284      	cmp	r4, r0
 80075e4:	4623      	mov	r3, r4
 80075e6:	d807      	bhi.n	80075f8 <memmove+0x20>
 80075e8:	1e43      	subs	r3, r0, #1
 80075ea:	42a1      	cmp	r1, r4
 80075ec:	d008      	beq.n	8007600 <memmove+0x28>
 80075ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075f6:	e7f8      	b.n	80075ea <memmove+0x12>
 80075f8:	4402      	add	r2, r0
 80075fa:	4601      	mov	r1, r0
 80075fc:	428a      	cmp	r2, r1
 80075fe:	d100      	bne.n	8007602 <memmove+0x2a>
 8007600:	bd10      	pop	{r4, pc}
 8007602:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007606:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800760a:	e7f7      	b.n	80075fc <memmove+0x24>

0800760c <_free_r>:
 800760c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800760e:	2900      	cmp	r1, #0
 8007610:	d044      	beq.n	800769c <_free_r+0x90>
 8007612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007616:	9001      	str	r0, [sp, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	f1a1 0404 	sub.w	r4, r1, #4
 800761e:	bfb8      	it	lt
 8007620:	18e4      	addlt	r4, r4, r3
 8007622:	f000 f913 	bl	800784c <__malloc_lock>
 8007626:	4a1e      	ldr	r2, [pc, #120]	; (80076a0 <_free_r+0x94>)
 8007628:	9801      	ldr	r0, [sp, #4]
 800762a:	6813      	ldr	r3, [r2, #0]
 800762c:	b933      	cbnz	r3, 800763c <_free_r+0x30>
 800762e:	6063      	str	r3, [r4, #4]
 8007630:	6014      	str	r4, [r2, #0]
 8007632:	b003      	add	sp, #12
 8007634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007638:	f000 b90e 	b.w	8007858 <__malloc_unlock>
 800763c:	42a3      	cmp	r3, r4
 800763e:	d908      	bls.n	8007652 <_free_r+0x46>
 8007640:	6825      	ldr	r5, [r4, #0]
 8007642:	1961      	adds	r1, r4, r5
 8007644:	428b      	cmp	r3, r1
 8007646:	bf01      	itttt	eq
 8007648:	6819      	ldreq	r1, [r3, #0]
 800764a:	685b      	ldreq	r3, [r3, #4]
 800764c:	1949      	addeq	r1, r1, r5
 800764e:	6021      	streq	r1, [r4, #0]
 8007650:	e7ed      	b.n	800762e <_free_r+0x22>
 8007652:	461a      	mov	r2, r3
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	b10b      	cbz	r3, 800765c <_free_r+0x50>
 8007658:	42a3      	cmp	r3, r4
 800765a:	d9fa      	bls.n	8007652 <_free_r+0x46>
 800765c:	6811      	ldr	r1, [r2, #0]
 800765e:	1855      	adds	r5, r2, r1
 8007660:	42a5      	cmp	r5, r4
 8007662:	d10b      	bne.n	800767c <_free_r+0x70>
 8007664:	6824      	ldr	r4, [r4, #0]
 8007666:	4421      	add	r1, r4
 8007668:	1854      	adds	r4, r2, r1
 800766a:	42a3      	cmp	r3, r4
 800766c:	6011      	str	r1, [r2, #0]
 800766e:	d1e0      	bne.n	8007632 <_free_r+0x26>
 8007670:	681c      	ldr	r4, [r3, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	6053      	str	r3, [r2, #4]
 8007676:	4421      	add	r1, r4
 8007678:	6011      	str	r1, [r2, #0]
 800767a:	e7da      	b.n	8007632 <_free_r+0x26>
 800767c:	d902      	bls.n	8007684 <_free_r+0x78>
 800767e:	230c      	movs	r3, #12
 8007680:	6003      	str	r3, [r0, #0]
 8007682:	e7d6      	b.n	8007632 <_free_r+0x26>
 8007684:	6825      	ldr	r5, [r4, #0]
 8007686:	1961      	adds	r1, r4, r5
 8007688:	428b      	cmp	r3, r1
 800768a:	bf04      	itt	eq
 800768c:	6819      	ldreq	r1, [r3, #0]
 800768e:	685b      	ldreq	r3, [r3, #4]
 8007690:	6063      	str	r3, [r4, #4]
 8007692:	bf04      	itt	eq
 8007694:	1949      	addeq	r1, r1, r5
 8007696:	6021      	streq	r1, [r4, #0]
 8007698:	6054      	str	r4, [r2, #4]
 800769a:	e7ca      	b.n	8007632 <_free_r+0x26>
 800769c:	b003      	add	sp, #12
 800769e:	bd30      	pop	{r4, r5, pc}
 80076a0:	2000070c 	.word	0x2000070c

080076a4 <sbrk_aligned>:
 80076a4:	b570      	push	{r4, r5, r6, lr}
 80076a6:	4e0e      	ldr	r6, [pc, #56]	; (80076e0 <sbrk_aligned+0x3c>)
 80076a8:	460c      	mov	r4, r1
 80076aa:	6831      	ldr	r1, [r6, #0]
 80076ac:	4605      	mov	r5, r0
 80076ae:	b911      	cbnz	r1, 80076b6 <sbrk_aligned+0x12>
 80076b0:	f000 f8bc 	bl	800782c <_sbrk_r>
 80076b4:	6030      	str	r0, [r6, #0]
 80076b6:	4621      	mov	r1, r4
 80076b8:	4628      	mov	r0, r5
 80076ba:	f000 f8b7 	bl	800782c <_sbrk_r>
 80076be:	1c43      	adds	r3, r0, #1
 80076c0:	d00a      	beq.n	80076d8 <sbrk_aligned+0x34>
 80076c2:	1cc4      	adds	r4, r0, #3
 80076c4:	f024 0403 	bic.w	r4, r4, #3
 80076c8:	42a0      	cmp	r0, r4
 80076ca:	d007      	beq.n	80076dc <sbrk_aligned+0x38>
 80076cc:	1a21      	subs	r1, r4, r0
 80076ce:	4628      	mov	r0, r5
 80076d0:	f000 f8ac 	bl	800782c <_sbrk_r>
 80076d4:	3001      	adds	r0, #1
 80076d6:	d101      	bne.n	80076dc <sbrk_aligned+0x38>
 80076d8:	f04f 34ff 	mov.w	r4, #4294967295
 80076dc:	4620      	mov	r0, r4
 80076de:	bd70      	pop	{r4, r5, r6, pc}
 80076e0:	20000710 	.word	0x20000710

080076e4 <_malloc_r>:
 80076e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e8:	1ccd      	adds	r5, r1, #3
 80076ea:	f025 0503 	bic.w	r5, r5, #3
 80076ee:	3508      	adds	r5, #8
 80076f0:	2d0c      	cmp	r5, #12
 80076f2:	bf38      	it	cc
 80076f4:	250c      	movcc	r5, #12
 80076f6:	2d00      	cmp	r5, #0
 80076f8:	4607      	mov	r7, r0
 80076fa:	db01      	blt.n	8007700 <_malloc_r+0x1c>
 80076fc:	42a9      	cmp	r1, r5
 80076fe:	d905      	bls.n	800770c <_malloc_r+0x28>
 8007700:	230c      	movs	r3, #12
 8007702:	603b      	str	r3, [r7, #0]
 8007704:	2600      	movs	r6, #0
 8007706:	4630      	mov	r0, r6
 8007708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800770c:	4e2e      	ldr	r6, [pc, #184]	; (80077c8 <_malloc_r+0xe4>)
 800770e:	f000 f89d 	bl	800784c <__malloc_lock>
 8007712:	6833      	ldr	r3, [r6, #0]
 8007714:	461c      	mov	r4, r3
 8007716:	bb34      	cbnz	r4, 8007766 <_malloc_r+0x82>
 8007718:	4629      	mov	r1, r5
 800771a:	4638      	mov	r0, r7
 800771c:	f7ff ffc2 	bl	80076a4 <sbrk_aligned>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	4604      	mov	r4, r0
 8007724:	d14d      	bne.n	80077c2 <_malloc_r+0xde>
 8007726:	6834      	ldr	r4, [r6, #0]
 8007728:	4626      	mov	r6, r4
 800772a:	2e00      	cmp	r6, #0
 800772c:	d140      	bne.n	80077b0 <_malloc_r+0xcc>
 800772e:	6823      	ldr	r3, [r4, #0]
 8007730:	4631      	mov	r1, r6
 8007732:	4638      	mov	r0, r7
 8007734:	eb04 0803 	add.w	r8, r4, r3
 8007738:	f000 f878 	bl	800782c <_sbrk_r>
 800773c:	4580      	cmp	r8, r0
 800773e:	d13a      	bne.n	80077b6 <_malloc_r+0xd2>
 8007740:	6821      	ldr	r1, [r4, #0]
 8007742:	3503      	adds	r5, #3
 8007744:	1a6d      	subs	r5, r5, r1
 8007746:	f025 0503 	bic.w	r5, r5, #3
 800774a:	3508      	adds	r5, #8
 800774c:	2d0c      	cmp	r5, #12
 800774e:	bf38      	it	cc
 8007750:	250c      	movcc	r5, #12
 8007752:	4629      	mov	r1, r5
 8007754:	4638      	mov	r0, r7
 8007756:	f7ff ffa5 	bl	80076a4 <sbrk_aligned>
 800775a:	3001      	adds	r0, #1
 800775c:	d02b      	beq.n	80077b6 <_malloc_r+0xd2>
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	442b      	add	r3, r5
 8007762:	6023      	str	r3, [r4, #0]
 8007764:	e00e      	b.n	8007784 <_malloc_r+0xa0>
 8007766:	6822      	ldr	r2, [r4, #0]
 8007768:	1b52      	subs	r2, r2, r5
 800776a:	d41e      	bmi.n	80077aa <_malloc_r+0xc6>
 800776c:	2a0b      	cmp	r2, #11
 800776e:	d916      	bls.n	800779e <_malloc_r+0xba>
 8007770:	1961      	adds	r1, r4, r5
 8007772:	42a3      	cmp	r3, r4
 8007774:	6025      	str	r5, [r4, #0]
 8007776:	bf18      	it	ne
 8007778:	6059      	strne	r1, [r3, #4]
 800777a:	6863      	ldr	r3, [r4, #4]
 800777c:	bf08      	it	eq
 800777e:	6031      	streq	r1, [r6, #0]
 8007780:	5162      	str	r2, [r4, r5]
 8007782:	604b      	str	r3, [r1, #4]
 8007784:	4638      	mov	r0, r7
 8007786:	f104 060b 	add.w	r6, r4, #11
 800778a:	f000 f865 	bl	8007858 <__malloc_unlock>
 800778e:	f026 0607 	bic.w	r6, r6, #7
 8007792:	1d23      	adds	r3, r4, #4
 8007794:	1af2      	subs	r2, r6, r3
 8007796:	d0b6      	beq.n	8007706 <_malloc_r+0x22>
 8007798:	1b9b      	subs	r3, r3, r6
 800779a:	50a3      	str	r3, [r4, r2]
 800779c:	e7b3      	b.n	8007706 <_malloc_r+0x22>
 800779e:	6862      	ldr	r2, [r4, #4]
 80077a0:	42a3      	cmp	r3, r4
 80077a2:	bf0c      	ite	eq
 80077a4:	6032      	streq	r2, [r6, #0]
 80077a6:	605a      	strne	r2, [r3, #4]
 80077a8:	e7ec      	b.n	8007784 <_malloc_r+0xa0>
 80077aa:	4623      	mov	r3, r4
 80077ac:	6864      	ldr	r4, [r4, #4]
 80077ae:	e7b2      	b.n	8007716 <_malloc_r+0x32>
 80077b0:	4634      	mov	r4, r6
 80077b2:	6876      	ldr	r6, [r6, #4]
 80077b4:	e7b9      	b.n	800772a <_malloc_r+0x46>
 80077b6:	230c      	movs	r3, #12
 80077b8:	603b      	str	r3, [r7, #0]
 80077ba:	4638      	mov	r0, r7
 80077bc:	f000 f84c 	bl	8007858 <__malloc_unlock>
 80077c0:	e7a1      	b.n	8007706 <_malloc_r+0x22>
 80077c2:	6025      	str	r5, [r4, #0]
 80077c4:	e7de      	b.n	8007784 <_malloc_r+0xa0>
 80077c6:	bf00      	nop
 80077c8:	2000070c 	.word	0x2000070c

080077cc <_realloc_r>:
 80077cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077d0:	4680      	mov	r8, r0
 80077d2:	4614      	mov	r4, r2
 80077d4:	460e      	mov	r6, r1
 80077d6:	b921      	cbnz	r1, 80077e2 <_realloc_r+0x16>
 80077d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077dc:	4611      	mov	r1, r2
 80077de:	f7ff bf81 	b.w	80076e4 <_malloc_r>
 80077e2:	b92a      	cbnz	r2, 80077f0 <_realloc_r+0x24>
 80077e4:	f7ff ff12 	bl	800760c <_free_r>
 80077e8:	4625      	mov	r5, r4
 80077ea:	4628      	mov	r0, r5
 80077ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077f0:	f000 f838 	bl	8007864 <_malloc_usable_size_r>
 80077f4:	4284      	cmp	r4, r0
 80077f6:	4607      	mov	r7, r0
 80077f8:	d802      	bhi.n	8007800 <_realloc_r+0x34>
 80077fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80077fe:	d812      	bhi.n	8007826 <_realloc_r+0x5a>
 8007800:	4621      	mov	r1, r4
 8007802:	4640      	mov	r0, r8
 8007804:	f7ff ff6e 	bl	80076e4 <_malloc_r>
 8007808:	4605      	mov	r5, r0
 800780a:	2800      	cmp	r0, #0
 800780c:	d0ed      	beq.n	80077ea <_realloc_r+0x1e>
 800780e:	42bc      	cmp	r4, r7
 8007810:	4622      	mov	r2, r4
 8007812:	4631      	mov	r1, r6
 8007814:	bf28      	it	cs
 8007816:	463a      	movcs	r2, r7
 8007818:	f7ff fbb8 	bl	8006f8c <memcpy>
 800781c:	4631      	mov	r1, r6
 800781e:	4640      	mov	r0, r8
 8007820:	f7ff fef4 	bl	800760c <_free_r>
 8007824:	e7e1      	b.n	80077ea <_realloc_r+0x1e>
 8007826:	4635      	mov	r5, r6
 8007828:	e7df      	b.n	80077ea <_realloc_r+0x1e>
	...

0800782c <_sbrk_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4d06      	ldr	r5, [pc, #24]	; (8007848 <_sbrk_r+0x1c>)
 8007830:	2300      	movs	r3, #0
 8007832:	4604      	mov	r4, r0
 8007834:	4608      	mov	r0, r1
 8007836:	602b      	str	r3, [r5, #0]
 8007838:	f7fc faba 	bl	8003db0 <_sbrk>
 800783c:	1c43      	adds	r3, r0, #1
 800783e:	d102      	bne.n	8007846 <_sbrk_r+0x1a>
 8007840:	682b      	ldr	r3, [r5, #0]
 8007842:	b103      	cbz	r3, 8007846 <_sbrk_r+0x1a>
 8007844:	6023      	str	r3, [r4, #0]
 8007846:	bd38      	pop	{r3, r4, r5, pc}
 8007848:	20000714 	.word	0x20000714

0800784c <__malloc_lock>:
 800784c:	4801      	ldr	r0, [pc, #4]	; (8007854 <__malloc_lock+0x8>)
 800784e:	f000 b811 	b.w	8007874 <__retarget_lock_acquire_recursive>
 8007852:	bf00      	nop
 8007854:	20000718 	.word	0x20000718

08007858 <__malloc_unlock>:
 8007858:	4801      	ldr	r0, [pc, #4]	; (8007860 <__malloc_unlock+0x8>)
 800785a:	f000 b80c 	b.w	8007876 <__retarget_lock_release_recursive>
 800785e:	bf00      	nop
 8007860:	20000718 	.word	0x20000718

08007864 <_malloc_usable_size_r>:
 8007864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007868:	1f18      	subs	r0, r3, #4
 800786a:	2b00      	cmp	r3, #0
 800786c:	bfbc      	itt	lt
 800786e:	580b      	ldrlt	r3, [r1, r0]
 8007870:	18c0      	addlt	r0, r0, r3
 8007872:	4770      	bx	lr

08007874 <__retarget_lock_acquire_recursive>:
 8007874:	4770      	bx	lr

08007876 <__retarget_lock_release_recursive>:
 8007876:	4770      	bx	lr

08007878 <_init>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	bf00      	nop
 800787c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787e:	bc08      	pop	{r3}
 8007880:	469e      	mov	lr, r3
 8007882:	4770      	bx	lr

08007884 <_fini>:
 8007884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007886:	bf00      	nop
 8007888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788a:	bc08      	pop	{r3}
 800788c:	469e      	mov	lr, r3
 800788e:	4770      	bx	lr
