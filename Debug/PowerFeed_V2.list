
PowerFeed_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08009b6c  08009b6c  00019b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e40  08009e40  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  08009e40  08009e40  00019e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e48  08009e48  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e48  08009e48  00019e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e4c  08009e4c  00019e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08009e50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a4  20000114  08009f64  00020114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b8  08009f64  000208b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001061d  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e0  00000000  00000000  00030761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00032d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00033e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ee8  00000000  00000000  00034e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013541  00000000  00000000  0004dd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c50f  00000000  00000000  00061241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd750  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d30  00000000  00000000  000fd7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000114 	.word	0x20000114
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009b54 	.word	0x08009b54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000118 	.word	0x20000118
 80001dc:	08009b54 	.word	0x08009b54

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b974 	b.w	8000f1c <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	468e      	mov	lr, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d14d      	bne.n	8000cf6 <__udivmoddi4+0xaa>
 8000c5a:	428a      	cmp	r2, r1
 8000c5c:	4694      	mov	ip, r2
 8000c5e:	d969      	bls.n	8000d34 <__udivmoddi4+0xe8>
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	b152      	cbz	r2, 8000c7c <__udivmoddi4+0x30>
 8000c66:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6a:	f1c2 0120 	rsb	r1, r2, #32
 8000c6e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c76:	ea41 0e03 	orr.w	lr, r1, r3
 8000c7a:	4094      	lsls	r4, r2
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	0c21      	lsrs	r1, r4, #16
 8000c82:	fbbe f6f8 	udiv	r6, lr, r8
 8000c86:	fa1f f78c 	uxth.w	r7, ip
 8000c8a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c92:	fb06 f107 	mul.w	r1, r6, r7
 8000c96:	4299      	cmp	r1, r3
 8000c98:	d90a      	bls.n	8000cb0 <__udivmoddi4+0x64>
 8000c9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ca2:	f080 811f 	bcs.w	8000ee4 <__udivmoddi4+0x298>
 8000ca6:	4299      	cmp	r1, r3
 8000ca8:	f240 811c 	bls.w	8000ee4 <__udivmoddi4+0x298>
 8000cac:	3e02      	subs	r6, #2
 8000cae:	4463      	add	r3, ip
 8000cb0:	1a5b      	subs	r3, r3, r1
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc0:	fb00 f707 	mul.w	r7, r0, r7
 8000cc4:	42a7      	cmp	r7, r4
 8000cc6:	d90a      	bls.n	8000cde <__udivmoddi4+0x92>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd0:	f080 810a 	bcs.w	8000ee8 <__udivmoddi4+0x29c>
 8000cd4:	42a7      	cmp	r7, r4
 8000cd6:	f240 8107 	bls.w	8000ee8 <__udivmoddi4+0x29c>
 8000cda:	4464      	add	r4, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	1be4      	subs	r4, r4, r7
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	b11d      	cbz	r5, 8000cf0 <__udivmoddi4+0xa4>
 8000ce8:	40d4      	lsrs	r4, r2
 8000cea:	2300      	movs	r3, #0
 8000cec:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d909      	bls.n	8000d0e <__udivmoddi4+0xc2>
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	f000 80ef 	beq.w	8000ede <__udivmoddi4+0x292>
 8000d00:	2600      	movs	r6, #0
 8000d02:	e9c5 0100 	strd	r0, r1, [r5]
 8000d06:	4630      	mov	r0, r6
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	fab3 f683 	clz	r6, r3
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d14a      	bne.n	8000dac <__udivmoddi4+0x160>
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xd4>
 8000d1a:	4282      	cmp	r2, r0
 8000d1c:	f200 80f9 	bhi.w	8000f12 <__udivmoddi4+0x2c6>
 8000d20:	1a84      	subs	r4, r0, r2
 8000d22:	eb61 0303 	sbc.w	r3, r1, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	469e      	mov	lr, r3
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	d0e0      	beq.n	8000cf0 <__udivmoddi4+0xa4>
 8000d2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d32:	e7dd      	b.n	8000cf0 <__udivmoddi4+0xa4>
 8000d34:	b902      	cbnz	r2, 8000d38 <__udivmoddi4+0xec>
 8000d36:	deff      	udf	#255	; 0xff
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	f040 8092 	bne.w	8000e66 <__udivmoddi4+0x21a>
 8000d42:	eba1 010c 	sub.w	r1, r1, ip
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f fe8c 	uxth.w	lr, ip
 8000d4e:	2601      	movs	r6, #1
 8000d50:	0c20      	lsrs	r0, r4, #16
 8000d52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d56:	fb07 1113 	mls	r1, r7, r3, r1
 8000d5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5e:	fb0e f003 	mul.w	r0, lr, r3
 8000d62:	4288      	cmp	r0, r1
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x12c>
 8000d66:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x12a>
 8000d70:	4288      	cmp	r0, r1
 8000d72:	f200 80cb 	bhi.w	8000f0c <__udivmoddi4+0x2c0>
 8000d76:	4643      	mov	r3, r8
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d80:	fb07 1110 	mls	r1, r7, r0, r1
 8000d84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d88:	fb0e fe00 	mul.w	lr, lr, r0
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x156>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x154>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	f200 80bb 	bhi.w	8000f16 <__udivmoddi4+0x2ca>
 8000da0:	4608      	mov	r0, r1
 8000da2:	eba4 040e 	sub.w	r4, r4, lr
 8000da6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000dac:	f1c6 0720 	rsb	r7, r6, #32
 8000db0:	40b3      	lsls	r3, r6
 8000db2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dba:	fa20 f407 	lsr.w	r4, r0, r7
 8000dbe:	fa01 f306 	lsl.w	r3, r1, r6
 8000dc2:	431c      	orrs	r4, r3
 8000dc4:	40f9      	lsrs	r1, r7
 8000dc6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dca:	fa00 f306 	lsl.w	r3, r0, r6
 8000dce:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dd2:	0c20      	lsrs	r0, r4, #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ddc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de0:	fb08 f00e 	mul.w	r0, r8, lr
 8000de4:	4288      	cmp	r0, r1
 8000de6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dea:	d90b      	bls.n	8000e04 <__udivmoddi4+0x1b8>
 8000dec:	eb1c 0101 	adds.w	r1, ip, r1
 8000df0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df4:	f080 8088 	bcs.w	8000f08 <__udivmoddi4+0x2bc>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f240 8085 	bls.w	8000f08 <__udivmoddi4+0x2bc>
 8000dfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000e02:	4461      	add	r1, ip
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e18:	458e      	cmp	lr, r1
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x1e2>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e24:	d26c      	bcs.n	8000f00 <__udivmoddi4+0x2b4>
 8000e26:	458e      	cmp	lr, r1
 8000e28:	d96a      	bls.n	8000f00 <__udivmoddi4+0x2b4>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e32:	fba0 9402 	umull	r9, r4, r0, r2
 8000e36:	eba1 010e 	sub.w	r1, r1, lr
 8000e3a:	42a1      	cmp	r1, r4
 8000e3c:	46c8      	mov	r8, r9
 8000e3e:	46a6      	mov	lr, r4
 8000e40:	d356      	bcc.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e42:	d053      	beq.n	8000eec <__udivmoddi4+0x2a0>
 8000e44:	b15d      	cbz	r5, 8000e5e <__udivmoddi4+0x212>
 8000e46:	ebb3 0208 	subs.w	r2, r3, r8
 8000e4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e52:	fa22 f306 	lsr.w	r3, r2, r6
 8000e56:	40f1      	lsrs	r1, r6
 8000e58:	431f      	orrs	r7, r3
 8000e5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5e:	2600      	movs	r6, #0
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	f1c2 0320 	rsb	r3, r2, #32
 8000e6a:	40d8      	lsrs	r0, r3
 8000e6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e70:	fa21 f303 	lsr.w	r3, r1, r3
 8000e74:	4091      	lsls	r1, r2
 8000e76:	4301      	orrs	r1, r0
 8000e78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7c:	fa1f fe8c 	uxth.w	lr, ip
 8000e80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e84:	fb07 3610 	mls	r6, r7, r0, r3
 8000e88:	0c0b      	lsrs	r3, r1, #16
 8000e8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e92:	429e      	cmp	r6, r3
 8000e94:	fa04 f402 	lsl.w	r4, r4, r2
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x260>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea2:	d22f      	bcs.n	8000f04 <__udivmoddi4+0x2b8>
 8000ea4:	429e      	cmp	r6, r3
 8000ea6:	d92d      	bls.n	8000f04 <__udivmoddi4+0x2b8>
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	4463      	add	r3, ip
 8000eac:	1b9b      	subs	r3, r3, r6
 8000eae:	b289      	uxth	r1, r1
 8000eb0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb4:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebc:	fb06 f30e 	mul.w	r3, r6, lr
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x28a>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ecc:	d216      	bcs.n	8000efc <__udivmoddi4+0x2b0>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d914      	bls.n	8000efc <__udivmoddi4+0x2b0>
 8000ed2:	3e02      	subs	r6, #2
 8000ed4:	4461      	add	r1, ip
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000edc:	e738      	b.n	8000d50 <__udivmoddi4+0x104>
 8000ede:	462e      	mov	r6, r5
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	e705      	b.n	8000cf0 <__udivmoddi4+0xa4>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	e6e3      	b.n	8000cb0 <__udivmoddi4+0x64>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6f8      	b.n	8000cde <__udivmoddi4+0x92>
 8000eec:	454b      	cmp	r3, r9
 8000eee:	d2a9      	bcs.n	8000e44 <__udivmoddi4+0x1f8>
 8000ef0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef8:	3801      	subs	r0, #1
 8000efa:	e7a3      	b.n	8000e44 <__udivmoddi4+0x1f8>
 8000efc:	4646      	mov	r6, r8
 8000efe:	e7ea      	b.n	8000ed6 <__udivmoddi4+0x28a>
 8000f00:	4620      	mov	r0, r4
 8000f02:	e794      	b.n	8000e2e <__udivmoddi4+0x1e2>
 8000f04:	4640      	mov	r0, r8
 8000f06:	e7d1      	b.n	8000eac <__udivmoddi4+0x260>
 8000f08:	46d0      	mov	r8, sl
 8000f0a:	e77b      	b.n	8000e04 <__udivmoddi4+0x1b8>
 8000f0c:	3b02      	subs	r3, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	e732      	b.n	8000d78 <__udivmoddi4+0x12c>
 8000f12:	4630      	mov	r0, r6
 8000f14:	e709      	b.n	8000d2a <__udivmoddi4+0xde>
 8000f16:	4464      	add	r4, ip
 8000f18:	3802      	subs	r0, #2
 8000f1a:	e742      	b.n	8000da2 <__udivmoddi4+0x156>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <LiquidCrystal_I2C>:
}
*/



void LiquidCrystal_I2C(uint8_t lcd_addr, uint8_t lcd_cols, uint8_t lcd_rows) {
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	71bb      	strb	r3, [r7, #6]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	717b      	strb	r3, [r7, #5]
	_addr = lcd_addr;
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <LiquidCrystal_I2C+0x3c>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	7013      	strb	r3, [r2, #0]
	_cols = lcd_cols;
 8000f38:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <LiquidCrystal_I2C+0x40>)
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	7013      	strb	r3, [r2, #0]
	_rows = lcd_rows;
 8000f3e:	4a09      	ldr	r2, [pc, #36]	; (8000f64 <LiquidCrystal_I2C+0x44>)
 8000f40:	797b      	ldrb	r3, [r7, #5]
 8000f42:	7013      	strb	r3, [r2, #0]
	_charsize = LCD_5x8DOTS;
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <LiquidCrystal_I2C+0x48>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
	_backlightval = LCD_BACKLIGHT;
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <LiquidCrystal_I2C+0x4c>)
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	701a      	strb	r2, [r3, #0]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	20000130 	.word	0x20000130
 8000f60:	20000134 	.word	0x20000134
 8000f64:	20000135 	.word	0x20000135
 8000f68:	20000136 	.word	0x20000136
 8000f6c:	20000137 	.word	0x20000137

08000f70 <lcdBegin>:

void lcdBegin(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000f74:	4b32      	ldr	r3, [pc, #200]	; (8001040 <lcdBegin+0xd0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]

	if (_rows > 1) {
 8000f7a:	4b32      	ldr	r3, [pc, #200]	; (8001044 <lcdBegin+0xd4>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d906      	bls.n	8000f90 <lcdBegin+0x20>
		_displayfunction |= LCD_2LINE;
 8000f82:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <lcdBegin+0xd0>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <lcdBegin+0xd0>)
 8000f8e:	701a      	strb	r2, [r3, #0]
	}

	setRowOffsets(0x00, 0x40, 0x00 + _cols, 0x40 + _cols);
 8000f90:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <lcdBegin+0xd8>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <lcdBegin+0xd8>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	3340      	adds	r3, #64	; 0x40
 8000f9c:	2140      	movs	r1, #64	; 0x40
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f000 f92a 	bl	80011f8 <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((_charsize != 0) && (_rows == 1)) {
 8000fa4:	4b29      	ldr	r3, [pc, #164]	; (800104c <lcdBegin+0xdc>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d00a      	beq.n	8000fc2 <lcdBegin+0x52>
 8000fac:	4b25      	ldr	r3, [pc, #148]	; (8001044 <lcdBegin+0xd4>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d106      	bne.n	8000fc2 <lcdBegin+0x52>
		_displayfunction |= LCD_5x10DOTS;
 8000fb4:	4b22      	ldr	r3, [pc, #136]	; (8001040 <lcdBegin+0xd0>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b20      	ldr	r3, [pc, #128]	; (8001040 <lcdBegin+0xd0>)
 8000fc0:	701a      	strb	r2, [r3, #0]
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	HAL_Delay(50);
 8000fc2:	2032      	movs	r0, #50	; 0x32
 8000fc4:	f004 f98e 	bl	80052e4 <HAL_Delay>

	// Now we pull both RS and R/W low to begin commands
	write8bits(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <lcdBegin+0xe0>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 f983 	bl	80012d8 <write8bits>
	HAL_Delay(1);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f004 f986 	bl	80052e4 <HAL_Delay>
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	write4bits(0x03 << 4);
 8000fd8:	2030      	movs	r0, #48	; 0x30
 8000fda:	f000 f96b 	bl	80012b4 <write4bits>
	HAL_Delay(5); // wait min 4.1ms
 8000fde:	2005      	movs	r0, #5
 8000fe0:	f004 f980 	bl	80052e4 <HAL_Delay>

	// second try
	write4bits(0x03 << 4);
 8000fe4:	2030      	movs	r0, #48	; 0x30
 8000fe6:	f000 f965 	bl	80012b4 <write4bits>
	HAL_Delay(5); // wait min 4.1ms
 8000fea:	2005      	movs	r0, #5
 8000fec:	f004 f97a 	bl	80052e4 <HAL_Delay>

	// third go!
	write4bits(0x03 << 4);
 8000ff0:	2030      	movs	r0, #48	; 0x30
 8000ff2:	f000 f95f 	bl	80012b4 <write4bits>
	HAL_Delay(5);
 8000ff6:	2005      	movs	r0, #5
 8000ff8:	f004 f974 	bl	80052e4 <HAL_Delay>

	// finally, set to 4-bit interface
	write4bits(0x02 << 4);
 8000ffc:	2020      	movs	r0, #32
 8000ffe:	f000 f959 	bl	80012b4 <write4bits>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <lcdBegin+0xd0>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	f043 0320 	orr.w	r3, r3, #32
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f8e5 	bl	80011dc <command>

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <lcdBegin+0xe4>)
 8001014:	2204      	movs	r2, #4
 8001016:	701a      	strb	r2, [r3, #0]
	lcdDisplay();
 8001018:	f000 f834 	bl	8001084 <lcdDisplay>

	// clear it off
	lcdClear();
 800101c:	f000 f81e 	bl	800105c <lcdClear>

	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <lcdBegin+0xe8>)
 8001022:	2202      	movs	r2, #2
 8001024:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <lcdBegin+0xe8>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	b2db      	uxtb	r3, r3
 8001030:	4618      	mov	r0, r3
 8001032:	f000 f8d3 	bl	80011dc <command>

	lcdHome();
 8001036:	f000 f81b 	bl	8001070 <lcdHome>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000131 	.word	0x20000131
 8001044:	20000135 	.word	0x20000135
 8001048:	20000134 	.word	0x20000134
 800104c:	20000136 	.word	0x20000136
 8001050:	20000137 	.word	0x20000137
 8001054:	20000132 	.word	0x20000132
 8001058:	20000133 	.word	0x20000133

0800105c <lcdClear>:

/********** high level commands, for the user! */
void lcdClear(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 8001060:	2001      	movs	r0, #1
 8001062:	f000 f8bb 	bl	80011dc <command>
	HAL_Delay(2);  // this command takes a long time!
 8001066:	2002      	movs	r0, #2
 8001068:	f004 f93c 	bl	80052e4 <HAL_Delay>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <lcdHome>:

void lcdHome(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	command(LCD_RETURNHOME);  // set cursor position to zero
 8001074:	2002      	movs	r0, #2
 8001076:	f000 f8b1 	bl	80011dc <command>
	HAL_Delay(2);  // this command takes a long time!
 800107a:	2002      	movs	r0, #2
 800107c:	f004 f932 	bl	80052e4 <HAL_Delay>
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <lcdDisplay>:
// Turn the display on/off (quickly)
void lcdNoDisplay(void) {
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void lcdDisplay(void) {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <lcdDisplay+0x28>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <lcdDisplay+0x28>)
 8001094:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <lcdDisplay+0x28>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	f043 0308 	orr.w	r3, r3, #8
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 f89b 	bl	80011dc <command>
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000132 	.word	0x20000132

080010b0 <lcdCreateChar>:
	command(LCD_ENTRYMODESET | _displaymode);
}

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void lcdCreateChar(uint8_t location, uint8_t charmap[]) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
	location &= 0x7; // we only have 8 locations 0-7
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	71fb      	strb	r3, [r7, #7]
	command(LCD_SETCGRAMADDR | (location << 3));
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f882 	bl	80011dc <command>
	for (int i = 0; i < 8; i++) {
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	e009      	b.n	80010f2 <lcdCreateChar+0x42>
		lcdWrite(charmap[i]);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f869 	bl	80011be <lcdWrite>
	for (int i = 0; i < 8; i++) {
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3301      	adds	r3, #1
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2b07      	cmp	r3, #7
 80010f6:	ddf2      	ble.n	80010de <lcdCreateChar+0x2e>
	}
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <lcdSetCursor>:

void lcdSetCursor(uint8_t col, uint8_t row) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	71bb      	strb	r3, [r7, #6]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8001114:	2304      	movs	r3, #4
 8001116:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	429a      	cmp	r2, r3
 800111e:	d803      	bhi.n	8001128 <lcdSetCursor+0x24>
		row = max_lines - 1;    // we count rows starting w/0
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	3b01      	subs	r3, #1
 8001126:	71bb      	strb	r3, [r7, #6]
	}
	if ( row >= _rows ) {
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <lcdSetCursor+0x5c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	79ba      	ldrb	r2, [r7, #6]
 800112e:	429a      	cmp	r2, r3
 8001130:	d303      	bcc.n	800113a <lcdSetCursor+0x36>
		row = _rows - 1;   		// we count rows starting w/0
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <lcdSetCursor+0x5c>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	3b01      	subs	r3, #1
 8001138:	71bb      	strb	r3, [r7, #6]
	}

	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 800113a:	79bb      	ldrb	r3, [r7, #6]
 800113c:	4a09      	ldr	r2, [pc, #36]	; (8001164 <lcdSetCursor+0x60>)
 800113e:	5cd2      	ldrb	r2, [r2, r3]
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4413      	add	r3, r2
 8001144:	b2db      	uxtb	r3, r3
 8001146:	b25b      	sxtb	r3, r3
 8001148:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800114c:	b25b      	sxtb	r3, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f843 	bl	80011dc <command>
}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000135 	.word	0x20000135
 8001164:	20000138 	.word	0x20000138

08001168 <lcdPrint>:

// This will print character string to the LCD
size_t lcdPrint(const char str[]) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	if (str == NULL) return 0;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <lcdPrint+0x12>
 8001176:	2300      	movs	r3, #0
 8001178:	e01d      	b.n	80011b6 <lcdPrint+0x4e>

	const uint8_t *buffer = (const uint8_t *)str;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	617b      	str	r3, [r7, #20]
	size_t size = strlen(str);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff f82e 	bl	80001e0 <strlen>
 8001184:	6138      	str	r0, [r7, #16]
	size_t n = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]

	while (size--) {
 800118a:	e00c      	b.n	80011a6 <lcdPrint+0x3e>
	if (lcdWrite(*buffer++)) n++;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	617a      	str	r2, [r7, #20]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f000 f812 	bl	80011be <lcdWrite>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d008      	beq.n	80011b2 <lcdPrint+0x4a>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3301      	adds	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
	while (size--) {
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1e5a      	subs	r2, r3, #1
 80011aa:	613a      	str	r2, [r7, #16]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1ed      	bne.n	800118c <lcdPrint+0x24>
 80011b0:	e000      	b.n	80011b4 <lcdPrint+0x4c>
	else break;
 80011b2:	bf00      	nop
	}
	return n;
 80011b4:	68fb      	ldr	r3, [r7, #12]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <lcdWrite>:

/*********** mid level commands, for sending data/cmds */
size_t lcdWrite(uint8_t value) {
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	71fb      	strb	r3, [r7, #7]
	send(value, Rs);
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	2101      	movs	r1, #1
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f850 	bl	8001272 <send>
	return 1;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <command>:

void command(uint8_t value) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	send(value, 0);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f841 	bl	8001272 <send>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <setRowOffsets>:

/************ low level data pushing commands **********/
void setRowOffsets(int row0, int row1, int row2, int row3) {
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <setRowOffsets+0x3c>)
 800120c:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <setRowOffsets+0x3c>)
 8001214:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <setRowOffsets+0x3c>)
 800121c:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <setRowOffsets+0x3c>)
 8001224:	70da      	strb	r2, [r3, #3]
}
 8001226:	bf00      	nop
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000138 	.word	0x20000138

08001238 <pulseEnable>:

void pulseEnable(uint8_t _data) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
	write8bits(_data | En);		// En high
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f844 	bl	80012d8 <write8bits>
	HAL_Delay(1);
 8001250:	2001      	movs	r0, #1
 8001252:	f004 f847 	bl	80052e4 <HAL_Delay>
	//DWT_Delay_us(5);		// enable pulse must be >450ns //To Be Checked

	write8bits(_data & ~En);	// En low
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f023 0304 	bic.w	r3, r3, #4
 800125c:	b2db      	uxtb	r3, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f83a 	bl	80012d8 <write8bits>
	HAL_Delay(1);
 8001264:	2001      	movs	r0, #1
 8001266:	f004 f83d 	bl	80052e4 <HAL_Delay>
	//DWT_Delay_us(1);		// commands need > 37us to settle //To Be Checked
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <send>:

// write either command or data
void send(uint8_t value, uint8_t mode) {
 8001272:	b580      	push	{r7, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	460a      	mov	r2, r1
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	4613      	mov	r3, r2
 8001280:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib = value & 0xf0;
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	f023 030f 	bic.w	r3, r3, #15
 8001288:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (value << 4) & 0xf0;
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	73bb      	strb	r3, [r7, #14]
	write4bits((highnib) | mode);
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	79bb      	ldrb	r3, [r7, #6]
 8001294:	4313      	orrs	r3, r2
 8001296:	b2db      	uxtb	r3, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f80b 	bl	80012b4 <write4bits>
	write4bits((lownib) | mode);
 800129e:	7bba      	ldrb	r2, [r7, #14]
 80012a0:	79bb      	ldrb	r3, [r7, #6]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f804 	bl	80012b4 <write4bits>
}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <write4bits>:

void write4bits(uint8_t value) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	write8bits(value);
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f809 	bl	80012d8 <write8bits>
	pulseEnable(value);
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ffb5 	bl	8001238 <pulseEnable>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <write8bits>:

void write8bits(uint8_t _data){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af02      	add	r7, sp, #8
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
	uint8_t data_t[1];
	data_t[0] = _data | _backlightval;
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <write8bits+0x34>)
 80012e4:	781a      	ldrb	r2, [r3, #0]
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit (&hi2c1, _addr, (uint8_t *) data_t, 1, 100);
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <write8bits+0x38>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b299      	uxth	r1, r3
 80012f4:	f107 020c 	add.w	r2, r7, #12
 80012f8:	2364      	movs	r3, #100	; 0x64
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2301      	movs	r3, #1
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <write8bits+0x3c>)
 8001300:	f005 f96a 	bl	80065d8 <HAL_I2C_Master_Transmit>
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000137 	.word	0x20000137
 8001310:	20000130 	.word	0x20000130
 8001314:	20000584 	.word	0x20000584

08001318 <ee_init>:
uint8_t ee_ram[_EE_USE_RAM_BYTE];
#endif

//##########################################################################################################
bool ee_init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  return ee_read(0, _EE_USE_RAM_BYTE, NULL);
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001322:	2000      	movs	r0, #0
 8001324:	f000 f840 	bl	80013a8 <ee_read>
 8001328:	4603      	mov	r3, r0
#else
  return true;
#endif
}
 800132a:	4618      	mov	r0, r3
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <ee_format>:
//##########################################################################################################
bool ee_format(bool keepRamData)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  uint32_t error;
  HAL_FLASH_Unlock();
 800133a:	f004 fbbf 	bl	8005abc <HAL_FLASH_Unlock>
#if _EE_PAGE_OR_SECTOR == PAGE
	flashErase.NbPages = 1;
  flashErase.PageAddress = _EE_ADDR_INUSE;
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
#elif _EE_PAGE_OR_SECTOR == SECTOR
  flashErase.NbSectors = 1;
 800133e:	2301      	movs	r3, #1
 8001340:	617b      	str	r3, [r7, #20]
  //flashErase.Sector =  _EE_ADDR_INUSE;
  flashErase.Sector =  _EE_USE_FLASH_PAGE_OR_SECTOR;
 8001342:	2305      	movs	r3, #5
 8001344:	613b      	str	r3, [r7, #16]
  flashErase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
  flashErase.NbPages = 1;
  flashErase.Page = _EE_USE_FLASH_PAGE_OR_SECTOR;
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
#endif
#ifdef _EE_FLASH_BANK
  flashErase.Banks = _EE_FLASH_BANK;
 800134a:	2301      	movs	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
#endif
#ifdef _EE_VOLTAGE_RANGE
  flashErase.VoltageRange = _EE_VOLTAGE_RANGE;
 800134e:	2302      	movs	r3, #2
 8001350:	61bb      	str	r3, [r7, #24]
#endif
  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 8001352:	f107 021c 	add.w	r2, r7, #28
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f004 fd1f 	bl	8005da0 <HAL_FLASHEx_Erase>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d115      	bne.n	8001394 <ee_format+0x64>
  {
    HAL_FLASH_Lock();
 8001368:	f004 fbca 	bl	8005b00 <HAL_FLASH_Lock>
    if (error != 0xFFFFFFFF)
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001372:	d001      	beq.n	8001378 <ee_format+0x48>
      return false;
 8001374:	2300      	movs	r3, #0
 8001376:	e010      	b.n	800139a <ee_format+0x6a>
    else
    {
#if (_EE_USE_RAM_BYTE > 0)
      if (keepRamData == false)
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	f083 0301 	eor.w	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <ee_format+0x60>
        memset(ee_ram, 0xFF, _EE_USE_RAM_BYTE);
 8001384:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001388:	21ff      	movs	r1, #255	; 0xff
 800138a:	4806      	ldr	r0, [pc, #24]	; (80013a4 <ee_format+0x74>)
 800138c:	f007 ff7a 	bl	8009284 <memset>
#endif
      return true;
 8001390:	2301      	movs	r3, #1
 8001392:	e002      	b.n	800139a <ee_format+0x6a>
    }
  }
  HAL_FLASH_Lock();
 8001394:	f004 fbb4 	bl	8005b00 <HAL_FLASH_Lock>
  return false;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3720      	adds	r7, #32
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000013c 	.word	0x2000013c

080013a8 <ee_read>:
//##########################################################################################################
bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	4413      	add	r3, r2
 80013ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013be:	d901      	bls.n	80013c4 <ee_read+0x1c>
    return false;
 80013c0:	2300      	movs	r3, #0
 80013c2:	e02b      	b.n	800141c <ee_read+0x74>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	e021      	b.n	800140e <ee_read+0x66>
  {
    if (data != NULL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00b      	beq.n	80013e8 <ee_read+0x40>
    {
      *data = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80013d6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	701a      	strb	r2, [r3, #0]
      data++;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3301      	adds	r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
    }
#if (_EE_USE_RAM_BYTE > 0)
    if (i < _EE_USE_RAM_BYTE)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ee:	d20b      	bcs.n	8001408 <ee_read+0x60>
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80013f6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b2d9      	uxtb	r1, r3
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <ee_read+0x80>)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	4413      	add	r3, r2
 8001404:	460a      	mov	r2, r1
 8001406:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3301      	adds	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	429a      	cmp	r2, r3
 8001418:	d3d7      	bcc.n	80013ca <ee_read+0x22>
#endif
  }
  return true;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	371c      	adds	r7, #28
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	2000013c 	.word	0x2000013c

0800142c <ee_write>:
//##########################################################################################################
bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 800142c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001430:	b0a6      	sub	sp, #152	; 0x98
 8001432:	af00      	add	r7, sp, #0
 8001434:	67f8      	str	r0, [r7, #124]	; 0x7c
 8001436:	67b9      	str	r1, [r7, #120]	; 0x78
 8001438:	677a      	str	r2, [r7, #116]	; 0x74
  if ((startVirtualAddress + len) > _EE_SIZE)
 800143a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800143c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800143e:	4413      	add	r3, r2
 8001440:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001444:	d901      	bls.n	800144a <ee_write+0x1e>
    return false;
 8001446:	2300      	movs	r3, #0
 8001448:	e14f      	b.n	80016ea <ee_write+0x2be>
  if (data == NULL)
 800144a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <ee_write+0x28>
    return false;
 8001450:	2300      	movs	r3, #0
 8001452:	e14a      	b.n	80016ea <ee_write+0x2be>
  HAL_FLASH_Unlock();
 8001454:	f004 fb32 	bl	8005abc <HAL_FLASH_Unlock>
#ifdef FLASH_TYPEPROGRAM_BYTE
  for (uint32_t i = 0; i < len ; i++)
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800145e:	e021      	b.n	80014a4 <ee_write+0x78>
  {		
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i])) != HAL_OK)
 8001460:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001464:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001466:	4413      	add	r3, r2
 8001468:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800146c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 8001470:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001472:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001476:	4413      	add	r3, r2
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2200      	movs	r2, #0
 800147e:	461c      	mov	r4, r3
 8001480:	4615      	mov	r5, r2
 8001482:	4622      	mov	r2, r4
 8001484:	462b      	mov	r3, r5
 8001486:	2000      	movs	r0, #0
 8001488:	f004 fac4 	bl	8005a14 <HAL_FLASH_Program>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <ee_write+0x6e>
    {
      HAL_FLASH_Lock();
 8001492:	f004 fb35 	bl	8005b00 <HAL_FLASH_Lock>
      return true;
 8001496:	2301      	movs	r3, #1
 8001498:	e127      	b.n	80016ea <ee_write+0x2be>
  for (uint32_t i = 0; i < len ; i++)
 800149a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800149e:	3301      	adds	r3, #1
 80014a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80014a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d3d8      	bcc.n	8001460 <ee_write+0x34>
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_HALFWORD
  for (uint32_t i = 0; i < len ; i+=2)
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80014b4:	e029      	b.n	800150a <ee_write+0xde>
  {		
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i] | (data[i+1] << 8))) != HAL_OK)
 80014b6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80014ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014bc:	4413      	add	r3, r2
 80014be:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80014c2:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 80014c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80014c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014cc:	4413      	add	r3, r2
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	4303      	orrs	r3, r0
 80014e2:	17da      	asrs	r2, r3, #31
 80014e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80014e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80014e8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80014ec:	2001      	movs	r0, #1
 80014ee:	f004 fa91 	bl	8005a14 <HAL_FLASH_Program>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <ee_write+0xd4>
    {
      HAL_FLASH_Lock();
 80014f8:	f004 fb02 	bl	8005b00 <HAL_FLASH_Lock>
      return true;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0f4      	b.n	80016ea <ee_write+0x2be>
  for (uint32_t i = 0; i < len ; i+=2)
 8001500:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001504:	3302      	adds	r3, #2
 8001506:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800150a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800150e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001510:	429a      	cmp	r2, r3
 8001512:	d3d0      	bcc.n	80014b6 <ee_write+0x8a>
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_DOUBLEWORD
  for (uint32_t i = 0; i < len; i += 8)
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800151a:	e0dd      	b.n	80016d8 <ee_write+0x2ac>
  {
    uint64_t data64 = data[i];
 800151c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800151e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001522:	4413      	add	r3, r2
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2200      	movs	r2, #0
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
 800152c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800152e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001532:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 1] * 0x100;
 8001536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800153e:	4413      	add	r3, r2
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	17da      	asrs	r2, r3, #31
 8001546:	663b      	str	r3, [r7, #96]	; 0x60
 8001548:	667a      	str	r2, [r7, #100]	; 0x64
 800154a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800154e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001552:	4621      	mov	r1, r4
 8001554:	1851      	adds	r1, r2, r1
 8001556:	6239      	str	r1, [r7, #32]
 8001558:	4629      	mov	r1, r5
 800155a:	414b      	adcs	r3, r1
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
 800155e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001562:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 2] * 0x10000;
 8001566:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800156a:	1c9a      	adds	r2, r3, #2
 800156c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800156e:	4413      	add	r3, r2
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	041b      	lsls	r3, r3, #16
 8001574:	17da      	asrs	r2, r3, #31
 8001576:	65bb      	str	r3, [r7, #88]	; 0x58
 8001578:	65fa      	str	r2, [r7, #92]	; 0x5c
 800157a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800157e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001582:	4621      	mov	r1, r4
 8001584:	1851      	adds	r1, r2, r1
 8001586:	61b9      	str	r1, [r7, #24]
 8001588:	4629      	mov	r1, r5
 800158a:	414b      	adcs	r3, r1
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001592:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 3] * 0x1000000;
 8001596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800159a:	1cda      	adds	r2, r3, #3
 800159c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800159e:	4413      	add	r3, r2
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	061b      	lsls	r3, r3, #24
 80015a4:	17da      	asrs	r2, r3, #31
 80015a6:	653b      	str	r3, [r7, #80]	; 0x50
 80015a8:	657a      	str	r2, [r7, #84]	; 0x54
 80015aa:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80015ae:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80015b2:	4621      	mov	r1, r4
 80015b4:	1851      	adds	r1, r2, r1
 80015b6:	6139      	str	r1, [r7, #16]
 80015b8:	4629      	mov	r1, r5
 80015ba:	414b      	adcs	r3, r1
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80015c2:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 4] * 0x100000000;
 80015c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015ca:	1d1a      	adds	r2, r3, #4
 80015cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015ce:	4413      	add	r3, r2
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2200      	movs	r2, #0
 80015d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80015d8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80015e4:	000b      	movs	r3, r1
 80015e6:	2200      	movs	r2, #0
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80015f0:	1814      	adds	r4, r2, r0
 80015f2:	60bc      	str	r4, [r7, #8]
 80015f4:	414b      	adcs	r3, r1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80015fc:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 5] * 0x10000000000;
 8001600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001604:	1d5a      	adds	r2, r3, #5
 8001606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001608:	4413      	add	r3, r2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2200      	movs	r2, #0
 8001610:	643b      	str	r3, [r7, #64]	; 0x40
 8001612:	647a      	str	r2, [r7, #68]	; 0x44
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800161e:	020b      	lsls	r3, r1, #8
 8001620:	2200      	movs	r2, #0
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800162a:	1814      	adds	r4, r2, r0
 800162c:	603c      	str	r4, [r7, #0]
 800162e:	414b      	adcs	r3, r1
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001636:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    data64 += data[i + 6] * 0x1000000000000;
 800163a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800163e:	1d9a      	adds	r2, r3, #6
 8001640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001642:	4413      	add	r3, r2
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2200      	movs	r2, #0
 800164a:	63bb      	str	r3, [r7, #56]	; 0x38
 800164c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001658:	040b      	lsls	r3, r1, #16
 800165a:	2200      	movs	r2, #0
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001664:	eb12 0a00 	adds.w	sl, r2, r0
 8001668:	eb43 0b01 	adc.w	fp, r3, r1
 800166c:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
    data64 += data[i + 7] * 0x100000000000000;
 8001670:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001674:	1dda      	adds	r2, r3, #7
 8001676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001678:	4413      	add	r3, r2
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2200      	movs	r2, #0
 8001680:	633b      	str	r3, [r7, #48]	; 0x30
 8001682:	637a      	str	r2, [r7, #52]	; 0x34
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800168e:	060b      	lsls	r3, r1, #24
 8001690:	2200      	movs	r2, #0
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800169a:	eb12 0800 	adds.w	r8, r2, r0
 800169e:	eb43 0901 	adc.w	r9, r3, r1
 80016a2:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, data64) != HAL_OK)
 80016a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80016aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016ac:	4413      	add	r3, r2
 80016ae:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80016b2:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 80016b6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80016ba:	2003      	movs	r0, #3
 80016bc:	f004 f9aa 	bl	8005a14 <HAL_FLASH_Program>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <ee_write+0x2a2>
    {
      HAL_FLASH_Lock();
 80016c6:	f004 fa1b 	bl	8005b00 <HAL_FLASH_Lock>
      return true;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00d      	b.n	80016ea <ee_write+0x2be>
  for (uint32_t i = 0; i < len; i += 8)
 80016ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016d2:	3308      	adds	r3, #8
 80016d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80016d8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80016dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016de:	429a      	cmp	r2, r3
 80016e0:	f4ff af1c 	bcc.w	800151c <ee_write+0xf0>
    }
  }
#endif
  HAL_FLASH_Lock();
 80016e4:	f004 fa0c 	bl	8005b00 <HAL_FLASH_Lock>
  return true;
 80016e8:	2301      	movs	r3, #1
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3798      	adds	r7, #152	; 0x98
 80016ee:	46bd      	mov	sp, r7
 80016f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080016f4 <ee_writeToRam>:
//##########################################################################################################
bool ee_writeToRam(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
#if (_EE_USE_RAM_BYTE > 0)
  if ((startVirtualAddress + len) > _EE_USE_RAM_BYTE)
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	4413      	add	r3, r2
 8001706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170a:	d901      	bls.n	8001710 <ee_writeToRam+0x1c>
    return false;
 800170c:	2300      	movs	r3, #0
 800170e:	e00d      	b.n	800172c <ee_writeToRam+0x38>
  if (data == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <ee_writeToRam+0x26>
    return false;
 8001716:	2300      	movs	r3, #0
 8001718:	e008      	b.n	800172c <ee_writeToRam+0x38>
  memcpy(&ee_ram[startVirtualAddress], data, len);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4a05      	ldr	r2, [pc, #20]	; (8001734 <ee_writeToRam+0x40>)
 800171e:	4413      	add	r3, r2
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	4618      	mov	r0, r3
 8001726:	f007 fd9f 	bl	8009268 <memcpy>
  return true;
 800172a:	2301      	movs	r3, #1
#else
  return false;
#endif
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2000013c 	.word	0x2000013c

08001738 <ee_commit>:
//##########################################################################################################
bool  ee_commit(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  if (ee_format(true) == false)
 800173c:	2001      	movs	r0, #1
 800173e:	f7ff fdf7 	bl	8001330 <ee_format>
 8001742:	4603      	mov	r3, r0
 8001744:	f083 0301 	eor.w	r3, r3, #1
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <ee_commit+0x1a>
    return false;
 800174e:	2300      	movs	r3, #0
 8001750:	e006      	b.n	8001760 <ee_commit+0x28>
  return ee_write(0, _EE_USE_RAM_BYTE, ee_ram);
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <ee_commit+0x2c>)
 8001754:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001758:	2000      	movs	r0, #0
 800175a:	f7ff fe67 	bl	800142c <ee_write>
 800175e:	4603      	mov	r3, r0
#else
  return false;
#endif
}
 8001760:	4618      	mov	r0, r3
 8001762:	bd80      	pop	{r7, pc}
 8001764:	2000013c 	.word	0x2000013c

08001768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001768:	b5b0      	push	{r4, r5, r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//Initialization Struct
	parameter.en_invert = 0;
 800176e:	4bb8      	ldr	r3, [pc, #736]	; (8001a50 <main+0x2e8>)
 8001770:	2200      	movs	r2, #0
 8001772:	801a      	strh	r2, [r3, #0]
	parameter.dir_invert = 0;
 8001774:	4bb6      	ldr	r3, [pc, #728]	; (8001a50 <main+0x2e8>)
 8001776:	2200      	movs	r2, #0
 8001778:	805a      	strh	r2, [r3, #2]
	parameter.motor_stepsrev = 0;
 800177a:	4bb5      	ldr	r3, [pc, #724]	; (8001a50 <main+0x2e8>)
 800177c:	2200      	movs	r2, #0
 800177e:	809a      	strh	r2, [r3, #4]
	parameter.leadscrew_pitch = 0;
 8001780:	4bb3      	ldr	r3, [pc, #716]	; (8001a50 <main+0x2e8>)
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f8c3 2006 	str.w	r2, [r3, #6]
	parameter.max_feedrate = 0;
 800178a:	4bb1      	ldr	r3, [pc, #708]	; (8001a50 <main+0x2e8>)
 800178c:	2200      	movs	r2, #0
 800178e:	815a      	strh	r2, [r3, #10]
	parameter.fast_movement_feedrate = 0;
 8001790:	4baf      	ldr	r3, [pc, #700]	; (8001a50 <main+0x2e8>)
 8001792:	2200      	movs	r2, #0
 8001794:	819a      	strh	r2, [r3, #12]
	parameter.acc_time = 0;
 8001796:	4bae      	ldr	r3, [pc, #696]	; (8001a50 <main+0x2e8>)
 8001798:	2200      	movs	r2, #0
 800179a:	81da      	strh	r2, [r3, #14]
	parameter.acc_update_ratio = 0;
 800179c:	4bac      	ldr	r3, [pc, #688]	; (8001a50 <main+0x2e8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	821a      	strh	r2, [r3, #16]
	parameter.initial_feedrate = 0;
 80017a2:	4bab      	ldr	r3, [pc, #684]	; (8001a50 <main+0x2e8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	825a      	strh	r2, [r3, #18]
	parameter.first_load = 0;
 80017a8:	4ba9      	ldr	r3, [pc, #676]	; (8001a50 <main+0x2e8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	829a      	strh	r2, [r3, #20]
	//Default values for parameters
	default_parameter.en_invert = 0;
 80017ae:	4ba9      	ldr	r3, [pc, #676]	; (8001a54 <main+0x2ec>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	801a      	strh	r2, [r3, #0]
	default_parameter.dir_invert = 0;
 80017b4:	4ba7      	ldr	r3, [pc, #668]	; (8001a54 <main+0x2ec>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	805a      	strh	r2, [r3, #2]
	default_parameter.motor_stepsrev = 1600;
 80017ba:	4ba6      	ldr	r3, [pc, #664]	; (8001a54 <main+0x2ec>)
 80017bc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80017c0:	809a      	strh	r2, [r3, #4]
	default_parameter.leadscrew_pitch = 2;
 80017c2:	4ba4      	ldr	r3, [pc, #656]	; (8001a54 <main+0x2ec>)
 80017c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017c8:	f8c3 2006 	str.w	r2, [r3, #6]
	default_parameter.max_feedrate = 500;
 80017cc:	4ba1      	ldr	r3, [pc, #644]	; (8001a54 <main+0x2ec>)
 80017ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017d2:	815a      	strh	r2, [r3, #10]
	default_parameter.fast_movement_feedrate = 500;
 80017d4:	4b9f      	ldr	r3, [pc, #636]	; (8001a54 <main+0x2ec>)
 80017d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017da:	819a      	strh	r2, [r3, #12]
	default_parameter.acc_time = 1000;
 80017dc:	4b9d      	ldr	r3, [pc, #628]	; (8001a54 <main+0x2ec>)
 80017de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017e2:	81da      	strh	r2, [r3, #14]
	default_parameter.acc_update_ratio = 50;
 80017e4:	4b9b      	ldr	r3, [pc, #620]	; (8001a54 <main+0x2ec>)
 80017e6:	2232      	movs	r2, #50	; 0x32
 80017e8:	821a      	strh	r2, [r3, #16]
	default_parameter.initial_feedrate = 50;
 80017ea:	4b9a      	ldr	r3, [pc, #616]	; (8001a54 <main+0x2ec>)
 80017ec:	2232      	movs	r2, #50	; 0x32
 80017ee:	825a      	strh	r2, [r3, #18]
	default_parameter.first_load = 0;
 80017f0:	4b98      	ldr	r3, [pc, #608]	; (8001a54 <main+0x2ec>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	829a      	strh	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f6:	f003 fd03 	bl	8005200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017fa:	f001 fc9f 	bl	800313c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017fe:	f001 ffed 	bl	80037dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001802:	f001 fd57 	bl	80032b4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001806:	f001 fd83 	bl	8003310 <MX_TIM1_Init>
  MX_TIM2_Init();
 800180a:	f001 fde1 	bl	80033d0 <MX_TIM2_Init>
  MX_TIM11_Init();
 800180e:	f001 ffad 	bl	800376c <MX_TIM11_Init>
  MX_TIM10_Init();
 8001812:	f001 ff6b 	bl	80036ec <MX_TIM10_Init>
  MX_TIM9_Init();
 8001816:	f001 ff15 	bl	8003644 <MX_TIM9_Init>
  MX_ADC1_Init();
 800181a:	f001 fcf9 	bl	8003210 <MX_ADC1_Init>
  MX_TIM4_Init();
 800181e:	f001 fe4b 	bl	80034b8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001822:	f001 febb 	bl	800359c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ee_init();
 8001826:	f7ff fd77 	bl	8001318 <ee_init>
  LiquidCrystal_I2C(0x4E, 20, 4);	//Initialization of LCD (Select your LCD address)
 800182a:	2204      	movs	r2, #4
 800182c:	2114      	movs	r1, #20
 800182e:	204e      	movs	r0, #78	; 0x4e
 8001830:	f7ff fb76 	bl	8000f20 <LiquidCrystal_I2C>
  lcdBegin();
 8001834:	f7ff fb9c 	bl	8000f70 <lcdBegin>
  lcdSetCursor(2,1);
 8001838:	2101      	movs	r1, #1
 800183a:	2002      	movs	r0, #2
 800183c:	f7ff fc62 	bl	8001104 <lcdSetCursor>
  lcdPrint("Power Feed V2.0");
 8001840:	4885      	ldr	r0, [pc, #532]	; (8001a58 <main+0x2f0>)
 8001842:	f7ff fc91 	bl	8001168 <lcdPrint>
  lcd_update = FALSE;				//LCD has been updated
 8001846:	4b85      	ldr	r3, [pc, #532]	; (8001a5c <main+0x2f4>)
 8001848:	2200      	movs	r2, #0
 800184a:	801a      	strh	r2, [r3, #0]
  lcdCreateChar(0, char_left_arrow);
 800184c:	4984      	ldr	r1, [pc, #528]	; (8001a60 <main+0x2f8>)
 800184e:	2000      	movs	r0, #0
 8001850:	f7ff fc2e 	bl	80010b0 <lcdCreateChar>
  lcdCreateChar(1, char_left_empty_arrow);
 8001854:	4983      	ldr	r1, [pc, #524]	; (8001a64 <main+0x2fc>)
 8001856:	2001      	movs	r0, #1
 8001858:	f7ff fc2a 	bl	80010b0 <lcdCreateChar>
  lcdCreateChar(2, char_right_arrow);
 800185c:	4982      	ldr	r1, [pc, #520]	; (8001a68 <main+0x300>)
 800185e:	2002      	movs	r0, #2
 8001860:	f7ff fc26 	bl	80010b0 <lcdCreateChar>
  lcdCreateChar(3, char_right_empty_arrow);
 8001864:	4981      	ldr	r1, [pc, #516]	; (8001a6c <main+0x304>)
 8001866:	2003      	movs	r0, #3
 8001868:	f7ff fc22 	bl	80010b0 <lcdCreateChar>

  /* Encoder Initialization */
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 800186c:	213c      	movs	r1, #60	; 0x3c
 800186e:	4880      	ldr	r0, [pc, #512]	; (8001a70 <main+0x308>)
 8001870:	f006 fb96 	bl	8007fa0 <HAL_TIM_Encoder_Start_IT>
  /* Initialization Timers */
  HAL_TIM_Base_Start_IT(&htim11);	//Timer for debouncing
 8001874:	487f      	ldr	r0, [pc, #508]	; (8001a74 <main+0x30c>)
 8001876:	f005 fecd 	bl	8007614 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);	//Timer for acceleration update
 800187a:	487f      	ldr	r0, [pc, #508]	; (8001a78 <main+0x310>)
 800187c:	f005 feca 	bl	8007614 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);	//Timer for general 100ms counter
 8001880:	487e      	ldr	r0, [pc, #504]	; (8001a7c <main+0x314>)
 8001882:	f005 fec7 	bl	8007614 <HAL_TIM_Base_Start_IT>

  //Asignation pointers for structures
  struct_ptr = &parameter;
 8001886:	4b7e      	ldr	r3, [pc, #504]	; (8001a80 <main+0x318>)
 8001888:	4a71      	ldr	r2, [pc, #452]	; (8001a50 <main+0x2e8>)
 800188a:	601a      	str	r2, [r3, #0]
  default_struct_ptr = &default_parameter;
 800188c:	4b7d      	ldr	r3, [pc, #500]	; (8001a84 <main+0x31c>)
 800188e:	4a71      	ldr	r2, [pc, #452]	; (8001a54 <main+0x2ec>)
 8001890:	601a      	str	r2, [r3, #0]

  //Delay to show initial screen and meanwhile check if encoder is pressed long
  old_delay100ms_counter = delay100ms_counter; //Update delay counter
 8001892:	4b7d      	ldr	r3, [pc, #500]	; (8001a88 <main+0x320>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a7d      	ldr	r2, [pc, #500]	; (8001a8c <main+0x324>)
 8001898:	6013      	str	r3, [r2, #0]
  while(old_delay100ms_counter+30 >= delay100ms_counter){
 800189a:	e00e      	b.n	80018ba <main+0x152>
	  if (Encoder_Switch_Status_Read() == TRUE_HOLD){	//If encoder is hold enter in configuration
 800189c:	f002 fe3c 	bl	8004518 <Encoder_Switch_Status_Read>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d106      	bne.n	80018b4 <main+0x14c>
		  state = CONFIGURATION;
 80018a6:	4b7a      	ldr	r3, [pc, #488]	; (8001a90 <main+0x328>)
 80018a8:	2204      	movs	r2, #4
 80018aa:	801a      	strh	r2, [r3, #0]
		  lcd_update=TRUE;
 80018ac:	4b6b      	ldr	r3, [pc, #428]	; (8001a5c <main+0x2f4>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	801a      	strh	r2, [r3, #0]
		  break;
 80018b2:	e00a      	b.n	80018ca <main+0x162>
	  }else{
		  state = INITIALIZATION;	//If not, enter into Initialization
 80018b4:	4b76      	ldr	r3, [pc, #472]	; (8001a90 <main+0x328>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	801a      	strh	r2, [r3, #0]
  while(old_delay100ms_counter+30 >= delay100ms_counter){
 80018ba:	4b74      	ldr	r3, [pc, #464]	; (8001a8c <main+0x324>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f103 021e 	add.w	r2, r3, #30
 80018c2:	4b71      	ldr	r3, [pc, #452]	; (8001a88 <main+0x320>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d2e8      	bcs.n	800189c <main+0x134>
	  }
  }
  lcdClear();
 80018ca:	f7ff fbc7 	bl	800105c <lcdClear>

  //Reading parameters from flash memory, if it is first time booting enter into configuration mode
  if (!Read_Parameter_Data(struct_ptr)){	//Read values from Flash (Emulated EEprom), if return is FALSE, then show error loading and load default values
 80018ce:	4b6c      	ldr	r3, [pc, #432]	; (8001a80 <main+0x318>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 ff25 	bl	8004722 <Read_Parameter_Data>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d123      	bne.n	8001926 <main+0x1be>
	  lcdSetCursor(1,1);
 80018de:	2101      	movs	r1, #1
 80018e0:	2001      	movs	r0, #1
 80018e2:	f7ff fc0f 	bl	8001104 <lcdSetCursor>
	  lcdPrint("ERROR LOADING DATA");
 80018e6:	486b      	ldr	r0, [pc, #428]	; (8001a94 <main+0x32c>)
 80018e8:	f7ff fc3e 	bl	8001168 <lcdPrint>
	  lcdSetCursor(1,2);
 80018ec:	2102      	movs	r1, #2
 80018ee:	2001      	movs	r0, #1
 80018f0:	f7ff fc08 	bl	8001104 <lcdSetCursor>
	  lcdPrint("LOADING DEFAULT");
 80018f4:	4868      	ldr	r0, [pc, #416]	; (8001a98 <main+0x330>)
 80018f6:	f7ff fc37 	bl	8001168 <lcdPrint>
	  *struct_ptr = *default_struct_ptr;	//Load default values
 80018fa:	4b62      	ldr	r3, [pc, #392]	; (8001a84 <main+0x31c>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b60      	ldr	r3, [pc, #384]	; (8001a80 <main+0x318>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6811      	ldr	r1, [r2, #0]
 8001904:	6855      	ldr	r5, [r2, #4]
 8001906:	6894      	ldr	r4, [r2, #8]
 8001908:	68d0      	ldr	r0, [r2, #12]
 800190a:	6019      	str	r1, [r3, #0]
 800190c:	605d      	str	r5, [r3, #4]
 800190e:	609c      	str	r4, [r3, #8]
 8001910:	60d8      	str	r0, [r3, #12]
 8001912:	6911      	ldr	r1, [r2, #16]
 8001914:	6119      	str	r1, [r3, #16]
 8001916:	8a92      	ldrh	r2, [r2, #20]
 8001918:	829a      	strh	r2, [r3, #20]
	  HAL_Delay(2000);
 800191a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800191e:	f003 fce1 	bl	80052e4 <HAL_Delay>
	  lcdClear();
 8001922:	f7ff fb9b 	bl	800105c <lcdClear>
  }
  if (parameter.first_load != 0){	//If it is first booting, load default and go to config.
 8001926:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <main+0x2e8>)
 8001928:	8a9b      	ldrh	r3, [r3, #20]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d015      	beq.n	800195a <main+0x1f2>
	  *struct_ptr = *default_struct_ptr;	//Load default values
 800192e:	4b55      	ldr	r3, [pc, #340]	; (8001a84 <main+0x31c>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4b53      	ldr	r3, [pc, #332]	; (8001a80 <main+0x318>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6811      	ldr	r1, [r2, #0]
 8001938:	6855      	ldr	r5, [r2, #4]
 800193a:	6894      	ldr	r4, [r2, #8]
 800193c:	68d0      	ldr	r0, [r2, #12]
 800193e:	6019      	str	r1, [r3, #0]
 8001940:	605d      	str	r5, [r3, #4]
 8001942:	609c      	str	r4, [r3, #8]
 8001944:	60d8      	str	r0, [r3, #12]
 8001946:	6911      	ldr	r1, [r2, #16]
 8001948:	6119      	str	r1, [r3, #16]
 800194a:	8a92      	ldrh	r2, [r2, #20]
 800194c:	829a      	strh	r2, [r3, #20]
	  state = CONFIGURATION;		//GO to config for initial configuration
 800194e:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <main+0x328>)
 8001950:	2204      	movs	r2, #4
 8001952:	801a      	strh	r2, [r3, #0]
	  lcd_update=TRUE;
 8001954:	4b41      	ldr	r3, [pc, #260]	; (8001a5c <main+0x2f4>)
 8001956:	2201      	movs	r2, #1
 8001958:	801a      	strh	r2, [r3, #0]
  }

  float TIM11_period_ms_init = (float)parameter.acc_update_ratio/1000;		//Period to load into the timer, calculated from Define
 800195a:	4b3d      	ldr	r3, [pc, #244]	; (8001a50 <main+0x2e8>)
 800195c:	8a1b      	ldrh	r3, [r3, #16]
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001966:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001a9c <main+0x334>
 800196a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196e:	edc7 7a01 	vstr	s15, [r7, #4]
  uint16_t TIM11_ARR_init;
  TIM11_ARR_init = ( (float) (CLK_FREQ_T2/(TIM11_preescaler+1))*TIM11_period_ms_init );	//Calculation value for ARR register to set correct period
 8001972:	edd7 7a01 	vldr	s15, [r7, #4]
 8001976:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001aa0 <main+0x338>
 800197a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001982:	ee17 3a90 	vmov	r3, s15
 8001986:	807b      	strh	r3, [r7, #2]
  TIM11->ARR = TIM11_ARR_init;
 8001988:	4a46      	ldr	r2, [pc, #280]	; (8001aa4 <main+0x33c>)
 800198a:	887b      	ldrh	r3, [r7, #2]
 800198c:	62d3      	str	r3, [r2, #44]	; 0x2c
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  switch (state)
 800198e:	4b40      	ldr	r3, [pc, #256]	; (8001a90 <main+0x328>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	2b05      	cmp	r3, #5
 8001994:	d8fb      	bhi.n	800198e <main+0x226>
 8001996:	a201      	add	r2, pc, #4	; (adr r2, 800199c <main+0x234>)
 8001998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199c:	080019b5 	.word	0x080019b5
 80019a0:	08001cbd 	.word	0x08001cbd
 80019a4:	08002037 	.word	0x08002037
 80019a8:	08001ac9 	.word	0x08001ac9
 80019ac:	08002501 	.word	0x08002501
 80019b0:	08002371 	.word	0x08002371
	  {
	  	  case INITIALIZATION:	//Initialization state
	  		  if ( Switch_Status_Read() != MID ){	//If the switch is not in MID state, report error
 80019b4:	f002 fd1a 	bl	80043ec <Switch_Status_Read>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d00f      	beq.n	80019de <main+0x276>
	  			  lcdSetCursor(8,1);				//Print Error message
 80019be:	2101      	movs	r1, #1
 80019c0:	2008      	movs	r0, #8
 80019c2:	f7ff fb9f 	bl	8001104 <lcdSetCursor>
	  			  lcdPrint("ERROR!");
 80019c6:	4838      	ldr	r0, [pc, #224]	; (8001aa8 <main+0x340>)
 80019c8:	f7ff fbce 	bl	8001168 <lcdPrint>
	  			  lcdSetCursor(3,2);
 80019cc:	2102      	movs	r1, #2
 80019ce:	2003      	movs	r0, #3
 80019d0:	f7ff fb98 	bl	8001104 <lcdSetCursor>
	  			  lcdPrint("Release Switch");
 80019d4:	4835      	ldr	r0, [pc, #212]	; (8001aac <main+0x344>)
 80019d6:	f7ff fbc7 	bl	8001168 <lcdPrint>
				  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
				  Motor_Disable(parameter.en_invert);			//Disable the Motor at startup.
				  Write_Arrow(STANDBY, estop_status);
				  state = STANDBY;								//Go to standby
	  		  }
	  		  break;
 80019da:	f001 bb88 	b.w	80030ee <main+0x1986>
	  			  lcdClear();
 80019de:	f7ff fb3d 	bl	800105c <lcdClear>
				  lcdSetCursor(0,0);
 80019e2:	2100      	movs	r1, #0
 80019e4:	2000      	movs	r0, #0
 80019e6:	f7ff fb8d 	bl	8001104 <lcdSetCursor>
				  lcdPrint("Feed Rate:");
 80019ea:	4831      	ldr	r0, [pc, #196]	; (8001ab0 <main+0x348>)
 80019ec:	f7ff fbbc 	bl	8001168 <lcdPrint>
				  lcdSetCursor(0,1);
 80019f0:	2101      	movs	r1, #1
 80019f2:	2000      	movs	r0, #0
 80019f4:	f7ff fb86 	bl	8001104 <lcdSetCursor>
				  lcdPrint("Mode: STOP ");
 80019f8:	482e      	ldr	r0, [pc, #184]	; (8001ab4 <main+0x34c>)
 80019fa:	f7ff fbb5 	bl	8001168 <lcdPrint>
	  			  lcdSetCursor(0,3);
 80019fe:	2103      	movs	r1, #3
 8001a00:	2000      	movs	r0, #0
 8001a02:	f7ff fb7f 	bl	8001104 <lcdSetCursor>
	  			  lcdPrint("Spindle RPM: ");
 8001a06:	482c      	ldr	r0, [pc, #176]	; (8001ab8 <main+0x350>)
 8001a08:	f7ff fbae 	bl	8001168 <lcdPrint>
		  		  target_feedrate = parameter.initial_feedrate;
 8001a0c:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <main+0x2e8>)
 8001a0e:	8a5b      	ldrh	r3, [r3, #18]
 8001a10:	b21a      	sxth	r2, r3
 8001a12:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <main+0x354>)
 8001a14:	801a      	strh	r2, [r3, #0]
		  		  display_feedrate = target_feedrate;
 8001a16:	4b29      	ldr	r3, [pc, #164]	; (8001abc <main+0x354>)
 8001a18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a1c:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <main+0x358>)
 8001a1e:	801a      	strh	r2, [r3, #0]
				  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 8001a20:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <main+0x358>)
 8001a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a26:	2200      	movs	r2, #0
 8001a28:	210b      	movs	r1, #11
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f002 fcc4 	bl	80043b8 <LCD_Write_Feedrate>
				  Motor_Disable(parameter.en_invert);			//Disable the Motor at startup.
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <main+0x2e8>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 fb65 	bl	8004104 <Motor_Disable>
				  Write_Arrow(STANDBY, estop_status);
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <main+0x35c>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	2003      	movs	r0, #3
 8001a42:	f002 fea9 	bl	8004798 <Write_Arrow>
				  state = STANDBY;								//Go to standby
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <main+0x328>)
 8001a48:	2203      	movs	r2, #3
 8001a4a:	801a      	strh	r2, [r3, #0]
	  		  break;
 8001a4c:	f001 bb4f 	b.w	80030ee <main+0x1986>
 8001a50:	200007d8 	.word	0x200007d8
 8001a54:	200007f0 	.word	0x200007f0
 8001a58:	08009b6c 	.word	0x08009b6c
 8001a5c:	20000846 	.word	0x20000846
 8001a60:	2000000c 	.word	0x2000000c
 8001a64:	20000014 	.word	0x20000014
 8001a68:	20000024 	.word	0x20000024
 8001a6c:	2000001c 	.word	0x2000001c
 8001a70:	200005d8 	.word	0x200005d8
 8001a74:	20000788 	.word	0x20000788
 8001a78:	20000740 	.word	0x20000740
 8001a7c:	200006f8 	.word	0x200006f8
 8001a80:	20000808 	.word	0x20000808
 8001a84:	2000080c 	.word	0x2000080c
 8001a88:	20000818 	.word	0x20000818
 8001a8c:	2000081c 	.word	0x2000081c
 8001a90:	200007d0 	.word	0x200007d0
 8001a94:	08009b7c 	.word	0x08009b7c
 8001a98:	08009b90 	.word	0x08009b90
 8001a9c:	447a0000 	.word	0x447a0000
 8001aa0:	477f2600 	.word	0x477f2600
 8001aa4:	40014800 	.word	0x40014800
 8001aa8:	08009ba0 	.word	0x08009ba0
 8001aac:	08009ba8 	.word	0x08009ba8
 8001ab0:	08009bb8 	.word	0x08009bb8
 8001ab4:	08009bc4 	.word	0x08009bc4
 8001ab8:	08009bd0 	.word	0x08009bd0
 8001abc:	2000002c 	.word	0x2000002c
 8001ac0:	2000002e 	.word	0x2000002e
 8001ac4:	20000008 	.word	0x20000008
  					limit_pulses_counter = saved_pulses_counter;
  				  }
  			  }else if ( previous_state == MOVE_LEFT ){
  			  }*/

	  		  if (lcd_update){				//Update the LCD coming from others states
 8001ac8:	4b91      	ldr	r3, [pc, #580]	; (8001d10 <main+0x5a8>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d01d      	beq.n	8001b0c <main+0x3a4>
	  			  lcdSetCursor(0,1);
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f7ff fb16 	bl	8001104 <lcdSetCursor>
	  			  lcdPrint("Mode: STOP ");
 8001ad8:	488e      	ldr	r0, [pc, #568]	; (8001d14 <main+0x5ac>)
 8001ada:	f7ff fb45 	bl	8001168 <lcdPrint>
	  			  lcd_update = FALSE;			//Reset flag for LCD Update
 8001ade:	4b8c      	ldr	r3, [pc, #560]	; (8001d10 <main+0x5a8>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	801a      	strh	r2, [r3, #0]
	  			  lcdSetCursor(0,2);
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f7ff fb0c 	bl	8001104 <lcdSetCursor>
	  			  lcdPrint("                  ");
 8001aec:	488a      	ldr	r0, [pc, #552]	; (8001d18 <main+0x5b0>)
 8001aee:	f7ff fb3b 	bl	8001168 <lcdPrint>
	  			  Write_Arrow(STANDBY, estop_status);
 8001af2:	4b8a      	ldr	r3, [pc, #552]	; (8001d1c <main+0x5b4>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	4619      	mov	r1, r3
 8001af8:	2003      	movs	r0, #3
 8001afa:	f002 fe4d 	bl	8004798 <Write_Arrow>
	  			  lcdSetCursor(0,3);
 8001afe:	2103      	movs	r1, #3
 8001b00:	2000      	movs	r0, #0
 8001b02:	f7ff faff 	bl	8001104 <lcdSetCursor>
	  			  lcdPrint("Spindle RPM: ");
 8001b06:	4886      	ldr	r0, [pc, #536]	; (8001d20 <main+0x5b8>)
 8001b08:	f7ff fb2e 	bl	8001168 <lcdPrint>
	  		  }
	  		  Update_Feedrate(&target_feedrate);				//Update the feedrate from encoder
 8001b0c:	4885      	ldr	r0, [pc, #532]	; (8001d24 <main+0x5bc>)
 8001b0e:	f002 fcb9 	bl	8004484 <Update_Feedrate>
	  		  display_feedrate = target_feedrate;				//Update variable to display the feedrate
 8001b12:	4b84      	ldr	r3, [pc, #528]	; (8001d24 <main+0x5bc>)
 8001b14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b18:	4b83      	ldr	r3, [pc, #524]	; (8001d28 <main+0x5c0>)
 8001b1a:	801a      	strh	r2, [r3, #0]
	  		  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 8001b1c:	4b82      	ldr	r3, [pc, #520]	; (8001d28 <main+0x5c0>)
 8001b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b22:	2200      	movs	r2, #0
 8001b24:	210b      	movs	r1, #11
 8001b26:	4618      	mov	r0, r3
 8001b28:	f002 fc46 	bl	80043b8 <LCD_Write_Feedrate>
	  		  encoder_sw_status = Encoder_Switch_Status_Read();
 8001b2c:	f002 fcf4 	bl	8004518 <Encoder_Switch_Status_Read>
 8001b30:	4603      	mov	r3, r0
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	4b7d      	ldr	r3, [pc, #500]	; (8001d2c <main+0x5c4>)
 8001b36:	801a      	strh	r2, [r3, #0]
	  		  if ( encoder_sw_status == TRUE ){			//Check if the encoder is pressed to change the step mode
 8001b38:	4b7c      	ldr	r3, [pc, #496]	; (8001d2c <main+0x5c4>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d10f      	bne.n	8001b60 <main+0x3f8>
	  			  if (step_mode == STEP_NORMAL){
 8001b40:	4b7b      	ldr	r3, [pc, #492]	; (8001d30 <main+0x5c8>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d103      	bne.n	8001b50 <main+0x3e8>
	  				  step_mode = STEP_x10;
 8001b48:	4b79      	ldr	r3, [pc, #484]	; (8001d30 <main+0x5c8>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	801a      	strh	r2, [r3, #0]
 8001b4e:	e04a      	b.n	8001be6 <main+0x47e>
	  			  }else if(step_mode == STEP_x10){
 8001b50:	4b77      	ldr	r3, [pc, #476]	; (8001d30 <main+0x5c8>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d146      	bne.n	8001be6 <main+0x47e>
	  				step_mode = STEP_NORMAL;
 8001b58:	4b75      	ldr	r3, [pc, #468]	; (8001d30 <main+0x5c8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	801a      	strh	r2, [r3, #0]
 8001b5e:	e042      	b.n	8001be6 <main+0x47e>
	  			  }
	  		  }else if ( encoder_sw_status == TRUE_HOLD ){	//If Encoder is holded, enter into E-Stop Setting mode
 8001b60:	4b72      	ldr	r3, [pc, #456]	; (8001d2c <main+0x5c4>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d13e      	bne.n	8001be6 <main+0x47e>
	  			  if ( estop_status == RIGHT ){
 8001b68:	4b6c      	ldr	r3, [pc, #432]	; (8001d1c <main+0x5b4>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d10d      	bne.n	8001b8c <main+0x424>
	  				estop_status = BOTH;
 8001b70:	4b6a      	ldr	r3, [pc, #424]	; (8001d1c <main+0x5b4>)
 8001b72:	2202      	movs	r2, #2
 8001b74:	801a      	strh	r2, [r3, #0]
	  				elimit_pulses_right = saved_pulses_counter;
 8001b76:	4b6f      	ldr	r3, [pc, #444]	; (8001d34 <main+0x5cc>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a6f      	ldr	r2, [pc, #444]	; (8001d38 <main+0x5d0>)
 8001b7c:	6013      	str	r3, [r2, #0]
	  				Write_Arrow(STANDBY, estop_status);
 8001b7e:	4b67      	ldr	r3, [pc, #412]	; (8001d1c <main+0x5b4>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	4619      	mov	r1, r3
 8001b84:	2003      	movs	r0, #3
 8001b86:	f002 fe07 	bl	8004798 <Write_Arrow>
 8001b8a:	e02c      	b.n	8001be6 <main+0x47e>
	  			  }else if( estop_status == LEFT ){
 8001b8c:	4b63      	ldr	r3, [pc, #396]	; (8001d1c <main+0x5b4>)
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10d      	bne.n	8001bb0 <main+0x448>
	  				estop_status = BOTH;
 8001b94:	4b61      	ldr	r3, [pc, #388]	; (8001d1c <main+0x5b4>)
 8001b96:	2202      	movs	r2, #2
 8001b98:	801a      	strh	r2, [r3, #0]
	  				elimit_pulses_left = saved_pulses_counter;
 8001b9a:	4b66      	ldr	r3, [pc, #408]	; (8001d34 <main+0x5cc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a67      	ldr	r2, [pc, #412]	; (8001d3c <main+0x5d4>)
 8001ba0:	6013      	str	r3, [r2, #0]
	  				Write_Arrow(STANDBY, estop_status);
 8001ba2:	4b5e      	ldr	r3, [pc, #376]	; (8001d1c <main+0x5b4>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f002 fdf5 	bl	8004798 <Write_Arrow>
 8001bae:	e01a      	b.n	8001be6 <main+0x47e>
	  			  }else if( estop_status == NONE ){
 8001bb0:	4b5a      	ldr	r3, [pc, #360]	; (8001d1c <main+0x5b4>)
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d109      	bne.n	8001bcc <main+0x464>
					previous_state = STANDBY;		//Setting previous state to STANDBY
 8001bb8:	4b61      	ldr	r3, [pc, #388]	; (8001d40 <main+0x5d8>)
 8001bba:	2203      	movs	r2, #3
 8001bbc:	801a      	strh	r2, [r3, #0]
					state = E_STOP_SETTING;			//Change state to ESTOP Menu
 8001bbe:	4b61      	ldr	r3, [pc, #388]	; (8001d44 <main+0x5dc>)
 8001bc0:	2205      	movs	r2, #5
 8001bc2:	801a      	strh	r2, [r3, #0]
					lcd_update = TRUE;				//Set flag for LCD update
 8001bc4:	4b52      	ldr	r3, [pc, #328]	; (8001d10 <main+0x5a8>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	801a      	strh	r2, [r3, #0]
 8001bca:	e00c      	b.n	8001be6 <main+0x47e>
	  			  }else if ( estop_status == BOTH ){
 8001bcc:	4b53      	ldr	r3, [pc, #332]	; (8001d1c <main+0x5b4>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d108      	bne.n	8001be6 <main+0x47e>
	  				estop_status = NONE;
 8001bd4:	4b51      	ldr	r3, [pc, #324]	; (8001d1c <main+0x5b4>)
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	801a      	strh	r2, [r3, #0]
	  				Write_Arrow(STANDBY, estop_status);
 8001bda:	4b50      	ldr	r3, [pc, #320]	; (8001d1c <main+0x5b4>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	4619      	mov	r1, r3
 8001be0:	2003      	movs	r0, #3
 8001be2:	f002 fdd9 	bl	8004798 <Write_Arrow>
	  			  }
	  		  }
	  		  if (previous_state != STANDBY){		//If previous status is not Standby set previous status as standby
 8001be6:	4b56      	ldr	r3, [pc, #344]	; (8001d40 <main+0x5d8>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d005      	beq.n	8001bfa <main+0x492>
	  			  previous_state = STANDBY;		//Change previous state to current one
 8001bee:	4b54      	ldr	r3, [pc, #336]	; (8001d40 <main+0x5d8>)
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	801a      	strh	r2, [r3, #0]
	  			  Step_Tracking(DISABLE);
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f002 ffaf 	bl	8004b58 <Step_Tracking>
	  		  }

	  		  if ( estop_status == RIGHT ){
 8001bfa:	4b48      	ldr	r3, [pc, #288]	; (8001d1c <main+0x5b4>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d10d      	bne.n	8001c1e <main+0x4b6>
				  if (scrolling_flag){
 8001c02:	4b51      	ldr	r3, [pc, #324]	; (8001d48 <main+0x5e0>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d021      	beq.n	8001c4e <main+0x4e6>
					  Write_Text_Scrolling(eStopText_2_Right, 2, 0, TRUE);
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2102      	movs	r1, #2
 8001c10:	484e      	ldr	r0, [pc, #312]	; (8001d4c <main+0x5e4>)
 8001c12:	f002 febb 	bl	800498c <Write_Text_Scrolling>
					  scrolling_flag = FALSE;
 8001c16:	4b4c      	ldr	r3, [pc, #304]	; (8001d48 <main+0x5e0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	801a      	strh	r2, [r3, #0]
 8001c1c:	e017      	b.n	8001c4e <main+0x4e6>
				  }
	  		  }else if ( estop_status == LEFT ){
 8001c1e:	4b3f      	ldr	r3, [pc, #252]	; (8001d1c <main+0x5b4>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10d      	bne.n	8001c42 <main+0x4da>
				  if (scrolling_flag){
 8001c26:	4b48      	ldr	r3, [pc, #288]	; (8001d48 <main+0x5e0>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00f      	beq.n	8001c4e <main+0x4e6>
					  Write_Text_Scrolling(eStopText_2_Left, 2, 0, TRUE);
 8001c2e:	2301      	movs	r3, #1
 8001c30:	2200      	movs	r2, #0
 8001c32:	2102      	movs	r1, #2
 8001c34:	4846      	ldr	r0, [pc, #280]	; (8001d50 <main+0x5e8>)
 8001c36:	f002 fea9 	bl	800498c <Write_Text_Scrolling>
					  scrolling_flag = FALSE;
 8001c3a:	4b43      	ldr	r3, [pc, #268]	; (8001d48 <main+0x5e0>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	801a      	strh	r2, [r3, #0]
 8001c40:	e005      	b.n	8001c4e <main+0x4e6>
				  }
	  		  }else{
	  			  Write_Text_Scrolling(eStopText_2_Right, 2, 0, FALSE);
 8001c42:	2300      	movs	r3, #0
 8001c44:	2200      	movs	r2, #0
 8001c46:	2102      	movs	r1, #2
 8001c48:	4840      	ldr	r0, [pc, #256]	; (8001d4c <main+0x5e4>)
 8001c4a:	f002 fe9f 	bl	800498c <Write_Text_Scrolling>
	  		  }

	  		  if ( ( Switch_Status_Read() == RIGHT ) && ( current_feedrate == 0 ) ){		//Check if the switch is on right mode
 8001c4e:	f002 fbcd 	bl	80043ec <Switch_Status_Read>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d10e      	bne.n	8001c76 <main+0x50e>
 8001c58:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <main+0x5ec>)
 8001c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d109      	bne.n	8001c76 <main+0x50e>
	  			  previous_state = STANDBY;		//Setting previous state to STANDBY
 8001c62:	4b37      	ldr	r3, [pc, #220]	; (8001d40 <main+0x5d8>)
 8001c64:	2203      	movs	r2, #3
 8001c66:	801a      	strh	r2, [r3, #0]
	  			  state = MOVE_RIGHT;				//Change state to RIGHT
 8001c68:	4b36      	ldr	r3, [pc, #216]	; (8001d44 <main+0x5dc>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	801a      	strh	r2, [r3, #0]
	  			  lcd_update = TRUE;				//Set flag for LCD update
 8001c6e:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <main+0x5a8>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	801a      	strh	r2, [r3, #0]
 8001c74:	e012      	b.n	8001c9c <main+0x534>
	  		  }else if ( ( Switch_Status_Read() == LEFT ) && ( current_feedrate == 0 ) ){	//Check if the switch is on left mode
 8001c76:	f002 fbb9 	bl	80043ec <Switch_Status_Read>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10d      	bne.n	8001c9c <main+0x534>
 8001c80:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <main+0x5ec>)
 8001c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d108      	bne.n	8001c9c <main+0x534>
	  			  previous_state = STANDBY;		//Setting previous state to STANDBY
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <main+0x5d8>)
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	801a      	strh	r2, [r3, #0]
	  			  state = MOVE_LEFT;				//Change state to RIGHT
 8001c90:	4b2c      	ldr	r3, [pc, #176]	; (8001d44 <main+0x5dc>)
 8001c92:	2202      	movs	r2, #2
 8001c94:	801a      	strh	r2, [r3, #0]
	  			  lcd_update = TRUE;				//Set flag for LCD update
 8001c96:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <main+0x5a8>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (RPM_available_flag){
 8001c9c:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <main+0x5f0>)
 8001c9e:	f993 3000 	ldrsb.w	r3, [r3]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f001 81fb 	beq.w	800309e <main+0x1936>
	  			  LCD_Write_Number(RPM_value, 13, 3, SUBFIXNO);
 8001ca8:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <main+0x5f4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	210d      	movs	r1, #13
 8001cb4:	f001 ff82 	bl	8003bbc <LCD_Write_Number>
	  		  }
	  		  break;
 8001cb8:	f001 b9f1 	b.w	800309e <main+0x1936>
	  	  case MOVE_RIGHT:	//Right state, movement to the RIGHT
	  		  encoder_sw_status = Encoder_Switch_Status_Read();
 8001cbc:	f002 fc2c 	bl	8004518 <Encoder_Switch_Status_Read>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <main+0x5c4>)
 8001cc6:	801a      	strh	r2, [r3, #0]
	  		  aux_sw_status = Aux_Switch_Status_Read();
 8001cc8:	f002 fc96 	bl	80045f8 <Aux_Switch_Status_Read>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <main+0x5f8>)
 8001cd2:	801a      	strh	r2, [r3, #0]
	  		  if ( encoder_sw_status == TRUE ){	//Check if the encoder is pressed to change the step mode
 8001cd4:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <main+0x5c4>)
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d10e      	bne.n	8001cfa <main+0x592>
	  			  if (step_mode == STEP_NORMAL){
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <main+0x5c8>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d103      	bne.n	8001cec <main+0x584>
	  				  step_mode = STEP_x10;
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <main+0x5c8>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	801a      	strh	r2, [r3, #0]
 8001cea:	e006      	b.n	8001cfa <main+0x592>
	  			  }else if(step_mode == STEP_x10){
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <main+0x5c8>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d102      	bne.n	8001cfa <main+0x592>
	  				  step_mode = STEP_NORMAL;
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <main+0x5c8>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	801a      	strh	r2, [r3, #0]
	  			  }
	  		  }
	  		  if (  aux_sw_status == TRUE_HOLD ){
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <main+0x5f8>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d132      	bne.n	8001d68 <main+0x600>
		  		target_feedrate = parameter.fast_movement_feedrate;
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <main+0x5fc>)
 8001d04:	899b      	ldrh	r3, [r3, #12]
 8001d06:	b21a      	sxth	r2, r3
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <main+0x5bc>)
 8001d0a:	801a      	strh	r2, [r3, #0]
 8001d0c:	e035      	b.n	8001d7a <main+0x612>
 8001d0e:	bf00      	nop
 8001d10:	20000846 	.word	0x20000846
 8001d14:	08009bc4 	.word	0x08009bc4
 8001d18:	08009be0 	.word	0x08009be0
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	08009bd0 	.word	0x08009bd0
 8001d24:	2000002c 	.word	0x2000002c
 8001d28:	2000002e 	.word	0x2000002e
 8001d2c:	20000814 	.word	0x20000814
 8001d30:	200007d6 	.word	0x200007d6
 8001d34:	20000828 	.word	0x20000828
 8001d38:	2000082c 	.word	0x2000082c
 8001d3c:	20000830 	.word	0x20000830
 8001d40:	200007d2 	.word	0x200007d2
 8001d44:	200007d0 	.word	0x200007d0
 8001d48:	20000854 	.word	0x20000854
 8001d4c:	20000060 	.word	0x20000060
 8001d50:	20000080 	.word	0x20000080
 8001d54:	20000810 	.word	0x20000810
 8001d58:	2000085a 	.word	0x2000085a
 8001d5c:	20000840 	.word	0x20000840
 8001d60:	20000816 	.word	0x20000816
 8001d64:	200007d8 	.word	0x200007d8
	  		  }else if ( aux_sw_status == FALSE ){
 8001d68:	4b6b      	ldr	r3, [pc, #428]	; (8001f18 <main+0x7b0>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d104      	bne.n	8001d7a <main+0x612>
		  		target_feedrate = display_feedrate;
 8001d70:	4b6a      	ldr	r3, [pc, #424]	; (8001f1c <main+0x7b4>)
 8001d72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d76:	4b6a      	ldr	r3, [pc, #424]	; (8001f20 <main+0x7b8>)
 8001d78:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  sw_status = Switch_Status_Read();		//Read the switch
 8001d7a:	f002 fb37 	bl	80043ec <Switch_Status_Read>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	4b68      	ldr	r3, [pc, #416]	; (8001f24 <main+0x7bc>)
 8001d84:	801a      	strh	r2, [r3, #0]
	  		  if ( sw_status == RIGHT ){			//If it is on right position, update the feedrate target comming from others modes
 8001d86:	4b67      	ldr	r3, [pc, #412]	; (8001f24 <main+0x7bc>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d126      	bne.n	8001ddc <main+0x674>
	  			  if (target_feedrate == 0){
 8001d8e:	4b64      	ldr	r3, [pc, #400]	; (8001f20 <main+0x7b8>)
 8001d90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d104      	bne.n	8001da2 <main+0x63a>
	  				  target_feedrate = display_feedrate;
 8001d98:	4b60      	ldr	r3, [pc, #384]	; (8001f1c <main+0x7b4>)
 8001d9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d9e:	4b60      	ldr	r3, [pc, #384]	; (8001f20 <main+0x7b8>)
 8001da0:	801a      	strh	r2, [r3, #0]
	  			  }
	  			  if ( aux_sw_status != TRUE_HOLD ){
 8001da2:	4b5d      	ldr	r3, [pc, #372]	; (8001f18 <main+0x7b0>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d076      	beq.n	8001e98 <main+0x730>
					  Update_Feedrate(&target_feedrate);				//Update the feedrate from encoder
 8001daa:	485d      	ldr	r0, [pc, #372]	; (8001f20 <main+0x7b8>)
 8001dac:	f002 fb6a 	bl	8004484 <Update_Feedrate>
					  if (display_feedrate != target_feedrate){			//Check if the feedrate changed to update LCD
 8001db0:	4b5a      	ldr	r3, [pc, #360]	; (8001f1c <main+0x7b4>)
 8001db2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001db6:	4b5a      	ldr	r3, [pc, #360]	; (8001f20 <main+0x7b8>)
 8001db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d06b      	beq.n	8001e98 <main+0x730>
						  display_feedrate = target_feedrate;
 8001dc0:	4b57      	ldr	r3, [pc, #348]	; (8001f20 <main+0x7b8>)
 8001dc2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dc6:	4b55      	ldr	r3, [pc, #340]	; (8001f1c <main+0x7b4>)
 8001dc8:	801a      	strh	r2, [r3, #0]
						  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 8001dca:	4b54      	ldr	r3, [pc, #336]	; (8001f1c <main+0x7b4>)
 8001dcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	210b      	movs	r1, #11
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 faef 	bl	80043b8 <LCD_Write_Feedrate>
 8001dda:	e05d      	b.n	8001e98 <main+0x730>
					  }
	  			  }
	  		  }else if ( sw_status == LEFT){		//If it is on left position, change to left, set feedrate to zero
 8001ddc:	4b51      	ldr	r3, [pc, #324]	; (8001f24 <main+0x7bc>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d12a      	bne.n	8001e3a <main+0x6d2>
		  		target_feedrate = 0;
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <main+0x7b8>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	801a      	strh	r2, [r3, #0]
			  	if ( current_feedrate == 0 ){		//If motor is stopped then move to left status
 8001dea:	4b4f      	ldr	r3, [pc, #316]	; (8001f28 <main+0x7c0>)
 8001dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d151      	bne.n	8001e98 <main+0x730>
			  		state = MOVE_LEFT;				//Change state to left
 8001df4:	4b4d      	ldr	r3, [pc, #308]	; (8001f2c <main+0x7c4>)
 8001df6:	2202      	movs	r2, #2
 8001df8:	801a      	strh	r2, [r3, #0]
			  		lcd_update = TRUE;				//Set flag to update display
 8001dfa:	4b4d      	ldr	r3, [pc, #308]	; (8001f30 <main+0x7c8>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	801a      	strh	r2, [r3, #0]
			  		Motor_Disable(parameter.en_invert);		//Disable Motor
 8001e00:	4b4c      	ldr	r3, [pc, #304]	; (8001f34 <main+0x7cc>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f002 f97d 	bl	8004104 <Motor_Disable>
			  		target_feedrate = display_feedrate;	//Update feedrate
 8001e0a:	4b44      	ldr	r3, [pc, #272]	; (8001f1c <main+0x7b4>)
 8001e0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e10:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <main+0x7b8>)
 8001e12:	801a      	strh	r2, [r3, #0]
			  		pulses_counter = Step_Tracking(DISABLE);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f002 fe9f 	bl	8004b58 <Step_Tracking>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <main+0x7d0>)
 8001e20:	601a      	str	r2, [r3, #0]
			  		saved_pulses_counter = saved_pulses_counter + pulses_counter;
 8001e22:	4b46      	ldr	r3, [pc, #280]	; (8001f3c <main+0x7d4>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <main+0x7d0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a43      	ldr	r2, [pc, #268]	; (8001f3c <main+0x7d4>)
 8001e2e:	6013      	str	r3, [r2, #0]
			  		estop_activated_flag = FALSE;
 8001e30:	4b43      	ldr	r3, [pc, #268]	; (8001f40 <main+0x7d8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
			  		break;							//Exit this state
 8001e36:	f001 b95a 	b.w	80030ee <main+0x1986>
			  	}
	  		  }else if ( sw_status == MID ){		//If it is on Mid position, change to STOP or STANDBY status
 8001e3a:	4b3a      	ldr	r3, [pc, #232]	; (8001f24 <main+0x7bc>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d12a      	bne.n	8001e98 <main+0x730>
	  			target_feedrate = 0;
 8001e42:	4b37      	ldr	r3, [pc, #220]	; (8001f20 <main+0x7b8>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	801a      	strh	r2, [r3, #0]
	  			if ( current_feedrate == 0 ){
 8001e48:	4b37      	ldr	r3, [pc, #220]	; (8001f28 <main+0x7c0>)
 8001e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d122      	bne.n	8001e98 <main+0x730>
	  				state = STANDBY;				//Change state to standby
 8001e52:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <main+0x7c4>)
 8001e54:	2203      	movs	r2, #3
 8001e56:	801a      	strh	r2, [r3, #0]
	  				lcd_update = TRUE;				//Set flag to update display
 8001e58:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <main+0x7c8>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	801a      	strh	r2, [r3, #0]
	  				Motor_Disable(parameter.en_invert);		//Disable Motor
 8001e5e:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <main+0x7cc>)
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f002 f94e 	bl	8004104 <Motor_Disable>
	  				target_feedrate = display_feedrate;	//Update feedrate
 8001e68:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <main+0x7b4>)
 8001e6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e6e:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <main+0x7b8>)
 8001e70:	801a      	strh	r2, [r3, #0]
	  				pulses_counter = Step_Tracking(DISABLE);
 8001e72:	2000      	movs	r0, #0
 8001e74:	f002 fe70 	bl	8004b58 <Step_Tracking>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <main+0x7d0>)
 8001e7e:	601a      	str	r2, [r3, #0]
	  				saved_pulses_counter = saved_pulses_counter + pulses_counter;
 8001e80:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <main+0x7d4>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <main+0x7d0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4413      	add	r3, r2
 8001e8a:	4a2c      	ldr	r2, [pc, #176]	; (8001f3c <main+0x7d4>)
 8001e8c:	6013      	str	r3, [r2, #0]
	  				estop_activated_flag = FALSE;
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <main+0x7d8>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
	  				break;							//Exit this state
 8001e94:	f001 b92b 	b.w	80030ee <main+0x1986>
	  			}
	  		  }

	  		  pulses_counter = Step_Tracking(READ);
 8001e98:	200b      	movs	r0, #11
 8001e9a:	f002 fe5d 	bl	8004b58 <Step_Tracking>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <main+0x7d0>)
 8001ea4:	601a      	str	r2, [r3, #0]
	  		  saved_pulses_counter = saved_pulses_counter + pulses_counter;
 8001ea6:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <main+0x7d4>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <main+0x7d0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	4a22      	ldr	r2, [pc, #136]	; (8001f3c <main+0x7d4>)
 8001eb2:	6013      	str	r3, [r2, #0]
	  		  if ( estop_status == BOTH ){
 8001eb4:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <main+0x7dc>)
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d175      	bne.n	8001fa8 <main+0x840>
				  if ( elimit_pulses_right < 0){
 8001ebc:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <main+0x7e0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	da45      	bge.n	8001f50 <main+0x7e8>
					  if ( saved_pulses_counter <= elimit_pulses_right){
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <main+0x7d4>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <main+0x7e0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	dc6b      	bgt.n	8001fa8 <main+0x840>
						  target_feedrate = 0;
 8001ed0:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <main+0x7b8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	801a      	strh	r2, [r3, #0]
						  if ( current_feedrate == 0 ){
 8001ed6:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <main+0x7c0>)
 8001ed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d163      	bne.n	8001fa8 <main+0x840>
							  Motor_Disable(parameter.en_invert);		//Disable Motor
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <main+0x7cc>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 f90d 	bl	8004104 <Motor_Disable>
							  target_feedrate = display_feedrate;		//Update feedrate
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <main+0x7b4>)
 8001eec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <main+0x7b8>)
 8001ef2:	801a      	strh	r2, [r3, #0]
							  estop_activated_flag = TRUE;
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <main+0x7d8>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
							  lcdSetCursor(0,2);
 8001efa:	2102      	movs	r1, #2
 8001efc:	2000      	movs	r0, #0
 8001efe:	f7ff f901 	bl	8001104 <lcdSetCursor>
							  lcdPrint("E-STOP Reached");
 8001f02:	4812      	ldr	r0, [pc, #72]	; (8001f4c <main+0x7e4>)
 8001f04:	f7ff f930 	bl	8001168 <lcdPrint>
							  Write_Arrow(STANDBY, estop_status);
 8001f08:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <main+0x7dc>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	2003      	movs	r0, #3
 8001f10:	f002 fc42 	bl	8004798 <Write_Arrow>
 8001f14:	e048      	b.n	8001fa8 <main+0x840>
 8001f16:	bf00      	nop
 8001f18:	20000816 	.word	0x20000816
 8001f1c:	2000002e 	.word	0x2000002e
 8001f20:	2000002c 	.word	0x2000002c
 8001f24:	20000812 	.word	0x20000812
 8001f28:	20000810 	.word	0x20000810
 8001f2c:	200007d0 	.word	0x200007d0
 8001f30:	20000846 	.word	0x20000846
 8001f34:	200007d8 	.word	0x200007d8
 8001f38:	20000824 	.word	0x20000824
 8001f3c:	20000828 	.word	0x20000828
 8001f40:	20000858 	.word	0x20000858
 8001f44:	20000008 	.word	0x20000008
 8001f48:	2000082c 	.word	0x2000082c
 8001f4c:	08009bf4 	.word	0x08009bf4
						  }
					  }
				  }else if ( elimit_pulses_right >= 0 ){
 8001f50:	4b9a      	ldr	r3, [pc, #616]	; (80021bc <main+0xa54>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	db27      	blt.n	8001fa8 <main+0x840>
					  if ( saved_pulses_counter >= elimit_pulses_right){
 8001f58:	4b99      	ldr	r3, [pc, #612]	; (80021c0 <main+0xa58>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b97      	ldr	r3, [pc, #604]	; (80021bc <main+0xa54>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	db21      	blt.n	8001fa8 <main+0x840>
						  target_feedrate = 0;
 8001f64:	4b97      	ldr	r3, [pc, #604]	; (80021c4 <main+0xa5c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	801a      	strh	r2, [r3, #0]
						  if ( current_feedrate == 0 ){
 8001f6a:	4b97      	ldr	r3, [pc, #604]	; (80021c8 <main+0xa60>)
 8001f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d119      	bne.n	8001fa8 <main+0x840>
							  Motor_Disable(parameter.en_invert);		//Disable Motor
 8001f74:	4b95      	ldr	r3, [pc, #596]	; (80021cc <main+0xa64>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f002 f8c3 	bl	8004104 <Motor_Disable>
							  target_feedrate = display_feedrate;		//Update feedrate
 8001f7e:	4b94      	ldr	r3, [pc, #592]	; (80021d0 <main+0xa68>)
 8001f80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f84:	4b8f      	ldr	r3, [pc, #572]	; (80021c4 <main+0xa5c>)
 8001f86:	801a      	strh	r2, [r3, #0]
							  estop_activated_flag = TRUE;
 8001f88:	4b92      	ldr	r3, [pc, #584]	; (80021d4 <main+0xa6c>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
							  lcdSetCursor(0,2);
 8001f8e:	2102      	movs	r1, #2
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7ff f8b7 	bl	8001104 <lcdSetCursor>
							  lcdPrint("E-STOP Reached");
 8001f96:	4890      	ldr	r0, [pc, #576]	; (80021d8 <main+0xa70>)
 8001f98:	f7ff f8e6 	bl	8001168 <lcdPrint>
							  Write_Arrow(STANDBY, estop_status);
 8001f9c:	4b8f      	ldr	r3, [pc, #572]	; (80021dc <main+0xa74>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	2003      	movs	r0, #3
 8001fa4:	f002 fbf8 	bl	8004798 <Write_Arrow>
						  }
					  }
				  }
	  		  }

	  		  if (lcd_update){				//Update the LCD coming from others states
 8001fa8:	4b8d      	ldr	r3, [pc, #564]	; (80021e0 <main+0xa78>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d009      	beq.n	8001fc4 <main+0x85c>
	  			  lcdSetCursor(0,1);
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f7ff f8a6 	bl	8001104 <lcdSetCursor>
	  			  lcdPrint("Mode: RIGHT");
 8001fb8:	488a      	ldr	r0, [pc, #552]	; (80021e4 <main+0xa7c>)
 8001fba:	f7ff f8d5 	bl	8001168 <lcdPrint>
	  			  lcd_update = FALSE;			//Reset flag for LCD Update
 8001fbe:	4b88      	ldr	r3, [pc, #544]	; (80021e0 <main+0xa78>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (previous_state != MOVE_RIGHT){		//If previous status is Standby the enable motor and direcction
 8001fc4:	4b88      	ldr	r3, [pc, #544]	; (80021e8 <main+0xa80>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d010      	beq.n	8001fee <main+0x886>
				  Motor_Direction(RIGHT, parameter.dir_invert);	//Set direction to right
 8001fcc:	4b7f      	ldr	r3, [pc, #508]	; (80021cc <main+0xa64>)
 8001fce:	885b      	ldrh	r3, [r3, #2]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f002 f8ae 	bl	8004134 <Motor_Direction>
				  Motor_Enable(parameter.en_invert);				//Enable Motor
 8001fd8:	4b7c      	ldr	r3, [pc, #496]	; (80021cc <main+0xa64>)
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f002 f87b 	bl	80040d8 <Motor_Enable>
				  previous_state = MOVE_RIGHT;			//Change previous state to current one
 8001fe2:	4b81      	ldr	r3, [pc, #516]	; (80021e8 <main+0xa80>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	801a      	strh	r2, [r3, #0]
				  Step_Tracking(ENABLE);
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f002 fdb5 	bl	8004b58 <Step_Tracking>
	  		  }
	  		  if (update_speed){					//Update speed if the flag is set
 8001fee:	4b7f      	ldr	r3, [pc, #508]	; (80021ec <main+0xa84>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00a      	beq.n	800200c <main+0x8a4>
	  			  current_feedrate = Motor_Feedrate_Update(&current_feedrate, &target_feedrate);
 8001ff6:	4973      	ldr	r1, [pc, #460]	; (80021c4 <main+0xa5c>)
 8001ff8:	4873      	ldr	r0, [pc, #460]	; (80021c8 <main+0xa60>)
 8001ffa:	f002 f90d 	bl	8004218 <Motor_Feedrate_Update>
 8001ffe:	4603      	mov	r3, r0
 8002000:	b21a      	sxth	r2, r3
 8002002:	4b71      	ldr	r3, [pc, #452]	; (80021c8 <main+0xa60>)
 8002004:	801a      	strh	r2, [r3, #0]
				  update_speed = 0;					//Reset the update_speed flag
 8002006:	4b79      	ldr	r3, [pc, #484]	; (80021ec <main+0xa84>)
 8002008:	2200      	movs	r2, #0
 800200a:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if ( ( arrow_flag ) && ( estop_activated_flag == FALSE )){
 800200c:	4b78      	ldr	r3, [pc, #480]	; (80021f0 <main+0xa88>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	f001 8047 	beq.w	80030a4 <main+0x193c>
 8002016:	4b6f      	ldr	r3, [pc, #444]	; (80021d4 <main+0xa6c>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f041 8042 	bne.w	80030a4 <main+0x193c>
	  			  Write_Arrow(RIGHT, estop_status);
 8002020:	4b6e      	ldr	r3, [pc, #440]	; (80021dc <main+0xa74>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	4619      	mov	r1, r3
 8002026:	2001      	movs	r0, #1
 8002028:	f002 fbb6 	bl	8004798 <Write_Arrow>
	  			  arrow_flag = FALSE;
 800202c:	4b70      	ldr	r3, [pc, #448]	; (80021f0 <main+0xa88>)
 800202e:	2200      	movs	r2, #0
 8002030:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  break;
 8002032:	f001 b837 	b.w	80030a4 <main+0x193c>
	  	  case MOVE_LEFT:	//Left state, movement to the Left
	  		  encoder_sw_status = Encoder_Switch_Status_Read();
 8002036:	f002 fa6f 	bl	8004518 <Encoder_Switch_Status_Read>
 800203a:	4603      	mov	r3, r0
 800203c:	b29a      	uxth	r2, r3
 800203e:	4b6d      	ldr	r3, [pc, #436]	; (80021f4 <main+0xa8c>)
 8002040:	801a      	strh	r2, [r3, #0]
	  		  aux_sw_status = Aux_Switch_Status_Read();
 8002042:	f002 fad9 	bl	80045f8 <Aux_Switch_Status_Read>
 8002046:	4603      	mov	r3, r0
 8002048:	b29a      	uxth	r2, r3
 800204a:	4b6b      	ldr	r3, [pc, #428]	; (80021f8 <main+0xa90>)
 800204c:	801a      	strh	r2, [r3, #0]
	  		  if ( encoder_sw_status == TRUE ){	//Check if the encoder is pressed to change the step mode
 800204e:	4b69      	ldr	r3, [pc, #420]	; (80021f4 <main+0xa8c>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d10e      	bne.n	8002074 <main+0x90c>
	  			  if (step_mode == STEP_NORMAL){
 8002056:	4b69      	ldr	r3, [pc, #420]	; (80021fc <main+0xa94>)
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d103      	bne.n	8002066 <main+0x8fe>
	  				  step_mode = STEP_x10;
 800205e:	4b67      	ldr	r3, [pc, #412]	; (80021fc <main+0xa94>)
 8002060:	2201      	movs	r2, #1
 8002062:	801a      	strh	r2, [r3, #0]
 8002064:	e006      	b.n	8002074 <main+0x90c>
	  			  }else if(step_mode == STEP_x10){
 8002066:	4b65      	ldr	r3, [pc, #404]	; (80021fc <main+0xa94>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d102      	bne.n	8002074 <main+0x90c>
	  				  step_mode = STEP_NORMAL;
 800206e:	4b63      	ldr	r3, [pc, #396]	; (80021fc <main+0xa94>)
 8002070:	2200      	movs	r2, #0
 8002072:	801a      	strh	r2, [r3, #0]
	  			  }
	  		  }
	  		  if (  aux_sw_status == TRUE_HOLD ){
 8002074:	4b60      	ldr	r3, [pc, #384]	; (80021f8 <main+0xa90>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	2b03      	cmp	r3, #3
 800207a:	d105      	bne.n	8002088 <main+0x920>
	  			  target_feedrate = parameter.fast_movement_feedrate;
 800207c:	4b53      	ldr	r3, [pc, #332]	; (80021cc <main+0xa64>)
 800207e:	899b      	ldrh	r3, [r3, #12]
 8002080:	b21a      	sxth	r2, r3
 8002082:	4b50      	ldr	r3, [pc, #320]	; (80021c4 <main+0xa5c>)
 8002084:	801a      	strh	r2, [r3, #0]
 8002086:	e008      	b.n	800209a <main+0x932>
	  		  }else if ( aux_sw_status == FALSE ){
 8002088:	4b5b      	ldr	r3, [pc, #364]	; (80021f8 <main+0xa90>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d104      	bne.n	800209a <main+0x932>
	  			  target_feedrate = display_feedrate;
 8002090:	4b4f      	ldr	r3, [pc, #316]	; (80021d0 <main+0xa68>)
 8002092:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002096:	4b4b      	ldr	r3, [pc, #300]	; (80021c4 <main+0xa5c>)
 8002098:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  sw_status = Switch_Status_Read();		//Read the switch
 800209a:	f002 f9a7 	bl	80043ec <Switch_Status_Read>
 800209e:	4603      	mov	r3, r0
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	4b57      	ldr	r3, [pc, #348]	; (8002200 <main+0xa98>)
 80020a4:	801a      	strh	r2, [r3, #0]
	  		  if ( sw_status == LEFT ){				//If it is on left position, update the feedrate target comming from others modes
 80020a6:	4b56      	ldr	r3, [pc, #344]	; (8002200 <main+0xa98>)
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d128      	bne.n	8002100 <main+0x998>
	  			  if (target_feedrate == 0){
 80020ae:	4b45      	ldr	r3, [pc, #276]	; (80021c4 <main+0xa5c>)
 80020b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d104      	bne.n	80020c2 <main+0x95a>
	  				  target_feedrate = display_feedrate;
 80020b8:	4b45      	ldr	r3, [pc, #276]	; (80021d0 <main+0xa68>)
 80020ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020be:	4b41      	ldr	r3, [pc, #260]	; (80021c4 <main+0xa5c>)
 80020c0:	801a      	strh	r2, [r3, #0]
	  			  }
	  			  if ( aux_sw_status != TRUE_HOLD ){
 80020c2:	4b4d      	ldr	r3, [pc, #308]	; (80021f8 <main+0xa90>)
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	f000 80a0 	beq.w	800220c <main+0xaa4>
					  Update_Feedrate(&target_feedrate);				//Update the feedrate from encoder
 80020cc:	483d      	ldr	r0, [pc, #244]	; (80021c4 <main+0xa5c>)
 80020ce:	f002 f9d9 	bl	8004484 <Update_Feedrate>
					  if (display_feedrate != target_feedrate){			//Check if the feedrate changed to update LCD
 80020d2:	4b3f      	ldr	r3, [pc, #252]	; (80021d0 <main+0xa68>)
 80020d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020d8:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <main+0xa5c>)
 80020da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020de:	429a      	cmp	r2, r3
 80020e0:	f000 8094 	beq.w	800220c <main+0xaa4>
						  display_feedrate = target_feedrate;
 80020e4:	4b37      	ldr	r3, [pc, #220]	; (80021c4 <main+0xa5c>)
 80020e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020ea:	4b39      	ldr	r3, [pc, #228]	; (80021d0 <main+0xa68>)
 80020ec:	801a      	strh	r2, [r3, #0]
						  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 80020ee:	4b38      	ldr	r3, [pc, #224]	; (80021d0 <main+0xa68>)
 80020f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f4:	2200      	movs	r2, #0
 80020f6:	210b      	movs	r1, #11
 80020f8:	4618      	mov	r0, r3
 80020fa:	f002 f95d 	bl	80043b8 <LCD_Write_Feedrate>
 80020fe:	e085      	b.n	800220c <main+0xaa4>
					  }
	  			  }
	  		  }else if ( sw_status == RIGHT){		//If it is on right position, change to right, set feedrate to zero
 8002100:	4b3f      	ldr	r3, [pc, #252]	; (8002200 <main+0xa98>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d12a      	bne.n	800215e <main+0x9f6>
		  		target_feedrate = 0;
 8002108:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <main+0xa5c>)
 800210a:	2200      	movs	r2, #0
 800210c:	801a      	strh	r2, [r3, #0]
		  		if ( current_feedrate == 0 ){		//If motor is stopped then move to right status
 800210e:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <main+0xa60>)
 8002110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d179      	bne.n	800220c <main+0xaa4>
		  			state = MOVE_RIGHT;				//Change state to right
 8002118:	4b3a      	ldr	r3, [pc, #232]	; (8002204 <main+0xa9c>)
 800211a:	2201      	movs	r2, #1
 800211c:	801a      	strh	r2, [r3, #0]
		  			lcd_update = TRUE;				//Set flag to update display
 800211e:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <main+0xa78>)
 8002120:	2201      	movs	r2, #1
 8002122:	801a      	strh	r2, [r3, #0]
		  			Motor_Disable(parameter.en_invert);		//Disable Motor
 8002124:	4b29      	ldr	r3, [pc, #164]	; (80021cc <main+0xa64>)
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f001 ffeb 	bl	8004104 <Motor_Disable>
		  			target_feedrate = display_feedrate;	//Update feedrate
 800212e:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <main+0xa68>)
 8002130:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002134:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <main+0xa5c>)
 8002136:	801a      	strh	r2, [r3, #0]
		  			pulses_counter = Step_Tracking(DISABLE);
 8002138:	2000      	movs	r0, #0
 800213a:	f002 fd0d 	bl	8004b58 <Step_Tracking>
 800213e:	4603      	mov	r3, r0
 8002140:	461a      	mov	r2, r3
 8002142:	4b31      	ldr	r3, [pc, #196]	; (8002208 <main+0xaa0>)
 8002144:	601a      	str	r2, [r3, #0]
		  			saved_pulses_counter = saved_pulses_counter - pulses_counter;
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <main+0xa58>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <main+0xaa0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	4a1b      	ldr	r2, [pc, #108]	; (80021c0 <main+0xa58>)
 8002152:	6013      	str	r3, [r2, #0]
		  			estop_activated_flag = FALSE;
 8002154:	4b1f      	ldr	r3, [pc, #124]	; (80021d4 <main+0xa6c>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
		  			break;							//Exit this state
 800215a:	f000 bfc8 	b.w	80030ee <main+0x1986>
		  		}
	  		  }else if ( sw_status == MID ){		//If it is on Mid position, change to STOP or STANDBY status
 800215e:	4b28      	ldr	r3, [pc, #160]	; (8002200 <main+0xa98>)
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d152      	bne.n	800220c <main+0xaa4>
	  			target_feedrate = 0;
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <main+0xa5c>)
 8002168:	2200      	movs	r2, #0
 800216a:	801a      	strh	r2, [r3, #0]
	  			if ( current_feedrate == 0 ){
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <main+0xa60>)
 800216e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d14a      	bne.n	800220c <main+0xaa4>
	  				state = STANDBY;				//Change state to standby
 8002176:	4b23      	ldr	r3, [pc, #140]	; (8002204 <main+0xa9c>)
 8002178:	2203      	movs	r2, #3
 800217a:	801a      	strh	r2, [r3, #0]
	  				lcd_update = TRUE;				//Set flag to update display
 800217c:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <main+0xa78>)
 800217e:	2201      	movs	r2, #1
 8002180:	801a      	strh	r2, [r3, #0]
	  				Motor_Disable(parameter.en_invert);		//Disable Motor
 8002182:	4b12      	ldr	r3, [pc, #72]	; (80021cc <main+0xa64>)
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f001 ffbc 	bl	8004104 <Motor_Disable>
	  				target_feedrate = display_feedrate;	//Update feedrate
 800218c:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <main+0xa68>)
 800218e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002192:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <main+0xa5c>)
 8002194:	801a      	strh	r2, [r3, #0]
	  				pulses_counter = Step_Tracking(DISABLE);
 8002196:	2000      	movs	r0, #0
 8002198:	f002 fcde 	bl	8004b58 <Step_Tracking>
 800219c:	4603      	mov	r3, r0
 800219e:	461a      	mov	r2, r3
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <main+0xaa0>)
 80021a2:	601a      	str	r2, [r3, #0]
	  				saved_pulses_counter = saved_pulses_counter - pulses_counter;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <main+0xa58>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <main+0xaa0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <main+0xa58>)
 80021b0:	6013      	str	r3, [r2, #0]
	  				estop_activated_flag = FALSE;
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <main+0xa6c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
	  				break;							//Exit this state
 80021b8:	f000 bf99 	b.w	80030ee <main+0x1986>
 80021bc:	2000082c 	.word	0x2000082c
 80021c0:	20000828 	.word	0x20000828
 80021c4:	2000002c 	.word	0x2000002c
 80021c8:	20000810 	.word	0x20000810
 80021cc:	200007d8 	.word	0x200007d8
 80021d0:	2000002e 	.word	0x2000002e
 80021d4:	20000858 	.word	0x20000858
 80021d8:	08009bf4 	.word	0x08009bf4
 80021dc:	20000008 	.word	0x20000008
 80021e0:	20000846 	.word	0x20000846
 80021e4:	08009c04 	.word	0x08009c04
 80021e8:	200007d2 	.word	0x200007d2
 80021ec:	20000844 	.word	0x20000844
 80021f0:	20000852 	.word	0x20000852
 80021f4:	20000814 	.word	0x20000814
 80021f8:	20000816 	.word	0x20000816
 80021fc:	200007d6 	.word	0x200007d6
 8002200:	20000812 	.word	0x20000812
 8002204:	200007d0 	.word	0x200007d0
 8002208:	20000824 	.word	0x20000824
	  			}
	  		  }

	  		  pulses_counter = Step_Tracking(READ);
 800220c:	200b      	movs	r0, #11
 800220e:	f002 fca3 	bl	8004b58 <Step_Tracking>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	4b91      	ldr	r3, [pc, #580]	; (800245c <main+0xcf4>)
 8002218:	601a      	str	r2, [r3, #0]
	  		  saved_pulses_counter = saved_pulses_counter - pulses_counter;
 800221a:	4b91      	ldr	r3, [pc, #580]	; (8002460 <main+0xcf8>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4b8f      	ldr	r3, [pc, #572]	; (800245c <main+0xcf4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	4a8e      	ldr	r2, [pc, #568]	; (8002460 <main+0xcf8>)
 8002226:	6013      	str	r3, [r2, #0]
	  		  if ( estop_status == BOTH ){
 8002228:	4b8e      	ldr	r3, [pc, #568]	; (8002464 <main+0xcfc>)
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d158      	bne.n	80022e2 <main+0xb7a>
				  if ( elimit_pulses_left < 0){
 8002230:	4b8d      	ldr	r3, [pc, #564]	; (8002468 <main+0xd00>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	da28      	bge.n	800228a <main+0xb22>
					  if ( saved_pulses_counter <= elimit_pulses_left){
 8002238:	4b89      	ldr	r3, [pc, #548]	; (8002460 <main+0xcf8>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b8a      	ldr	r3, [pc, #552]	; (8002468 <main+0xd00>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	dc4e      	bgt.n	80022e2 <main+0xb7a>
						  target_feedrate = 0;
 8002244:	4b89      	ldr	r3, [pc, #548]	; (800246c <main+0xd04>)
 8002246:	2200      	movs	r2, #0
 8002248:	801a      	strh	r2, [r3, #0]
						  if ( current_feedrate == 0 ){
 800224a:	4b89      	ldr	r3, [pc, #548]	; (8002470 <main+0xd08>)
 800224c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d146      	bne.n	80022e2 <main+0xb7a>
							  Motor_Disable(parameter.en_invert);		//Disable Motor
 8002254:	4b87      	ldr	r3, [pc, #540]	; (8002474 <main+0xd0c>)
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f001 ff53 	bl	8004104 <Motor_Disable>
							  target_feedrate = display_feedrate;		//Update feedrate
 800225e:	4b86      	ldr	r3, [pc, #536]	; (8002478 <main+0xd10>)
 8002260:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002264:	4b81      	ldr	r3, [pc, #516]	; (800246c <main+0xd04>)
 8002266:	801a      	strh	r2, [r3, #0]
							  estop_activated_flag = TRUE;
 8002268:	4b84      	ldr	r3, [pc, #528]	; (800247c <main+0xd14>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
							  lcdSetCursor(0,2);
 800226e:	2102      	movs	r1, #2
 8002270:	2000      	movs	r0, #0
 8002272:	f7fe ff47 	bl	8001104 <lcdSetCursor>
							  lcdPrint("E-STOP Reached");
 8002276:	4882      	ldr	r0, [pc, #520]	; (8002480 <main+0xd18>)
 8002278:	f7fe ff76 	bl	8001168 <lcdPrint>
							  Write_Arrow(STANDBY, estop_status);
 800227c:	4b79      	ldr	r3, [pc, #484]	; (8002464 <main+0xcfc>)
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	2003      	movs	r0, #3
 8002284:	f002 fa88 	bl	8004798 <Write_Arrow>
 8002288:	e02b      	b.n	80022e2 <main+0xb7a>
						  }
					  }
				  }else if ( elimit_pulses_left >= 0 ){
 800228a:	4b77      	ldr	r3, [pc, #476]	; (8002468 <main+0xd00>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	db27      	blt.n	80022e2 <main+0xb7a>
					  if ( saved_pulses_counter <= elimit_pulses_left){
 8002292:	4b73      	ldr	r3, [pc, #460]	; (8002460 <main+0xcf8>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	4b74      	ldr	r3, [pc, #464]	; (8002468 <main+0xd00>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	dc21      	bgt.n	80022e2 <main+0xb7a>
						  target_feedrate = 0;
 800229e:	4b73      	ldr	r3, [pc, #460]	; (800246c <main+0xd04>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	801a      	strh	r2, [r3, #0]
						  if ( current_feedrate == 0 ){
 80022a4:	4b72      	ldr	r3, [pc, #456]	; (8002470 <main+0xd08>)
 80022a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d119      	bne.n	80022e2 <main+0xb7a>
							  Motor_Disable(parameter.en_invert);		//Disable Motor
 80022ae:	4b71      	ldr	r3, [pc, #452]	; (8002474 <main+0xd0c>)
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f001 ff26 	bl	8004104 <Motor_Disable>
							  target_feedrate = display_feedrate;		//Update feedrate
 80022b8:	4b6f      	ldr	r3, [pc, #444]	; (8002478 <main+0xd10>)
 80022ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022be:	4b6b      	ldr	r3, [pc, #428]	; (800246c <main+0xd04>)
 80022c0:	801a      	strh	r2, [r3, #0]
							  estop_activated_flag = TRUE;
 80022c2:	4b6e      	ldr	r3, [pc, #440]	; (800247c <main+0xd14>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]
							  lcdSetCursor(0,2);
 80022c8:	2102      	movs	r1, #2
 80022ca:	2000      	movs	r0, #0
 80022cc:	f7fe ff1a 	bl	8001104 <lcdSetCursor>
							  lcdPrint("E-STOP Reached");
 80022d0:	486b      	ldr	r0, [pc, #428]	; (8002480 <main+0xd18>)
 80022d2:	f7fe ff49 	bl	8001168 <lcdPrint>
							  Write_Arrow(STANDBY, estop_status);
 80022d6:	4b63      	ldr	r3, [pc, #396]	; (8002464 <main+0xcfc>)
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	4619      	mov	r1, r3
 80022dc:	2003      	movs	r0, #3
 80022de:	f002 fa5b 	bl	8004798 <Write_Arrow>
					  }
				  }
	  		  }


	  		  if (lcd_update){				//Update the LCD comming from others states
 80022e2:	4b68      	ldr	r3, [pc, #416]	; (8002484 <main+0xd1c>)
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <main+0xb96>
	  			lcdSetCursor(0,1);
 80022ea:	2101      	movs	r1, #1
 80022ec:	2000      	movs	r0, #0
 80022ee:	f7fe ff09 	bl	8001104 <lcdSetCursor>
	  			lcdPrint("Mode: LEFT ");
 80022f2:	4865      	ldr	r0, [pc, #404]	; (8002488 <main+0xd20>)
 80022f4:	f7fe ff38 	bl	8001168 <lcdPrint>
	  			lcd_update = FALSE;			//Reset flag for LCD Update
 80022f8:	4b62      	ldr	r3, [pc, #392]	; (8002484 <main+0xd1c>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (previous_state != MOVE_LEFT){		//If previous status is Standby the enable motor and direcction
 80022fe:	4b63      	ldr	r3, [pc, #396]	; (800248c <main+0xd24>)
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d010      	beq.n	8002328 <main+0xbc0>
	  		  Motor_Direction(LEFT, parameter.dir_invert);	//Set direction to left
 8002306:	4b5b      	ldr	r3, [pc, #364]	; (8002474 <main+0xd0c>)
 8002308:	885b      	ldrh	r3, [r3, #2]
 800230a:	4619      	mov	r1, r3
 800230c:	2000      	movs	r0, #0
 800230e:	f001 ff11 	bl	8004134 <Motor_Direction>
	  		  Motor_Enable(parameter.en_invert);				//Enable Motor
 8002312:	4b58      	ldr	r3, [pc, #352]	; (8002474 <main+0xd0c>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f001 fede 	bl	80040d8 <Motor_Enable>
	  		  previous_state = MOVE_LEFT;			//Change previous state to current one
 800231c:	4b5b      	ldr	r3, [pc, #364]	; (800248c <main+0xd24>)
 800231e:	2202      	movs	r2, #2
 8002320:	801a      	strh	r2, [r3, #0]
	  		  Step_Tracking(ENABLE);
 8002322:	2001      	movs	r0, #1
 8002324:	f002 fc18 	bl	8004b58 <Step_Tracking>
	  		  }
	  		  if (update_speed){					//Update speed if the flag is set
 8002328:	4b59      	ldr	r3, [pc, #356]	; (8002490 <main+0xd28>)
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <main+0xbde>
	  			  current_feedrate = Motor_Feedrate_Update(&current_feedrate, &target_feedrate);
 8002330:	494e      	ldr	r1, [pc, #312]	; (800246c <main+0xd04>)
 8002332:	484f      	ldr	r0, [pc, #316]	; (8002470 <main+0xd08>)
 8002334:	f001 ff70 	bl	8004218 <Motor_Feedrate_Update>
 8002338:	4603      	mov	r3, r0
 800233a:	b21a      	sxth	r2, r3
 800233c:	4b4c      	ldr	r3, [pc, #304]	; (8002470 <main+0xd08>)
 800233e:	801a      	strh	r2, [r3, #0]
				  update_speed = 0;					//Reset the update_speed flag
 8002340:	4b53      	ldr	r3, [pc, #332]	; (8002490 <main+0xd28>)
 8002342:	2200      	movs	r2, #0
 8002344:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if ( ( arrow_flag ) && ( estop_activated_flag == FALSE )){
 8002346:	4b53      	ldr	r3, [pc, #332]	; (8002494 <main+0xd2c>)
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 86ad 	beq.w	80030aa <main+0x1942>
 8002350:	4b4a      	ldr	r3, [pc, #296]	; (800247c <main+0xd14>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	f040 86a8 	bne.w	80030aa <main+0x1942>
	  			  Write_Arrow(LEFT, estop_status);
 800235a:	4b42      	ldr	r3, [pc, #264]	; (8002464 <main+0xcfc>)
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	4619      	mov	r1, r3
 8002360:	2000      	movs	r0, #0
 8002362:	f002 fa19 	bl	8004798 <Write_Arrow>
	  			  arrow_flag = FALSE;
 8002366:	4b4b      	ldr	r3, [pc, #300]	; (8002494 <main+0xd2c>)
 8002368:	2200      	movs	r2, #0
 800236a:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  break;
 800236c:	f000 be9d 	b.w	80030aa <main+0x1942>
	  	  case E_STOP_SETTING:
	  		  if (lcd_update){				//Update the LCD coming from others states
 8002370:	4b44      	ldr	r3, [pc, #272]	; (8002484 <main+0xd1c>)
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00f      	beq.n	8002398 <main+0xc30>
	  			  lcdSetCursor(0,1);
 8002378:	2101      	movs	r1, #1
 800237a:	2000      	movs	r0, #0
 800237c:	f7fe fec2 	bl	8001104 <lcdSetCursor>
	  			  lcdPrint("Mode: ESTOP");
 8002380:	4845      	ldr	r0, [pc, #276]	; (8002498 <main+0xd30>)
 8002382:	f7fe fef1 	bl	8001168 <lcdPrint>
	  			  lcd_update = FALSE;			//Reset flag for LCD Update
 8002386:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <main+0xd1c>)
 8002388:	2200      	movs	r2, #0
 800238a:	801a      	strh	r2, [r3, #0]
	  			  Write_Arrow(STANDBY, estop_status);
 800238c:	4b35      	ldr	r3, [pc, #212]	; (8002464 <main+0xcfc>)
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	4619      	mov	r1, r3
 8002392:	2003      	movs	r0, #3
 8002394:	f002 fa00 	bl	8004798 <Write_Arrow>
	  		  }
	  		  if (scrolling_flag){
 8002398:	4b40      	ldr	r3, [pc, #256]	; (800249c <main+0xd34>)
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <main+0xc4a>
	  			Write_Text_Scrolling(eStopText, 2, 0, TRUE);
 80023a0:	2301      	movs	r3, #1
 80023a2:	2200      	movs	r2, #0
 80023a4:	2102      	movs	r1, #2
 80023a6:	483e      	ldr	r0, [pc, #248]	; (80024a0 <main+0xd38>)
 80023a8:	f002 faf0 	bl	800498c <Write_Text_Scrolling>
	  			scrolling_flag = FALSE;
 80023ac:	4b3b      	ldr	r3, [pc, #236]	; (800249c <main+0xd34>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  encoder_sw_status = Encoder_Switch_Status_Read();
 80023b2:	f002 f8b1 	bl	8004518 <Encoder_Switch_Status_Read>
 80023b6:	4603      	mov	r3, r0
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	4b3a      	ldr	r3, [pc, #232]	; (80024a4 <main+0xd3c>)
 80023bc:	801a      	strh	r2, [r3, #0]
	  		  if ( encoder_sw_status == TRUE ){			//Check if the encoder is pressed to change the step mode
 80023be:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <main+0xd3c>)
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d01b      	beq.n	80023fe <main+0xc96>

	  		  }else if ( encoder_sw_status == TRUE_HOLD ){	//If Encoder is holded, exit E-Stop Setting mode
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <main+0xd3c>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d117      	bne.n	80023fe <main+0xc96>
	  			  previous_state = E_STOP_SETTING;		//Setting previous state to STANDBY
 80023ce:	4b2f      	ldr	r3, [pc, #188]	; (800248c <main+0xd24>)
 80023d0:	2205      	movs	r2, #5
 80023d2:	801a      	strh	r2, [r3, #0]
	  			  state = STANDBY;					//Change state to RIGHT
 80023d4:	4b34      	ldr	r3, [pc, #208]	; (80024a8 <main+0xd40>)
 80023d6:	2203      	movs	r2, #3
 80023d8:	801a      	strh	r2, [r3, #0]
	  			  lcd_update = TRUE;				//Set flag for LCD update
 80023da:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <main+0xd1c>)
 80023dc:	2201      	movs	r2, #1
 80023de:	801a      	strh	r2, [r3, #0]
	  			  Write_Text_Scrolling(eStopText, 2, 0, FALSE);	//Remove the test scrolling
 80023e0:	2300      	movs	r3, #0
 80023e2:	2200      	movs	r2, #0
 80023e4:	2102      	movs	r1, #2
 80023e6:	482e      	ldr	r0, [pc, #184]	; (80024a0 <main+0xd38>)
 80023e8:	f002 fad0 	bl	800498c <Write_Text_Scrolling>
	  			  estop_status = NONE;				//Set e-stop status to NONE (Not activated)
 80023ec:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <main+0xcfc>)
 80023ee:	2203      	movs	r2, #3
 80023f0:	801a      	strh	r2, [r3, #0]
	  			  Write_Arrow(STANDBY, estop_status);
 80023f2:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <main+0xcfc>)
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	4619      	mov	r1, r3
 80023f8:	2003      	movs	r0, #3
 80023fa:	f002 f9cd 	bl	8004798 <Write_Arrow>
	  		  }
	  		  if (previous_state != E_STOP_SETTING){		//If previous status is Standby the enable motor and direction
 80023fe:	4b23      	ldr	r3, [pc, #140]	; (800248c <main+0xd24>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	2b05      	cmp	r3, #5
 8002404:	d002      	beq.n	800240c <main+0xca4>
	  			  previous_state = E_STOP_SETTING;		//Change previous state to current one
 8002406:	4b21      	ldr	r3, [pc, #132]	; (800248c <main+0xd24>)
 8002408:	2205      	movs	r2, #5
 800240a:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if ( ( Switch_Status_Read() == RIGHT ) && ( current_feedrate == 0 ) ){		//Check if the switch is on right mode
 800240c:	f001 ffee 	bl	80043ec <Switch_Status_Read>
 8002410:	4603      	mov	r3, r0
 8002412:	2b01      	cmp	r3, #1
 8002414:	d14a      	bne.n	80024ac <main+0xd44>
 8002416:	4b16      	ldr	r3, [pc, #88]	; (8002470 <main+0xd08>)
 8002418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d145      	bne.n	80024ac <main+0xd44>
	  			  previous_state = E_STOP_SETTING;		//Setting previous state to E-STOP
 8002420:	4b1a      	ldr	r3, [pc, #104]	; (800248c <main+0xd24>)
 8002422:	2205      	movs	r2, #5
 8002424:	801a      	strh	r2, [r3, #0]
	  			  state = MOVE_RIGHT;				//Change state to RIGHT
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <main+0xd40>)
 8002428:	2201      	movs	r2, #1
 800242a:	801a      	strh	r2, [r3, #0]
	  			  estop_status = RIGHT;				//Change e-stop status to RIGHT
 800242c:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <main+0xcfc>)
 800242e:	2201      	movs	r2, #1
 8002430:	801a      	strh	r2, [r3, #0]
	  			  lcd_update = TRUE;				//Set flag for LCD update
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <main+0xd1c>)
 8002434:	2201      	movs	r2, #1
 8002436:	801a      	strh	r2, [r3, #0]
	  			  elimit_pulses_left = saved_pulses_counter;	//Set the limit on the left side
 8002438:	4b09      	ldr	r3, [pc, #36]	; (8002460 <main+0xcf8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <main+0xd00>)
 800243e:	6013      	str	r3, [r2, #0]
	  			  Write_Arrow(STANDBY, estop_status);	//Print arrow with left limit enable
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <main+0xcfc>)
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	2003      	movs	r0, #3
 8002448:	f002 f9a6 	bl	8004798 <Write_Arrow>
	  			  Write_Text_Scrolling(eStopText, 2, 0, FALSE);	//Remove the test scrolling
 800244c:	2300      	movs	r3, #0
 800244e:	2200      	movs	r2, #0
 8002450:	2102      	movs	r1, #2
 8002452:	4813      	ldr	r0, [pc, #76]	; (80024a0 <main+0xd38>)
 8002454:	f002 fa9a 	bl	800498c <Write_Text_Scrolling>
	  			  lcd_update = TRUE;				//Set flag for LCD update
	  			  elimit_pulses_right = saved_pulses_counter;	//Set the limit on the right side
	  			  Write_Arrow(STANDBY, estop_status);	//Print arrow with right limit enable
	  			  Write_Text_Scrolling(eStopText, 2, 0, FALSE);	//Remove the test scrolling
	  		  }
	  		  break;
 8002458:	f000 be2a 	b.w	80030b0 <main+0x1948>
 800245c:	20000824 	.word	0x20000824
 8002460:	20000828 	.word	0x20000828
 8002464:	20000008 	.word	0x20000008
 8002468:	20000830 	.word	0x20000830
 800246c:	2000002c 	.word	0x2000002c
 8002470:	20000810 	.word	0x20000810
 8002474:	200007d8 	.word	0x200007d8
 8002478:	2000002e 	.word	0x2000002e
 800247c:	20000858 	.word	0x20000858
 8002480:	08009bf4 	.word	0x08009bf4
 8002484:	20000846 	.word	0x20000846
 8002488:	08009c10 	.word	0x08009c10
 800248c:	200007d2 	.word	0x200007d2
 8002490:	20000844 	.word	0x20000844
 8002494:	20000852 	.word	0x20000852
 8002498:	08009c1c 	.word	0x08009c1c
 800249c:	20000854 	.word	0x20000854
 80024a0:	20000030 	.word	0x20000030
 80024a4:	20000814 	.word	0x20000814
 80024a8:	200007d0 	.word	0x200007d0
	  		  }else if ( ( Switch_Status_Read() == LEFT ) && ( current_feedrate == 0 ) ){	//Check if the switch is on left mode
 80024ac:	f001 ff9e 	bl	80043ec <Switch_Status_Read>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 85fc 	bne.w	80030b0 <main+0x1948>
 80024b8:	4b8e      	ldr	r3, [pc, #568]	; (80026f4 <main+0xf8c>)
 80024ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 85f6 	bne.w	80030b0 <main+0x1948>
	  			  previous_state = E_STOP_SETTING;		//Setting previous state to E-STOP
 80024c4:	4b8c      	ldr	r3, [pc, #560]	; (80026f8 <main+0xf90>)
 80024c6:	2205      	movs	r2, #5
 80024c8:	801a      	strh	r2, [r3, #0]
	  			  state = MOVE_LEFT;				//Change state to RIGHT
 80024ca:	4b8c      	ldr	r3, [pc, #560]	; (80026fc <main+0xf94>)
 80024cc:	2202      	movs	r2, #2
 80024ce:	801a      	strh	r2, [r3, #0]
	  			  estop_status = LEFT;				//Change e-stop status to LEFT
 80024d0:	4b8b      	ldr	r3, [pc, #556]	; (8002700 <main+0xf98>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	801a      	strh	r2, [r3, #0]
	  			  lcd_update = TRUE;				//Set flag for LCD update
 80024d6:	4b8b      	ldr	r3, [pc, #556]	; (8002704 <main+0xf9c>)
 80024d8:	2201      	movs	r2, #1
 80024da:	801a      	strh	r2, [r3, #0]
	  			  elimit_pulses_right = saved_pulses_counter;	//Set the limit on the right side
 80024dc:	4b8a      	ldr	r3, [pc, #552]	; (8002708 <main+0xfa0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a8a      	ldr	r2, [pc, #552]	; (800270c <main+0xfa4>)
 80024e2:	6013      	str	r3, [r2, #0]
	  			  Write_Arrow(STANDBY, estop_status);	//Print arrow with right limit enable
 80024e4:	4b86      	ldr	r3, [pc, #536]	; (8002700 <main+0xf98>)
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	4619      	mov	r1, r3
 80024ea:	2003      	movs	r0, #3
 80024ec:	f002 f954 	bl	8004798 <Write_Arrow>
	  			  Write_Text_Scrolling(eStopText, 2, 0, FALSE);	//Remove the test scrolling
 80024f0:	2300      	movs	r3, #0
 80024f2:	2200      	movs	r2, #0
 80024f4:	2102      	movs	r1, #2
 80024f6:	4886      	ldr	r0, [pc, #536]	; (8002710 <main+0xfa8>)
 80024f8:	f002 fa48 	bl	800498c <Write_Text_Scrolling>
	  		  break;
 80024fc:	f000 bdd8 	b.w	80030b0 <main+0x1948>
	  	  case CONFIGURATION:	//State for Configuration Menu
	  		  switch (configuration_status)
 8002500:	4b84      	ldr	r3, [pc, #528]	; (8002714 <main+0xfac>)
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	2b0a      	cmp	r3, #10
 8002506:	f63f aa42 	bhi.w	800198e <main+0x226>
 800250a:	a201      	add	r2, pc, #4	; (adr r2, 8002510 <main+0xda8>)
 800250c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002510:	0800253d 	.word	0x0800253d
 8002514:	08002619 	.word	0x08002619
 8002518:	0800273d 	.word	0x0800273d
 800251c:	0800284b 	.word	0x0800284b
 8002520:	080029c9 	.word	0x080029c9
 8002524:	08002ad3 	.word	0x08002ad3
 8002528:	08002c01 	.word	0x08002c01
 800252c:	08002d09 	.word	0x08002d09
 8002530:	08002e41 	.word	0x08002e41
 8002534:	08002f41 	.word	0x08002f41
 8002538:	08003019 	.word	0x08003019
	  		  {
				  case 0:	//Enable PIN configuration
					  if (lcd_update){	//Check if is needed to update LCD
 800253c:	4b71      	ldr	r3, [pc, #452]	; (8002704 <main+0xf9c>)
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d02d      	beq.n	80025a0 <main+0xe38>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8002544:	f001 fafa 	bl	8003b3c <Encoder_Read>
 8002548:	4602      	mov	r2, r0
 800254a:	4b73      	ldr	r3, [pc, #460]	; (8002718 <main+0xfb0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4413      	add	r3, r2
 8002550:	4a71      	ldr	r2, [pc, #452]	; (8002718 <main+0xfb0>)
 8002552:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8002554:	f7fe fd82 	bl	800105c <lcdClear>
						  lcdSetCursor(3, 0);
 8002558:	2100      	movs	r1, #0
 800255a:	2003      	movs	r0, #3
 800255c:	f7fe fdd2 	bl	8001104 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8002560:	486e      	ldr	r0, [pc, #440]	; (800271c <main+0xfb4>)
 8002562:	f7fe fe01 	bl	8001168 <lcdPrint>
						  lcdSetCursor(0, 1);
 8002566:	2101      	movs	r1, #1
 8002568:	2000      	movs	r0, #0
 800256a:	f7fe fdcb 	bl	8001104 <lcdSetCursor>
						  lcdPrint("Enable Pin Inverted:");
 800256e:	486c      	ldr	r0, [pc, #432]	; (8002720 <main+0xfb8>)
 8002570:	f7fe fdfa 	bl	8001168 <lcdPrint>
						  if ( parameter.en_invert == FALSE){		//If parameter is FALSE Print not inverted
 8002574:	4b6b      	ldr	r3, [pc, #428]	; (8002724 <main+0xfbc>)
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d107      	bne.n	800258c <main+0xe24>
							lcdSetCursor(0, 2);
 800257c:	2102      	movs	r1, #2
 800257e:	2000      	movs	r0, #0
 8002580:	f7fe fdc0 	bl	8001104 <lcdSetCursor>
							lcdPrint("NON_INVERTED");
 8002584:	4868      	ldr	r0, [pc, #416]	; (8002728 <main+0xfc0>)
 8002586:	f7fe fdef 	bl	8001168 <lcdPrint>
 800258a:	e006      	b.n	800259a <main+0xe32>
						  }else{									//If parameter is TRUE Print inverted
							lcdSetCursor(0, 2);
 800258c:	2102      	movs	r1, #2
 800258e:	2000      	movs	r0, #0
 8002590:	f7fe fdb8 	bl	8001104 <lcdSetCursor>
							lcdPrint("INVERTED    ");
 8002594:	4865      	ldr	r0, [pc, #404]	; (800272c <main+0xfc4>)
 8002596:	f7fe fde7 	bl	8001168 <lcdPrint>
						  }
						lcd_update = FALSE;	//Reset LCD Update flag
 800259a:	4b5a      	ldr	r3, [pc, #360]	; (8002704 <main+0xf9c>)
 800259c:	2200      	movs	r2, #0
 800259e:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 80025a0:	f001 facc 	bl	8003b3c <Encoder_Read>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b62      	ldr	r3, [pc, #392]	; (8002730 <main+0xfc8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4413      	add	r3, r2
 80025ac:	4a60      	ldr	r2, [pc, #384]	; (8002730 <main+0xfc8>)
 80025ae:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 80025b0:	4b5f      	ldr	r3, [pc, #380]	; (8002730 <main+0xfc8>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b58      	ldr	r3, [pc, #352]	; (8002718 <main+0xfb0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d01c      	beq.n	80025f6 <main+0xe8e>
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 80025bc:	4b5c      	ldr	r3, [pc, #368]	; (8002730 <main+0xfc8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a55      	ldr	r2, [pc, #340]	; (8002718 <main+0xfb0>)
 80025c2:	6013      	str	r3, [r2, #0]
						  if (!parameter.en_invert){					//Change the value
 80025c4:	4b57      	ldr	r3, [pc, #348]	; (8002724 <main+0xfbc>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10a      	bne.n	80025e2 <main+0xe7a>
							lcdSetCursor(0, 2);
 80025cc:	2102      	movs	r1, #2
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7fe fd98 	bl	8001104 <lcdSetCursor>
							lcdPrint("INVERTED    ");
 80025d4:	4855      	ldr	r0, [pc, #340]	; (800272c <main+0xfc4>)
 80025d6:	f7fe fdc7 	bl	8001168 <lcdPrint>
							parameter.en_invert = TRUE;
 80025da:	4b52      	ldr	r3, [pc, #328]	; (8002724 <main+0xfbc>)
 80025dc:	2201      	movs	r2, #1
 80025de:	801a      	strh	r2, [r3, #0]
 80025e0:	e009      	b.n	80025f6 <main+0xe8e>
						  }else{
							lcdSetCursor(0, 2);
 80025e2:	2102      	movs	r1, #2
 80025e4:	2000      	movs	r0, #0
 80025e6:	f7fe fd8d 	bl	8001104 <lcdSetCursor>
							lcdPrint("NOT_INVERTED");
 80025ea:	4852      	ldr	r0, [pc, #328]	; (8002734 <main+0xfcc>)
 80025ec:	f7fe fdbc 	bl	8001168 <lcdPrint>
							parameter.en_invert = FALSE;
 80025f0:	4b4c      	ldr	r3, [pc, #304]	; (8002724 <main+0xfbc>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	801a      	strh	r2, [r3, #0]
						  }
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 80025f6:	f001 ff8f 	bl	8004518 <Encoder_Switch_Status_Read>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	f040 855a 	bne.w	80030b6 <main+0x194e>
						configuration_status += 1;
 8002602:	4b44      	ldr	r3, [pc, #272]	; (8002714 <main+0xfac>)
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	3301      	adds	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	4b42      	ldr	r3, [pc, #264]	; (8002714 <main+0xfac>)
 800260c:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 800260e:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <main+0xf9c>)
 8002610:	2201      	movs	r2, #1
 8002612:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8002614:	f000 bd4f 	b.w	80030b6 <main+0x194e>
				  case 1:	//Dir PIN configuration
					  if (lcd_update){
 8002618:	4b3a      	ldr	r3, [pc, #232]	; (8002704 <main+0xf9c>)
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d02d      	beq.n	800267c <main+0xf14>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8002620:	f001 fa8c 	bl	8003b3c <Encoder_Read>
 8002624:	4602      	mov	r2, r0
 8002626:	4b3c      	ldr	r3, [pc, #240]	; (8002718 <main+0xfb0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4413      	add	r3, r2
 800262c:	4a3a      	ldr	r2, [pc, #232]	; (8002718 <main+0xfb0>)
 800262e:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8002630:	f7fe fd14 	bl	800105c <lcdClear>
						  lcdSetCursor(3, 0);
 8002634:	2100      	movs	r1, #0
 8002636:	2003      	movs	r0, #3
 8002638:	f7fe fd64 	bl	8001104 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 800263c:	4837      	ldr	r0, [pc, #220]	; (800271c <main+0xfb4>)
 800263e:	f7fe fd93 	bl	8001168 <lcdPrint>
						  lcdSetCursor(0, 1);
 8002642:	2101      	movs	r1, #1
 8002644:	2000      	movs	r0, #0
 8002646:	f7fe fd5d 	bl	8001104 <lcdSetCursor>
						  lcdPrint("Dir Pin Inverted:");
 800264a:	483b      	ldr	r0, [pc, #236]	; (8002738 <main+0xfd0>)
 800264c:	f7fe fd8c 	bl	8001168 <lcdPrint>
						  if ( parameter.dir_invert == FALSE){	//If parameter is FALSE Print not inverted
 8002650:	4b34      	ldr	r3, [pc, #208]	; (8002724 <main+0xfbc>)
 8002652:	885b      	ldrh	r3, [r3, #2]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d107      	bne.n	8002668 <main+0xf00>
							lcdSetCursor(0, 2);
 8002658:	2102      	movs	r1, #2
 800265a:	2000      	movs	r0, #0
 800265c:	f7fe fd52 	bl	8001104 <lcdSetCursor>
							lcdPrint("NON_INVERTED");
 8002660:	4831      	ldr	r0, [pc, #196]	; (8002728 <main+0xfc0>)
 8002662:	f7fe fd81 	bl	8001168 <lcdPrint>
 8002666:	e006      	b.n	8002676 <main+0xf0e>
						  }else{									//If parameter is TRUE Print inverted
							lcdSetCursor(0, 2);
 8002668:	2102      	movs	r1, #2
 800266a:	2000      	movs	r0, #0
 800266c:	f7fe fd4a 	bl	8001104 <lcdSetCursor>
							lcdPrint("INVERTED    ");
 8002670:	482e      	ldr	r0, [pc, #184]	; (800272c <main+0xfc4>)
 8002672:	f7fe fd79 	bl	8001168 <lcdPrint>
						  }
						lcd_update = FALSE;
 8002676:	4b23      	ldr	r3, [pc, #140]	; (8002704 <main+0xf9c>)
 8002678:	2200      	movs	r2, #0
 800267a:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 800267c:	f001 fa5e 	bl	8003b3c <Encoder_Read>
 8002680:	4602      	mov	r2, r0
 8002682:	4b2b      	ldr	r3, [pc, #172]	; (8002730 <main+0xfc8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4413      	add	r3, r2
 8002688:	4a29      	ldr	r2, [pc, #164]	; (8002730 <main+0xfc8>)
 800268a:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 800268c:	4b28      	ldr	r3, [pc, #160]	; (8002730 <main+0xfc8>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b21      	ldr	r3, [pc, #132]	; (8002718 <main+0xfb0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d01c      	beq.n	80026d2 <main+0xf6a>
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8002698:	4b25      	ldr	r3, [pc, #148]	; (8002730 <main+0xfc8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <main+0xfb0>)
 800269e:	6013      	str	r3, [r2, #0]
						  if (!parameter.dir_invert){					//Change the value
 80026a0:	4b20      	ldr	r3, [pc, #128]	; (8002724 <main+0xfbc>)
 80026a2:	885b      	ldrh	r3, [r3, #2]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10a      	bne.n	80026be <main+0xf56>
							lcdSetCursor(0, 2);
 80026a8:	2102      	movs	r1, #2
 80026aa:	2000      	movs	r0, #0
 80026ac:	f7fe fd2a 	bl	8001104 <lcdSetCursor>
							lcdPrint("INVERTED    ");
 80026b0:	481e      	ldr	r0, [pc, #120]	; (800272c <main+0xfc4>)
 80026b2:	f7fe fd59 	bl	8001168 <lcdPrint>
							parameter.dir_invert = TRUE;
 80026b6:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <main+0xfbc>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	805a      	strh	r2, [r3, #2]
 80026bc:	e009      	b.n	80026d2 <main+0xf6a>
						  }else{
							lcdSetCursor(0, 2);
 80026be:	2102      	movs	r1, #2
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7fe fd1f 	bl	8001104 <lcdSetCursor>
							lcdPrint("NOT_INVERTED");
 80026c6:	481b      	ldr	r0, [pc, #108]	; (8002734 <main+0xfcc>)
 80026c8:	f7fe fd4e 	bl	8001168 <lcdPrint>
							parameter.dir_invert = FALSE;
 80026cc:	4b15      	ldr	r3, [pc, #84]	; (8002724 <main+0xfbc>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	805a      	strh	r2, [r3, #2]
						  }
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 80026d2:	f001 ff21 	bl	8004518 <Encoder_Switch_Status_Read>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b01      	cmp	r3, #1
 80026da:	f040 84ef 	bne.w	80030bc <main+0x1954>
						configuration_status += 1;
 80026de:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <main+0xfac>)
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	3301      	adds	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <main+0xfac>)
 80026e8:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <main+0xf9c>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 80026f0:	f000 bce4 	b.w	80030bc <main+0x1954>
 80026f4:	20000810 	.word	0x20000810
 80026f8:	200007d2 	.word	0x200007d2
 80026fc:	200007d0 	.word	0x200007d0
 8002700:	20000008 	.word	0x20000008
 8002704:	20000846 	.word	0x20000846
 8002708:	20000828 	.word	0x20000828
 800270c:	2000082c 	.word	0x2000082c
 8002710:	20000030 	.word	0x20000030
 8002714:	200007d4 	.word	0x200007d4
 8002718:	20000004 	.word	0x20000004
 800271c:	08009c28 	.word	0x08009c28
 8002720:	08009c38 	.word	0x08009c38
 8002724:	200007d8 	.word	0x200007d8
 8002728:	08009c50 	.word	0x08009c50
 800272c:	08009c60 	.word	0x08009c60
 8002730:	20000000 	.word	0x20000000
 8002734:	08009c70 	.word	0x08009c70
 8002738:	08009c80 	.word	0x08009c80
				  case 2:
					  if (lcd_update){
 800273c:	4b96      	ldr	r3, [pc, #600]	; (8002998 <main+0x1230>)
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d029      	beq.n	8002798 <main+0x1030>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8002744:	f001 f9fa 	bl	8003b3c <Encoder_Read>
 8002748:	4602      	mov	r2, r0
 800274a:	4b94      	ldr	r3, [pc, #592]	; (800299c <main+0x1234>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4413      	add	r3, r2
 8002750:	4a92      	ldr	r2, [pc, #584]	; (800299c <main+0x1234>)
 8002752:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8002754:	f7fe fc82 	bl	800105c <lcdClear>
						  lcdSetCursor(3, 0);
 8002758:	2100      	movs	r1, #0
 800275a:	2003      	movs	r0, #3
 800275c:	f7fe fcd2 	bl	8001104 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8002760:	488f      	ldr	r0, [pc, #572]	; (80029a0 <main+0x1238>)
 8002762:	f7fe fd01 	bl	8001168 <lcdPrint>
						  lcdSetCursor(0, 1);
 8002766:	2101      	movs	r1, #1
 8002768:	2000      	movs	r0, #0
 800276a:	f7fe fccb 	bl	8001104 <lcdSetCursor>
						  lcdPrint("Motor Steps per Rev:");
 800276e:	488d      	ldr	r0, [pc, #564]	; (80029a4 <main+0x123c>)
 8002770:	f7fe fcfa 	bl	8001168 <lcdPrint>
						  LCD_Write_Number(parameter.motor_stepsrev, 0, 2, SUBFIXNO);
 8002774:	4b8c      	ldr	r3, [pc, #560]	; (80029a8 <main+0x1240>)
 8002776:	889b      	ldrh	r3, [r3, #4]
 8002778:	4618      	mov	r0, r3
 800277a:	2300      	movs	r3, #0
 800277c:	2202      	movs	r2, #2
 800277e:	2100      	movs	r1, #0
 8002780:	f001 fa1c 	bl	8003bbc <LCD_Write_Number>
						  lcdSetCursor(8, 2);
 8002784:	2102      	movs	r1, #2
 8002786:	2008      	movs	r0, #8
 8002788:	f7fe fcbc 	bl	8001104 <lcdSetCursor>
						  lcdPrint("(pulse/rev)");
 800278c:	4887      	ldr	r0, [pc, #540]	; (80029ac <main+0x1244>)
 800278e:	f7fe fceb 	bl	8001168 <lcdPrint>
						  lcd_update = FALSE;
 8002792:	4b81      	ldr	r3, [pc, #516]	; (8002998 <main+0x1230>)
 8002794:	2200      	movs	r2, #0
 8002796:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8002798:	f001 f9d0 	bl	8003b3c <Encoder_Read>
 800279c:	4602      	mov	r2, r0
 800279e:	4b84      	ldr	r3, [pc, #528]	; (80029b0 <main+0x1248>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	4a82      	ldr	r2, [pc, #520]	; (80029b0 <main+0x1248>)
 80027a6:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 80027a8:	4b81      	ldr	r3, [pc, #516]	; (80029b0 <main+0x1248>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b7b      	ldr	r3, [pc, #492]	; (800299c <main+0x1234>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d039      	beq.n	8002828 <main+0x10c0>
						  parameter.motor_stepsrev = parameter.motor_stepsrev + ( 100*(current_encoder_value - old_encoder_value) );
 80027b4:	4b7c      	ldr	r3, [pc, #496]	; (80029a8 <main+0x1240>)
 80027b6:	889a      	ldrh	r2, [r3, #4]
 80027b8:	4b7d      	ldr	r3, [pc, #500]	; (80029b0 <main+0x1248>)
 80027ba:	6819      	ldr	r1, [r3, #0]
 80027bc:	4b77      	ldr	r3, [pc, #476]	; (800299c <main+0x1234>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	1acb      	subs	r3, r1, r3
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	4619      	mov	r1, r3
 80027c6:	0089      	lsls	r1, r1, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	4619      	mov	r1, r3
 80027cc:	0088      	lsls	r0, r1, #2
 80027ce:	4619      	mov	r1, r3
 80027d0:	4603      	mov	r3, r0
 80027d2:	440b      	add	r3, r1
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	4413      	add	r3, r2
 80027da:	b29a      	uxth	r2, r3
 80027dc:	4b72      	ldr	r3, [pc, #456]	; (80029a8 <main+0x1240>)
 80027de:	809a      	strh	r2, [r3, #4]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 80027e0:	4b73      	ldr	r3, [pc, #460]	; (80029b0 <main+0x1248>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a6d      	ldr	r2, [pc, #436]	; (800299c <main+0x1234>)
 80027e6:	6013      	str	r3, [r2, #0]
						  if ( parameter.motor_stepsrev < 100 || ( parameter.motor_stepsrev >= (MAX_MOTOR_STEPREV + 20000) )){	//Limitation value of MAX_MOTOR_STEPREV
 80027e8:	4b6f      	ldr	r3, [pc, #444]	; (80029a8 <main+0x1240>)
 80027ea:	889b      	ldrh	r3, [r3, #4]
 80027ec:	2b63      	cmp	r3, #99	; 0x63
 80027ee:	d905      	bls.n	80027fc <main+0x1094>
 80027f0:	4b6d      	ldr	r3, [pc, #436]	; (80029a8 <main+0x1240>)
 80027f2:	889b      	ldrh	r3, [r3, #4]
 80027f4:	f648 02b7 	movw	r2, #34999	; 0x88b7
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d903      	bls.n	8002804 <main+0x109c>
							  parameter.motor_stepsrev = 100;
 80027fc:	4b6a      	ldr	r3, [pc, #424]	; (80029a8 <main+0x1240>)
 80027fe:	2264      	movs	r2, #100	; 0x64
 8002800:	809a      	strh	r2, [r3, #4]
 8002802:	e009      	b.n	8002818 <main+0x10b0>
						  }else if ( parameter.motor_stepsrev > MAX_MOTOR_STEPREV){
 8002804:	4b68      	ldr	r3, [pc, #416]	; (80029a8 <main+0x1240>)
 8002806:	889b      	ldrh	r3, [r3, #4]
 8002808:	f643 2298 	movw	r2, #15000	; 0x3a98
 800280c:	4293      	cmp	r3, r2
 800280e:	d903      	bls.n	8002818 <main+0x10b0>
							  parameter.motor_stepsrev = MAX_MOTOR_STEPREV;
 8002810:	4b65      	ldr	r3, [pc, #404]	; (80029a8 <main+0x1240>)
 8002812:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002816:	809a      	strh	r2, [r3, #4]
						  }
						  LCD_Write_Number(parameter.motor_stepsrev, 0, 2, SUBFIXNO);
 8002818:	4b63      	ldr	r3, [pc, #396]	; (80029a8 <main+0x1240>)
 800281a:	889b      	ldrh	r3, [r3, #4]
 800281c:	4618      	mov	r0, r3
 800281e:	2300      	movs	r3, #0
 8002820:	2202      	movs	r2, #2
 8002822:	2100      	movs	r1, #0
 8002824:	f001 f9ca 	bl	8003bbc <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8002828:	f001 fe76 	bl	8004518 <Encoder_Switch_Status_Read>
 800282c:	4603      	mov	r3, r0
 800282e:	2b01      	cmp	r3, #1
 8002830:	f040 8447 	bne.w	80030c2 <main+0x195a>
						configuration_status += 1;
 8002834:	4b5f      	ldr	r3, [pc, #380]	; (80029b4 <main+0x124c>)
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	3301      	adds	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	4b5d      	ldr	r3, [pc, #372]	; (80029b4 <main+0x124c>)
 800283e:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8002840:	4b55      	ldr	r3, [pc, #340]	; (8002998 <main+0x1230>)
 8002842:	2201      	movs	r2, #1
 8002844:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8002846:	f000 bc3c 	b.w	80030c2 <main+0x195a>
				  case 3:
					  if (lcd_update){
 800284a:	4b53      	ldr	r3, [pc, #332]	; (8002998 <main+0x1230>)
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d02a      	beq.n	80028a8 <main+0x1140>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8002852:	f001 f973 	bl	8003b3c <Encoder_Read>
 8002856:	4602      	mov	r2, r0
 8002858:	4b50      	ldr	r3, [pc, #320]	; (800299c <main+0x1234>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4413      	add	r3, r2
 800285e:	4a4f      	ldr	r2, [pc, #316]	; (800299c <main+0x1234>)
 8002860:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8002862:	f7fe fbfb 	bl	800105c <lcdClear>
						  lcdSetCursor(3, 0);
 8002866:	2100      	movs	r1, #0
 8002868:	2003      	movs	r0, #3
 800286a:	f7fe fc4b 	bl	8001104 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 800286e:	484c      	ldr	r0, [pc, #304]	; (80029a0 <main+0x1238>)
 8002870:	f7fe fc7a 	bl	8001168 <lcdPrint>
						  lcdSetCursor(0, 1);
 8002874:	2101      	movs	r1, #1
 8002876:	2000      	movs	r0, #0
 8002878:	f7fe fc44 	bl	8001104 <lcdSetCursor>
						  lcdPrint("Leadscrew Pitch:");
 800287c:	484e      	ldr	r0, [pc, #312]	; (80029b8 <main+0x1250>)
 800287e:	f7fe fc73 	bl	8001168 <lcdPrint>
						  LCD_Write_Float_Number(parameter.leadscrew_pitch,0,2);
 8002882:	4b49      	ldr	r3, [pc, #292]	; (80029a8 <main+0x1240>)
 8002884:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002888:	2102      	movs	r1, #2
 800288a:	2000      	movs	r0, #0
 800288c:	ee00 3a10 	vmov	s0, r3
 8002890:	f001 fbdc 	bl	800404c <LCD_Write_Float_Number>
						  lcdSetCursor(10, 2);
 8002894:	2102      	movs	r1, #2
 8002896:	200a      	movs	r0, #10
 8002898:	f7fe fc34 	bl	8001104 <lcdSetCursor>
						  lcdPrint("(mm/rev)");
 800289c:	4847      	ldr	r0, [pc, #284]	; (80029bc <main+0x1254>)
 800289e:	f7fe fc63 	bl	8001168 <lcdPrint>
						  lcd_update = FALSE;
 80028a2:	4b3d      	ldr	r3, [pc, #244]	; (8002998 <main+0x1230>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 80028a8:	f001 f948 	bl	8003b3c <Encoder_Read>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <main+0x1248>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4413      	add	r3, r2
 80028b4:	4a3e      	ldr	r2, [pc, #248]	; (80029b0 <main+0x1248>)
 80028b6:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 80028b8:	4b3d      	ldr	r3, [pc, #244]	; (80029b0 <main+0x1248>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4b37      	ldr	r3, [pc, #220]	; (800299c <main+0x1234>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d052      	beq.n	800296a <main+0x1202>
						  parameter.leadscrew_pitch = parameter.leadscrew_pitch + (float)( 0.01*(current_encoder_value - old_encoder_value) );
 80028c4:	4b38      	ldr	r3, [pc, #224]	; (80029a8 <main+0x1240>)
 80028c6:	f8d3 4006 	ldr.w	r4, [r3, #6]
 80028ca:	4623      	mov	r3, r4
 80028cc:	461c      	mov	r4, r3
 80028ce:	4b38      	ldr	r3, [pc, #224]	; (80029b0 <main+0x1248>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4b32      	ldr	r3, [pc, #200]	; (800299c <main+0x1234>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fd fe2b 	bl	8000534 <__aeabi_i2d>
 80028de:	a32c      	add	r3, pc, #176	; (adr r3, 8002990 <main+0x1228>)
 80028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e4:	f7fd fe90 	bl	8000608 <__aeabi_dmul>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4610      	mov	r0, r2
 80028ee:	4619      	mov	r1, r3
 80028f0:	f7fe f944 	bl	8000b7c <__aeabi_d2f>
 80028f4:	ee07 0a90 	vmov	s15, r0
 80028f8:	ee07 4a10 	vmov	s14, r4
 80028fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002900:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <main+0x1240>)
 8002902:	ee17 2a90 	vmov	r2, s15
 8002906:	f8c3 2006 	str.w	r2, [r3, #6]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 800290a:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <main+0x1248>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a23      	ldr	r2, [pc, #140]	; (800299c <main+0x1234>)
 8002910:	6013      	str	r3, [r2, #0]
						  if ( parameter.leadscrew_pitch < 0.01){						//Limitation value of Leadscrewpitch
 8002912:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <main+0x1240>)
 8002914:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002918:	4618      	mov	r0, r3
 800291a:	f7fd fe1d 	bl	8000558 <__aeabi_f2d>
 800291e:	a31c      	add	r3, pc, #112	; (adr r3, 8002990 <main+0x1228>)
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	f7fe f8e2 	bl	8000aec <__aeabi_dcmplt>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d004      	beq.n	8002938 <main+0x11d0>
							  parameter.leadscrew_pitch = 0.01;
 800292e:	4b1e      	ldr	r3, [pc, #120]	; (80029a8 <main+0x1240>)
 8002930:	4a23      	ldr	r2, [pc, #140]	; (80029c0 <main+0x1258>)
 8002932:	f8c3 2006 	str.w	r2, [r3, #6]
 8002936:	e00f      	b.n	8002958 <main+0x11f0>
						  }else if ( parameter.leadscrew_pitch > MAX_LEADSCREWPITCH){
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <main+0x1240>)
 800293a:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800293e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002942:	ee07 3a10 	vmov	s14, r3
 8002946:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800294a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294e:	dd03      	ble.n	8002958 <main+0x11f0>
							  parameter.leadscrew_pitch = MAX_LEADSCREWPITCH;
 8002950:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <main+0x1240>)
 8002952:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <main+0x125c>)
 8002954:	f8c3 2006 	str.w	r2, [r3, #6]
						  }
						  LCD_Write_Float_Number(parameter.leadscrew_pitch,0,2);
 8002958:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <main+0x1240>)
 800295a:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800295e:	2102      	movs	r1, #2
 8002960:	2000      	movs	r0, #0
 8002962:	ee00 3a10 	vmov	s0, r3
 8002966:	f001 fb71 	bl	800404c <LCD_Write_Float_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 800296a:	f001 fdd5 	bl	8004518 <Encoder_Switch_Status_Read>
 800296e:	4603      	mov	r3, r0
 8002970:	2b01      	cmp	r3, #1
 8002972:	f040 83a9 	bne.w	80030c8 <main+0x1960>
						configuration_status += 1;
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <main+0x124c>)
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	3301      	adds	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <main+0x124c>)
 8002980:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8002982:	4b05      	ldr	r3, [pc, #20]	; (8002998 <main+0x1230>)
 8002984:	2201      	movs	r2, #1
 8002986:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8002988:	e39e      	b.n	80030c8 <main+0x1960>
 800298a:	bf00      	nop
 800298c:	f3af 8000 	nop.w
 8002990:	47ae147b 	.word	0x47ae147b
 8002994:	3f847ae1 	.word	0x3f847ae1
 8002998:	20000846 	.word	0x20000846
 800299c:	20000004 	.word	0x20000004
 80029a0:	08009c28 	.word	0x08009c28
 80029a4:	08009c94 	.word	0x08009c94
 80029a8:	200007d8 	.word	0x200007d8
 80029ac:	08009cac 	.word	0x08009cac
 80029b0:	20000000 	.word	0x20000000
 80029b4:	200007d4 	.word	0x200007d4
 80029b8:	08009cb8 	.word	0x08009cb8
 80029bc:	08009ccc 	.word	0x08009ccc
 80029c0:	3c23d70a 	.word	0x3c23d70a
 80029c4:	41200000 	.word	0x41200000
				  case 4:
					  if (lcd_update){
 80029c8:	4b84      	ldr	r3, [pc, #528]	; (8002bdc <main+0x1474>)
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d029      	beq.n	8002a24 <main+0x12bc>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 80029d0:	f001 f8b4 	bl	8003b3c <Encoder_Read>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b82      	ldr	r3, [pc, #520]	; (8002be0 <main+0x1478>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4413      	add	r3, r2
 80029dc:	4a80      	ldr	r2, [pc, #512]	; (8002be0 <main+0x1478>)
 80029de:	6013      	str	r3, [r2, #0]
						  lcdClear();
 80029e0:	f7fe fb3c 	bl	800105c <lcdClear>
						  lcdSetCursor(3, 0);
 80029e4:	2100      	movs	r1, #0
 80029e6:	2003      	movs	r0, #3
 80029e8:	f7fe fb8c 	bl	8001104 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 80029ec:	487d      	ldr	r0, [pc, #500]	; (8002be4 <main+0x147c>)
 80029ee:	f7fe fbbb 	bl	8001168 <lcdPrint>
						  lcdSetCursor(0, 1);
 80029f2:	2101      	movs	r1, #1
 80029f4:	2000      	movs	r0, #0
 80029f6:	f7fe fb85 	bl	8001104 <lcdSetCursor>
						  lcdPrint("Maximum Feedrate:");
 80029fa:	487b      	ldr	r0, [pc, #492]	; (8002be8 <main+0x1480>)
 80029fc:	f7fe fbb4 	bl	8001168 <lcdPrint>
						  LCD_Write_Number(parameter.max_feedrate, 0, 2, SUBFIXNO);
 8002a00:	4b7a      	ldr	r3, [pc, #488]	; (8002bec <main+0x1484>)
 8002a02:	895b      	ldrh	r3, [r3, #10]
 8002a04:	4618      	mov	r0, r3
 8002a06:	2300      	movs	r3, #0
 8002a08:	2202      	movs	r2, #2
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	f001 f8d6 	bl	8003bbc <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 8002a10:	2102      	movs	r1, #2
 8002a12:	200a      	movs	r0, #10
 8002a14:	f7fe fb76 	bl	8001104 <lcdSetCursor>
						  lcdPrint("(mm/min)");
 8002a18:	4875      	ldr	r0, [pc, #468]	; (8002bf0 <main+0x1488>)
 8002a1a:	f7fe fba5 	bl	8001168 <lcdPrint>
						  lcd_update = FALSE;
 8002a1e:	4b6f      	ldr	r3, [pc, #444]	; (8002bdc <main+0x1474>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8002a24:	f001 f88a 	bl	8003b3c <Encoder_Read>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	4b72      	ldr	r3, [pc, #456]	; (8002bf4 <main+0x148c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4413      	add	r3, r2
 8002a30:	4a70      	ldr	r2, [pc, #448]	; (8002bf4 <main+0x148c>)
 8002a32:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8002a34:	4b6f      	ldr	r3, [pc, #444]	; (8002bf4 <main+0x148c>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b69      	ldr	r3, [pc, #420]	; (8002be0 <main+0x1478>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d038      	beq.n	8002ab2 <main+0x134a>
						  parameter.max_feedrate = parameter.max_feedrate + ( 50*(current_encoder_value - old_encoder_value) );
 8002a40:	4b6a      	ldr	r3, [pc, #424]	; (8002bec <main+0x1484>)
 8002a42:	895a      	ldrh	r2, [r3, #10]
 8002a44:	4b6b      	ldr	r3, [pc, #428]	; (8002bf4 <main+0x148c>)
 8002a46:	6819      	ldr	r1, [r3, #0]
 8002a48:	4b65      	ldr	r3, [pc, #404]	; (8002be0 <main+0x1478>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	1acb      	subs	r3, r1, r3
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	4619      	mov	r1, r3
 8002a52:	0089      	lsls	r1, r1, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	4619      	mov	r1, r3
 8002a58:	0088      	lsls	r0, r1, #2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	440b      	add	r3, r1
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	4b60      	ldr	r3, [pc, #384]	; (8002bec <main+0x1484>)
 8002a6a:	815a      	strh	r2, [r3, #10]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8002a6c:	4b61      	ldr	r3, [pc, #388]	; (8002bf4 <main+0x148c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a5b      	ldr	r2, [pc, #364]	; (8002be0 <main+0x1478>)
 8002a72:	6013      	str	r3, [r2, #0]
						  if ( parameter.max_feedrate < 100 || ( parameter.max_feedrate >= (MAX_LIMIT_FEEDRATE + 20000) ) ){	//Limitation value of max_feedrate
 8002a74:	4b5d      	ldr	r3, [pc, #372]	; (8002bec <main+0x1484>)
 8002a76:	895b      	ldrh	r3, [r3, #10]
 8002a78:	2b63      	cmp	r3, #99	; 0x63
 8002a7a:	d905      	bls.n	8002a88 <main+0x1320>
 8002a7c:	4b5b      	ldr	r3, [pc, #364]	; (8002bec <main+0x1484>)
 8002a7e:	895b      	ldrh	r3, [r3, #10]
 8002a80:	f245 02db 	movw	r2, #20699	; 0x50db
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d903      	bls.n	8002a90 <main+0x1328>
							  parameter.max_feedrate = 100;
 8002a88:	4b58      	ldr	r3, [pc, #352]	; (8002bec <main+0x1484>)
 8002a8a:	2264      	movs	r2, #100	; 0x64
 8002a8c:	815a      	strh	r2, [r3, #10]
 8002a8e:	e008      	b.n	8002aa2 <main+0x133a>
						  }else if ( parameter.max_feedrate > MAX_LIMIT_FEEDRATE){
 8002a90:	4b56      	ldr	r3, [pc, #344]	; (8002bec <main+0x1484>)
 8002a92:	895b      	ldrh	r3, [r3, #10]
 8002a94:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002a98:	d903      	bls.n	8002aa2 <main+0x133a>
							  parameter.max_feedrate = MAX_LIMIT_FEEDRATE;
 8002a9a:	4b54      	ldr	r3, [pc, #336]	; (8002bec <main+0x1484>)
 8002a9c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002aa0:	815a      	strh	r2, [r3, #10]
						  }
						  LCD_Write_Number(parameter.max_feedrate, 0, 2, SUBFIXNO);
 8002aa2:	4b52      	ldr	r3, [pc, #328]	; (8002bec <main+0x1484>)
 8002aa4:	895b      	ldrh	r3, [r3, #10]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2202      	movs	r2, #2
 8002aac:	2100      	movs	r1, #0
 8002aae:	f001 f885 	bl	8003bbc <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8002ab2:	f001 fd31 	bl	8004518 <Encoder_Switch_Status_Read>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	f040 8308 	bne.w	80030ce <main+0x1966>
						configuration_status += 1;
 8002abe:	4b4e      	ldr	r3, [pc, #312]	; (8002bf8 <main+0x1490>)
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	4b4c      	ldr	r3, [pc, #304]	; (8002bf8 <main+0x1490>)
 8002ac8:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8002aca:	4b44      	ldr	r3, [pc, #272]	; (8002bdc <main+0x1474>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8002ad0:	e2fd      	b.n	80030ce <main+0x1966>
				  case 5:
					  if (lcd_update){
 8002ad2:	4b42      	ldr	r3, [pc, #264]	; (8002bdc <main+0x1474>)
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d029      	beq.n	8002b2e <main+0x13c6>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8002ada:	f001 f82f 	bl	8003b3c <Encoder_Read>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	4b3f      	ldr	r3, [pc, #252]	; (8002be0 <main+0x1478>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	4a3e      	ldr	r2, [pc, #248]	; (8002be0 <main+0x1478>)
 8002ae8:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8002aea:	f7fe fab7 	bl	800105c <lcdClear>
						  lcdSetCursor(3, 0);
 8002aee:	2100      	movs	r1, #0
 8002af0:	2003      	movs	r0, #3
 8002af2:	f7fe fb07 	bl	8001104 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8002af6:	483b      	ldr	r0, [pc, #236]	; (8002be4 <main+0x147c>)
 8002af8:	f7fe fb36 	bl	8001168 <lcdPrint>
						  lcdSetCursor(0, 1);
 8002afc:	2101      	movs	r1, #1
 8002afe:	2000      	movs	r0, #0
 8002b00:	f7fe fb00 	bl	8001104 <lcdSetCursor>
						  lcdPrint("Fast Mov Feedrate:");
 8002b04:	483d      	ldr	r0, [pc, #244]	; (8002bfc <main+0x1494>)
 8002b06:	f7fe fb2f 	bl	8001168 <lcdPrint>
						  LCD_Write_Number(parameter.fast_movement_feedrate, 0, 2, SUBFIXNO);
 8002b0a:	4b38      	ldr	r3, [pc, #224]	; (8002bec <main+0x1484>)
 8002b0c:	899b      	ldrh	r3, [r3, #12]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	2300      	movs	r3, #0
 8002b12:	2202      	movs	r2, #2
 8002b14:	2100      	movs	r1, #0
 8002b16:	f001 f851 	bl	8003bbc <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	200a      	movs	r0, #10
 8002b1e:	f7fe faf1 	bl	8001104 <lcdSetCursor>
						  lcdPrint("(mm/min)");
 8002b22:	4833      	ldr	r0, [pc, #204]	; (8002bf0 <main+0x1488>)
 8002b24:	f7fe fb20 	bl	8001168 <lcdPrint>
						  lcd_update = FALSE;
 8002b28:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <main+0x1474>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8002b2e:	f001 f805 	bl	8003b3c <Encoder_Read>
 8002b32:	4602      	mov	r2, r0
 8002b34:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <main+0x148c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4413      	add	r3, r2
 8002b3a:	4a2e      	ldr	r2, [pc, #184]	; (8002bf4 <main+0x148c>)
 8002b3c:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8002b3e:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <main+0x148c>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4b27      	ldr	r3, [pc, #156]	; (8002be0 <main+0x1478>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d038      	beq.n	8002bbc <main+0x1454>
						  parameter.fast_movement_feedrate = parameter.fast_movement_feedrate + ( 50*(current_encoder_value - old_encoder_value) );
 8002b4a:	4b28      	ldr	r3, [pc, #160]	; (8002bec <main+0x1484>)
 8002b4c:	899a      	ldrh	r2, [r3, #12]
 8002b4e:	4b29      	ldr	r3, [pc, #164]	; (8002bf4 <main+0x148c>)
 8002b50:	6819      	ldr	r1, [r3, #0]
 8002b52:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <main+0x1478>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	1acb      	subs	r3, r1, r3
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	0089      	lsls	r1, r1, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	4619      	mov	r1, r3
 8002b62:	0088      	lsls	r0, r1, #2
 8002b64:	4619      	mov	r1, r3
 8002b66:	4603      	mov	r3, r0
 8002b68:	440b      	add	r3, r1
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	4b1e      	ldr	r3, [pc, #120]	; (8002bec <main+0x1484>)
 8002b74:	819a      	strh	r2, [r3, #12]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8002b76:	4b1f      	ldr	r3, [pc, #124]	; (8002bf4 <main+0x148c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a19      	ldr	r2, [pc, #100]	; (8002be0 <main+0x1478>)
 8002b7c:	6013      	str	r3, [r2, #0]
						  if ( parameter.fast_movement_feedrate < 50 || ( parameter.fast_movement_feedrate >= (MAX_FAST_MOVEMENT_FEEDRATE + 20000) )){	//Limitation value of fastmovement_feedrate
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <main+0x1484>)
 8002b80:	899b      	ldrh	r3, [r3, #12]
 8002b82:	2b31      	cmp	r3, #49	; 0x31
 8002b84:	d905      	bls.n	8002b92 <main+0x142a>
 8002b86:	4b19      	ldr	r3, [pc, #100]	; (8002bec <main+0x1484>)
 8002b88:	899b      	ldrh	r3, [r3, #12]
 8002b8a:	f245 02db 	movw	r2, #20699	; 0x50db
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d903      	bls.n	8002b9a <main+0x1432>
							  parameter.fast_movement_feedrate = 50;
 8002b92:	4b16      	ldr	r3, [pc, #88]	; (8002bec <main+0x1484>)
 8002b94:	2232      	movs	r2, #50	; 0x32
 8002b96:	819a      	strh	r2, [r3, #12]
 8002b98:	e008      	b.n	8002bac <main+0x1444>
						  }else if ( parameter.fast_movement_feedrate > MAX_FAST_MOVEMENT_FEEDRATE){
 8002b9a:	4b14      	ldr	r3, [pc, #80]	; (8002bec <main+0x1484>)
 8002b9c:	899b      	ldrh	r3, [r3, #12]
 8002b9e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002ba2:	d903      	bls.n	8002bac <main+0x1444>
							  parameter.fast_movement_feedrate = MAX_FAST_MOVEMENT_FEEDRATE;
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <main+0x1484>)
 8002ba6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002baa:	819a      	strh	r2, [r3, #12]
						  }
						  LCD_Write_Number(parameter.fast_movement_feedrate, 0, 2, SUBFIXNO);
 8002bac:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <main+0x1484>)
 8002bae:	899b      	ldrh	r3, [r3, #12]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	f001 f800 	bl	8003bbc <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8002bbc:	f001 fcac 	bl	8004518 <Encoder_Switch_Status_Read>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	f040 8286 	bne.w	80030d4 <main+0x196c>
						configuration_status += 1;
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <main+0x1490>)
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <main+0x1490>)
 8002bd2:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8002bd4:	4b01      	ldr	r3, [pc, #4]	; (8002bdc <main+0x1474>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8002bda:	e27b      	b.n	80030d4 <main+0x196c>
 8002bdc:	20000846 	.word	0x20000846
 8002be0:	20000004 	.word	0x20000004
 8002be4:	08009c28 	.word	0x08009c28
 8002be8:	08009cd8 	.word	0x08009cd8
 8002bec:	200007d8 	.word	0x200007d8
 8002bf0:	08009cec 	.word	0x08009cec
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	200007d4 	.word	0x200007d4
 8002bfc:	08009cf8 	.word	0x08009cf8
				  case 6:
					  if (lcd_update){
 8002c00:	4b85      	ldr	r3, [pc, #532]	; (8002e18 <main+0x16b0>)
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d029      	beq.n	8002c5c <main+0x14f4>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8002c08:	f000 ff98 	bl	8003b3c <Encoder_Read>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	4b83      	ldr	r3, [pc, #524]	; (8002e1c <main+0x16b4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4413      	add	r3, r2
 8002c14:	4a81      	ldr	r2, [pc, #516]	; (8002e1c <main+0x16b4>)
 8002c16:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8002c18:	f7fe fa20 	bl	800105c <lcdClear>
						  lcdSetCursor(3, 0);
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	2003      	movs	r0, #3
 8002c20:	f7fe fa70 	bl	8001104 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8002c24:	487e      	ldr	r0, [pc, #504]	; (8002e20 <main+0x16b8>)
 8002c26:	f7fe fa9f 	bl	8001168 <lcdPrint>
						  lcdSetCursor(0, 1);
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7fe fa69 	bl	8001104 <lcdSetCursor>
						  lcdPrint("Initial Feedrate:");
 8002c32:	487c      	ldr	r0, [pc, #496]	; (8002e24 <main+0x16bc>)
 8002c34:	f7fe fa98 	bl	8001168 <lcdPrint>
						  LCD_Write_Number(parameter.initial_feedrate, 0, 2, SUBFIXNO);
 8002c38:	4b7b      	ldr	r3, [pc, #492]	; (8002e28 <main+0x16c0>)
 8002c3a:	8a5b      	ldrh	r3, [r3, #18]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	2300      	movs	r3, #0
 8002c40:	2202      	movs	r2, #2
 8002c42:	2100      	movs	r1, #0
 8002c44:	f000 ffba 	bl	8003bbc <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 8002c48:	2102      	movs	r1, #2
 8002c4a:	200a      	movs	r0, #10
 8002c4c:	f7fe fa5a 	bl	8001104 <lcdSetCursor>
						  lcdPrint("(mm/min)");
 8002c50:	4876      	ldr	r0, [pc, #472]	; (8002e2c <main+0x16c4>)
 8002c52:	f7fe fa89 	bl	8001168 <lcdPrint>
						  lcd_update = FALSE;
 8002c56:	4b70      	ldr	r3, [pc, #448]	; (8002e18 <main+0x16b0>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8002c5c:	f000 ff6e 	bl	8003b3c <Encoder_Read>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4b73      	ldr	r3, [pc, #460]	; (8002e30 <main+0x16c8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4413      	add	r3, r2
 8002c68:	4a71      	ldr	r2, [pc, #452]	; (8002e30 <main+0x16c8>)
 8002c6a:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8002c6c:	4b70      	ldr	r3, [pc, #448]	; (8002e30 <main+0x16c8>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b6a      	ldr	r3, [pc, #424]	; (8002e1c <main+0x16b4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d037      	beq.n	8002ce8 <main+0x1580>
						  parameter.initial_feedrate = parameter.initial_feedrate + ( 10*(current_encoder_value - old_encoder_value) );
 8002c78:	4b6b      	ldr	r3, [pc, #428]	; (8002e28 <main+0x16c0>)
 8002c7a:	8a5a      	ldrh	r2, [r3, #18]
 8002c7c:	4b6c      	ldr	r3, [pc, #432]	; (8002e30 <main+0x16c8>)
 8002c7e:	6819      	ldr	r1, [r3, #0]
 8002c80:	4b66      	ldr	r3, [pc, #408]	; (8002e1c <main+0x16b4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	1acb      	subs	r3, r1, r3
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	4619      	mov	r1, r3
 8002c8a:	0089      	lsls	r1, r1, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	4b64      	ldr	r3, [pc, #400]	; (8002e28 <main+0x16c0>)
 8002c98:	825a      	strh	r2, [r3, #18]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8002c9a:	4b65      	ldr	r3, [pc, #404]	; (8002e30 <main+0x16c8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a5f      	ldr	r2, [pc, #380]	; (8002e1c <main+0x16b4>)
 8002ca0:	6013      	str	r3, [r2, #0]
						  if ( parameter.initial_feedrate < 10 || ( parameter.initial_feedrate >= (parameter.max_feedrate + 20000) )){	//Limitation value of initial_feedrate
 8002ca2:	4b61      	ldr	r3, [pc, #388]	; (8002e28 <main+0x16c0>)
 8002ca4:	8a5b      	ldrh	r3, [r3, #18]
 8002ca6:	2b09      	cmp	r3, #9
 8002ca8:	d908      	bls.n	8002cbc <main+0x1554>
 8002caa:	4b5f      	ldr	r3, [pc, #380]	; (8002e28 <main+0x16c0>)
 8002cac:	895b      	ldrh	r3, [r3, #10]
 8002cae:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8002cb2:	331f      	adds	r3, #31
 8002cb4:	4a5c      	ldr	r2, [pc, #368]	; (8002e28 <main+0x16c0>)
 8002cb6:	8a52      	ldrh	r2, [r2, #18]
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	da03      	bge.n	8002cc4 <main+0x155c>
							  parameter.initial_feedrate = 10;
 8002cbc:	4b5a      	ldr	r3, [pc, #360]	; (8002e28 <main+0x16c0>)
 8002cbe:	220a      	movs	r2, #10
 8002cc0:	825a      	strh	r2, [r3, #18]
 8002cc2:	e009      	b.n	8002cd8 <main+0x1570>
						  }else if ( parameter.initial_feedrate > parameter.max_feedrate){
 8002cc4:	4b58      	ldr	r3, [pc, #352]	; (8002e28 <main+0x16c0>)
 8002cc6:	8a5a      	ldrh	r2, [r3, #18]
 8002cc8:	4b57      	ldr	r3, [pc, #348]	; (8002e28 <main+0x16c0>)
 8002cca:	895b      	ldrh	r3, [r3, #10]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d903      	bls.n	8002cd8 <main+0x1570>
							  parameter.initial_feedrate = parameter.max_feedrate;
 8002cd0:	4b55      	ldr	r3, [pc, #340]	; (8002e28 <main+0x16c0>)
 8002cd2:	895a      	ldrh	r2, [r3, #10]
 8002cd4:	4b54      	ldr	r3, [pc, #336]	; (8002e28 <main+0x16c0>)
 8002cd6:	825a      	strh	r2, [r3, #18]
						  }
						  LCD_Write_Number(parameter.initial_feedrate, 0, 2, SUBFIXNO);
 8002cd8:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <main+0x16c0>)
 8002cda:	8a5b      	ldrh	r3, [r3, #18]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	f000 ff6a 	bl	8003bbc <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8002ce8:	f001 fc16 	bl	8004518 <Encoder_Switch_Status_Read>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	f040 81f3 	bne.w	80030da <main+0x1972>
						configuration_status += 1;
 8002cf4:	4b4f      	ldr	r3, [pc, #316]	; (8002e34 <main+0x16cc>)
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	4b4d      	ldr	r3, [pc, #308]	; (8002e34 <main+0x16cc>)
 8002cfe:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8002d00:	4b45      	ldr	r3, [pc, #276]	; (8002e18 <main+0x16b0>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8002d06:	e1e8      	b.n	80030da <main+0x1972>
				  case 7:
					  if (lcd_update){
 8002d08:	4b43      	ldr	r3, [pc, #268]	; (8002e18 <main+0x16b0>)
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d029      	beq.n	8002d64 <main+0x15fc>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8002d10:	f000 ff14 	bl	8003b3c <Encoder_Read>
 8002d14:	4602      	mov	r2, r0
 8002d16:	4b41      	ldr	r3, [pc, #260]	; (8002e1c <main+0x16b4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	4a3f      	ldr	r2, [pc, #252]	; (8002e1c <main+0x16b4>)
 8002d1e:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8002d20:	f7fe f99c 	bl	800105c <lcdClear>
						  lcdSetCursor(3, 0);
 8002d24:	2100      	movs	r1, #0
 8002d26:	2003      	movs	r0, #3
 8002d28:	f7fe f9ec 	bl	8001104 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8002d2c:	483c      	ldr	r0, [pc, #240]	; (8002e20 <main+0x16b8>)
 8002d2e:	f7fe fa1b 	bl	8001168 <lcdPrint>
						  lcdSetCursor(0, 1);
 8002d32:	2101      	movs	r1, #1
 8002d34:	2000      	movs	r0, #0
 8002d36:	f7fe f9e5 	bl	8001104 <lcdSetCursor>
						  lcdPrint("Acc Time:");
 8002d3a:	483f      	ldr	r0, [pc, #252]	; (8002e38 <main+0x16d0>)
 8002d3c:	f7fe fa14 	bl	8001168 <lcdPrint>
						  LCD_Write_Number(parameter.acc_time, 0, 2, SUBFIXNO);
 8002d40:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <main+0x16c0>)
 8002d42:	89db      	ldrh	r3, [r3, #14]
 8002d44:	4618      	mov	r0, r3
 8002d46:	2300      	movs	r3, #0
 8002d48:	2202      	movs	r2, #2
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	f000 ff36 	bl	8003bbc <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 8002d50:	2102      	movs	r1, #2
 8002d52:	200a      	movs	r0, #10
 8002d54:	f7fe f9d6 	bl	8001104 <lcdSetCursor>
						  lcdPrint("(ms)");
 8002d58:	4838      	ldr	r0, [pc, #224]	; (8002e3c <main+0x16d4>)
 8002d5a:	f7fe fa05 	bl	8001168 <lcdPrint>
						  lcd_update = FALSE;
 8002d5e:	4b2e      	ldr	r3, [pc, #184]	; (8002e18 <main+0x16b0>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8002d64:	f000 feea 	bl	8003b3c <Encoder_Read>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b31      	ldr	r3, [pc, #196]	; (8002e30 <main+0x16c8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4413      	add	r3, r2
 8002d70:	4a2f      	ldr	r2, [pc, #188]	; (8002e30 <main+0x16c8>)
 8002d72:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8002d74:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <main+0x16c8>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b28      	ldr	r3, [pc, #160]	; (8002e1c <main+0x16b4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d03b      	beq.n	8002df8 <main+0x1690>
						  parameter.acc_time = parameter.acc_time + ( 100*(current_encoder_value - old_encoder_value) );
 8002d80:	4b29      	ldr	r3, [pc, #164]	; (8002e28 <main+0x16c0>)
 8002d82:	89da      	ldrh	r2, [r3, #14]
 8002d84:	4b2a      	ldr	r3, [pc, #168]	; (8002e30 <main+0x16c8>)
 8002d86:	6819      	ldr	r1, [r3, #0]
 8002d88:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <main+0x16b4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	1acb      	subs	r3, r1, r3
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	4619      	mov	r1, r3
 8002d92:	0089      	lsls	r1, r1, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	4619      	mov	r1, r3
 8002d98:	0088      	lsls	r0, r1, #2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	440b      	add	r3, r1
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	4b1f      	ldr	r3, [pc, #124]	; (8002e28 <main+0x16c0>)
 8002daa:	81da      	strh	r2, [r3, #14]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8002dac:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <main+0x16c8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a1a      	ldr	r2, [pc, #104]	; (8002e1c <main+0x16b4>)
 8002db2:	6013      	str	r3, [r2, #0]
						  if ( ( parameter.acc_time < MIN_ACCELERATION_TIME ) || ( parameter.acc_time >= (MAX_ACCELERATION_TIME + 20000) )){	//Limitation value of MIN_ACCELERATION_TIME
 8002db4:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <main+0x16c0>)
 8002db6:	89db      	ldrh	r3, [r3, #14]
 8002db8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dbc:	d305      	bcc.n	8002dca <main+0x1662>
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <main+0x16c0>)
 8002dc0:	89db      	ldrh	r3, [r3, #14]
 8002dc2:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d904      	bls.n	8002dd4 <main+0x166c>
							  parameter.acc_time = MIN_ACCELERATION_TIME;
 8002dca:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <main+0x16c0>)
 8002dcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dd0:	81da      	strh	r2, [r3, #14]
 8002dd2:	e009      	b.n	8002de8 <main+0x1680>
						  }else if ( parameter.acc_time > MAX_ACCELERATION_TIME){
 8002dd4:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <main+0x16c0>)
 8002dd6:	89db      	ldrh	r3, [r3, #14]
 8002dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d903      	bls.n	8002de8 <main+0x1680>
							  parameter.acc_time = MAX_ACCELERATION_TIME;
 8002de0:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <main+0x16c0>)
 8002de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de6:	81da      	strh	r2, [r3, #14]
						  }
						  LCD_Write_Number(parameter.acc_time, 0, 2, SUBFIXNO);
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <main+0x16c0>)
 8002dea:	89db      	ldrh	r3, [r3, #14]
 8002dec:	4618      	mov	r0, r3
 8002dee:	2300      	movs	r3, #0
 8002df0:	2202      	movs	r2, #2
 8002df2:	2100      	movs	r1, #0
 8002df4:	f000 fee2 	bl	8003bbc <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8002df8:	f001 fb8e 	bl	8004518 <Encoder_Switch_Status_Read>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	f040 816e 	bne.w	80030e0 <main+0x1978>
						configuration_status += 1;
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <main+0x16cc>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <main+0x16cc>)
 8002e0e:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8002e10:	4b01      	ldr	r3, [pc, #4]	; (8002e18 <main+0x16b0>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8002e16:	e163      	b.n	80030e0 <main+0x1978>
 8002e18:	20000846 	.word	0x20000846
 8002e1c:	20000004 	.word	0x20000004
 8002e20:	08009c28 	.word	0x08009c28
 8002e24:	08009d0c 	.word	0x08009d0c
 8002e28:	200007d8 	.word	0x200007d8
 8002e2c:	08009cec 	.word	0x08009cec
 8002e30:	20000000 	.word	0x20000000
 8002e34:	200007d4 	.word	0x200007d4
 8002e38:	08009d20 	.word	0x08009d20
 8002e3c:	08009d2c 	.word	0x08009d2c
				  case 8:
					  if (lcd_update){
 8002e40:	4bac      	ldr	r3, [pc, #688]	; (80030f4 <main+0x198c>)
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d029      	beq.n	8002e9c <main+0x1734>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8002e48:	f000 fe78 	bl	8003b3c <Encoder_Read>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	4baa      	ldr	r3, [pc, #680]	; (80030f8 <main+0x1990>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4413      	add	r3, r2
 8002e54:	4aa8      	ldr	r2, [pc, #672]	; (80030f8 <main+0x1990>)
 8002e56:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8002e58:	f7fe f900 	bl	800105c <lcdClear>
						  lcdSetCursor(3, 0);
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	2003      	movs	r0, #3
 8002e60:	f7fe f950 	bl	8001104 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8002e64:	48a5      	ldr	r0, [pc, #660]	; (80030fc <main+0x1994>)
 8002e66:	f7fe f97f 	bl	8001168 <lcdPrint>
						  lcdSetCursor(0, 1);
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f7fe f949 	bl	8001104 <lcdSetCursor>
						  lcdPrint("Acc Update Ratio:");
 8002e72:	48a3      	ldr	r0, [pc, #652]	; (8003100 <main+0x1998>)
 8002e74:	f7fe f978 	bl	8001168 <lcdPrint>
						  LCD_Write_Number(parameter.acc_update_ratio, 0, 2, SUBFIXNO);
 8002e78:	4ba2      	ldr	r3, [pc, #648]	; (8003104 <main+0x199c>)
 8002e7a:	8a1b      	ldrh	r3, [r3, #16]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2202      	movs	r2, #2
 8002e82:	2100      	movs	r1, #0
 8002e84:	f000 fe9a 	bl	8003bbc <LCD_Write_Number>
						  lcdSetCursor(10, 2);
 8002e88:	2102      	movs	r1, #2
 8002e8a:	200a      	movs	r0, #10
 8002e8c:	f7fe f93a 	bl	8001104 <lcdSetCursor>
						  lcdPrint("(ms)");
 8002e90:	489d      	ldr	r0, [pc, #628]	; (8003108 <main+0x19a0>)
 8002e92:	f7fe f969 	bl	8001168 <lcdPrint>
						  lcd_update = FALSE;
 8002e96:	4b97      	ldr	r3, [pc, #604]	; (80030f4 <main+0x198c>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8002e9c:	f000 fe4e 	bl	8003b3c <Encoder_Read>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b9a      	ldr	r3, [pc, #616]	; (800310c <main+0x19a4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	4a98      	ldr	r2, [pc, #608]	; (800310c <main+0x19a4>)
 8002eaa:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8002eac:	4b97      	ldr	r3, [pc, #604]	; (800310c <main+0x19a4>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b91      	ldr	r3, [pc, #580]	; (80030f8 <main+0x1990>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d033      	beq.n	8002f20 <main+0x17b8>
						  parameter.acc_update_ratio = parameter.acc_update_ratio + ( 10*(current_encoder_value - old_encoder_value) );
 8002eb8:	4b92      	ldr	r3, [pc, #584]	; (8003104 <main+0x199c>)
 8002eba:	8a1a      	ldrh	r2, [r3, #16]
 8002ebc:	4b93      	ldr	r3, [pc, #588]	; (800310c <main+0x19a4>)
 8002ebe:	6819      	ldr	r1, [r3, #0]
 8002ec0:	4b8d      	ldr	r3, [pc, #564]	; (80030f8 <main+0x1990>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	1acb      	subs	r3, r1, r3
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	4619      	mov	r1, r3
 8002eca:	0089      	lsls	r1, r1, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	4b8b      	ldr	r3, [pc, #556]	; (8003104 <main+0x199c>)
 8002ed8:	821a      	strh	r2, [r3, #16]
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8002eda:	4b8c      	ldr	r3, [pc, #560]	; (800310c <main+0x19a4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a86      	ldr	r2, [pc, #536]	; (80030f8 <main+0x1990>)
 8002ee0:	6013      	str	r3, [r2, #0]
						  if ( ( parameter.acc_update_ratio < MIN_ACC_UPDATE_RATIO ) || ( parameter.acc_update_ratio >= (MAX_ACC_UPDATE_RATIO + 20000) )){	//Limitation value of MAX_ACC_UPDATE_RATIO
 8002ee2:	4b88      	ldr	r3, [pc, #544]	; (8003104 <main+0x199c>)
 8002ee4:	8a1b      	ldrh	r3, [r3, #16]
 8002ee6:	2b13      	cmp	r3, #19
 8002ee8:	d905      	bls.n	8002ef6 <main+0x178e>
 8002eea:	4b86      	ldr	r3, [pc, #536]	; (8003104 <main+0x199c>)
 8002eec:	8a1b      	ldrh	r3, [r3, #16]
 8002eee:	f644 724b 	movw	r2, #20299	; 0x4f4b
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d903      	bls.n	8002efe <main+0x1796>
							  parameter.acc_update_ratio = MIN_ACC_UPDATE_RATIO;
 8002ef6:	4b83      	ldr	r3, [pc, #524]	; (8003104 <main+0x199c>)
 8002ef8:	2214      	movs	r2, #20
 8002efa:	821a      	strh	r2, [r3, #16]
 8002efc:	e008      	b.n	8002f10 <main+0x17a8>
						  }else if ( parameter.acc_update_ratio > MAX_ACC_UPDATE_RATIO){
 8002efe:	4b81      	ldr	r3, [pc, #516]	; (8003104 <main+0x199c>)
 8002f00:	8a1b      	ldrh	r3, [r3, #16]
 8002f02:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002f06:	d903      	bls.n	8002f10 <main+0x17a8>
							  parameter.acc_update_ratio = MAX_ACC_UPDATE_RATIO;
 8002f08:	4b7e      	ldr	r3, [pc, #504]	; (8003104 <main+0x199c>)
 8002f0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f0e:	821a      	strh	r2, [r3, #16]
						  }
						  LCD_Write_Number(parameter.acc_update_ratio, 0, 2, SUBFIXNO);
 8002f10:	4b7c      	ldr	r3, [pc, #496]	; (8003104 <main+0x199c>)
 8002f12:	8a1b      	ldrh	r3, [r3, #16]
 8002f14:	4618      	mov	r0, r3
 8002f16:	2300      	movs	r3, #0
 8002f18:	2202      	movs	r2, #2
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	f000 fe4e 	bl	8003bbc <LCD_Write_Number>
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8002f20:	f001 fafa 	bl	8004518 <Encoder_Switch_Status_Read>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	f040 80dd 	bne.w	80030e6 <main+0x197e>
						configuration_status += 1;
 8002f2c:	4b78      	ldr	r3, [pc, #480]	; (8003110 <main+0x19a8>)
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	3301      	adds	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	4b76      	ldr	r3, [pc, #472]	; (8003110 <main+0x19a8>)
 8002f36:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8002f38:	4b6e      	ldr	r3, [pc, #440]	; (80030f4 <main+0x198c>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8002f3e:	e0d2      	b.n	80030e6 <main+0x197e>
				  case 9:
					  if (lcd_update){
 8002f40:	4b6c      	ldr	r3, [pc, #432]	; (80030f4 <main+0x198c>)
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d02d      	beq.n	8002fa4 <main+0x183c>
						  old_encoder_value += Encoder_Read();	//Update Encoder Value
 8002f48:	f000 fdf8 	bl	8003b3c <Encoder_Read>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b6a      	ldr	r3, [pc, #424]	; (80030f8 <main+0x1990>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4413      	add	r3, r2
 8002f54:	4a68      	ldr	r2, [pc, #416]	; (80030f8 <main+0x1990>)
 8002f56:	6013      	str	r3, [r2, #0]
						  lcdClear();
 8002f58:	f7fe f880 	bl	800105c <lcdClear>
						  lcdSetCursor(3, 0);
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	2003      	movs	r0, #3
 8002f60:	f7fe f8d0 	bl	8001104 <lcdSetCursor>
						  lcdPrint("CONFIGURATION");
 8002f64:	4865      	ldr	r0, [pc, #404]	; (80030fc <main+0x1994>)
 8002f66:	f7fe f8ff 	bl	8001168 <lcdPrint>
						  lcdSetCursor(0, 1);
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	f7fe f8c9 	bl	8001104 <lcdSetCursor>
						  lcdPrint("Save Configuration");
 8002f72:	4868      	ldr	r0, [pc, #416]	; (8003114 <main+0x19ac>)
 8002f74:	f7fe f8f8 	bl	8001168 <lcdPrint>
						  if ( save_bool == FALSE){		//If parameter is FALSE Print exit without save
 8002f78:	4b67      	ldr	r3, [pc, #412]	; (8003118 <main+0x19b0>)
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d107      	bne.n	8002f90 <main+0x1828>
							lcdSetCursor(0, 2);
 8002f80:	2102      	movs	r1, #2
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7fe f8be 	bl	8001104 <lcdSetCursor>
							lcdPrint("EXIT WITHOUT SAVE");
 8002f88:	4864      	ldr	r0, [pc, #400]	; (800311c <main+0x19b4>)
 8002f8a:	f7fe f8ed 	bl	8001168 <lcdPrint>
 8002f8e:	e006      	b.n	8002f9e <main+0x1836>
						  }else{									//If parameter is TRUE Print Save Parameters
							lcdSetCursor(0, 2);
 8002f90:	2102      	movs	r1, #2
 8002f92:	2000      	movs	r0, #0
 8002f94:	f7fe f8b6 	bl	8001104 <lcdSetCursor>
							lcdPrint("SAVE PARAMETERS  ");
 8002f98:	4861      	ldr	r0, [pc, #388]	; (8003120 <main+0x19b8>)
 8002f9a:	f7fe f8e5 	bl	8001168 <lcdPrint>
						  }
						  lcd_update = FALSE;
 8002f9e:	4b55      	ldr	r3, [pc, #340]	; (80030f4 <main+0x198c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	801a      	strh	r2, [r3, #0]
					  }
					  current_encoder_value += Encoder_Read();		//Check if encoder changed
 8002fa4:	f000 fdca 	bl	8003b3c <Encoder_Read>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	4b58      	ldr	r3, [pc, #352]	; (800310c <main+0x19a4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4413      	add	r3, r2
 8002fb0:	4a56      	ldr	r2, [pc, #344]	; (800310c <main+0x19a4>)
 8002fb2:	6013      	str	r3, [r2, #0]
					  if ( current_encoder_value != old_encoder_value){	//If changed, change the value
 8002fb4:	4b55      	ldr	r3, [pc, #340]	; (800310c <main+0x19a4>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	4b4f      	ldr	r3, [pc, #316]	; (80030f8 <main+0x1990>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d01c      	beq.n	8002ffa <main+0x1892>
						  old_encoder_value = current_encoder_value;	//Update Encoder variable
 8002fc0:	4b52      	ldr	r3, [pc, #328]	; (800310c <main+0x19a4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a4c      	ldr	r2, [pc, #304]	; (80030f8 <main+0x1990>)
 8002fc6:	6013      	str	r3, [r2, #0]
						  if (save_bool){					//Change the value
 8002fc8:	4b53      	ldr	r3, [pc, #332]	; (8003118 <main+0x19b0>)
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <main+0x187e>
							lcdSetCursor(0, 2);
 8002fd0:	2102      	movs	r1, #2
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f7fe f896 	bl	8001104 <lcdSetCursor>
							lcdPrint("EXIT WITHOUT SAVE");
 8002fd8:	4850      	ldr	r0, [pc, #320]	; (800311c <main+0x19b4>)
 8002fda:	f7fe f8c5 	bl	8001168 <lcdPrint>
							save_bool = FALSE;
 8002fde:	4b4e      	ldr	r3, [pc, #312]	; (8003118 <main+0x19b0>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	801a      	strh	r2, [r3, #0]
 8002fe4:	e009      	b.n	8002ffa <main+0x1892>
						  }else{
							lcdSetCursor(0, 2);
 8002fe6:	2102      	movs	r1, #2
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7fe f88b 	bl	8001104 <lcdSetCursor>
							lcdPrint("SAVE PARAMETERS  ");
 8002fee:	484c      	ldr	r0, [pc, #304]	; (8003120 <main+0x19b8>)
 8002ff0:	f7fe f8ba 	bl	8001168 <lcdPrint>
							save_bool = TRUE;
 8002ff4:	4b48      	ldr	r3, [pc, #288]	; (8003118 <main+0x19b0>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	801a      	strh	r2, [r3, #0]
						  }
					  }
					  if ( Encoder_Switch_Status_Read() == TRUE){	//If encoder is pressed, continue to next parameter
 8002ffa:	f001 fa8d 	bl	8004518 <Encoder_Switch_Status_Read>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b01      	cmp	r3, #1
 8003002:	d173      	bne.n	80030ec <main+0x1984>
						configuration_status += 1;
 8003004:	4b42      	ldr	r3, [pc, #264]	; (8003110 <main+0x19a8>)
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	3301      	adds	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	4b40      	ldr	r3, [pc, #256]	; (8003110 <main+0x19a8>)
 800300e:	801a      	strh	r2, [r3, #0]
						lcd_update = TRUE;
 8003010:	4b38      	ldr	r3, [pc, #224]	; (80030f4 <main+0x198c>)
 8003012:	2201      	movs	r2, #1
 8003014:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8003016:	e069      	b.n	80030ec <main+0x1984>
				  case 10:
					  if (save_bool == TRUE){
 8003018:	4b3f      	ldr	r3, [pc, #252]	; (8003118 <main+0x19b0>)
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d12d      	bne.n	800307c <main+0x1914>
						  parameter.first_load = 0;		//Change byte load to 0 to avoid entering again
 8003020:	4b38      	ldr	r3, [pc, #224]	; (8003104 <main+0x199c>)
 8003022:	2200      	movs	r2, #0
 8003024:	829a      	strh	r2, [r3, #20]
						  if (Save_Parameter_Data(struct_ptr)){		//Save data into flash memory
 8003026:	4b3f      	ldr	r3, [pc, #252]	; (8003124 <main+0x19bc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f001 fb4e 	bl	80046cc <Save_Parameter_Data>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00d      	beq.n	8003052 <main+0x18ea>
							  lcdClear();
 8003036:	f7fe f811 	bl	800105c <lcdClear>
							  lcdSetCursor(5,1);
 800303a:	2101      	movs	r1, #1
 800303c:	2005      	movs	r0, #5
 800303e:	f7fe f861 	bl	8001104 <lcdSetCursor>
							  lcdPrint("DATA SAVED");
 8003042:	4839      	ldr	r0, [pc, #228]	; (8003128 <main+0x19c0>)
 8003044:	f7fe f890 	bl	8001168 <lcdPrint>
							  HAL_Delay(1500);
 8003048:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800304c:	f002 f94a 	bl	80052e4 <HAL_Delay>
 8003050:	e021      	b.n	8003096 <main+0x192e>
						  }else{									//If it fails return ERROR
							  lcdClear();
 8003052:	f7fe f803 	bl	800105c <lcdClear>
							  lcdSetCursor(0,1);
 8003056:	2101      	movs	r1, #1
 8003058:	2000      	movs	r0, #0
 800305a:	f7fe f853 	bl	8001104 <lcdSetCursor>
							  lcdPrint("ERROR DEFAULT VALUES");
 800305e:	4833      	ldr	r0, [pc, #204]	; (800312c <main+0x19c4>)
 8003060:	f7fe f882 	bl	8001168 <lcdPrint>
							  lcdSetCursor(7,2);
 8003064:	2102      	movs	r1, #2
 8003066:	2007      	movs	r0, #7
 8003068:	f7fe f84c 	bl	8001104 <lcdSetCursor>
							  lcdPrint("LOADED");
 800306c:	4830      	ldr	r0, [pc, #192]	; (8003130 <main+0x19c8>)
 800306e:	f7fe f87b 	bl	8001168 <lcdPrint>
							  HAL_Delay(1500);
 8003072:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003076:	f002 f935 	bl	80052e4 <HAL_Delay>
 800307a:	e00c      	b.n	8003096 <main+0x192e>
						  }
					  }else{
						  lcdClear();								//If selection was not to save data
 800307c:	f7fd ffee 	bl	800105c <lcdClear>
						  lcdSetCursor(3, 1);
 8003080:	2101      	movs	r1, #1
 8003082:	2003      	movs	r0, #3
 8003084:	f7fe f83e 	bl	8001104 <lcdSetCursor>
						  lcdPrint("DATA NOT SAVED");
 8003088:	482a      	ldr	r0, [pc, #168]	; (8003134 <main+0x19cc>)
 800308a:	f7fe f86d 	bl	8001168 <lcdPrint>
						  HAL_Delay(2000);
 800308e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003092:	f002 f927 	bl	80052e4 <HAL_Delay>
					  }
					  state = INITIALIZATION;
 8003096:	4b28      	ldr	r3, [pc, #160]	; (8003138 <main+0x19d0>)
 8003098:	2200      	movs	r2, #0
 800309a:	801a      	strh	r2, [r3, #0]
					  break;
 800309c:	e027      	b.n	80030ee <main+0x1986>
	  		  break;
 800309e:	bf00      	nop
 80030a0:	f7fe bc75 	b.w	800198e <main+0x226>
	  		  break;
 80030a4:	bf00      	nop
 80030a6:	f7fe bc72 	b.w	800198e <main+0x226>
	  		  break;
 80030aa:	bf00      	nop
 80030ac:	f7fe bc6f 	b.w	800198e <main+0x226>
	  		  break;
 80030b0:	bf00      	nop
 80030b2:	f7fe bc6c 	b.w	800198e <main+0x226>
					  break;
 80030b6:	bf00      	nop
 80030b8:	f7fe bc69 	b.w	800198e <main+0x226>
					  break;
 80030bc:	bf00      	nop
 80030be:	f7fe bc66 	b.w	800198e <main+0x226>
					  break;
 80030c2:	bf00      	nop
 80030c4:	f7fe bc63 	b.w	800198e <main+0x226>
					  break;
 80030c8:	bf00      	nop
 80030ca:	f7fe bc60 	b.w	800198e <main+0x226>
					  break;
 80030ce:	bf00      	nop
 80030d0:	f7fe bc5d 	b.w	800198e <main+0x226>
					  break;
 80030d4:	bf00      	nop
 80030d6:	f7fe bc5a 	b.w	800198e <main+0x226>
					  break;
 80030da:	bf00      	nop
 80030dc:	f7fe bc57 	b.w	800198e <main+0x226>
					  break;
 80030e0:	bf00      	nop
 80030e2:	f7fe bc54 	b.w	800198e <main+0x226>
					  break;
 80030e6:	bf00      	nop
 80030e8:	f7fe bc51 	b.w	800198e <main+0x226>
					  break;
 80030ec:	bf00      	nop
	  switch (state)
 80030ee:	f7fe bc4e 	b.w	800198e <main+0x226>
 80030f2:	bf00      	nop
 80030f4:	20000846 	.word	0x20000846
 80030f8:	20000004 	.word	0x20000004
 80030fc:	08009c28 	.word	0x08009c28
 8003100:	08009d34 	.word	0x08009d34
 8003104:	200007d8 	.word	0x200007d8
 8003108:	08009d2c 	.word	0x08009d2c
 800310c:	20000000 	.word	0x20000000
 8003110:	200007d4 	.word	0x200007d4
 8003114:	08009d48 	.word	0x08009d48
 8003118:	20000820 	.word	0x20000820
 800311c:	08009d5c 	.word	0x08009d5c
 8003120:	08009d70 	.word	0x08009d70
 8003124:	20000808 	.word	0x20000808
 8003128:	08009d84 	.word	0x08009d84
 800312c:	08009d90 	.word	0x08009d90
 8003130:	08009da8 	.word	0x08009da8
 8003134:	08009db0 	.word	0x08009db0
 8003138:	200007d0 	.word	0x200007d0

0800313c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b094      	sub	sp, #80	; 0x50
 8003140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003142:	f107 0320 	add.w	r3, r7, #32
 8003146:	2230      	movs	r2, #48	; 0x30
 8003148:	2100      	movs	r1, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f006 f89a 	bl	8009284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003150:	f107 030c 	add.w	r3, r7, #12
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	60da      	str	r2, [r3, #12]
 800315e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003160:	2300      	movs	r3, #0
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	4b28      	ldr	r3, [pc, #160]	; (8003208 <SystemClock_Config+0xcc>)
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	4a27      	ldr	r2, [pc, #156]	; (8003208 <SystemClock_Config+0xcc>)
 800316a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316e:	6413      	str	r3, [r2, #64]	; 0x40
 8003170:	4b25      	ldr	r3, [pc, #148]	; (8003208 <SystemClock_Config+0xcc>)
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800317c:	2300      	movs	r3, #0
 800317e:	607b      	str	r3, [r7, #4]
 8003180:	4b22      	ldr	r3, [pc, #136]	; (800320c <SystemClock_Config+0xd0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003188:	4a20      	ldr	r2, [pc, #128]	; (800320c <SystemClock_Config+0xd0>)
 800318a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	4b1e      	ldr	r3, [pc, #120]	; (800320c <SystemClock_Config+0xd0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003198:	607b      	str	r3, [r7, #4]
 800319a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800319c:	2301      	movs	r3, #1
 800319e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031a6:	2302      	movs	r3, #2
 80031a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80031b0:	2319      	movs	r3, #25
 80031b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80031b4:	23a8      	movs	r3, #168	; 0xa8
 80031b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80031b8:	2304      	movs	r3, #4
 80031ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80031bc:	2304      	movs	r3, #4
 80031be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031c0:	f107 0320 	add.w	r3, r7, #32
 80031c4:	4618      	mov	r0, r3
 80031c6:	f003 fd0f 	bl	8006be8 <HAL_RCC_OscConfig>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80031d0:	f001 fd00 	bl	8004bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031d4:	230f      	movs	r3, #15
 80031d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031d8:	2302      	movs	r3, #2
 80031da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031e0:	2300      	movs	r3, #0
 80031e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80031e8:	f107 030c 	add.w	r3, r7, #12
 80031ec:	2101      	movs	r1, #1
 80031ee:	4618      	mov	r0, r3
 80031f0:	f003 ff72 	bl	80070d8 <HAL_RCC_ClockConfig>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80031fa:	f001 fceb 	bl	8004bd4 <Error_Handler>
  }
}
 80031fe:	bf00      	nop
 8003200:	3750      	adds	r7, #80	; 0x50
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800
 800320c:	40007000 	.word	0x40007000

08003210 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003216:	463b      	mov	r3, r7
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003222:	4b21      	ldr	r3, [pc, #132]	; (80032a8 <MX_ADC1_Init+0x98>)
 8003224:	4a21      	ldr	r2, [pc, #132]	; (80032ac <MX_ADC1_Init+0x9c>)
 8003226:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003228:	4b1f      	ldr	r3, [pc, #124]	; (80032a8 <MX_ADC1_Init+0x98>)
 800322a:	2200      	movs	r2, #0
 800322c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800322e:	4b1e      	ldr	r3, [pc, #120]	; (80032a8 <MX_ADC1_Init+0x98>)
 8003230:	2200      	movs	r2, #0
 8003232:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003234:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <MX_ADC1_Init+0x98>)
 8003236:	2200      	movs	r2, #0
 8003238:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800323a:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <MX_ADC1_Init+0x98>)
 800323c:	2200      	movs	r2, #0
 800323e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <MX_ADC1_Init+0x98>)
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003248:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <MX_ADC1_Init+0x98>)
 800324a:	2200      	movs	r2, #0
 800324c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800324e:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <MX_ADC1_Init+0x98>)
 8003250:	4a17      	ldr	r2, [pc, #92]	; (80032b0 <MX_ADC1_Init+0xa0>)
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003254:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <MX_ADC1_Init+0x98>)
 8003256:	2200      	movs	r2, #0
 8003258:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800325a:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <MX_ADC1_Init+0x98>)
 800325c:	2201      	movs	r2, #1
 800325e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003260:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <MX_ADC1_Init+0x98>)
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <MX_ADC1_Init+0x98>)
 800326a:	2201      	movs	r2, #1
 800326c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800326e:	480e      	ldr	r0, [pc, #56]	; (80032a8 <MX_ADC1_Init+0x98>)
 8003270:	f002 f85c 	bl	800532c <HAL_ADC_Init>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800327a:	f001 fcab 	bl	8004bd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800327e:	2309      	movs	r3, #9
 8003280:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003282:	2301      	movs	r3, #1
 8003284:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003286:	2300      	movs	r3, #0
 8003288:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800328a:	463b      	mov	r3, r7
 800328c:	4619      	mov	r1, r3
 800328e:	4806      	ldr	r0, [pc, #24]	; (80032a8 <MX_ADC1_Init+0x98>)
 8003290:	f002 f890 	bl	80053b4 <HAL_ADC_ConfigChannel>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800329a:	f001 fc9b 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	2000053c 	.word	0x2000053c
 80032ac:	40012000 	.word	0x40012000
 80032b0:	0f000001 	.word	0x0f000001

080032b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032b8:	4b12      	ldr	r3, [pc, #72]	; (8003304 <MX_I2C1_Init+0x50>)
 80032ba:	4a13      	ldr	r2, [pc, #76]	; (8003308 <MX_I2C1_Init+0x54>)
 80032bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80032be:	4b11      	ldr	r3, [pc, #68]	; (8003304 <MX_I2C1_Init+0x50>)
 80032c0:	4a12      	ldr	r2, [pc, #72]	; (800330c <MX_I2C1_Init+0x58>)
 80032c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80032c4:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <MX_I2C1_Init+0x50>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80032ca:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <MX_I2C1_Init+0x50>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <MX_I2C1_Init+0x50>)
 80032d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032d8:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <MX_I2C1_Init+0x50>)
 80032da:	2200      	movs	r2, #0
 80032dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80032de:	4b09      	ldr	r3, [pc, #36]	; (8003304 <MX_I2C1_Init+0x50>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032e4:	4b07      	ldr	r3, [pc, #28]	; (8003304 <MX_I2C1_Init+0x50>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <MX_I2C1_Init+0x50>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032f0:	4804      	ldr	r0, [pc, #16]	; (8003304 <MX_I2C1_Init+0x50>)
 80032f2:	f003 f82d 	bl	8006350 <HAL_I2C_Init>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80032fc:	f001 fc6a 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003300:	bf00      	nop
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20000584 	.word	0x20000584
 8003308:	40005400 	.word	0x40005400
 800330c:	000186a0 	.word	0x000186a0

08003310 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08c      	sub	sp, #48	; 0x30
 8003314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
	//Timer for ENCODER
  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003316:	f107 030c 	add.w	r3, r7, #12
 800331a:	2224      	movs	r2, #36	; 0x24
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f005 ffb0 	bl	8009284 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003324:	1d3b      	adds	r3, r7, #4
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800332c:	4b26      	ldr	r3, [pc, #152]	; (80033c8 <MX_TIM1_Init+0xb8>)
 800332e:	4a27      	ldr	r2, [pc, #156]	; (80033cc <MX_TIM1_Init+0xbc>)
 8003330:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003332:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <MX_TIM1_Init+0xb8>)
 8003334:	2200      	movs	r2, #0
 8003336:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003338:	4b23      	ldr	r3, [pc, #140]	; (80033c8 <MX_TIM1_Init+0xb8>)
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800333e:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <MX_TIM1_Init+0xb8>)
 8003340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003344:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003346:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <MX_TIM1_Init+0xb8>)
 8003348:	2200      	movs	r2, #0
 800334a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800334c:	4b1e      	ldr	r3, [pc, #120]	; (80033c8 <MX_TIM1_Init+0xb8>)
 800334e:	2200      	movs	r2, #0
 8003350:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003352:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <MX_TIM1_Init+0xb8>)
 8003354:	2200      	movs	r2, #0
 8003356:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003358:	2301      	movs	r3, #1
 800335a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800335c:	2300      	movs	r3, #0
 800335e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003360:	2301      	movs	r3, #1
 8003362:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003364:	2300      	movs	r3, #0
 8003366:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8003368:	2302      	movs	r3, #2
 800336a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800336c:	2300      	movs	r3, #0
 800336e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003370:	2301      	movs	r3, #1
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003374:	2300      	movs	r3, #0
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8003378:	2302      	movs	r3, #2
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800337c:	f107 030c 	add.w	r3, r7, #12
 8003380:	4619      	mov	r1, r3
 8003382:	4811      	ldr	r0, [pc, #68]	; (80033c8 <MX_TIM1_Init+0xb8>)
 8003384:	f004 fd66 	bl	8007e54 <HAL_TIM_Encoder_Init>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800338e:	f001 fc21 	bl	8004bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003392:	2300      	movs	r3, #0
 8003394:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800339a:	1d3b      	adds	r3, r7, #4
 800339c:	4619      	mov	r1, r3
 800339e:	480a      	ldr	r0, [pc, #40]	; (80033c8 <MX_TIM1_Init+0xb8>)
 80033a0:	f005 feb6 	bl	8009110 <HAL_TIMEx_MasterConfigSynchronization>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80033aa:	f001 fc13 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->CNT = 0x7FFF;		//Initialization CNT in middle value to avoid Over/Under flow
 80033ae:	4b07      	ldr	r3, [pc, #28]	; (80033cc <MX_TIM1_Init+0xbc>)
 80033b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24
  TIM1->SR = ~(1UL << 0);	//Clear UIF flag
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <MX_TIM1_Init+0xbc>)
 80033b8:	f06f 0201 	mvn.w	r2, #1
 80033bc:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM1_Init 2 */

}
 80033be:	bf00      	nop
 80033c0:	3730      	adds	r7, #48	; 0x30
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	200005d8 	.word	0x200005d8
 80033cc:	40010000 	.word	0x40010000

080033d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08e      	sub	sp, #56	; 0x38
 80033d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
	//Timer for PULSE
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	605a      	str	r2, [r3, #4]
 80033e0:	609a      	str	r2, [r3, #8]
 80033e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033e4:	f107 0320 	add.w	r3, r7, #32
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033ee:	1d3b      	adds	r3, r7, #4
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	611a      	str	r2, [r3, #16]
 80033fc:	615a      	str	r2, [r3, #20]
 80033fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003400:	4b2c      	ldr	r3, [pc, #176]	; (80034b4 <MX_TIM2_Init+0xe4>)
 8003402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003406:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003408:	4b2a      	ldr	r3, [pc, #168]	; (80034b4 <MX_TIM2_Init+0xe4>)
 800340a:	2200      	movs	r2, #0
 800340c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800340e:	4b29      	ldr	r3, [pc, #164]	; (80034b4 <MX_TIM2_Init+0xe4>)
 8003410:	2200      	movs	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 8003414:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <MX_TIM2_Init+0xe4>)
 8003416:	2202      	movs	r2, #2
 8003418:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800341a:	4b26      	ldr	r3, [pc, #152]	; (80034b4 <MX_TIM2_Init+0xe4>)
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003420:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <MX_TIM2_Init+0xe4>)
 8003422:	2280      	movs	r2, #128	; 0x80
 8003424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003426:	4823      	ldr	r0, [pc, #140]	; (80034b4 <MX_TIM2_Init+0xe4>)
 8003428:	f004 f822 	bl	8007470 <HAL_TIM_Base_Init>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8003432:	f001 fbcf 	bl	8004bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800343a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800343c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003440:	4619      	mov	r1, r3
 8003442:	481c      	ldr	r0, [pc, #112]	; (80034b4 <MX_TIM2_Init+0xe4>)
 8003444:	f005 f8c0 	bl	80085c8 <HAL_TIM_ConfigClockSource>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800344e:	f001 fbc1 	bl	8004bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003452:	4818      	ldr	r0, [pc, #96]	; (80034b4 <MX_TIM2_Init+0xe4>)
 8003454:	f004 f96f 	bl	8007736 <HAL_TIM_PWM_Init>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800345e:	f001 fbb9 	bl	8004bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003462:	2300      	movs	r3, #0
 8003464:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800346a:	f107 0320 	add.w	r3, r7, #32
 800346e:	4619      	mov	r1, r3
 8003470:	4810      	ldr	r0, [pc, #64]	; (80034b4 <MX_TIM2_Init+0xe4>)
 8003472:	f005 fe4d 	bl	8009110 <HAL_TIMEx_MasterConfigSynchronization>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800347c:	f001 fbaa 	bl	8004bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003480:	2360      	movs	r3, #96	; 0x60
 8003482:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8003484:	2301      	movs	r3, #1
 8003486:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800348c:	2304      	movs	r3, #4
 800348e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003490:	1d3b      	adds	r3, r7, #4
 8003492:	2200      	movs	r2, #0
 8003494:	4619      	mov	r1, r3
 8003496:	4807      	ldr	r0, [pc, #28]	; (80034b4 <MX_TIM2_Init+0xe4>)
 8003498:	f004 ffd4 	bl	8008444 <HAL_TIM_PWM_ConfigChannel>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80034a2:	f001 fb97 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80034a6:	4803      	ldr	r0, [pc, #12]	; (80034b4 <MX_TIM2_Init+0xe4>)
 80034a8:	f001 fda2 	bl	8004ff0 <HAL_TIM_MspPostInit>

}
 80034ac:	bf00      	nop
 80034ae:	3738      	adds	r7, #56	; 0x38
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000620 	.word	0x20000620

080034b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
	//Timer for RPM Counter
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034be:	f107 0318 	add.w	r3, r7, #24
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	605a      	str	r2, [r3, #4]
 80034c8:	609a      	str	r2, [r3, #8]
 80034ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034cc:	f107 0310 	add.w	r3, r7, #16
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80034d6:	463b      	mov	r3, r7
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	605a      	str	r2, [r3, #4]
 80034de:	609a      	str	r2, [r3, #8]
 80034e0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80034e2:	4b2c      	ldr	r3, [pc, #176]	; (8003594 <MX_TIM4_Init+0xdc>)
 80034e4:	4a2c      	ldr	r2, [pc, #176]	; (8003598 <MX_TIM4_Init+0xe0>)
 80034e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4199;
 80034e8:	4b2a      	ldr	r3, [pc, #168]	; (8003594 <MX_TIM4_Init+0xdc>)
 80034ea:	f241 0267 	movw	r2, #4199	; 0x1067
 80034ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034f0:	4b28      	ldr	r3, [pc, #160]	; (8003594 <MX_TIM4_Init+0xdc>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 80034f6:	4b27      	ldr	r3, [pc, #156]	; (8003594 <MX_TIM4_Init+0xdc>)
 80034f8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80034fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034fe:	4b25      	ldr	r3, [pc, #148]	; (8003594 <MX_TIM4_Init+0xdc>)
 8003500:	2200      	movs	r2, #0
 8003502:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003504:	4b23      	ldr	r3, [pc, #140]	; (8003594 <MX_TIM4_Init+0xdc>)
 8003506:	2280      	movs	r2, #128	; 0x80
 8003508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800350a:	4822      	ldr	r0, [pc, #136]	; (8003594 <MX_TIM4_Init+0xdc>)
 800350c:	f003 ffb0 	bl	8007470 <HAL_TIM_Base_Init>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8003516:	f001 fb5d 	bl	8004bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800351a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800351e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003520:	f107 0318 	add.w	r3, r7, #24
 8003524:	4619      	mov	r1, r3
 8003526:	481b      	ldr	r0, [pc, #108]	; (8003594 <MX_TIM4_Init+0xdc>)
 8003528:	f005 f84e 	bl	80085c8 <HAL_TIM_ConfigClockSource>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003532:	f001 fb4f 	bl	8004bd4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003536:	4817      	ldr	r0, [pc, #92]	; (8003594 <MX_TIM4_Init+0xdc>)
 8003538:	f004 fa6a 	bl	8007a10 <HAL_TIM_IC_Init>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8003542:	f001 fb47 	bl	8004bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800354e:	f107 0310 	add.w	r3, r7, #16
 8003552:	4619      	mov	r1, r3
 8003554:	480f      	ldr	r0, [pc, #60]	; (8003594 <MX_TIM4_Init+0xdc>)
 8003556:	f005 fddb 	bl	8009110 <HAL_TIMEx_MasterConfigSynchronization>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8003560:	f001 fb38 	bl	8004bd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003564:	2300      	movs	r3, #0
 8003566:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003568:	2301      	movs	r3, #1
 800356a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800356c:	2300      	movs	r3, #0
 800356e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003574:	463b      	mov	r3, r7
 8003576:	2204      	movs	r2, #4
 8003578:	4619      	mov	r1, r3
 800357a:	4806      	ldr	r0, [pc, #24]	; (8003594 <MX_TIM4_Init+0xdc>)
 800357c:	f004 fec6 	bl	800830c <HAL_TIM_IC_ConfigChannel>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8003586:	f001 fb25 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800358a:	bf00      	nop
 800358c:	3728      	adds	r7, #40	; 0x28
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000668 	.word	0x20000668
 8003598:	40000800 	.word	0x40000800

0800359c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */
	//Timer for Pulse Counter
  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80035a2:	f107 030c 	add.w	r3, r7, #12
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	605a      	str	r2, [r3, #4]
 80035ac:	609a      	str	r2, [r3, #8]
 80035ae:	60da      	str	r2, [r3, #12]
 80035b0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035b2:	1d3b      	adds	r3, r7, #4
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80035ba:	4b20      	ldr	r3, [pc, #128]	; (800363c <MX_TIM5_Init+0xa0>)
 80035bc:	4a20      	ldr	r2, [pc, #128]	; (8003640 <MX_TIM5_Init+0xa4>)
 80035be:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80035c0:	4b1e      	ldr	r3, [pc, #120]	; (800363c <MX_TIM5_Init+0xa0>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035c6:	4b1d      	ldr	r3, [pc, #116]	; (800363c <MX_TIM5_Init+0xa0>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80035cc:	4b1b      	ldr	r3, [pc, #108]	; (800363c <MX_TIM5_Init+0xa0>)
 80035ce:	f04f 32ff 	mov.w	r2, #4294967295
 80035d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035d4:	4b19      	ldr	r3, [pc, #100]	; (800363c <MX_TIM5_Init+0xa0>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035da:	4b18      	ldr	r3, [pc, #96]	; (800363c <MX_TIM5_Init+0xa0>)
 80035dc:	2200      	movs	r2, #0
 80035de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80035e0:	4816      	ldr	r0, [pc, #88]	; (800363c <MX_TIM5_Init+0xa0>)
 80035e2:	f003 ff45 	bl	8007470 <HAL_TIM_Base_Init>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80035ec:	f001 faf2 	bl	8004bd4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80035f0:	2307      	movs	r3, #7
 80035f2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80035f4:	2360      	movs	r3, #96	; 0x60
 80035f6:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8003600:	f107 030c 	add.w	r3, r7, #12
 8003604:	4619      	mov	r1, r3
 8003606:	480d      	ldr	r0, [pc, #52]	; (800363c <MX_TIM5_Init+0xa0>)
 8003608:	f005 f8a5 	bl	8008756 <HAL_TIM_SlaveConfigSynchro>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8003612:	f001 fadf 	bl	8004bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003616:	2300      	movs	r3, #0
 8003618:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800361a:	2300      	movs	r3, #0
 800361c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800361e:	1d3b      	adds	r3, r7, #4
 8003620:	4619      	mov	r1, r3
 8003622:	4806      	ldr	r0, [pc, #24]	; (800363c <MX_TIM5_Init+0xa0>)
 8003624:	f005 fd74 	bl	8009110 <HAL_TIMEx_MasterConfigSynchronization>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 800362e:	f001 fad1 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003632:	bf00      	nop
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	200006b0 	.word	0x200006b0
 8003640:	40000c00 	.word	0x40000c00

08003644 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */
	float TIM9_period_ms = (float)TIMER9_PERIOD/1000;		//Period to load into the timer, calculated from Define
 800364a:	4b24      	ldr	r3, [pc, #144]	; (80036dc <MX_TIM9_Init+0x98>)
 800364c:	617b      	str	r3, [r7, #20]
	uint16_t TIM9_preescaler = 642;							//Preescaler, max 1 second
 800364e:	f240 2382 	movw	r3, #642	; 0x282
 8003652:	827b      	strh	r3, [r7, #18]
	uint16_t TIM9_ARR;
	TIM9_ARR = ( (float) (CLK_FREQ_T2/(TIM9_preescaler+1))*TIM9_period_ms );	//Calculation value for ARR register to set correct period
 8003654:	8a7b      	ldrh	r3, [r7, #18]
 8003656:	3301      	adds	r3, #1
 8003658:	4a21      	ldr	r2, [pc, #132]	; (80036e0 <MX_TIM9_Init+0x9c>)
 800365a:	fb92 f3f3 	sdiv	r3, r2, r3
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003666:	edd7 7a05 	vldr	s15, [r7, #20]
 800366a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800366e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003672:	ee17 3a90 	vmov	r3, s15
 8003676:	823b      	strh	r3, [r7, #16]
  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003678:	463b      	mov	r3, r7
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	609a      	str	r2, [r3, #8]
 8003682:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003684:	4b17      	ldr	r3, [pc, #92]	; (80036e4 <MX_TIM9_Init+0xa0>)
 8003686:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <MX_TIM9_Init+0xa4>)
 8003688:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = TIM9_preescaler;
 800368a:	8a7b      	ldrh	r3, [r7, #18]
 800368c:	4a15      	ldr	r2, [pc, #84]	; (80036e4 <MX_TIM9_Init+0xa0>)
 800368e:	6053      	str	r3, [r2, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003690:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <MX_TIM9_Init+0xa0>)
 8003692:	2200      	movs	r2, #0
 8003694:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = TIM9_ARR;
 8003696:	8a3b      	ldrh	r3, [r7, #16]
 8003698:	4a12      	ldr	r2, [pc, #72]	; (80036e4 <MX_TIM9_Init+0xa0>)
 800369a:	60d3      	str	r3, [r2, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <MX_TIM9_Init+0xa0>)
 800369e:	2200      	movs	r2, #0
 80036a0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036a2:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <MX_TIM9_Init+0xa0>)
 80036a4:	2280      	movs	r2, #128	; 0x80
 80036a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80036a8:	480e      	ldr	r0, [pc, #56]	; (80036e4 <MX_TIM9_Init+0xa0>)
 80036aa:	f003 fee1 	bl	8007470 <HAL_TIM_Base_Init>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80036b4:	f001 fa8e 	bl	8004bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036bc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80036be:	463b      	mov	r3, r7
 80036c0:	4619      	mov	r1, r3
 80036c2:	4808      	ldr	r0, [pc, #32]	; (80036e4 <MX_TIM9_Init+0xa0>)
 80036c4:	f004 ff80 	bl	80085c8 <HAL_TIM_ConfigClockSource>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <MX_TIM9_Init+0x8e>
  {
    Error_Handler();
 80036ce:	f001 fa81 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80036d2:	bf00      	nop
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	3dcccccd 	.word	0x3dcccccd
 80036e0:	0280de80 	.word	0x0280de80
 80036e4:	200006f8 	.word	0x200006f8
 80036e8:	40014000 	.word	0x40014000

080036ec <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */
	float TIM10_period_ms = (float)DEBOUNCING_TIME/1000;		//Period to load into the timer, calculated from Define
 80036f2:	4b1a      	ldr	r3, [pc, #104]	; (800375c <MX_TIM10_Init+0x70>)
 80036f4:	607b      	str	r3, [r7, #4]
	uint16_t TIM10_preescaler = 642;							//Preescaler, max 1 second
 80036f6:	f240 2382 	movw	r3, #642	; 0x282
 80036fa:	807b      	strh	r3, [r7, #2]
	uint16_t TIM10_ARR;
	TIM10_ARR = ( (float) (CLK_FREQ_T2/(TIM10_preescaler+1))*TIM10_period_ms );	//Calculation value for ARR register to set correct period
 80036fc:	887b      	ldrh	r3, [r7, #2]
 80036fe:	3301      	adds	r3, #1
 8003700:	4a17      	ldr	r2, [pc, #92]	; (8003760 <MX_TIM10_Init+0x74>)
 8003702:	fb92 f3f3 	sdiv	r3, r2, r3
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800370e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800371a:	ee17 3a90 	vmov	r3, s15
 800371e:	803b      	strh	r3, [r7, #0]
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003720:	4b10      	ldr	r3, [pc, #64]	; (8003764 <MX_TIM10_Init+0x78>)
 8003722:	4a11      	ldr	r2, [pc, #68]	; (8003768 <MX_TIM10_Init+0x7c>)
 8003724:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = TIM10_preescaler;
 8003726:	887b      	ldrh	r3, [r7, #2]
 8003728:	4a0e      	ldr	r2, [pc, #56]	; (8003764 <MX_TIM10_Init+0x78>)
 800372a:	6053      	str	r3, [r2, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800372c:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <MX_TIM10_Init+0x78>)
 800372e:	2200      	movs	r2, #0
 8003730:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = TIM10_ARR;
 8003732:	883b      	ldrh	r3, [r7, #0]
 8003734:	4a0b      	ldr	r2, [pc, #44]	; (8003764 <MX_TIM10_Init+0x78>)
 8003736:	60d3      	str	r3, [r2, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <MX_TIM10_Init+0x78>)
 800373a:	2200      	movs	r2, #0
 800373c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <MX_TIM10_Init+0x78>)
 8003740:	2280      	movs	r2, #128	; 0x80
 8003742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003744:	4807      	ldr	r0, [pc, #28]	; (8003764 <MX_TIM10_Init+0x78>)
 8003746:	f003 fe93 	bl	8007470 <HAL_TIM_Base_Init>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <MX_TIM10_Init+0x68>
  {
    Error_Handler();
 8003750:	f001 fa40 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003754:	bf00      	nop
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	3dcccccd 	.word	0x3dcccccd
 8003760:	0280de80 	.word	0x0280de80
 8003764:	20000740 	.word	0x20000740
 8003768:	40014400 	.word	0x40014400

0800376c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */
  float TIM11_period_ms = (float)ACC_UPDATE_RATIO/1000;		//Period to load into the timer, calculated from Define
 8003772:	4b16      	ldr	r3, [pc, #88]	; (80037cc <MX_TIM11_Init+0x60>)
 8003774:	607b      	str	r3, [r7, #4]
  uint16_t TIM11_ARR;
  TIM11_ARR = ( (float) (CLK_FREQ_T2/(TIM11_preescaler+1))*TIM11_period_ms );	//Calculation value for ARR register to set correct period
 8003776:	edd7 7a01 	vldr	s15, [r7, #4]
 800377a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80037d0 <MX_TIM11_Init+0x64>
 800377e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003786:	ee17 3a90 	vmov	r3, s15
 800378a:	807b      	strh	r3, [r7, #2]
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <MX_TIM11_Init+0x68>)
 800378e:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <MX_TIM11_Init+0x6c>)
 8003790:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = TIM11_preescaler;
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <MX_TIM11_Init+0x68>)
 8003794:	f240 2282 	movw	r2, #642	; 0x282
 8003798:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800379a:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <MX_TIM11_Init+0x68>)
 800379c:	2200      	movs	r2, #0
 800379e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = TIM11_ARR;
 80037a0:	887b      	ldrh	r3, [r7, #2]
 80037a2:	4a0c      	ldr	r2, [pc, #48]	; (80037d4 <MX_TIM11_Init+0x68>)
 80037a4:	60d3      	str	r3, [r2, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a6:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <MX_TIM11_Init+0x68>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037ac:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <MX_TIM11_Init+0x68>)
 80037ae:	2280      	movs	r2, #128	; 0x80
 80037b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80037b2:	4808      	ldr	r0, [pc, #32]	; (80037d4 <MX_TIM11_Init+0x68>)
 80037b4:	f003 fe5c 	bl	8007470 <HAL_TIM_Base_Init>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <MX_TIM11_Init+0x56>
  {
    Error_Handler();
 80037be:	f001 fa09 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	3d4ccccd 	.word	0x3d4ccccd
 80037d0:	477f2600 	.word	0x477f2600
 80037d4:	20000788 	.word	0x20000788
 80037d8:	40014800 	.word	0x40014800

080037dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	; 0x28
 80037e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e2:	f107 0314 	add.w	r3, r7, #20
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	605a      	str	r2, [r3, #4]
 80037ec:	609a      	str	r2, [r3, #8]
 80037ee:	60da      	str	r2, [r3, #12]
 80037f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	4b3d      	ldr	r3, [pc, #244]	; (80038ec <MX_GPIO_Init+0x110>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	4a3c      	ldr	r2, [pc, #240]	; (80038ec <MX_GPIO_Init+0x110>)
 80037fc:	f043 0304 	orr.w	r3, r3, #4
 8003800:	6313      	str	r3, [r2, #48]	; 0x30
 8003802:	4b3a      	ldr	r3, [pc, #232]	; (80038ec <MX_GPIO_Init+0x110>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	4b36      	ldr	r3, [pc, #216]	; (80038ec <MX_GPIO_Init+0x110>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	4a35      	ldr	r2, [pc, #212]	; (80038ec <MX_GPIO_Init+0x110>)
 8003818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800381c:	6313      	str	r3, [r2, #48]	; 0x30
 800381e:	4b33      	ldr	r3, [pc, #204]	; (80038ec <MX_GPIO_Init+0x110>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	4b2f      	ldr	r3, [pc, #188]	; (80038ec <MX_GPIO_Init+0x110>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4a2e      	ldr	r2, [pc, #184]	; (80038ec <MX_GPIO_Init+0x110>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	6313      	str	r3, [r2, #48]	; 0x30
 800383a:	4b2c      	ldr	r3, [pc, #176]	; (80038ec <MX_GPIO_Init+0x110>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	4b28      	ldr	r3, [pc, #160]	; (80038ec <MX_GPIO_Init+0x110>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	4a27      	ldr	r2, [pc, #156]	; (80038ec <MX_GPIO_Init+0x110>)
 8003850:	f043 0302 	orr.w	r3, r3, #2
 8003854:	6313      	str	r3, [r2, #48]	; 0x30
 8003856:	4b25      	ldr	r3, [pc, #148]	; (80038ec <MX_GPIO_Init+0x110>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	607b      	str	r3, [r7, #4]
 8003860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXTRA_OUT_GPIO_Port, EXTRA_OUT_Pin, GPIO_PIN_RESET);
 8003862:	2200      	movs	r2, #0
 8003864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003868:	4821      	ldr	r0, [pc, #132]	; (80038f0 <MX_GPIO_Init+0x114>)
 800386a:	f002 fd57 	bl	800631c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|ENABLE_Pin, GPIO_PIN_RESET);
 800386e:	2200      	movs	r2, #0
 8003870:	210c      	movs	r1, #12
 8003872:	4820      	ldr	r0, [pc, #128]	; (80038f4 <MX_GPIO_Init+0x118>)
 8003874:	f002 fd52 	bl	800631c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXTRA_OUT_Pin */
  GPIO_InitStruct.Pin = EXTRA_OUT_Pin;
 8003878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800387c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800387e:	2301      	movs	r3, #1
 8003880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003886:	2300      	movs	r3, #0
 8003888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXTRA_OUT_GPIO_Port, &GPIO_InitStruct);
 800388a:	f107 0314 	add.w	r3, r7, #20
 800388e:	4619      	mov	r1, r3
 8003890:	4817      	ldr	r0, [pc, #92]	; (80038f0 <MX_GPIO_Init+0x114>)
 8003892:	f002 fba7 	bl	8005fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Pin ENABLE_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|ENABLE_Pin;
 8003896:	230c      	movs	r3, #12
 8003898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800389a:	2301      	movs	r3, #1
 800389c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a2:	2300      	movs	r3, #0
 80038a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a6:	f107 0314 	add.w	r3, r7, #20
 80038aa:	4619      	mov	r1, r3
 80038ac:	4811      	ldr	r0, [pc, #68]	; (80038f4 <MX_GPIO_Init+0x118>)
 80038ae:	f002 fb99 	bl	8005fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENDSTOP_RIGHT_Pin ENDSTOP_LEFT_Pin EXTRA_INPUT_Pin */
  GPIO_InitStruct.Pin = ENDSTOP_RIGHT_Pin|ENDSTOP_LEFT_Pin|EXTRA_INPUT_Pin;
 80038b2:	2370      	movs	r3, #112	; 0x70
 80038b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038be:	f107 0314 	add.w	r3, r7, #20
 80038c2:	4619      	mov	r1, r3
 80038c4:	480b      	ldr	r0, [pc, #44]	; (80038f4 <MX_GPIO_Init+0x118>)
 80038c6:	f002 fb8d 	bl	8005fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_LEFT_Pin SW_RIGHT_Pin SEC_SW_Pin EN_SW_Pin */
  GPIO_InitStruct.Pin = SW_LEFT_Pin|SW_RIGHT_Pin|SEC_SW_Pin|EN_SW_Pin;
 80038ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80038ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038d8:	f107 0314 	add.w	r3, r7, #20
 80038dc:	4619      	mov	r1, r3
 80038de:	4806      	ldr	r0, [pc, #24]	; (80038f8 <MX_GPIO_Init+0x11c>)
 80038e0:	f002 fb80 	bl	8005fe4 <HAL_GPIO_Init>

}
 80038e4:	bf00      	nop
 80038e6:	3728      	adds	r7, #40	; 0x28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40023800 	.word	0x40023800
 80038f0:	40020800 	.word	0x40020800
 80038f4:	40020000 	.word	0x40020000
 80038f8:	40020400 	.word	0x40020400

080038fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
	if (htim == &htim11 ){		//Checking if the IRQ is from Timer11 Acceleration
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a45      	ldr	r2, [pc, #276]	; (8003a1c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d103      	bne.n	8003914 <HAL_TIM_PeriodElapsedCallback+0x18>
		update_speed = 1;
 800390c:	4b44      	ldr	r3, [pc, #272]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800390e:	2201      	movs	r2, #1
 8003910:	801a      	strh	r2, [r3, #0]
	}else if ( htim == &htim4 ){
		RPM_value = 0;
		rpm_refresh_flag = FALSE;
		RPM_available_flag = TRUE;
	}
}
 8003912:	e07e      	b.n	8003a12 <HAL_TIM_PeriodElapsedCallback+0x116>
	}else if ( htim == &htim10 ){	//Checking if the IRQ is from Timer10 Debouncing
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a43      	ldr	r2, [pc, #268]	; (8003a24 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d124      	bne.n	8003966 <HAL_TIM_PeriodElapsedCallback+0x6a>
		if (debouncing_en_sw){		//If debouncing enable, increment counter
 800391c:	4b42      	ldr	r3, [pc, #264]	; (8003a28 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d006      	beq.n	8003932 <HAL_TIM_PeriodElapsedCallback+0x36>
			debouncing = debouncing + 1;
 8003924:	4b41      	ldr	r3, [pc, #260]	; (8003a2c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	3301      	adds	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	4b3f      	ldr	r3, [pc, #252]	; (8003a2c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800392e:	801a      	strh	r2, [r3, #0]
 8003930:	e006      	b.n	8003940 <HAL_TIM_PeriodElapsedCallback+0x44>
		}else if (!debouncing_en_sw){	//If debouncing disable reset counter
 8003932:	4b3d      	ldr	r3, [pc, #244]	; (8003a28 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d102      	bne.n	8003940 <HAL_TIM_PeriodElapsedCallback+0x44>
			debouncing = 0;
 800393a:	4b3c      	ldr	r3, [pc, #240]	; (8003a2c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800393c:	2200      	movs	r2, #0
 800393e:	801a      	strh	r2, [r3, #0]
		if (debouncing_aux_sw){		//If debouncing enable, increment counter
 8003940:	4b3b      	ldr	r3, [pc, #236]	; (8003a30 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d006      	beq.n	8003956 <HAL_TIM_PeriodElapsedCallback+0x5a>
			aux_debouncing = aux_debouncing + 1;
 8003948:	4b3a      	ldr	r3, [pc, #232]	; (8003a34 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	3301      	adds	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	4b38      	ldr	r3, [pc, #224]	; (8003a34 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003952:	801a      	strh	r2, [r3, #0]
}
 8003954:	e05d      	b.n	8003a12 <HAL_TIM_PeriodElapsedCallback+0x116>
		}else if (!debouncing_aux_sw){	//If debouncing disable reset counter
 8003956:	4b36      	ldr	r3, [pc, #216]	; (8003a30 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d159      	bne.n	8003a12 <HAL_TIM_PeriodElapsedCallback+0x116>
			aux_debouncing = 0;
 800395e:	4b35      	ldr	r3, [pc, #212]	; (8003a34 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003960:	2200      	movs	r2, #0
 8003962:	801a      	strh	r2, [r3, #0]
}
 8003964:	e055      	b.n	8003a12 <HAL_TIM_PeriodElapsedCallback+0x116>
	}else if( htim == &htim9 ){
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a33      	ldr	r2, [pc, #204]	; (8003a38 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d144      	bne.n	80039f8 <HAL_TIM_PeriodElapsedCallback+0xfc>
		delay100ms_counter += 1;
 800396e:	4b33      	ldr	r3, [pc, #204]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3301      	adds	r3, #1
 8003974:	4a31      	ldr	r2, [pc, #196]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003976:	6013      	str	r3, [r2, #0]
		arrow_flag_counter += 1;
 8003978:	4b31      	ldr	r3, [pc, #196]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	3301      	adds	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	4b2f      	ldr	r3, [pc, #188]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003982:	801a      	strh	r2, [r3, #0]
		scrolling_flag_counter += 1;
 8003984:	4b2f      	ldr	r3, [pc, #188]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	3301      	adds	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	4b2d      	ldr	r3, [pc, #180]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800398e:	801a      	strh	r2, [r3, #0]
		rpm_refresh_counter += 1;
 8003990:	4b2d      	ldr	r3, [pc, #180]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3301      	adds	r3, #1
 8003996:	4a2c      	ldr	r2, [pc, #176]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003998:	6013      	str	r3, [r2, #0]
		if ( arrow_flag_counter == ARROW_REFRESH){
 800399a:	4b29      	ldr	r3, [pc, #164]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	2b07      	cmp	r3, #7
 80039a0:	d105      	bne.n	80039ae <HAL_TIM_PeriodElapsedCallback+0xb2>
			arrow_flag_counter = 0;
 80039a2:	4b27      	ldr	r3, [pc, #156]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	801a      	strh	r2, [r3, #0]
			arrow_flag = TRUE;
 80039a8:	4b28      	ldr	r3, [pc, #160]	; (8003a4c <HAL_TIM_PeriodElapsedCallback+0x150>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	801a      	strh	r2, [r3, #0]
		if (scrolling_flag_counter == SCROLLING_TEXT){
 80039ae:	4b25      	ldr	r3, [pc, #148]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d105      	bne.n	80039c2 <HAL_TIM_PeriodElapsedCallback+0xc6>
			scrolling_flag_counter = 0;
 80039b6:	4b23      	ldr	r3, [pc, #140]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	801a      	strh	r2, [r3, #0]
			scrolling_flag = TRUE;
 80039bc:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80039be:	2201      	movs	r2, #1
 80039c0:	801a      	strh	r2, [r3, #0]
		if (rpm_refresh_counter == RPM_REFRESH){
 80039c2:	4b21      	ldr	r3, [pc, #132]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b0a      	cmp	r3, #10
 80039c8:	d123      	bne.n	8003a12 <HAL_TIM_PeriodElapsedCallback+0x116>
			rpm_refresh_counter = 0;
 80039ca:	4b1f      	ldr	r3, [pc, #124]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
			if ( rpm_refresh_flag == FALSE ){
 80039d0:	4b20      	ldr	r3, [pc, #128]	; (8003a54 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80039d2:	f993 3000 	ldrsb.w	r3, [r3]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d11b      	bne.n	8003a12 <HAL_TIM_PeriodElapsedCallback+0x116>
				TIM4->ARR = 20000;
 80039da:	4b1f      	ldr	r3, [pc, #124]	; (8003a58 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80039dc:	f644 6220 	movw	r2, #20000	; 0x4e20
 80039e0:	62da      	str	r2, [r3, #44]	; 0x2c
				HAL_TIM_Base_Start_IT(&htim4);
 80039e2:	481e      	ldr	r0, [pc, #120]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80039e4:	f003 fe16 	bl	8007614 <HAL_TIM_Base_Start_IT>
				HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80039e8:	2104      	movs	r1, #4
 80039ea:	481c      	ldr	r0, [pc, #112]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80039ec:	f004 f86a 	bl	8007ac4 <HAL_TIM_IC_Start_IT>
				rpm_refresh_flag = TRUE;
 80039f0:	4b18      	ldr	r3, [pc, #96]	; (8003a54 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	701a      	strb	r2, [r3, #0]
}
 80039f6:	e00c      	b.n	8003a12 <HAL_TIM_PeriodElapsedCallback+0x116>
	}else if ( htim == &htim4 ){
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a18      	ldr	r2, [pc, #96]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d108      	bne.n	8003a12 <HAL_TIM_PeriodElapsedCallback+0x116>
		RPM_value = 0;
 8003a00:	4b17      	ldr	r3, [pc, #92]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
		rpm_refresh_flag = FALSE;
 8003a06:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	701a      	strb	r2, [r3, #0]
		RPM_available_flag = TRUE;
 8003a0c:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20000788 	.word	0x20000788
 8003a20:	20000844 	.word	0x20000844
 8003a24:	20000740 	.word	0x20000740
 8003a28:	20000848 	.word	0x20000848
 8003a2c:	2000084c 	.word	0x2000084c
 8003a30:	2000084a 	.word	0x2000084a
 8003a34:	2000084e 	.word	0x2000084e
 8003a38:	200006f8 	.word	0x200006f8
 8003a3c:	20000818 	.word	0x20000818
 8003a40:	20000850 	.word	0x20000850
 8003a44:	20000856 	.word	0x20000856
 8003a48:	20000834 	.word	0x20000834
 8003a4c:	20000852 	.word	0x20000852
 8003a50:	20000854 	.word	0x20000854
 8003a54:	20000859 	.word	0x20000859
 8003a58:	40000800 	.word	0x40000800
 8003a5c:	20000668 	.word	0x20000668
 8003a60:	20000840 	.word	0x20000840
 8003a64:	2000085a 	.word	0x2000085a

08003a68 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
	if ( htim == &htim4 ){
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a29      	ldr	r2, [pc, #164]	; (8003b18 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d147      	bne.n	8003b08 <HAL_TIM_IC_CaptureCallback+0xa0>
		if (IC1register){
 8003a78:	4b28      	ldr	r3, [pc, #160]	; (8003b1c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d006      	beq.n	8003a8e <HAL_TIM_IC_CaptureCallback+0x26>
			//IC1register = TIM4->CCR2;
			IC1register = 0;
 8003a80:	4b26      	ldr	r3, [pc, #152]	; (8003b1c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
			TIM4->CNT = 0;
 8003a86:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	625a      	str	r2, [r3, #36]	; 0x24
			IC2register = 0;
			rpm_refresh_flag = FALSE;
			RPM_available_flag = TRUE;
		}
	}
}
 8003a8c:	e03c      	b.n	8003b08 <HAL_TIM_IC_CaptureCallback+0xa0>
			IC2register = TIM4->CCR2;
 8003a8e:	4b24      	ldr	r3, [pc, #144]	; (8003b20 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	4a24      	ldr	r2, [pc, #144]	; (8003b24 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8003a94:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Stop_IT(&htim4);
 8003a96:	4820      	ldr	r0, [pc, #128]	; (8003b18 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8003a98:	f003 fe1e 	bl	80076d8 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_2);
 8003a9c:	2104      	movs	r1, #4
 8003a9e:	481e      	ldr	r0, [pc, #120]	; (8003b18 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8003aa0:	f004 f92a 	bl	8007cf8 <HAL_TIM_IC_Stop_IT>
			RPM_value = ( 1 / ((IC2register - IC1register)*0.0001) )*60;
 8003aa4:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	4b1c      	ldr	r3, [pc, #112]	; (8003b1c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fc fd30 	bl	8000514 <__aeabi_ui2d>
 8003ab4:	a316      	add	r3, pc, #88	; (adr r3, 8003b10 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8003ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aba:	f7fc fda5 	bl	8000608 <__aeabi_dmul>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	f04f 0000 	mov.w	r0, #0
 8003ac6:	4918      	ldr	r1, [pc, #96]	; (8003b28 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8003ac8:	f7fc fec8 	bl	800085c <__aeabi_ddiv>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8003ada:	f7fc fd95 	bl	8000608 <__aeabi_dmul>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f7fd f829 	bl	8000b3c <__aeabi_d2uiz>
 8003aea:	4603      	mov	r3, r0
 8003aec:	4a10      	ldr	r2, [pc, #64]	; (8003b30 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8003aee:	6013      	str	r3, [r2, #0]
			IC1register = 10;
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8003af2:	220a      	movs	r2, #10
 8003af4:	601a      	str	r2, [r3, #0]
			IC2register = 0;
 8003af6:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
			rpm_refresh_flag = FALSE;
 8003afc:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	701a      	strb	r2, [r3, #0]
			RPM_available_flag = TRUE;
 8003b02:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	701a      	strb	r2, [r3, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	eb1c432d 	.word	0xeb1c432d
 8003b14:	3f1a36e2 	.word	0x3f1a36e2
 8003b18:	20000668 	.word	0x20000668
 8003b1c:	20000838 	.word	0x20000838
 8003b20:	40000800 	.word	0x40000800
 8003b24:	2000083c 	.word	0x2000083c
 8003b28:	3ff00000 	.word	0x3ff00000
 8003b2c:	404e0000 	.word	0x404e0000
 8003b30:	20000840 	.word	0x20000840
 8003b34:	20000859 	.word	0x20000859
 8003b38:	2000085a 	.word	0x2000085a

08003b3c <Encoder_Read>:
  * @brief Encoder Steps Read Function
  * @param old_value - Pointer to the value storage as latest encoder value
  * @retval encoder_steps - Number of steps increased or decreased on the encoder
  */
int32_t Encoder_Read(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
	int32_t encoder_steps;
	static int32_t old_value = 0x7FFF;		//Initialisation old_value variable

	if (TIM1->SR & (1 << 0)){		//If overflow or underflow occurs reset the CNT value
 8003b42:	4b1c      	ldr	r3, [pc, #112]	; (8003bb4 <Encoder_Read+0x78>)
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00d      	beq.n	8003b6a <Encoder_Read+0x2e>
		TIM1->SR = ~(1UL << 0);		//Reset UIF bit
 8003b4e:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <Encoder_Read+0x78>)
 8003b50:	f06f 0201 	mvn.w	r2, #1
 8003b54:	611a      	str	r2, [r3, #16]
		TIM1->CNT = 0x7FFF;			//Reload CNT register to ox7FFF
 8003b56:	4b17      	ldr	r3, [pc, #92]	; (8003bb4 <Encoder_Read+0x78>)
 8003b58:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003b5c:	625a      	str	r2, [r3, #36]	; 0x24
		old_value = 0x7FFF;
 8003b5e:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <Encoder_Read+0x7c>)
 8003b60:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003b64:	601a      	str	r2, [r3, #0]
		return 0;					//Return 0
 8003b66:	2300      	movs	r3, #0
 8003b68:	e01d      	b.n	8003ba6 <Encoder_Read+0x6a>
	}

	uint16_t encoder_value = TIM1->CNT;		//Variable to storage the CNT register value
 8003b6a:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <Encoder_Read+0x78>)
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	80fb      	strh	r3, [r7, #6]
	if ( ( encoder_value - old_value >= 2 ) || ( encoder_value - old_value <= -2 ) ){		//If the value in the encoder register changed (At least 2, to avoid glitches) calculate increment
 8003b70:	88fa      	ldrh	r2, [r7, #6]
 8003b72:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <Encoder_Read+0x7c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	dc06      	bgt.n	8003b8a <Encoder_Read+0x4e>
 8003b7c:	88fa      	ldrh	r2, [r7, #6]
 8003b7e:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <Encoder_Read+0x7c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	da0c      	bge.n	8003ba4 <Encoder_Read+0x68>
		encoder_steps = (old_value - encoder_value)/2;	//Divide by 2 is needed due to increments by two on the encoder
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <Encoder_Read+0x7c>)
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	0fda      	lsrs	r2, r3, #31
 8003b94:	4413      	add	r3, r2
 8003b96:	105b      	asrs	r3, r3, #1
 8003b98:	603b      	str	r3, [r7, #0]
		old_value = encoder_value;			//Reload the old_value
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	4a06      	ldr	r2, [pc, #24]	; (8003bb8 <Encoder_Read+0x7c>)
 8003b9e:	6013      	str	r3, [r2, #0]
		return encoder_steps;				//Return the increments, can be positive or negative
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	e000      	b.n	8003ba6 <Encoder_Read+0x6a>
	}else{
		return 0;							//Return 0 in case no changes
 8003ba4:	2300      	movs	r3, #0
	}
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40010000 	.word	0x40010000
 8003bb8:	200000a0 	.word	0x200000a0

08003bbc <LCD_Write_Number>:
  * 		col_pos - column position for the number
  * 		row_pos - raw position for the number
  * @retval
  */
void LCD_Write_Number(int32_t value, int32_t col_pos, int32_t row_pos, int32_t subfix)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	603b      	str	r3, [r7, #0]
	char str[10];					//Variable to storage the string
	sprintf(str, "%ld", value);		//Convert number to string
 8003bca:	f107 0314 	add.w	r3, r7, #20
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	499f      	ldr	r1, [pc, #636]	; (8003e50 <LCD_Write_Number+0x294>)
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f005 fb5e 	bl	8009294 <siprintf>
	if (value > 0){					//If value is positive
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f340 80cd 	ble.w	8003d7a <LCD_Write_Number+0x1be>
		if (value < 10){			//If value is lower than 10
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b09      	cmp	r3, #9
 8003be4:	dc24      	bgt.n	8003c30 <LCD_Write_Number+0x74>
			lcdSetCursor(col_pos+1,row_pos);
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	3301      	adds	r3, #1
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fd fa85 	bl	8001104 <lcdSetCursor>
			if ( subfix == SUBFIXNO ){
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d103      	bne.n	8003c08 <LCD_Write_Number+0x4c>
				lcdPrint(" ");
 8003c00:	4894      	ldr	r0, [pc, #592]	; (8003e54 <LCD_Write_Number+0x298>)
 8003c02:	f7fd fab1 	bl	8001168 <lcdPrint>
 8003c06:	e005      	b.n	8003c14 <LCD_Write_Number+0x58>
			}else if ( subfix == SUBFIXMMMIN ){
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d102      	bne.n	8003c14 <LCD_Write_Number+0x58>
				lcdPrint("mm/min ");
 8003c0e:	4892      	ldr	r0, [pc, #584]	; (8003e58 <LCD_Write_Number+0x29c>)
 8003c10:	f7fd faaa 	bl	8001168 <lcdPrint>
			}
			lcdSetCursor(col_pos,row_pos);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fd fa70 	bl	8001104 <lcdSetCursor>
			lcdPrint(str);
 8003c24:	f107 0314 	add.w	r3, r7, #20
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fd fa9d 	bl	8001168 <lcdPrint>
			lcdPrint("   ");
		}else if ( subfix == SUBFIXMMMIN ){
			lcdPrint("mm/min");
		}
	}
}
 8003c2e:	e145      	b.n	8003ebc <LCD_Write_Number+0x300>
		}else if (value < 100){		//If value is lower than 100
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b63      	cmp	r3, #99	; 0x63
 8003c34:	dc24      	bgt.n	8003c80 <LCD_Write_Number+0xc4>
			lcdSetCursor(col_pos+2,row_pos);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	3302      	adds	r3, #2
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	4611      	mov	r1, r2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fd fa5d 	bl	8001104 <lcdSetCursor>
			if ( subfix == SUBFIXNO ){
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d103      	bne.n	8003c58 <LCD_Write_Number+0x9c>
				lcdPrint(" ");
 8003c50:	4880      	ldr	r0, [pc, #512]	; (8003e54 <LCD_Write_Number+0x298>)
 8003c52:	f7fd fa89 	bl	8001168 <lcdPrint>
 8003c56:	e005      	b.n	8003c64 <LCD_Write_Number+0xa8>
			}else if ( subfix == SUBFIXMMMIN ){
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d102      	bne.n	8003c64 <LCD_Write_Number+0xa8>
				lcdPrint("mm/min ");
 8003c5e:	487e      	ldr	r0, [pc, #504]	; (8003e58 <LCD_Write_Number+0x29c>)
 8003c60:	f7fd fa82 	bl	8001168 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd fa48 	bl	8001104 <lcdSetCursor>
			lcdPrint(str);
 8003c74:	f107 0314 	add.w	r3, r7, #20
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fd fa75 	bl	8001168 <lcdPrint>
}
 8003c7e:	e11d      	b.n	8003ebc <LCD_Write_Number+0x300>
		}else if (value < 1000){	//If value is lower than 1000
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c86:	da24      	bge.n	8003cd2 <LCD_Write_Number+0x116>
			lcdSetCursor(col_pos+3,row_pos);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	3303      	adds	r3, #3
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	4611      	mov	r1, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fd fa34 	bl	8001104 <lcdSetCursor>
			if ( subfix == SUBFIXNO ){
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <LCD_Write_Number+0xee>
				lcdPrint(" ");
 8003ca2:	486c      	ldr	r0, [pc, #432]	; (8003e54 <LCD_Write_Number+0x298>)
 8003ca4:	f7fd fa60 	bl	8001168 <lcdPrint>
 8003ca8:	e005      	b.n	8003cb6 <LCD_Write_Number+0xfa>
			}else if ( subfix == SUBFIXMMMIN ){
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d102      	bne.n	8003cb6 <LCD_Write_Number+0xfa>
				lcdPrint("mm/min ");
 8003cb0:	4869      	ldr	r0, [pc, #420]	; (8003e58 <LCD_Write_Number+0x29c>)
 8003cb2:	f7fd fa59 	bl	8001168 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fd fa1f 	bl	8001104 <lcdSetCursor>
			lcdPrint(str);
 8003cc6:	f107 0314 	add.w	r3, r7, #20
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fd fa4c 	bl	8001168 <lcdPrint>
}
 8003cd0:	e0f4      	b.n	8003ebc <LCD_Write_Number+0x300>
		}else if (value < 10000){	//If value is lower than 10000
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f242 720f 	movw	r2, #9999	; 0x270f
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	dc24      	bgt.n	8003d26 <LCD_Write_Number+0x16a>
			lcdSetCursor(col_pos+4,row_pos);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	4611      	mov	r1, r2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fd fa0a 	bl	8001104 <lcdSetCursor>
			if ( subfix == SUBFIXNO ){
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d103      	bne.n	8003cfe <LCD_Write_Number+0x142>
				lcdPrint(" ");
 8003cf6:	4857      	ldr	r0, [pc, #348]	; (8003e54 <LCD_Write_Number+0x298>)
 8003cf8:	f7fd fa36 	bl	8001168 <lcdPrint>
 8003cfc:	e005      	b.n	8003d0a <LCD_Write_Number+0x14e>
			}else if ( subfix == SUBFIXMMMIN ){
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d102      	bne.n	8003d0a <LCD_Write_Number+0x14e>
				lcdPrint("mm/min ");
 8003d04:	4854      	ldr	r0, [pc, #336]	; (8003e58 <LCD_Write_Number+0x29c>)
 8003d06:	f7fd fa2f 	bl	8001168 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fd f9f5 	bl	8001104 <lcdSetCursor>
			lcdPrint(str);
 8003d1a:	f107 0314 	add.w	r3, r7, #20
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fd fa22 	bl	8001168 <lcdPrint>
}
 8003d24:	e0ca      	b.n	8003ebc <LCD_Write_Number+0x300>
		}else if (value < 100000){	//If value is lower than 100000
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4a4c      	ldr	r2, [pc, #304]	; (8003e5c <LCD_Write_Number+0x2a0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	f300 80c6 	bgt.w	8003ebc <LCD_Write_Number+0x300>
			lcdSetCursor(col_pos+5,row_pos);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	3305      	adds	r3, #5
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd f9e0 	bl	8001104 <lcdSetCursor>
			if ( subfix == SUBFIXNO ){
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d103      	bne.n	8003d52 <LCD_Write_Number+0x196>
				lcdPrint(" ");
 8003d4a:	4842      	ldr	r0, [pc, #264]	; (8003e54 <LCD_Write_Number+0x298>)
 8003d4c:	f7fd fa0c 	bl	8001168 <lcdPrint>
 8003d50:	e005      	b.n	8003d5e <LCD_Write_Number+0x1a2>
			}else if ( subfix == SUBFIXMMMIN ){
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d102      	bne.n	8003d5e <LCD_Write_Number+0x1a2>
				lcdPrint("mm/min ");
 8003d58:	483f      	ldr	r0, [pc, #252]	; (8003e58 <LCD_Write_Number+0x29c>)
 8003d5a:	f7fd fa05 	bl	8001168 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fd f9cb 	bl	8001104 <lcdSetCursor>
			lcdPrint(str);
 8003d6e:	f107 0314 	add.w	r3, r7, #20
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fd f9f8 	bl	8001168 <lcdPrint>
}
 8003d78:	e0a0      	b.n	8003ebc <LCD_Write_Number+0x300>
	}else if (value < 0) {			//If value is negative
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f280 8085 	bge.w	8003e8c <LCD_Write_Number+0x2d0>
		if (value > -10){			//If value is higher than -10
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f113 0f09 	cmn.w	r3, #9
 8003d88:	db24      	blt.n	8003dd4 <LCD_Write_Number+0x218>
			lcdSetCursor(col_pos+2,row_pos);
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	3302      	adds	r3, #2
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	4611      	mov	r1, r2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fd f9b3 	bl	8001104 <lcdSetCursor>
			if ( subfix == SUBFIXNO ){
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d103      	bne.n	8003dac <LCD_Write_Number+0x1f0>
				lcdPrint(" ");
 8003da4:	482b      	ldr	r0, [pc, #172]	; (8003e54 <LCD_Write_Number+0x298>)
 8003da6:	f7fd f9df 	bl	8001168 <lcdPrint>
 8003daa:	e005      	b.n	8003db8 <LCD_Write_Number+0x1fc>
			}else if ( subfix == SUBFIXMMMIN ){
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d102      	bne.n	8003db8 <LCD_Write_Number+0x1fc>
				lcdPrint("mm/min ");
 8003db2:	4829      	ldr	r0, [pc, #164]	; (8003e58 <LCD_Write_Number+0x29c>)
 8003db4:	f7fd f9d8 	bl	8001168 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	4611      	mov	r1, r2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fd f99e 	bl	8001104 <lcdSetCursor>
			lcdPrint(str);
 8003dc8:	f107 0314 	add.w	r3, r7, #20
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fd f9cb 	bl	8001168 <lcdPrint>
}
 8003dd2:	e073      	b.n	8003ebc <LCD_Write_Number+0x300>
		}else if (value > -100){	//If value is higher than -100
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8003dda:	db24      	blt.n	8003e26 <LCD_Write_Number+0x26a>
			lcdSetCursor(col_pos+2,row_pos);
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	3302      	adds	r3, #2
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	4611      	mov	r1, r2
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fd f98a 	bl	8001104 <lcdSetCursor>
			if ( subfix == SUBFIXNO ){
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d103      	bne.n	8003dfe <LCD_Write_Number+0x242>
				lcdPrint("   ");
 8003df6:	481a      	ldr	r0, [pc, #104]	; (8003e60 <LCD_Write_Number+0x2a4>)
 8003df8:	f7fd f9b6 	bl	8001168 <lcdPrint>
 8003dfc:	e005      	b.n	8003e0a <LCD_Write_Number+0x24e>
			}else if ( subfix == SUBFIXMMMIN ){
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d102      	bne.n	8003e0a <LCD_Write_Number+0x24e>
				lcdPrint("mm/min ");
 8003e04:	4814      	ldr	r0, [pc, #80]	; (8003e58 <LCD_Write_Number+0x29c>)
 8003e06:	f7fd f9af 	bl	8001168 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	4611      	mov	r1, r2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fd f975 	bl	8001104 <lcdSetCursor>
			lcdPrint(str);
 8003e1a:	f107 0314 	add.w	r3, r7, #20
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fd f9a2 	bl	8001168 <lcdPrint>
}
 8003e24:	e04a      	b.n	8003ebc <LCD_Write_Number+0x300>
		}else if (value > -1000){	//If value is higher than -1000
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003e2c:	dd46      	ble.n	8003ebc <LCD_Write_Number+0x300>
			lcdSetCursor(col_pos+2,row_pos);
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	3302      	adds	r3, #2
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fd f961 	bl	8001104 <lcdSetCursor>
			if ( subfix == SUBFIXNO ){
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10d      	bne.n	8003e64 <LCD_Write_Number+0x2a8>
				lcdPrint("   ");
 8003e48:	4805      	ldr	r0, [pc, #20]	; (8003e60 <LCD_Write_Number+0x2a4>)
 8003e4a:	f7fd f98d 	bl	8001168 <lcdPrint>
 8003e4e:	e00f      	b.n	8003e70 <LCD_Write_Number+0x2b4>
 8003e50:	08009dc0 	.word	0x08009dc0
 8003e54:	08009dc4 	.word	0x08009dc4
 8003e58:	08009dc8 	.word	0x08009dc8
 8003e5c:	0001869f 	.word	0x0001869f
 8003e60:	08009dd0 	.word	0x08009dd0
			}else if ( subfix == SUBFIXMMMIN ){
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d102      	bne.n	8003e70 <LCD_Write_Number+0x2b4>
				lcdPrint("mm/min ");
 8003e6a:	4816      	ldr	r0, [pc, #88]	; (8003ec4 <LCD_Write_Number+0x308>)
 8003e6c:	f7fd f97c 	bl	8001168 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	4611      	mov	r1, r2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fd f942 	bl	8001104 <lcdSetCursor>
			lcdPrint(str);
 8003e80:	f107 0314 	add.w	r3, r7, #20
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fd f96f 	bl	8001168 <lcdPrint>
}
 8003e8a:	e017      	b.n	8003ebc <LCD_Write_Number+0x300>
		lcdSetCursor(col_pos,row_pos);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	4611      	mov	r1, r2
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd f934 	bl	8001104 <lcdSetCursor>
		lcdPrint("0");
 8003e9c:	480a      	ldr	r0, [pc, #40]	; (8003ec8 <LCD_Write_Number+0x30c>)
 8003e9e:	f7fd f963 	bl	8001168 <lcdPrint>
		if ( subfix == SUBFIXNO ){
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d103      	bne.n	8003eb0 <LCD_Write_Number+0x2f4>
			lcdPrint("   ");
 8003ea8:	4808      	ldr	r0, [pc, #32]	; (8003ecc <LCD_Write_Number+0x310>)
 8003eaa:	f7fd f95d 	bl	8001168 <lcdPrint>
}
 8003eae:	e005      	b.n	8003ebc <LCD_Write_Number+0x300>
		}else if ( subfix == SUBFIXMMMIN ){
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d102      	bne.n	8003ebc <LCD_Write_Number+0x300>
			lcdPrint("mm/min");
 8003eb6:	4806      	ldr	r0, [pc, #24]	; (8003ed0 <LCD_Write_Number+0x314>)
 8003eb8:	f7fd f956 	bl	8001168 <lcdPrint>
}
 8003ebc:	bf00      	nop
 8003ebe:	3720      	adds	r7, #32
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	08009dc8 	.word	0x08009dc8
 8003ec8:	08009dd4 	.word	0x08009dd4
 8003ecc:	08009dd0 	.word	0x08009dd0
 8003ed0:	08009dd8 	.word	0x08009dd8

08003ed4 <_float_to_char>:
  * @brief Function to convert float number to char
  * @param 	x - float value which expected to be converted
  * 		p - char used for the conversion
  * @retval Pointer to the char in which the value will be loaded
  */
static char * _float_to_char(float x, char *p) {
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	ed87 0a01 	vstr	s0, [r7, #4]
 8003ede:	6038      	str	r0, [r7, #0]
    char *s = p + CHAR_BUFF_SIZE; // go to end of buffer
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	617b      	str	r3, [r7, #20]
    uint16_t decimals;  // variable to store the decimals
    int units;  // variable to store the units (part to left of decimal place)
    if (x < 0) { // take care of negative numbers
 8003ee6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003eea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef2:	d51e      	bpl.n	8003f32 <_float_to_char+0x5e>
        decimals = (int)(x * -100) % 100; // make 1000 for 3 decimals etc.
 8003ef4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ef8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004038 <_float_to_char+0x164>
 8003efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f04:	ee17 2a90 	vmov	r2, s15
 8003f08:	4b4c      	ldr	r3, [pc, #304]	; (800403c <_float_to_char+0x168>)
 8003f0a:	fb83 1302 	smull	r1, r3, r3, r2
 8003f0e:	1159      	asrs	r1, r3, #5
 8003f10:	17d3      	asrs	r3, r2, #31
 8003f12:	1acb      	subs	r3, r1, r3
 8003f14:	2164      	movs	r1, #100	; 0x64
 8003f16:	fb01 f303 	mul.w	r3, r1, r3
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	827b      	strh	r3, [r7, #18]
        units = (int)(-1 * x);
 8003f1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f22:	eef1 7a67 	vneg.f32	s15, s15
 8003f26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f2a:	ee17 3a90 	vmov	r3, s15
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	e01b      	b.n	8003f6a <_float_to_char+0x96>
    } else { // positive numbers
        decimals = (int)(x * 100) % 100;
 8003f32:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f36:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8004040 <_float_to_char+0x16c>
 8003f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f42:	ee17 2a90 	vmov	r2, s15
 8003f46:	4b3d      	ldr	r3, [pc, #244]	; (800403c <_float_to_char+0x168>)
 8003f48:	fb83 1302 	smull	r1, r3, r3, r2
 8003f4c:	1159      	asrs	r1, r3, #5
 8003f4e:	17d3      	asrs	r3, r2, #31
 8003f50:	1acb      	subs	r3, r1, r3
 8003f52:	2164      	movs	r1, #100	; 0x64
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	827b      	strh	r3, [r7, #18]
        units = (int)x;
 8003f5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f64:	ee17 3a90 	vmov	r3, s15
 8003f68:	60fb      	str	r3, [r7, #12]
    }

    *--s = (decimals % 10) + '0';
 8003f6a:	8a7a      	ldrh	r2, [r7, #18]
 8003f6c:	4b35      	ldr	r3, [pc, #212]	; (8004044 <_float_to_char+0x170>)
 8003f6e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f72:	08d9      	lsrs	r1, r3, #3
 8003f74:	460b      	mov	r3, r1
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	3a01      	subs	r2, #1
 8003f86:	617a      	str	r2, [r7, #20]
 8003f88:	3330      	adds	r3, #48	; 0x30
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	701a      	strb	r2, [r3, #0]
    decimals /= 10; // repeat for as many decimal places as you need
 8003f90:	8a7b      	ldrh	r3, [r7, #18]
 8003f92:	4a2c      	ldr	r2, [pc, #176]	; (8004044 <_float_to_char+0x170>)
 8003f94:	fba2 2303 	umull	r2, r3, r2, r3
 8003f98:	08db      	lsrs	r3, r3, #3
 8003f9a:	827b      	strh	r3, [r7, #18]
    *--s = (decimals % 10) + '0';
 8003f9c:	8a7a      	ldrh	r2, [r7, #18]
 8003f9e:	4b29      	ldr	r3, [pc, #164]	; (8004044 <_float_to_char+0x170>)
 8003fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa4:	08d9      	lsrs	r1, r3, #3
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	3a01      	subs	r2, #1
 8003fb8:	617a      	str	r2, [r7, #20]
 8003fba:	3330      	adds	r3, #48	; 0x30
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	701a      	strb	r2, [r3, #0]
    *--s = '.';
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	222e      	movs	r2, #46	; 0x2e
 8003fcc:	701a      	strb	r2, [r3, #0]

    while (units > 0) {
 8003fce:	e01b      	b.n	8004008 <_float_to_char+0x134>
        *--s = (units % 10) + '0';
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4b1d      	ldr	r3, [pc, #116]	; (8004048 <_float_to_char+0x174>)
 8003fd4:	fb83 1302 	smull	r1, r3, r3, r2
 8003fd8:	1099      	asrs	r1, r3, #2
 8003fda:	17d3      	asrs	r3, r2, #31
 8003fdc:	1ac9      	subs	r1, r1, r3
 8003fde:	460b      	mov	r3, r1
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	1ad1      	subs	r1, r2, r3
 8003fe8:	b2cb      	uxtb	r3, r1
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	3a01      	subs	r2, #1
 8003fee:	617a      	str	r2, [r7, #20]
 8003ff0:	3330      	adds	r3, #48	; 0x30
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	701a      	strb	r2, [r3, #0]
        units /= 10;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4a13      	ldr	r2, [pc, #76]	; (8004048 <_float_to_char+0x174>)
 8003ffc:	fb82 1203 	smull	r1, r2, r2, r3
 8004000:	1092      	asrs	r2, r2, #2
 8004002:	17db      	asrs	r3, r3, #31
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	60fb      	str	r3, [r7, #12]
    while (units > 0) {
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	dce0      	bgt.n	8003fd0 <_float_to_char+0xfc>
    }
    if (x < 0) *--s = '-'; // unary minus sign for negative numbers
 800400e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004012:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800401a:	d505      	bpl.n	8004028 <_float_to_char+0x154>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	3b01      	subs	r3, #1
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	222d      	movs	r2, #45	; 0x2d
 8004026:	701a      	strb	r2, [r3, #0]
    return s;
 8004028:	697b      	ldr	r3, [r7, #20]
}
 800402a:	4618      	mov	r0, r3
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	c2c80000 	.word	0xc2c80000
 800403c:	51eb851f 	.word	0x51eb851f
 8004040:	42c80000 	.word	0x42c80000
 8004044:	cccccccd 	.word	0xcccccccd
 8004048:	66666667 	.word	0x66666667

0800404c <LCD_Write_Float_Number>:
  * @param 	float_char - char expected to be writen
  * 		col_pos - column position for the number
  * 		row_pos - raw position for the number
  * @retval
  */
void LCD_Write_Float_Number(float float_char, int32_t col_pos_float, int32_t row_pos_float){
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af00      	add	r7, sp, #0
 8004052:	ed87 0a03 	vstr	s0, [r7, #12]
 8004056:	60b8      	str	r0, [r7, #8]
 8004058:	6079      	str	r1, [r7, #4]
	char float2char[CHAR_BUFF_SIZE+1];
	float2char[CHAR_BUFF_SIZE] = '\0';
 800405a:	2300      	movs	r3, #0
 800405c:	763b      	strb	r3, [r7, #24]
	char float1[4];						//Initialization array to save the output
	char *ptr = float1;
 800405e:	f107 0310 	add.w	r3, r7, #16
 8004062:	61fb      	str	r3, [r7, #28]
	if (float_char < 1 ){				//If float is lower than 1 print an extra 0 on the left
 8004064:	edd7 7a03 	vldr	s15, [r7, #12]
 8004068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800406c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004074:	d516      	bpl.n	80040a4 <LCD_Write_Float_Number+0x58>
		lcdSetCursor(col_pos_float, row_pos_float);
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	4611      	mov	r1, r2
 8004080:	4618      	mov	r0, r3
 8004082:	f7fd f83f 	bl	8001104 <lcdSetCursor>
		lcdPrint("0");
 8004086:	4813      	ldr	r0, [pc, #76]	; (80040d4 <LCD_Write_Float_Number+0x88>)
 8004088:	f7fd f86e 	bl	8001168 <lcdPrint>
		ptr = _float_to_char(float_char,&float2char[0]);
 800408c:	f107 0314 	add.w	r3, r7, #20
 8004090:	4618      	mov	r0, r3
 8004092:	ed97 0a03 	vldr	s0, [r7, #12]
 8004096:	f7ff ff1d 	bl	8003ed4 <_float_to_char>
 800409a:	61f8      	str	r0, [r7, #28]
		lcdPrint(ptr);
 800409c:	69f8      	ldr	r0, [r7, #28]
 800409e:	f7fd f863 	bl	8001168 <lcdPrint>
	}else{
		ptr = _float_to_char(float_char,&float2char[0]);
		lcdSetCursor(col_pos_float, row_pos_float);
		lcdPrint(ptr);
	}
}
 80040a2:	e012      	b.n	80040ca <LCD_Write_Float_Number+0x7e>
		ptr = _float_to_char(float_char,&float2char[0]);
 80040a4:	f107 0314 	add.w	r3, r7, #20
 80040a8:	4618      	mov	r0, r3
 80040aa:	ed97 0a03 	vldr	s0, [r7, #12]
 80040ae:	f7ff ff11 	bl	8003ed4 <_float_to_char>
 80040b2:	61f8      	str	r0, [r7, #28]
		lcdSetCursor(col_pos_float, row_pos_float);
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	4611      	mov	r1, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fd f820 	bl	8001104 <lcdSetCursor>
		lcdPrint(ptr);
 80040c4:	69f8      	ldr	r0, [r7, #28]
 80040c6:	f7fd f84f 	bl	8001168 <lcdPrint>
}
 80040ca:	bf00      	nop
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	08009dd4 	.word	0x08009dd4

080040d8 <Motor_Enable>:
/**
  * @brief Function to Enable EN signal for Motor Driver
  * @param 	invert - variable to invert the EN pin logic
  * @retval
  */
void Motor_Enable(uint16_t invert){
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, (GPIO_PIN_SET^invert));	//Enable Motor, XOR with SET to invert it if selected
 80040e2:	88fb      	ldrh	r3, [r7, #6]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	f083 0301 	eor.w	r3, r3, #1
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	461a      	mov	r2, r3
 80040ee:	2108      	movs	r1, #8
 80040f0:	4803      	ldr	r0, [pc, #12]	; (8004100 <Motor_Enable+0x28>)
 80040f2:	f002 f913 	bl	800631c <HAL_GPIO_WritePin>
}
 80040f6:	bf00      	nop
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40020000 	.word	0x40020000

08004104 <Motor_Disable>:
/**
  * @brief Function to Disable EN signal for Motor Driver
  * @param 	invert - variable to invert the EN pin logic
  * @retval
  */
void Motor_Disable(uint16_t invert){
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, (GPIO_PIN_RESET^invert));	//Disable Motor, XOR with SET to invert it if selected
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	461a      	mov	r2, r3
 8004114:	2108      	movs	r1, #8
 8004116:	4805      	ldr	r0, [pc, #20]	; (800412c <Motor_Disable+0x28>)
 8004118:	f002 f900 	bl	800631c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800411c:	2100      	movs	r1, #0
 800411e:	4804      	ldr	r0, [pc, #16]	; (8004130 <Motor_Disable+0x2c>)
 8004120:	f003 fc12 	bl	8007948 <HAL_TIM_PWM_Stop>
}
 8004124:	bf00      	nop
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40020000 	.word	0x40020000
 8004130:	20000620 	.word	0x20000620

08004134 <Motor_Direction>:
  * @brief Function to select the direction of the motor
  * @param 	direction - variable to set the direction of the motor (RIGHT or LEFT)
  * 		invert - variable to invert the DIR pin logic
  * @retval
  */
void Motor_Direction(uint16_t direction, uint16_t invert){
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	460a      	mov	r2, r1
 800413e:	80fb      	strh	r3, [r7, #6]
 8004140:	4613      	mov	r3, r2
 8004142:	80bb      	strh	r3, [r7, #4]
	if ( direction == RIGHT ){
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d10a      	bne.n	8004160 <Motor_Direction+0x2c>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, (GPIO_PIN_SET^invert));	//Disable Motor, XOR with SET to invert it if selected
 800414a:	88bb      	ldrh	r3, [r7, #4]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f083 0301 	eor.w	r3, r3, #1
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	2104      	movs	r1, #4
 8004158:	4808      	ldr	r0, [pc, #32]	; (800417c <Motor_Direction+0x48>)
 800415a:	f002 f8df 	bl	800631c <HAL_GPIO_WritePin>
	}else if (direction == LEFT){
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, (GPIO_PIN_RESET^invert));	//Disable Motor, XOR with SET to invert it if selected
	}

}
 800415e:	e009      	b.n	8004174 <Motor_Direction+0x40>
	}else if (direction == LEFT){
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <Motor_Direction+0x40>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, (GPIO_PIN_RESET^invert));	//Disable Motor, XOR with SET to invert it if selected
 8004166:	88bb      	ldrh	r3, [r7, #4]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	461a      	mov	r2, r3
 800416c:	2104      	movs	r1, #4
 800416e:	4803      	ldr	r0, [pc, #12]	; (800417c <Motor_Direction+0x48>)
 8004170:	f002 f8d4 	bl	800631c <HAL_GPIO_WritePin>
}
 8004174:	bf00      	nop
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40020000 	.word	0x40020000

08004180 <Motor_Speed_RPM>:
/**
  * @brief Function to select the speed of the motor in RPM
  * @param 	rpm - Speed value in RPM it is wanted
  * @retval
  */
void Motor_Speed_RPM(uint16_t speed){
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	80fb      	strh	r3, [r7, #6]
	float ARR_value_temp = 0;
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]
	uint32_t ARR_value;
	if ((TIM2->CR1 & (1 << 0)) ^ (1 << 0)){			//Checking if the Timer is already enabled, if not, enable it
 8004190:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <Motor_Speed_RPM+0x22>
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <Motor_Speed_RPM+0x24>
 80041a2:	2300      	movs	r3, #0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <Motor_Speed_RPM+0x30>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	//Enable Timer2 on PWM Mode
 80041a8:	2100      	movs	r1, #0
 80041aa:	4818      	ldr	r0, [pc, #96]	; (800420c <Motor_Speed_RPM+0x8c>)
 80041ac:	f003 fb1c 	bl	80077e8 <HAL_TIM_PWM_Start>
	}
	if (speed > 0){
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d021      	beq.n	80041fa <Motor_Speed_RPM+0x7a>
	ARR_value_temp = ((60 * (float) CLK_FREQ_T2)/(speed*parameter.motor_stepsrev));	//Calculation Value to load in ARR
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	4a15      	ldr	r2, [pc, #84]	; (8004210 <Motor_Speed_RPM+0x90>)
 80041ba:	8892      	ldrh	r2, [r2, #4]
 80041bc:	fb02 f303 	mul.w	r3, r2, r3
 80041c0:	ee07 3a90 	vmov	s15, r3
 80041c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041c8:	eddf 6a12 	vldr	s13, [pc, #72]	; 8004214 <Motor_Speed_RPM+0x94>
 80041cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041d0:	edc7 7a03 	vstr	s15, [r7, #12]
	ARR_value = (uint32_t) ARR_value_temp;	//Uint32 casting
 80041d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80041d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041dc:	ee17 3a90 	vmov	r3, s15
 80041e0:	60bb      	str	r3, [r7, #8]
	TIM2->ARR = ARR_value+1;				//Load ARR + 1
 80041e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	3301      	adds	r3, #1
 80041ea:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CCR1 = (uint32_t) (ARR_value+1)/2;	//Load CCR1 to have always 50% Duty Cycle
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	3301      	adds	r3, #1
 80041f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041f4:	085b      	lsrs	r3, r3, #1
 80041f6:	6353      	str	r3, [r2, #52]	; 0x34
	}else{
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);	//Disable Timer2 on PWM Mode
	}
}
 80041f8:	e003      	b.n	8004202 <Motor_Speed_RPM+0x82>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);	//Disable Timer2 on PWM Mode
 80041fa:	2100      	movs	r1, #0
 80041fc:	4803      	ldr	r0, [pc, #12]	; (800420c <Motor_Speed_RPM+0x8c>)
 80041fe:	f003 fba3 	bl	8007948 <HAL_TIM_PWM_Stop>
}
 8004202:	bf00      	nop
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000620 	.word	0x20000620
 8004210:	200007d8 	.word	0x200007d8
 8004214:	4f163426 	.word	0x4f163426

08004218 <Motor_Feedrate_Update>:
  * @brief Function to update the feedrate of the motor following the acceleration
  * @param 	current_feedrate - Current feedrate
  * 		target_speed - Target feedrate
  * @retval updated_feedrate - Updated feedrate
  */
uint16_t Motor_Feedrate_Update(int16_t *current_feedrate, int16_t *target_feedrate){
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
	static uint16_t prev_target_feedrate;	//Static Variable to storage the previous target feedrate
	static uint16_t acc_step_increment;		//Static Variable to storage the acceleration step increment
	static uint16_t diff_feedrate;			//Static variable to storage the delta feedrate

	uint16_t acc_step = ceil(parameter.acc_time/parameter.acc_update_ratio);	//Calculation acc_step with the desired time in ms, and the refresh ratio on acc update
 8004222:	4b61      	ldr	r3, [pc, #388]	; (80043a8 <Motor_Feedrate_Update+0x190>)
 8004224:	89da      	ldrh	r2, [r3, #14]
 8004226:	4b60      	ldr	r3, [pc, #384]	; (80043a8 <Motor_Feedrate_Update+0x190>)
 8004228:	8a1b      	ldrh	r3, [r3, #16]
 800422a:	fbb2 f3f3 	udiv	r3, r2, r3
 800422e:	b29b      	uxth	r3, r3
 8004230:	4618      	mov	r0, r3
 8004232:	f7fc f97f 	bl	8000534 <__aeabi_i2d>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4610      	mov	r0, r2
 800423c:	4619      	mov	r1, r3
 800423e:	f7fc fc7d 	bl	8000b3c <__aeabi_d2uiz>
 8004242:	4603      	mov	r3, r0
 8004244:	81fb      	strh	r3, [r7, #14]
															//This will provide the number of steps we need to do to accelerate on the desired ACC_TIME

	diff_feedrate = *target_feedrate - *current_feedrate;	//Calculation for the Delta feedrate
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800424c:	b29a      	uxth	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004254:	b29b      	uxth	r3, r3
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	b29a      	uxth	r2, r3
 800425a:	4b54      	ldr	r3, [pc, #336]	; (80043ac <Motor_Feedrate_Update+0x194>)
 800425c:	801a      	strh	r2, [r3, #0]

	if (prev_target_feedrate != *target_feedrate){			//If the storaged feedrate changed since last time
 800425e:	4b54      	ldr	r3, [pc, #336]	; (80043b0 <Motor_Feedrate_Update+0x198>)
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800426a:	429a      	cmp	r2, r3
 800426c:	d026      	beq.n	80042bc <Motor_Feedrate_Update+0xa4>
		prev_target_feedrate = *target_feedrate;				//Reload the prev_target_feedrate with latest value
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004274:	b29a      	uxth	r2, r3
 8004276:	4b4e      	ldr	r3, [pc, #312]	; (80043b0 <Motor_Feedrate_Update+0x198>)
 8004278:	801a      	strh	r2, [r3, #0]
		diff_feedrate = abs(*target_feedrate - *current_feedrate);	//Re-calculate the delta feedrate
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004280:	461a      	mov	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	bfb8      	it	lt
 800428e:	425b      	neglt	r3, r3
 8004290:	b29a      	uxth	r2, r3
 8004292:	4b46      	ldr	r3, [pc, #280]	; (80043ac <Motor_Feedrate_Update+0x194>)
 8004294:	801a      	strh	r2, [r3, #0]
		acc_step_increment = ceil(diff_feedrate / acc_step);	//Re-calculate the acceleration step increment, so we take the Delta feedrate and divide it by
 8004296:	4b45      	ldr	r3, [pc, #276]	; (80043ac <Motor_Feedrate_Update+0x194>)
 8004298:	881a      	ldrh	r2, [r3, #0]
 800429a:	89fb      	ldrh	r3, [r7, #14]
 800429c:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fc f946 	bl	8000534 <__aeabi_i2d>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4610      	mov	r0, r2
 80042ae:	4619      	mov	r1, r3
 80042b0:	f7fc fc44 	bl	8000b3c <__aeabi_d2uiz>
 80042b4:	4603      	mov	r3, r0
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	4b3e      	ldr	r3, [pc, #248]	; (80043b4 <Motor_Feedrate_Update+0x19c>)
 80042ba:	801a      	strh	r2, [r3, #0]
																//the numbers of step required to meeting the timing
	}

	if ( *current_feedrate < *target_feedrate){			//If the current feedrate is lower than the target, accelerate
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	da1f      	bge.n	800430c <Motor_Feedrate_Update+0xf4>
		if (  (acc_step_increment >= diff_feedrate) || (!acc_step_increment) ){	//If the step increment is lower than the delta feedrate then we increase by one to reach the target
 80042cc:	4b39      	ldr	r3, [pc, #228]	; (80043b4 <Motor_Feedrate_Update+0x19c>)
 80042ce:	881a      	ldrh	r2, [r3, #0]
 80042d0:	4b36      	ldr	r3, [pc, #216]	; (80043ac <Motor_Feedrate_Update+0x194>)
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d203      	bcs.n	80042e0 <Motor_Feedrate_Update+0xc8>
 80042d8:	4b36      	ldr	r3, [pc, #216]	; (80043b4 <Motor_Feedrate_Update+0x19c>)
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <Motor_Feedrate_Update+0xdc>
																				//Or if the acceleration step increment is zero (If the delta feedrate is lower than the acceleration step)
			*current_feedrate = *current_feedrate + 1;	//Increment by one
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3301      	adds	r3, #1
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	b21a      	sxth	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	801a      	strh	r2, [r3, #0]
 80042f2:	e03a      	b.n	800436a <Motor_Feedrate_Update+0x152>
		}else{											//If the delta feedrate is bigger than acc_step and the the step incrmenet is lower than the delta feedrate the we increase
			*current_feedrate = *current_feedrate + acc_step_increment;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	4b2d      	ldr	r3, [pc, #180]	; (80043b4 <Motor_Feedrate_Update+0x19c>)
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	4413      	add	r3, r2
 8004302:	b29b      	uxth	r3, r3
 8004304:	b21a      	sxth	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	801a      	strh	r2, [r3, #0]
 800430a:	e02e      	b.n	800436a <Motor_Feedrate_Update+0x152>
		}
	}else if (*current_feedrate == *target_feedrate){	//If the target is achieved
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004318:	429a      	cmp	r2, r3
 800431a:	d026      	beq.n	800436a <Motor_Feedrate_Update+0x152>

	}else if ( *current_feedrate > *target_feedrate ){	//If the current feedrate is higher than the target, decelerate
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004328:	429a      	cmp	r2, r3
 800432a:	dd1e      	ble.n	800436a <Motor_Feedrate_Update+0x152>
		if (  (acc_step_increment >= diff_feedrate) || (!acc_step_increment) ){	//If the step increment is lower than the delta feedrate then we increase by one to reach the target
 800432c:	4b21      	ldr	r3, [pc, #132]	; (80043b4 <Motor_Feedrate_Update+0x19c>)
 800432e:	881a      	ldrh	r2, [r3, #0]
 8004330:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <Motor_Feedrate_Update+0x194>)
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d203      	bcs.n	8004340 <Motor_Feedrate_Update+0x128>
 8004338:	4b1e      	ldr	r3, [pc, #120]	; (80043b4 <Motor_Feedrate_Update+0x19c>)
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d109      	bne.n	8004354 <Motor_Feedrate_Update+0x13c>
																						//Or if the acceleration step increment is zero (If the delta feedrate is lower than the acceleration step)
			*current_feedrate = *current_feedrate - 1;	//Decrement by one
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004346:	b29b      	uxth	r3, r3
 8004348:	3b01      	subs	r3, #1
 800434a:	b29b      	uxth	r3, r3
 800434c:	b21a      	sxth	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	801a      	strh	r2, [r3, #0]
 8004352:	e00a      	b.n	800436a <Motor_Feedrate_Update+0x152>
		}else{											//If the delta feedrate is bigger than acc_step and the the step incrmenet is lower than the delta feedrate the we increase
			*current_feedrate = *current_feedrate - acc_step_increment;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800435a:	b29a      	uxth	r2, r3
 800435c:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <Motor_Feedrate_Update+0x19c>)
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	b29b      	uxth	r3, r3
 8004364:	b21a      	sxth	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	801a      	strh	r2, [r3, #0]
		}
	}

	uint16_t rpm = *current_feedrate/parameter.leadscrew_pitch;	//Calculation for RPM with the leadscrew pitch
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004370:	ee07 3a90 	vmov	s15, r3
 8004374:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <Motor_Feedrate_Update+0x190>)
 800437a:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8004386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800438a:	ee17 3a90 	vmov	r3, s15
 800438e:	81bb      	strh	r3, [r7, #12]
	Motor_Speed_RPM(rpm);	//Set the motor speed
 8004390:	89bb      	ldrh	r3, [r7, #12]
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff fef4 	bl	8004180 <Motor_Speed_RPM>

	return *current_feedrate;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800439e:	b29b      	uxth	r3, r3
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	200007d8 	.word	0x200007d8
 80043ac:	2000085c 	.word	0x2000085c
 80043b0:	2000085e 	.word	0x2000085e
 80043b4:	20000860 	.word	0x20000860

080043b8 <LCD_Write_Feedrate>:
  * @param 	feedrate - feedrate value which expected to be writen into the LCD
  * 		col_pos - column position for the number
  * 		row_pos - raw position for the number
  * @retval
  */
void LCD_Write_Feedrate(int32_t feedrate, int32_t col_pos, int32_t row_pos){
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
	static int32_t saved_feedrate;
	if ( saved_feedrate != feedrate ){					//Print only if the feedrate changed
 80043c4:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <LCD_Write_Feedrate+0x30>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d008      	beq.n	80043e0 <LCD_Write_Feedrate+0x28>
		LCD_Write_Number(feedrate,col_pos,row_pos, SUBFIXMMMIN);		//Write the number in the desired position
 80043ce:	2301      	movs	r3, #1
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	68b9      	ldr	r1, [r7, #8]
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7ff fbf1 	bl	8003bbc <LCD_Write_Number>
		//lcdPrint("mm/min ");							//Adding mm/min
		saved_feedrate = feedrate;						//Updating Feedrate Saved
 80043da:	4a03      	ldr	r2, [pc, #12]	; (80043e8 <LCD_Write_Feedrate+0x30>)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6013      	str	r3, [r2, #0]
	}
}
 80043e0:	bf00      	nop
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000864 	.word	0x20000864

080043ec <Switch_Status_Read>:
/**
  * @brief Function to read the value for the switchs
  * @param	- NONE
  * @retval	- Switch Status RIGHT, LEFT, MID, FAIL
  */
int16_t Switch_Status_Read(void){
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
	int16_t switch_right, switch_left, sw_status = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	80fb      	strh	r3, [r7, #6]
	switch_right = HAL_GPIO_ReadPin(SW_RIGHT_GPIO_Port, SW_RIGHT_Pin);	//Storage value of RIGHT pin
 80043f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043fa:	4821      	ldr	r0, [pc, #132]	; (8004480 <Switch_Status_Read+0x94>)
 80043fc:	f001 ff76 	bl	80062ec <HAL_GPIO_ReadPin>
 8004400:	4603      	mov	r3, r0
 8004402:	80bb      	strh	r3, [r7, #4]
	switch_left = HAL_GPIO_ReadPin(SW_LEFT_GPIO_Port, SW_LEFT_Pin);		//Storage value of LEFT pin
 8004404:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004408:	481d      	ldr	r0, [pc, #116]	; (8004480 <Switch_Status_Read+0x94>)
 800440a:	f001 ff6f 	bl	80062ec <HAL_GPIO_ReadPin>
 800440e:	4603      	mov	r3, r0
 8004410:	807b      	strh	r3, [r7, #2]
	if ( !switch_right & !switch_left ){	//If both are enabled at same time, return FAIL
 8004412:	88ba      	ldrh	r2, [r7, #4]
 8004414:	887b      	ldrh	r3, [r7, #2]
 8004416:	4313      	orrs	r3, r2
 8004418:	b21b      	sxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d103      	bne.n	8004426 <Switch_Status_Read+0x3a>
		sw_status = FAIL;
 800441e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004422:	80fb      	strh	r3, [r7, #6]
 8004424:	e026      	b.n	8004474 <Switch_Status_Read+0x88>
	}else if( switch_right & switch_left ){	//If none are enabled return MID point
 8004426:	88ba      	ldrh	r2, [r7, #4]
 8004428:	887b      	ldrh	r3, [r7, #2]
 800442a:	4013      	ands	r3, r2
 800442c:	b21b      	sxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <Switch_Status_Read+0x4c>
		sw_status = MID;
 8004432:	2302      	movs	r3, #2
 8004434:	80fb      	strh	r3, [r7, #6]
 8004436:	e01d      	b.n	8004474 <Switch_Status_Read+0x88>
	}else if ( ( !switch_right ) & switch_left ){	//If right is enable return RIGHT
 8004438:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800444c:	4013      	ands	r3, r2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <Switch_Status_Read+0x6c>
		sw_status = RIGHT;
 8004452:	2301      	movs	r3, #1
 8004454:	80fb      	strh	r3, [r7, #6]
 8004456:	e00d      	b.n	8004474 <Switch_Status_Read+0x88>
	}else if ( switch_right & ( !switch_left ) ){	//If left is enable return LEFT
 8004458:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800445c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004460:	2a00      	cmp	r2, #0
 8004462:	bf0c      	ite	eq
 8004464:	2201      	moveq	r2, #1
 8004466:	2200      	movne	r2, #0
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <Switch_Status_Read+0x88>
		sw_status = LEFT;
 8004470:	2300      	movs	r3, #0
 8004472:	80fb      	strh	r3, [r7, #6]
	}
	return sw_status;
 8004474:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40020400 	.word	0x40020400

08004484 <Update_Feedrate>:
/**
  * @brief Update Feedrate Function
  * @param old_value - Pointer to the value storaged as latest feedrate value
  * @retval new_feedrate - Updated Feedrate
  */
void Update_Feedrate(int16_t *feedrate){
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
	if (step_mode == STEP_NORMAL){
 800448c:	4b20      	ldr	r3, [pc, #128]	; (8004510 <Update_Feedrate+0x8c>)
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10d      	bne.n	80044b0 <Update_Feedrate+0x2c>
		*feedrate += Encoder_Read();	//Update Feedrate
 8004494:	f7ff fb52 	bl	8003b3c <Encoder_Read>
 8004498:	4601      	mov	r1, r0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	b28b      	uxth	r3, r1
 80044a4:	4413      	add	r3, r2
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	b21a      	sxth	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	801a      	strh	r2, [r3, #0]
 80044ae:	e015      	b.n	80044dc <Update_Feedrate+0x58>
	}else if (step_mode == STEP_x10){
 80044b0:	4b17      	ldr	r3, [pc, #92]	; (8004510 <Update_Feedrate+0x8c>)
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d111      	bne.n	80044dc <Update_Feedrate+0x58>
		*feedrate += ( 10 * Encoder_Read());	//Update Feedrate
 80044b8:	f7ff fb40 	bl	8003b3c <Encoder_Read>
 80044bc:	4602      	mov	r2, r0
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	4619      	mov	r1, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	b28b      	uxth	r3, r1
 80044d2:	4413      	add	r3, r2
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	b21a      	sxth	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	801a      	strh	r2, [r3, #0]
	}
	if (*feedrate <= 0 ){	//Limit the min value to zero
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	dc03      	bgt.n	80044ee <Update_Feedrate+0x6a>
		*feedrate = 1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	801a      	strh	r2, [r3, #0]
	}else if (*feedrate > parameter.max_feedrate){
		*feedrate = parameter.max_feedrate;
	}
}
 80044ec:	e00c      	b.n	8004508 <Update_Feedrate+0x84>
	}else if (*feedrate > parameter.max_feedrate){
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044f4:	461a      	mov	r2, r3
 80044f6:	4b07      	ldr	r3, [pc, #28]	; (8004514 <Update_Feedrate+0x90>)
 80044f8:	895b      	ldrh	r3, [r3, #10]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	dd04      	ble.n	8004508 <Update_Feedrate+0x84>
		*feedrate = parameter.max_feedrate;
 80044fe:	4b05      	ldr	r3, [pc, #20]	; (8004514 <Update_Feedrate+0x90>)
 8004500:	895b      	ldrh	r3, [r3, #10]
 8004502:	b21a      	sxth	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	801a      	strh	r2, [r3, #0]
}
 8004508:	bf00      	nop
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	200007d6 	.word	0x200007d6
 8004514:	200007d8 	.word	0x200007d8

08004518 <Encoder_Switch_Status_Read>:
/**
  * @brief Function to read the value for the encoder switch
  * @param	- NONE
  * @retval	- Encoder Switch Status TRUE, FALSE or TRUE_HOLD
  */
int16_t Encoder_Switch_Status_Read(void){
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
	static uint16_t temp_debouncing = 0;	//Temporal variable to storage the debouncing
	static uint16_t previous_en_sw_status;	//Variable to storage the previous status of the encoder switch
	uint16_t en_sw_status = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	80fb      	strh	r3, [r7, #6]
	uint16_t encoder_sw_read_value;

	encoder_sw_read_value = HAL_GPIO_ReadPin(EN_SW_GPIO_Port, EN_SW_Pin);
 8004522:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004526:	482f      	ldr	r0, [pc, #188]	; (80045e4 <Encoder_Switch_Status_Read+0xcc>)
 8004528:	f001 fee0 	bl	80062ec <HAL_GPIO_ReadPin>
 800452c:	4603      	mov	r3, r0
 800452e:	80bb      	strh	r3, [r7, #4]

	if ( ( !encoder_sw_read_value ) && ( !debouncing_en_sw ) ){	//If encoder is pressed and debouncing not enable
 8004530:	88bb      	ldrh	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10d      	bne.n	8004552 <Encoder_Switch_Status_Read+0x3a>
 8004536:	4b2c      	ldr	r3, [pc, #176]	; (80045e8 <Encoder_Switch_Status_Read+0xd0>)
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <Encoder_Switch_Status_Read+0x3a>
		debouncing_en_sw = TRUE;	//Enable debouncing
 800453e:	4b2a      	ldr	r3, [pc, #168]	; (80045e8 <Encoder_Switch_Status_Read+0xd0>)
 8004540:	2201      	movs	r2, #1
 8004542:	801a      	strh	r2, [r3, #0]
		temp_debouncing = debouncing;	//Load value from debouncing
 8004544:	4b29      	ldr	r3, [pc, #164]	; (80045ec <Encoder_Switch_Status_Read+0xd4>)
 8004546:	881a      	ldrh	r2, [r3, #0]
 8004548:	4b29      	ldr	r3, [pc, #164]	; (80045f0 <Encoder_Switch_Status_Read+0xd8>)
 800454a:	801a      	strh	r2, [r3, #0]
		en_sw_status = FALSE;			//SW status still disable waiting debouncing time
 800454c:	2300      	movs	r3, #0
 800454e:	80fb      	strh	r3, [r7, #6]
 8004550:	e041      	b.n	80045d6 <Encoder_Switch_Status_Read+0xbe>
	}else if ( ( !encoder_sw_read_value ) && ( temp_debouncing+2 <= debouncing )){ //If encoder still pressed and debouncing +2 already passed
 8004552:	88bb      	ldrh	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d11f      	bne.n	8004598 <Encoder_Switch_Status_Read+0x80>
 8004558:	4b25      	ldr	r3, [pc, #148]	; (80045f0 <Encoder_Switch_Status_Read+0xd8>)
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	3301      	adds	r3, #1
 800455e:	4a23      	ldr	r2, [pc, #140]	; (80045ec <Encoder_Switch_Status_Read+0xd4>)
 8004560:	8812      	ldrh	r2, [r2, #0]
 8004562:	4293      	cmp	r3, r2
 8004564:	da18      	bge.n	8004598 <Encoder_Switch_Status_Read+0x80>
		en_sw_status = FALSE;	//Status still FALSE
 8004566:	2300      	movs	r3, #0
 8004568:	80fb      	strh	r3, [r7, #6]
		//debouncing_en_sw = FALSE;	//Disable debouncing
		previous_en_sw_status = TRUE;	//Set previous status of enable TRUE
 800456a:	4b22      	ldr	r3, [pc, #136]	; (80045f4 <Encoder_Switch_Status_Read+0xdc>)
 800456c:	2201      	movs	r2, #1
 800456e:	801a      	strh	r2, [r3, #0]
		if ( temp_debouncing + SW_HOLD_TIME <= debouncing ){	//If we keep the button pressed more than the time defines
 8004570:	4b1f      	ldr	r3, [pc, #124]	; (80045f0 <Encoder_Switch_Status_Read+0xd8>)
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	3313      	adds	r3, #19
 8004576:	4a1d      	ldr	r2, [pc, #116]	; (80045ec <Encoder_Switch_Status_Read+0xd4>)
 8004578:	8812      	ldrh	r2, [r2, #0]
 800457a:	4293      	cmp	r3, r2
 800457c:	da2b      	bge.n	80045d6 <Encoder_Switch_Status_Read+0xbe>
			en_sw_status = TRUE_HOLD;
 800457e:	2303      	movs	r3, #3
 8004580:	80fb      	strh	r3, [r7, #6]
			previous_en_sw_status = TRUE_HOLD;
 8004582:	4b1c      	ldr	r3, [pc, #112]	; (80045f4 <Encoder_Switch_Status_Read+0xdc>)
 8004584:	2203      	movs	r2, #3
 8004586:	801a      	strh	r2, [r3, #0]
			temp_debouncing = debouncing;
 8004588:	4b18      	ldr	r3, [pc, #96]	; (80045ec <Encoder_Switch_Status_Read+0xd4>)
 800458a:	881a      	ldrh	r2, [r3, #0]
 800458c:	4b18      	ldr	r3, [pc, #96]	; (80045f0 <Encoder_Switch_Status_Read+0xd8>)
 800458e:	801a      	strh	r2, [r3, #0]
			debouncing_en_sw = FALSE;	//Disable debouncing
 8004590:	4b15      	ldr	r3, [pc, #84]	; (80045e8 <Encoder_Switch_Status_Read+0xd0>)
 8004592:	2200      	movs	r2, #0
 8004594:	801a      	strh	r2, [r3, #0]
		if ( temp_debouncing + SW_HOLD_TIME <= debouncing ){	//If we keep the button pressed more than the time defines
 8004596:	e01e      	b.n	80045d6 <Encoder_Switch_Status_Read+0xbe>
		}
	}else if( ( encoder_sw_read_value )){
 8004598:	88bb      	ldrh	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d01b      	beq.n	80045d6 <Encoder_Switch_Status_Read+0xbe>
		if ( previous_en_sw_status == TRUE_HOLD ){	//If previous status was HOLD< do not report push
 800459e:	4b15      	ldr	r3, [pc, #84]	; (80045f4 <Encoder_Switch_Status_Read+0xdc>)
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d105      	bne.n	80045b2 <Encoder_Switch_Status_Read+0x9a>
			en_sw_status = FALSE;
 80045a6:	2300      	movs	r3, #0
 80045a8:	80fb      	strh	r3, [r7, #6]
			debouncing_en_sw = FALSE;	//Enable debouncing
 80045aa:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <Encoder_Switch_Status_Read+0xd0>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	801a      	strh	r2, [r3, #0]
 80045b0:	e00e      	b.n	80045d0 <Encoder_Switch_Status_Read+0xb8>
		}else if ( previous_en_sw_status == TRUE ){
 80045b2:	4b10      	ldr	r3, [pc, #64]	; (80045f4 <Encoder_Switch_Status_Read+0xdc>)
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d105      	bne.n	80045c6 <Encoder_Switch_Status_Read+0xae>
			en_sw_status = TRUE;	//If button released then send status TRUE
 80045ba:	2301      	movs	r3, #1
 80045bc:	80fb      	strh	r3, [r7, #6]
			debouncing_en_sw = FALSE;	//Disable debouncing
 80045be:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <Encoder_Switch_Status_Read+0xd0>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	801a      	strh	r2, [r3, #0]
 80045c4:	e004      	b.n	80045d0 <Encoder_Switch_Status_Read+0xb8>
		}else{
			en_sw_status = FALSE;
 80045c6:	2300      	movs	r3, #0
 80045c8:	80fb      	strh	r3, [r7, #6]
			debouncing_en_sw = FALSE;	//Disable debouncing
 80045ca:	4b07      	ldr	r3, [pc, #28]	; (80045e8 <Encoder_Switch_Status_Read+0xd0>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	801a      	strh	r2, [r3, #0]
		}
		previous_en_sw_status = FALSE;	//Reset variable of previous status
 80045d0:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <Encoder_Switch_Status_Read+0xdc>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	801a      	strh	r2, [r3, #0]
	}else{
		//en_sw_status = FALSE;	//In case other condition, send FALSE
	}
	return en_sw_status;
 80045d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40020400 	.word	0x40020400
 80045e8:	20000848 	.word	0x20000848
 80045ec:	2000084c 	.word	0x2000084c
 80045f0:	20000868 	.word	0x20000868
 80045f4:	2000086a 	.word	0x2000086a

080045f8 <Aux_Switch_Status_Read>:
/**
  * @brief Function to read the value for auxiliary switch
  * @param	- NONE
  * @retval	- Aux Switch Status TRUE, FALSE or TRUE_HOLD
  */
int16_t Aux_Switch_Status_Read(void){
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
	static uint16_t aux_temp_debouncing = 0;	//Temporal variable to storage the debouncing
	static uint16_t previous_aux_sw_status;	//Variable to storage the previous status of the encoder switch
	uint16_t aux_sw_status = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	80fb      	strh	r3, [r7, #6]
	uint16_t aux_sw_read_value;

	aux_sw_read_value = HAL_GPIO_ReadPin(SEC_SW_GPIO_Port, SEC_SW_Pin);
 8004602:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004606:	482c      	ldr	r0, [pc, #176]	; (80046b8 <Aux_Switch_Status_Read+0xc0>)
 8004608:	f001 fe70 	bl	80062ec <HAL_GPIO_ReadPin>
 800460c:	4603      	mov	r3, r0
 800460e:	80bb      	strh	r3, [r7, #4]

	if ( ( !aux_sw_read_value ) && ( !debouncing_aux_sw ) ){	//If encoder is pressed and debouncing not enable
 8004610:	88bb      	ldrh	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10d      	bne.n	8004632 <Aux_Switch_Status_Read+0x3a>
 8004616:	4b29      	ldr	r3, [pc, #164]	; (80046bc <Aux_Switch_Status_Read+0xc4>)
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <Aux_Switch_Status_Read+0x3a>
		debouncing_aux_sw = TRUE;	//Enable debouncing
 800461e:	4b27      	ldr	r3, [pc, #156]	; (80046bc <Aux_Switch_Status_Read+0xc4>)
 8004620:	2201      	movs	r2, #1
 8004622:	801a      	strh	r2, [r3, #0]
		aux_temp_debouncing = aux_debouncing;	//Load value from debouncing
 8004624:	4b26      	ldr	r3, [pc, #152]	; (80046c0 <Aux_Switch_Status_Read+0xc8>)
 8004626:	881a      	ldrh	r2, [r3, #0]
 8004628:	4b26      	ldr	r3, [pc, #152]	; (80046c4 <Aux_Switch_Status_Read+0xcc>)
 800462a:	801a      	strh	r2, [r3, #0]
		aux_sw_status = FALSE;			//SW status still disable waiting debouncing time
 800462c:	2300      	movs	r3, #0
 800462e:	80fb      	strh	r3, [r7, #6]
 8004630:	e03b      	b.n	80046aa <Aux_Switch_Status_Read+0xb2>
	}else if ( ( !aux_sw_read_value ) && ( aux_temp_debouncing + 2 <= aux_debouncing ) && (debouncing_aux_sw) ){ //If encoder still pressed and debouncing +2 already passed
 8004632:	88bb      	ldrh	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d11c      	bne.n	8004672 <Aux_Switch_Status_Read+0x7a>
 8004638:	4b22      	ldr	r3, [pc, #136]	; (80046c4 <Aux_Switch_Status_Read+0xcc>)
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	3301      	adds	r3, #1
 800463e:	4a20      	ldr	r2, [pc, #128]	; (80046c0 <Aux_Switch_Status_Read+0xc8>)
 8004640:	8812      	ldrh	r2, [r2, #0]
 8004642:	4293      	cmp	r3, r2
 8004644:	da15      	bge.n	8004672 <Aux_Switch_Status_Read+0x7a>
 8004646:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <Aux_Switch_Status_Read+0xc4>)
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d011      	beq.n	8004672 <Aux_Switch_Status_Read+0x7a>
		aux_sw_status = FALSE;	//Status still FALSE
 800464e:	2300      	movs	r3, #0
 8004650:	80fb      	strh	r3, [r7, #6]
		//debouncing_aux_sw = FALSE;	//Disable debouncing
		previous_aux_sw_status = TRUE;	//Set previous status of enable TRUE
 8004652:	4b1d      	ldr	r3, [pc, #116]	; (80046c8 <Aux_Switch_Status_Read+0xd0>)
 8004654:	2201      	movs	r2, #1
 8004656:	801a      	strh	r2, [r3, #0]
		if ( aux_temp_debouncing + SW_HOLD_TIME <= aux_debouncing ){	//If we keep the button pressed more than the time defines
 8004658:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <Aux_Switch_Status_Read+0xcc>)
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	3313      	adds	r3, #19
 800465e:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <Aux_Switch_Status_Read+0xc8>)
 8004660:	8812      	ldrh	r2, [r2, #0]
 8004662:	4293      	cmp	r3, r2
 8004664:	da21      	bge.n	80046aa <Aux_Switch_Status_Read+0xb2>
			aux_sw_status = TRUE_HOLD;
 8004666:	2303      	movs	r3, #3
 8004668:	80fb      	strh	r3, [r7, #6]
			previous_aux_sw_status = TRUE_HOLD;
 800466a:	4b17      	ldr	r3, [pc, #92]	; (80046c8 <Aux_Switch_Status_Read+0xd0>)
 800466c:	2203      	movs	r2, #3
 800466e:	801a      	strh	r2, [r3, #0]
		if ( aux_temp_debouncing + SW_HOLD_TIME <= aux_debouncing ){	//If we keep the button pressed more than the time defines
 8004670:	e01b      	b.n	80046aa <Aux_Switch_Status_Read+0xb2>
		}
	}else if( ( aux_sw_read_value )){
 8004672:	88bb      	ldrh	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d018      	beq.n	80046aa <Aux_Switch_Status_Read+0xb2>
		if ( previous_aux_sw_status == TRUE_HOLD ){	//If previous status was HOLD< do not report push
 8004678:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <Aux_Switch_Status_Read+0xd0>)
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	2b03      	cmp	r3, #3
 800467e:	d102      	bne.n	8004686 <Aux_Switch_Status_Read+0x8e>
			aux_sw_status = FALSE;
 8004680:	2300      	movs	r3, #0
 8004682:	80fb      	strh	r3, [r7, #6]
 8004684:	e00e      	b.n	80046a4 <Aux_Switch_Status_Read+0xac>
		}else if ( previous_aux_sw_status == TRUE ){
 8004686:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <Aux_Switch_Status_Read+0xd0>)
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d105      	bne.n	800469a <Aux_Switch_Status_Read+0xa2>
			aux_sw_status = TRUE;	//If button released then send status TRUE
 800468e:	2301      	movs	r3, #1
 8004690:	80fb      	strh	r3, [r7, #6]
			debouncing_aux_sw = FALSE;	//Disable debouncing
 8004692:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <Aux_Switch_Status_Read+0xc4>)
 8004694:	2200      	movs	r2, #0
 8004696:	801a      	strh	r2, [r3, #0]
 8004698:	e004      	b.n	80046a4 <Aux_Switch_Status_Read+0xac>
		}else{
			aux_sw_status = FALSE;
 800469a:	2300      	movs	r3, #0
 800469c:	80fb      	strh	r3, [r7, #6]
			debouncing_aux_sw = FALSE;	//Disable debouncing
 800469e:	4b07      	ldr	r3, [pc, #28]	; (80046bc <Aux_Switch_Status_Read+0xc4>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	801a      	strh	r2, [r3, #0]
		}
		previous_aux_sw_status = FALSE;	//Reset variable of previous status
 80046a4:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <Aux_Switch_Status_Read+0xd0>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	801a      	strh	r2, [r3, #0]
	}else{
		//aux_sw_status = FALSE;	//In case other condition, send FALSE
	}
	return aux_sw_status;
 80046aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40020400 	.word	0x40020400
 80046bc:	2000084a 	.word	0x2000084a
 80046c0:	2000084e 	.word	0x2000084e
 80046c4:	2000086c 	.word	0x2000086c
 80046c8:	2000086e 	.word	0x2000086e

080046cc <Save_Parameter_Data>:
/**
  * @brief Function to save the data into flash (EEPROM Emulation)
  * @param	- Pointer to the struct to be saved
  * @retval
  */
uint16_t Save_Parameter_Data(str_parameters *struct_ptr){
 80046cc:	b5b0      	push	{r4, r5, r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	  {
	    str_parameters temp;
	    uint8_t bytes[sizeof(*struct_ptr)];
	  }save_union_par;

	  save_union_par.temp = *struct_ptr; //Copy values from value struct to uniun
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f107 0408 	add.w	r4, r7, #8
 80046da:	461d      	mov	r5, r3
 80046dc:	6828      	ldr	r0, [r5, #0]
 80046de:	6869      	ldr	r1, [r5, #4]
 80046e0:	68aa      	ldr	r2, [r5, #8]
 80046e2:	68eb      	ldr	r3, [r5, #12]
 80046e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046e6:	6928      	ldr	r0, [r5, #16]
 80046e8:	6020      	str	r0, [r4, #0]
 80046ea:	8aab      	ldrh	r3, [r5, #20]
 80046ec:	80a3      	strh	r3, [r4, #4]

	  for (uint8_t i=0; i<sizeof(*struct_ptr); i++)  //Transfers values to Union
 80046ee:	2300      	movs	r3, #0
 80046f0:	77fb      	strb	r3, [r7, #31]
 80046f2:	e00b      	b.n	800470c <Save_Parameter_Data+0x40>
	  {
	    ee_writeToRam(i, 1, &save_union_par.bytes[i]);
 80046f4:	7ff8      	ldrb	r0, [r7, #31]
 80046f6:	7ffb      	ldrb	r3, [r7, #31]
 80046f8:	f107 0208 	add.w	r2, r7, #8
 80046fc:	4413      	add	r3, r2
 80046fe:	461a      	mov	r2, r3
 8004700:	2101      	movs	r1, #1
 8004702:	f7fc fff7 	bl	80016f4 <ee_writeToRam>
	  for (uint8_t i=0; i<sizeof(*struct_ptr); i++)  //Transfers values to Union
 8004706:	7ffb      	ldrb	r3, [r7, #31]
 8004708:	3301      	adds	r3, #1
 800470a:	77fb      	strb	r3, [r7, #31]
 800470c:	7ffb      	ldrb	r3, [r7, #31]
 800470e:	2b15      	cmp	r3, #21
 8004710:	d9f0      	bls.n	80046f4 <Save_Parameter_Data+0x28>
	  }
	  return ee_commit();
 8004712:	f7fd f811 	bl	8001738 <ee_commit>
 8004716:	4603      	mov	r3, r0
 8004718:	b29b      	uxth	r3, r3
}
 800471a:	4618      	mov	r0, r3
 800471c:	3720      	adds	r7, #32
 800471e:	46bd      	mov	sp, r7
 8004720:	bdb0      	pop	{r4, r5, r7, pc}

08004722 <Read_Parameter_Data>:
/**
  * @brief Function to read the data from flash (EEPROM Emulation)
  * @param	- Pointer to the struct in which the data needs to be loaded
  * @retval
  */
uint16_t Read_Parameter_Data(str_parameters *struct_ptr){
 8004722:	b5b0      	push	{r4, r5, r7, lr}
 8004724:	b08a      	sub	sp, #40	; 0x28
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
		str_parameters temp;
		uint8_t bytes[sizeof(*struct_ptr)];
	}save_union_par;

	uint16_t status_read;
	uint16_t read_fail = 1;
 800472a:	2301      	movs	r3, #1
 800472c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t data;             //Temporal variable to copy each data from EEPROM to Union
	for (uint8_t i=0; i<sizeof(*struct_ptr); i++)  //Transfers values to Union
 800472e:	2300      	movs	r3, #0
 8004730:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004734:	e01a      	b.n	800476c <Read_Parameter_Data+0x4a>
	{
		status_read = ee_read(i, 1, &data);
 8004736:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800473a:	f107 020b 	add.w	r2, r7, #11
 800473e:	2101      	movs	r1, #1
 8004740:	4618      	mov	r0, r3
 8004742:	f7fc fe31 	bl	80013a8 <ee_read>
 8004746:	4603      	mov	r3, r0
 8004748:	847b      	strh	r3, [r7, #34]	; 0x22
		save_union_par.bytes[i] = data;   //Save data on union
 800474a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800474e:	7afa      	ldrb	r2, [r7, #11]
 8004750:	3328      	adds	r3, #40	; 0x28
 8004752:	443b      	add	r3, r7
 8004754:	f803 2c1c 	strb.w	r2, [r3, #-28]
		if (!status_read){
 8004758:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <Read_Parameter_Data+0x40>
			read_fail = 0;
 800475e:	2300      	movs	r3, #0
 8004760:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (uint8_t i=0; i<sizeof(*struct_ptr); i++)  //Transfers values to Union
 8004762:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004766:	3301      	adds	r3, #1
 8004768:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800476c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004770:	2b15      	cmp	r3, #21
 8004772:	d9e0      	bls.n	8004736 <Read_Parameter_Data+0x14>
		}
	}
	*struct_ptr = save_union_par.temp;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	461d      	mov	r5, r3
 8004778:	f107 040c 	add.w	r4, r7, #12
 800477c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800477e:	6028      	str	r0, [r5, #0]
 8004780:	6069      	str	r1, [r5, #4]
 8004782:	60aa      	str	r2, [r5, #8]
 8004784:	60eb      	str	r3, [r5, #12]
 8004786:	6820      	ldr	r0, [r4, #0]
 8004788:	6128      	str	r0, [r5, #16]
 800478a:	88a3      	ldrh	r3, [r4, #4]
 800478c:	82ab      	strh	r3, [r5, #20]
	return read_fail;
 800478e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8004790:	4618      	mov	r0, r3
 8004792:	3728      	adds	r7, #40	; 0x28
 8004794:	46bd      	mov	sp, r7
 8004796:	bdb0      	pop	{r4, r5, r7, pc}

08004798 <Write_Arrow>:
* @brief Function to write moviung arrow in the LCD, the function needs to be used together with the arrow counter
* @param - 	arrowMode : Select the Mode of the Arrow, RIGHT, LEFT or STANDBY
* 			eStop_Mode : Value for the mode in which the e-stop is working; RIGHT, LEFT, NONE, BOTH
* @retval
*/
void Write_Arrow(uint16_t arrowMode, uint16_t eStop_Mode){
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	460a      	mov	r2, r1
 80047a2:	80fb      	strh	r3, [r7, #6]
 80047a4:	4613      	mov	r3, r2
 80047a6:	80bb      	strh	r3, [r7, #4]
	static uint16_t arrowCounter = 0;
	static u_int16_t previousarrowMode;

	if ( eStop_Mode == NONE ){		//Check in which e-stop mode are we and write the end arrows accordingly
 80047a8:	88bb      	ldrh	r3, [r7, #4]
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	d10e      	bne.n	80047cc <Write_Arrow+0x34>
		lcdSetCursor(12, 1);
 80047ae:	2101      	movs	r1, #1
 80047b0:	200c      	movs	r0, #12
 80047b2:	f7fc fca7 	bl	8001104 <lcdSetCursor>
		lcdWrite(1);
 80047b6:	2001      	movs	r0, #1
 80047b8:	f7fc fd01 	bl	80011be <lcdWrite>
		lcdSetCursor(19, 1);
 80047bc:	2101      	movs	r1, #1
 80047be:	2013      	movs	r0, #19
 80047c0:	f7fc fca0 	bl	8001104 <lcdSetCursor>
		lcdWrite(3);
 80047c4:	2003      	movs	r0, #3
 80047c6:	f7fc fcfa 	bl	80011be <lcdWrite>
 80047ca:	e034      	b.n	8004836 <Write_Arrow+0x9e>
	}else if ( eStop_Mode == LEFT ){
 80047cc:	88bb      	ldrh	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10e      	bne.n	80047f0 <Write_Arrow+0x58>
		lcdSetCursor(12, 1);
 80047d2:	2101      	movs	r1, #1
 80047d4:	200c      	movs	r0, #12
 80047d6:	f7fc fc95 	bl	8001104 <lcdSetCursor>
		lcdWrite(1);
 80047da:	2001      	movs	r0, #1
 80047dc:	f7fc fcef 	bl	80011be <lcdWrite>
		lcdSetCursor(19, 1);
 80047e0:	2101      	movs	r1, #1
 80047e2:	2013      	movs	r0, #19
 80047e4:	f7fc fc8e 	bl	8001104 <lcdSetCursor>
		lcdWrite(2);
 80047e8:	2002      	movs	r0, #2
 80047ea:	f7fc fce8 	bl	80011be <lcdWrite>
 80047ee:	e022      	b.n	8004836 <Write_Arrow+0x9e>
	}else if ( eStop_Mode == RIGHT ){
 80047f0:	88bb      	ldrh	r3, [r7, #4]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d10e      	bne.n	8004814 <Write_Arrow+0x7c>
		lcdSetCursor(12, 1);
 80047f6:	2101      	movs	r1, #1
 80047f8:	200c      	movs	r0, #12
 80047fa:	f7fc fc83 	bl	8001104 <lcdSetCursor>
		lcdWrite(0);
 80047fe:	2000      	movs	r0, #0
 8004800:	f7fc fcdd 	bl	80011be <lcdWrite>
		lcdSetCursor(19, 1);
 8004804:	2101      	movs	r1, #1
 8004806:	2013      	movs	r0, #19
 8004808:	f7fc fc7c 	bl	8001104 <lcdSetCursor>
		lcdWrite(3);
 800480c:	2003      	movs	r0, #3
 800480e:	f7fc fcd6 	bl	80011be <lcdWrite>
 8004812:	e010      	b.n	8004836 <Write_Arrow+0x9e>
	}else if ( eStop_Mode == BOTH ){
 8004814:	88bb      	ldrh	r3, [r7, #4]
 8004816:	2b02      	cmp	r3, #2
 8004818:	d10d      	bne.n	8004836 <Write_Arrow+0x9e>
		lcdSetCursor(12, 1);
 800481a:	2101      	movs	r1, #1
 800481c:	200c      	movs	r0, #12
 800481e:	f7fc fc71 	bl	8001104 <lcdSetCursor>
		lcdWrite(0);
 8004822:	2000      	movs	r0, #0
 8004824:	f7fc fccb 	bl	80011be <lcdWrite>
		lcdSetCursor(19, 1);
 8004828:	2101      	movs	r1, #1
 800482a:	2013      	movs	r0, #19
 800482c:	f7fc fc6a 	bl	8001104 <lcdSetCursor>
		lcdWrite(2);
 8004830:	2002      	movs	r0, #2
 8004832:	f7fc fcc4 	bl	80011be <lcdWrite>
	}
	if ( previousarrowMode != arrowMode){	//If previously arrowMode changed, clean the screen
 8004836:	4b4f      	ldr	r3, [pc, #316]	; (8004974 <Write_Arrow+0x1dc>)
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	88fa      	ldrh	r2, [r7, #6]
 800483c:	429a      	cmp	r2, r3
 800483e:	d009      	beq.n	8004854 <Write_Arrow+0xbc>
		lcdSetCursor(13, 1);
 8004840:	2101      	movs	r1, #1
 8004842:	200d      	movs	r0, #13
 8004844:	f7fc fc5e 	bl	8001104 <lcdSetCursor>
		lcdPrint("      ");
 8004848:	484b      	ldr	r0, [pc, #300]	; (8004978 <Write_Arrow+0x1e0>)
 800484a:	f7fc fc8d 	bl	8001168 <lcdPrint>
		arrowCounter = 0;
 800484e:	4b4b      	ldr	r3, [pc, #300]	; (800497c <Write_Arrow+0x1e4>)
 8004850:	2200      	movs	r2, #0
 8004852:	801a      	strh	r2, [r3, #0]
	}
	if (arrowMode == RIGHT){		//If arrowMode is right, print moving arrow to the right
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d13c      	bne.n	80048d4 <Write_Arrow+0x13c>
		if ( arrowCounter == 5 ){	//If the arrow is longer than 4 then write the end
 800485a:	4b48      	ldr	r3, [pc, #288]	; (800497c <Write_Arrow+0x1e4>)
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	2b05      	cmp	r3, #5
 8004860:	d10c      	bne.n	800487c <Write_Arrow+0xe4>
			lcdSetCursor( (13 + arrowCounter ) , 1);
 8004862:	4b46      	ldr	r3, [pc, #280]	; (800497c <Write_Arrow+0x1e4>)
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	330d      	adds	r3, #13
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2101      	movs	r1, #1
 800486e:	4618      	mov	r0, r3
 8004870:	f7fc fc48 	bl	8001104 <lcdSetCursor>
			lcdPrint(">");
 8004874:	4842      	ldr	r0, [pc, #264]	; (8004980 <Write_Arrow+0x1e8>)
 8004876:	f7fc fc77 	bl	8001168 <lcdPrint>
 800487a:	e06d      	b.n	8004958 <Write_Arrow+0x1c0>
		}else if ( arrowCounter == 6 ){	//If the arrow is full size, then clean
 800487c:	4b3f      	ldr	r3, [pc, #252]	; (800497c <Write_Arrow+0x1e4>)
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	2b06      	cmp	r3, #6
 8004882:	d116      	bne.n	80048b2 <Write_Arrow+0x11a>
			lcdSetCursor(13, 1);
 8004884:	2101      	movs	r1, #1
 8004886:	200d      	movs	r0, #13
 8004888:	f7fc fc3c 	bl	8001104 <lcdSetCursor>
			lcdPrint("      ");
 800488c:	483a      	ldr	r0, [pc, #232]	; (8004978 <Write_Arrow+0x1e0>)
 800488e:	f7fc fc6b 	bl	8001168 <lcdPrint>
			arrowCounter = 0;
 8004892:	4b3a      	ldr	r3, [pc, #232]	; (800497c <Write_Arrow+0x1e4>)
 8004894:	2200      	movs	r2, #0
 8004896:	801a      	strh	r2, [r3, #0]
			lcdSetCursor( (13 + arrowCounter ) , 1);
 8004898:	4b38      	ldr	r3, [pc, #224]	; (800497c <Write_Arrow+0x1e4>)
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	330d      	adds	r3, #13
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2101      	movs	r1, #1
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fc fc2d 	bl	8001104 <lcdSetCursor>
			lcdPrint("-");
 80048aa:	4836      	ldr	r0, [pc, #216]	; (8004984 <Write_Arrow+0x1ec>)
 80048ac:	f7fc fc5c 	bl	8001168 <lcdPrint>
 80048b0:	e052      	b.n	8004958 <Write_Arrow+0x1c0>
		}else if ( arrowCounter < 5 ){	//If the arrow is lower than 5 then print one more line
 80048b2:	4b32      	ldr	r3, [pc, #200]	; (800497c <Write_Arrow+0x1e4>)
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d84e      	bhi.n	8004958 <Write_Arrow+0x1c0>
			lcdSetCursor( (13 + arrowCounter ) , 1);
 80048ba:	4b30      	ldr	r3, [pc, #192]	; (800497c <Write_Arrow+0x1e4>)
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	330d      	adds	r3, #13
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2101      	movs	r1, #1
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fc fc1c 	bl	8001104 <lcdSetCursor>
			lcdPrint("-");
 80048cc:	482d      	ldr	r0, [pc, #180]	; (8004984 <Write_Arrow+0x1ec>)
 80048ce:	f7fc fc4b 	bl	8001168 <lcdPrint>
 80048d2:	e041      	b.n	8004958 <Write_Arrow+0x1c0>
		}
	}else if (arrowMode == LEFT){	//If arrowMode is left, print moving arrow to the left
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d13e      	bne.n	8004958 <Write_Arrow+0x1c0>
		if ( arrowCounter == 5 ){	//If the arrow is longer than 4 then write the end
 80048da:	4b28      	ldr	r3, [pc, #160]	; (800497c <Write_Arrow+0x1e4>)
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	2b05      	cmp	r3, #5
 80048e0:	d10d      	bne.n	80048fe <Write_Arrow+0x166>
			lcdSetCursor( (18 - arrowCounter ) , 1);
 80048e2:	4b26      	ldr	r3, [pc, #152]	; (800497c <Write_Arrow+0x1e4>)
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	f1c3 0312 	rsb	r3, r3, #18
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2101      	movs	r1, #1
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fc fc07 	bl	8001104 <lcdSetCursor>
			lcdPrint("<");
 80048f6:	4824      	ldr	r0, [pc, #144]	; (8004988 <Write_Arrow+0x1f0>)
 80048f8:	f7fc fc36 	bl	8001168 <lcdPrint>
 80048fc:	e02c      	b.n	8004958 <Write_Arrow+0x1c0>
		}else if ( arrowCounter == 6 ){	//If the arrow is full size, then clean
 80048fe:	4b1f      	ldr	r3, [pc, #124]	; (800497c <Write_Arrow+0x1e4>)
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	2b06      	cmp	r3, #6
 8004904:	d117      	bne.n	8004936 <Write_Arrow+0x19e>
			lcdSetCursor(13, 1);
 8004906:	2101      	movs	r1, #1
 8004908:	200d      	movs	r0, #13
 800490a:	f7fc fbfb 	bl	8001104 <lcdSetCursor>
			lcdPrint("      ");
 800490e:	481a      	ldr	r0, [pc, #104]	; (8004978 <Write_Arrow+0x1e0>)
 8004910:	f7fc fc2a 	bl	8001168 <lcdPrint>
			arrowCounter = 0;
 8004914:	4b19      	ldr	r3, [pc, #100]	; (800497c <Write_Arrow+0x1e4>)
 8004916:	2200      	movs	r2, #0
 8004918:	801a      	strh	r2, [r3, #0]
			lcdSetCursor( (18 - arrowCounter ) , 1);
 800491a:	4b18      	ldr	r3, [pc, #96]	; (800497c <Write_Arrow+0x1e4>)
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	f1c3 0312 	rsb	r3, r3, #18
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2101      	movs	r1, #1
 8004928:	4618      	mov	r0, r3
 800492a:	f7fc fbeb 	bl	8001104 <lcdSetCursor>
			lcdPrint("-");
 800492e:	4815      	ldr	r0, [pc, #84]	; (8004984 <Write_Arrow+0x1ec>)
 8004930:	f7fc fc1a 	bl	8001168 <lcdPrint>
 8004934:	e010      	b.n	8004958 <Write_Arrow+0x1c0>
		}else if ( arrowCounter < 5 ){	//If the arrow is lower than 5 then print one more line
 8004936:	4b11      	ldr	r3, [pc, #68]	; (800497c <Write_Arrow+0x1e4>)
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	2b04      	cmp	r3, #4
 800493c:	d80c      	bhi.n	8004958 <Write_Arrow+0x1c0>
			lcdSetCursor( (18 - arrowCounter ) , 1);
 800493e:	4b0f      	ldr	r3, [pc, #60]	; (800497c <Write_Arrow+0x1e4>)
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	f1c3 0312 	rsb	r3, r3, #18
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2101      	movs	r1, #1
 800494c:	4618      	mov	r0, r3
 800494e:	f7fc fbd9 	bl	8001104 <lcdSetCursor>
			lcdPrint("-");
 8004952:	480c      	ldr	r0, [pc, #48]	; (8004984 <Write_Arrow+0x1ec>)
 8004954:	f7fc fc08 	bl	8001168 <lcdPrint>
		}
	}else if (arrowMode == STANDBY){

	}
	arrowCounter++;		//Increment the arrow counter
 8004958:	4b08      	ldr	r3, [pc, #32]	; (800497c <Write_Arrow+0x1e4>)
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	3301      	adds	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <Write_Arrow+0x1e4>)
 8004962:	801a      	strh	r2, [r3, #0]
	previousarrowMode = arrowMode;	//Set the previous arrow mode to the current one
 8004964:	4a03      	ldr	r2, [pc, #12]	; (8004974 <Write_Arrow+0x1dc>)
 8004966:	88fb      	ldrh	r3, [r7, #6]
 8004968:	8013      	strh	r3, [r2, #0]
}
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000870 	.word	0x20000870
 8004978:	08009de0 	.word	0x08009de0
 800497c:	20000872 	.word	0x20000872
 8004980:	08009de8 	.word	0x08009de8
 8004984:	08009dec 	.word	0x08009dec
 8004988:	08009df0 	.word	0x08009df0

0800498c <Write_Text_Scrolling>:
* 			row : row in which we want to start printing
* 			row : column in which we want to start printing
* 			enable : Variable to enable or disable/clean scrolling text; TRUE or FALSE
* @retval
*/
void Write_Text_Scrolling(char *inputText, uint16_t row, uint16_t col, uint16_t enable){
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	4608      	mov	r0, r1
 8004996:	4611      	mov	r1, r2
 8004998:	461a      	mov	r2, r3
 800499a:	4603      	mov	r3, r0
 800499c:	817b      	strh	r3, [r7, #10]
 800499e:	460b      	mov	r3, r1
 80049a0:	813b      	strh	r3, [r7, #8]
 80049a2:	4613      	mov	r3, r2
 80049a4:	80fb      	strh	r3, [r7, #6]
	uint16_t textSize = strlen(inputText);
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7fb fc1a 	bl	80001e0 <strlen>
 80049ac:	4603      	mov	r3, r0
 80049ae:	83fb      	strh	r3, [r7, #30]
	uint16_t availableSize = 19 - col;
 80049b0:	893b      	ldrh	r3, [r7, #8]
 80049b2:	f1c3 0313 	rsb	r3, r3, #19
 80049b6:	83bb      	strh	r3, [r7, #28]
	static uint16_t offset;
	static uint16_t scrollingStatus = FALSE;
	uint16_t h = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	84fb      	strh	r3, [r7, #38]	; 0x26
	char temp_char[2] = {' ', '\0'};		//Need to add NULL character to write only ONE char each time
 80049bc:	2320      	movs	r3, #32
 80049be:	82bb      	strh	r3, [r7, #20]
	char *ptr = inputText;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	61bb      	str	r3, [r7, #24]

	if ( (scrollingStatus == FALSE) && (enable == TRUE) ){	//If scrolling was disable but Enable request arrived, print text
 80049c4:	4b61      	ldr	r3, [pc, #388]	; (8004b4c <Write_Text_Scrolling+0x1c0>)
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d129      	bne.n	8004a20 <Write_Text_Scrolling+0x94>
 80049cc:	88fb      	ldrh	r3, [r7, #6]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d126      	bne.n	8004a20 <Write_Text_Scrolling+0x94>
		for ( uint16_t i = 0; i < availableSize; i++ ){		//Print the size which fit in the available size
 80049d2:	2300      	movs	r3, #0
 80049d4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80049d6:	e018      	b.n	8004a0a <Write_Text_Scrolling+0x7e>
			lcdSetCursor(col + i, row);		//Increase the cursor
 80049d8:	893b      	ldrh	r3, [r7, #8]
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	4413      	add	r3, r2
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	897a      	ldrh	r2, [r7, #10]
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	4611      	mov	r1, r2
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fc fb8a 	bl	8001104 <lcdSetCursor>
			temp_char[0] = *(ptr + i);		//Transfer to the temp variable the character to print, printing one by one
 80049f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	4413      	add	r3, r2
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	753b      	strb	r3, [r7, #20]
			lcdPrint(temp_char);			//Print each character
 80049fa:	f107 0314 	add.w	r3, r7, #20
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fc fbb2 	bl	8001168 <lcdPrint>
		for ( uint16_t i = 0; i < availableSize; i++ ){		//Print the size which fit in the available size
 8004a04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a06:	3301      	adds	r3, #1
 8004a08:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004a0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a0c:	8bbb      	ldrh	r3, [r7, #28]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d3e2      	bcc.n	80049d8 <Write_Text_Scrolling+0x4c>
		}
		scrollingStatus = TRUE;				//Setting the scrolling status to enable
 8004a12:	4b4e      	ldr	r3, [pc, #312]	; (8004b4c <Write_Text_Scrolling+0x1c0>)
 8004a14:	2201      	movs	r2, #1
 8004a16:	801a      	strh	r2, [r3, #0]
		offset = 1;							//Initualization offset
 8004a18:	4b4d      	ldr	r3, [pc, #308]	; (8004b50 <Write_Text_Scrolling+0x1c4>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	801a      	strh	r2, [r3, #0]
 8004a1e:	e090      	b.n	8004b42 <Write_Text_Scrolling+0x1b6>
	}else if ( (scrollingStatus == TRUE) && (enable == TRUE) ) {	//If scrolling was enable already and request is to keep it enabled, scroll
 8004a20:	4b4a      	ldr	r3, [pc, #296]	; (8004b4c <Write_Text_Scrolling+0x1c0>)
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d163      	bne.n	8004af0 <Write_Text_Scrolling+0x164>
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d160      	bne.n	8004af0 <Write_Text_Scrolling+0x164>
		for ( uint16_t e = 0; e < availableSize; e++ ){				//Print the text on the available size
 8004a2e:	2300      	movs	r3, #0
 8004a30:	847b      	strh	r3, [r7, #34]	; 0x22
 8004a32:	e048      	b.n	8004ac6 <Write_Text_Scrolling+0x13a>
			lcdSetCursor(col + e, row);								//Set the cursor
 8004a34:	893b      	ldrh	r3, [r7, #8]
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	897a      	ldrh	r2, [r7, #10]
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fc fb5c 	bl	8001104 <lcdSetCursor>
			if (offset >= ( textSize - availableSize ) ){			//If we move the text already all the way
 8004a4c:	4b40      	ldr	r3, [pc, #256]	; (8004b50 <Write_Text_Scrolling+0x1c4>)
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	4619      	mov	r1, r3
 8004a52:	8bfa      	ldrh	r2, [r7, #30]
 8004a54:	8bbb      	ldrh	r3, [r7, #28]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	4299      	cmp	r1, r3
 8004a5a:	db23      	blt.n	8004aa4 <Write_Text_Scrolling+0x118>
				if ( (e + offset) < textSize){						//Print the text size within the place
 8004a5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a5e:	4a3c      	ldr	r2, [pc, #240]	; (8004b50 <Write_Text_Scrolling+0x1c4>)
 8004a60:	8812      	ldrh	r2, [r2, #0]
 8004a62:	441a      	add	r2, r3
 8004a64:	8bfb      	ldrh	r3, [r7, #30]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	da0e      	bge.n	8004a88 <Write_Text_Scrolling+0xfc>
					temp_char[0] = *(ptr + (e + offset) );
 8004a6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a6c:	4a38      	ldr	r2, [pc, #224]	; (8004b50 <Write_Text_Scrolling+0x1c4>)
 8004a6e:	8812      	ldrh	r2, [r2, #0]
 8004a70:	4413      	add	r3, r2
 8004a72:	461a      	mov	r2, r3
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	4413      	add	r3, r2
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	753b      	strb	r3, [r7, #20]
					lcdPrint(temp_char);
 8004a7c:	f107 0314 	add.w	r3, r7, #20
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fc fb71 	bl	8001168 <lcdPrint>
 8004a86:	e01b      	b.n	8004ac0 <Write_Text_Scrolling+0x134>
				}else{												//Once finished start printing the starting of the test at the end
					temp_char[0] = *(ptr + h);
 8004a88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	753b      	strb	r3, [r7, #20]
					lcdPrint(temp_char);
 8004a92:	f107 0314 	add.w	r3, r7, #20
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fc fb66 	bl	8001168 <lcdPrint>
					h++;
 8004a9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004aa2:	e00d      	b.n	8004ac0 <Write_Text_Scrolling+0x134>
				}
			}else{
				temp_char[0] = *(ptr + (e + offset) );				//If there is still spots available print the char
 8004aa4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004aa6:	4a2a      	ldr	r2, [pc, #168]	; (8004b50 <Write_Text_Scrolling+0x1c4>)
 8004aa8:	8812      	ldrh	r2, [r2, #0]
 8004aaa:	4413      	add	r3, r2
 8004aac:	461a      	mov	r2, r3
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	753b      	strb	r3, [r7, #20]
				lcdPrint(temp_char);
 8004ab6:	f107 0314 	add.w	r3, r7, #20
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fc fb54 	bl	8001168 <lcdPrint>
		for ( uint16_t e = 0; e < availableSize; e++ ){				//Print the text on the available size
 8004ac0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	847b      	strh	r3, [r7, #34]	; 0x22
 8004ac6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004ac8:	8bbb      	ldrh	r3, [r7, #28]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d3b2      	bcc.n	8004a34 <Write_Text_Scrolling+0xa8>
			}
		}
		offset++;		//Increase offset by one
 8004ace:	4b20      	ldr	r3, [pc, #128]	; (8004b50 <Write_Text_Scrolling+0x1c4>)
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	4b1e      	ldr	r3, [pc, #120]	; (8004b50 <Write_Text_Scrolling+0x1c4>)
 8004ad8:	801a      	strh	r2, [r3, #0]
		h = 0;			//Reset the h increment variable
 8004ada:	2300      	movs	r3, #0
 8004adc:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (offset == textSize){	//If we go trough all text size, restart offset variable
 8004ade:	4b1c      	ldr	r3, [pc, #112]	; (8004b50 <Write_Text_Scrolling+0x1c4>)
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	8bfa      	ldrh	r2, [r7, #30]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d12c      	bne.n	8004b42 <Write_Text_Scrolling+0x1b6>
			offset = 0;
 8004ae8:	4b19      	ldr	r3, [pc, #100]	; (8004b50 <Write_Text_Scrolling+0x1c4>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	801a      	strh	r2, [r3, #0]
		if (offset == textSize){	//If we go trough all text size, restart offset variable
 8004aee:	e028      	b.n	8004b42 <Write_Text_Scrolling+0x1b6>
		}
	}else if ( (scrollingStatus == TRUE) && (enable == FALSE) ) {	//If request to stop the scrolling and was previously activated, clean
 8004af0:	4b16      	ldr	r3, [pc, #88]	; (8004b4c <Write_Text_Scrolling+0x1c0>)
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d124      	bne.n	8004b42 <Write_Text_Scrolling+0x1b6>
 8004af8:	88fb      	ldrh	r3, [r7, #6]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d121      	bne.n	8004b42 <Write_Text_Scrolling+0x1b6>
		scrollingStatus = FALSE;	//Set scrolling status to disabled
 8004afe:	4b13      	ldr	r3, [pc, #76]	; (8004b4c <Write_Text_Scrolling+0x1c0>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	801a      	strh	r2, [r3, #0]
		h = 0;	//Reset increment variable
 8004b04:	2300      	movs	r3, #0
 8004b06:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset = 0;	//Reset offset
 8004b08:	4b11      	ldr	r3, [pc, #68]	; (8004b50 <Write_Text_Scrolling+0x1c4>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	801a      	strh	r2, [r3, #0]
		for ( uint16_t i = 0; i < availableSize; i++ ){	//Print blank character in all the desired locations
 8004b0e:	2300      	movs	r3, #0
 8004b10:	843b      	strh	r3, [r7, #32]
 8004b12:	e011      	b.n	8004b38 <Write_Text_Scrolling+0x1ac>
			lcdSetCursor(col + i, row);
 8004b14:	893b      	ldrh	r3, [r7, #8]
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	8c3b      	ldrh	r3, [r7, #32]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	897a      	ldrh	r2, [r7, #10]
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	4611      	mov	r1, r2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fc faec 	bl	8001104 <lcdSetCursor>
			lcdPrint(" ");
 8004b2c:	4809      	ldr	r0, [pc, #36]	; (8004b54 <Write_Text_Scrolling+0x1c8>)
 8004b2e:	f7fc fb1b 	bl	8001168 <lcdPrint>
		for ( uint16_t i = 0; i < availableSize; i++ ){	//Print blank character in all the desired locations
 8004b32:	8c3b      	ldrh	r3, [r7, #32]
 8004b34:	3301      	adds	r3, #1
 8004b36:	843b      	strh	r3, [r7, #32]
 8004b38:	8c3a      	ldrh	r2, [r7, #32]
 8004b3a:	8bbb      	ldrh	r3, [r7, #28]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d3e9      	bcc.n	8004b14 <Write_Text_Scrolling+0x188>
		}
	}else {

	}

}
 8004b40:	e7ff      	b.n	8004b42 <Write_Text_Scrolling+0x1b6>
 8004b42:	bf00      	nop
 8004b44:	3728      	adds	r7, #40	; 0x28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	20000874 	.word	0x20000874
 8004b50:	20000876 	.word	0x20000876
 8004b54:	08009dc4 	.word	0x08009dc4

08004b58 <Step_Tracking>:
/**
* @brief Function to track the steps, read the feedback on number of steps applied to the motor
* @param -	status: Select status; DISABLE, ENABLE, READ
* @retval
*/
uint32_t Step_Tracking(uint16_t status){
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	80fb      	strh	r3, [r7, #6]
	static uint16_t step_tracking_status = DISABLE;
	uint32_t steps;
	static uint32_t previous_steps = 0;

	steps = TIM5->CNT - previous_steps;
 8004b62:	4b18      	ldr	r3, [pc, #96]	; (8004bc4 <Step_Tracking+0x6c>)
 8004b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b66:	4b18      	ldr	r3, [pc, #96]	; (8004bc8 <Step_Tracking+0x70>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	60fb      	str	r3, [r7, #12]
	previous_steps = TIM5->CNT;
 8004b6e:	4b15      	ldr	r3, [pc, #84]	; (8004bc4 <Step_Tracking+0x6c>)
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	4a15      	ldr	r2, [pc, #84]	; (8004bc8 <Step_Tracking+0x70>)
 8004b74:	6013      	str	r3, [r2, #0]

	if ( ( step_tracking_status == DISABLE ) && ( status == ENABLE ) ){
 8004b76:	4b15      	ldr	r3, [pc, #84]	; (8004bcc <Step_Tracking+0x74>)
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10c      	bne.n	8004b98 <Step_Tracking+0x40>
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d109      	bne.n	8004b98 <Step_Tracking+0x40>
		TIM5->CNT = 0;	//Re-start counter from zero
 8004b84:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <Step_Tracking+0x6c>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&htim5);		//Enable timer for pulse count
 8004b8a:	4811      	ldr	r0, [pc, #68]	; (8004bd0 <Step_Tracking+0x78>)
 8004b8c:	f002 fcc0 	bl	8007510 <HAL_TIM_Base_Start>
		step_tracking_status = ENABLE;
 8004b90:	4b0e      	ldr	r3, [pc, #56]	; (8004bcc <Step_Tracking+0x74>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	801a      	strh	r2, [r3, #0]
 8004b96:	e00f      	b.n	8004bb8 <Step_Tracking+0x60>
	}else if ( ( step_tracking_status == ENABLE ) && ( status == DISABLE ) ){
 8004b98:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <Step_Tracking+0x74>)
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d10b      	bne.n	8004bb8 <Step_Tracking+0x60>
 8004ba0:	88fb      	ldrh	r3, [r7, #6]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d108      	bne.n	8004bb8 <Step_Tracking+0x60>
		HAL_TIM_Base_Stop(&htim5);		//Disable timer for pulse count
 8004ba6:	480a      	ldr	r0, [pc, #40]	; (8004bd0 <Step_Tracking+0x78>)
 8004ba8:	f002 fd0c 	bl	80075c4 <HAL_TIM_Base_Stop>
		TIM5->CNT = 0;	//Re-start counter to zero
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <Step_Tracking+0x6c>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	625a      	str	r2, [r3, #36]	; 0x24
		step_tracking_status = DISABLE;
 8004bb2:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <Step_Tracking+0x74>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	801a      	strh	r2, [r3, #0]
	}
	return steps;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40000c00 	.word	0x40000c00
 8004bc8:	20000878 	.word	0x20000878
 8004bcc:	2000087c 	.word	0x2000087c
 8004bd0:	200006b0 	.word	0x200006b0

08004bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bd8:	b672      	cpsid	i
}
 8004bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004bdc:	e7fe      	b.n	8004bdc <Error_Handler+0x8>
	...

08004be0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	607b      	str	r3, [r7, #4]
 8004bea:	4b10      	ldr	r3, [pc, #64]	; (8004c2c <HAL_MspInit+0x4c>)
 8004bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bee:	4a0f      	ldr	r2, [pc, #60]	; (8004c2c <HAL_MspInit+0x4c>)
 8004bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8004bf6:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <HAL_MspInit+0x4c>)
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfe:	607b      	str	r3, [r7, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c02:	2300      	movs	r3, #0
 8004c04:	603b      	str	r3, [r7, #0]
 8004c06:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <HAL_MspInit+0x4c>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	4a08      	ldr	r2, [pc, #32]	; (8004c2c <HAL_MspInit+0x4c>)
 8004c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c10:	6413      	str	r3, [r2, #64]	; 0x40
 8004c12:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <HAL_MspInit+0x4c>)
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40023800 	.word	0x40023800

08004c30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08a      	sub	sp, #40	; 0x28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c38:	f107 0314 	add.w	r3, r7, #20
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	605a      	str	r2, [r3, #4]
 8004c42:	609a      	str	r2, [r3, #8]
 8004c44:	60da      	str	r2, [r3, #12]
 8004c46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a17      	ldr	r2, [pc, #92]	; (8004cac <HAL_ADC_MspInit+0x7c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d127      	bne.n	8004ca2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004c52:	2300      	movs	r3, #0
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	4b16      	ldr	r3, [pc, #88]	; (8004cb0 <HAL_ADC_MspInit+0x80>)
 8004c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5a:	4a15      	ldr	r2, [pc, #84]	; (8004cb0 <HAL_ADC_MspInit+0x80>)
 8004c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c60:	6453      	str	r3, [r2, #68]	; 0x44
 8004c62:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <HAL_ADC_MspInit+0x80>)
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <HAL_ADC_MspInit+0x80>)
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	4a0e      	ldr	r2, [pc, #56]	; (8004cb0 <HAL_ADC_MspInit+0x80>)
 8004c78:	f043 0302 	orr.w	r3, r3, #2
 8004c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c7e:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <HAL_ADC_MspInit+0x80>)
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c96:	f107 0314 	add.w	r3, r7, #20
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4805      	ldr	r0, [pc, #20]	; (8004cb4 <HAL_ADC_MspInit+0x84>)
 8004c9e:	f001 f9a1 	bl	8005fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004ca2:	bf00      	nop
 8004ca4:	3728      	adds	r7, #40	; 0x28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40012000 	.word	0x40012000
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	40020400 	.word	0x40020400

08004cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08a      	sub	sp, #40	; 0x28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc0:	f107 0314 	add.w	r3, r7, #20
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	605a      	str	r2, [r3, #4]
 8004cca:	609a      	str	r2, [r3, #8]
 8004ccc:	60da      	str	r2, [r3, #12]
 8004cce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a19      	ldr	r2, [pc, #100]	; (8004d3c <HAL_I2C_MspInit+0x84>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d12c      	bne.n	8004d34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cda:	2300      	movs	r3, #0
 8004cdc:	613b      	str	r3, [r7, #16]
 8004cde:	4b18      	ldr	r3, [pc, #96]	; (8004d40 <HAL_I2C_MspInit+0x88>)
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	4a17      	ldr	r2, [pc, #92]	; (8004d40 <HAL_I2C_MspInit+0x88>)
 8004ce4:	f043 0302 	orr.w	r3, r3, #2
 8004ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cea:	4b15      	ldr	r3, [pc, #84]	; (8004d40 <HAL_I2C_MspInit+0x88>)
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004cf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cfc:	2312      	movs	r3, #18
 8004cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d04:	2303      	movs	r3, #3
 8004d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004d08:	2304      	movs	r3, #4
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d0c:	f107 0314 	add.w	r3, r7, #20
 8004d10:	4619      	mov	r1, r3
 8004d12:	480c      	ldr	r0, [pc, #48]	; (8004d44 <HAL_I2C_MspInit+0x8c>)
 8004d14:	f001 f966 	bl	8005fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	4b08      	ldr	r3, [pc, #32]	; (8004d40 <HAL_I2C_MspInit+0x88>)
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	4a07      	ldr	r2, [pc, #28]	; (8004d40 <HAL_I2C_MspInit+0x88>)
 8004d22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d26:	6413      	str	r3, [r2, #64]	; 0x40
 8004d28:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <HAL_I2C_MspInit+0x88>)
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004d34:	bf00      	nop
 8004d36:	3728      	adds	r7, #40	; 0x28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40005400 	.word	0x40005400
 8004d40:	40023800 	.word	0x40023800
 8004d44:	40020400 	.word	0x40020400

08004d48 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08a      	sub	sp, #40	; 0x28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d50:	f107 0314 	add.w	r3, r7, #20
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	605a      	str	r2, [r3, #4]
 8004d5a:	609a      	str	r2, [r3, #8]
 8004d5c:	60da      	str	r2, [r3, #12]
 8004d5e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a25      	ldr	r2, [pc, #148]	; (8004dfc <HAL_TIM_Encoder_MspInit+0xb4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d144      	bne.n	8004df4 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	613b      	str	r3, [r7, #16]
 8004d6e:	4b24      	ldr	r3, [pc, #144]	; (8004e00 <HAL_TIM_Encoder_MspInit+0xb8>)
 8004d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d72:	4a23      	ldr	r2, [pc, #140]	; (8004e00 <HAL_TIM_Encoder_MspInit+0xb8>)
 8004d74:	f043 0301 	orr.w	r3, r3, #1
 8004d78:	6453      	str	r3, [r2, #68]	; 0x44
 8004d7a:	4b21      	ldr	r3, [pc, #132]	; (8004e00 <HAL_TIM_Encoder_MspInit+0xb8>)
 8004d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	613b      	str	r3, [r7, #16]
 8004d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <HAL_TIM_Encoder_MspInit+0xb8>)
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	4a1c      	ldr	r2, [pc, #112]	; (8004e00 <HAL_TIM_Encoder_MspInit+0xb8>)
 8004d90:	f043 0301 	orr.w	r3, r3, #1
 8004d94:	6313      	str	r3, [r2, #48]	; 0x30
 8004d96:	4b1a      	ldr	r3, [pc, #104]	; (8004e00 <HAL_TIM_Encoder_MspInit+0xb8>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN_A_Pin|EN_B_Pin;
 8004da2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da8:	2302      	movs	r3, #2
 8004daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dac:	2300      	movs	r3, #0
 8004dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004db0:	2300      	movs	r3, #0
 8004db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004db4:	2301      	movs	r3, #1
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004db8:	f107 0314 	add.w	r3, r7, #20
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4811      	ldr	r0, [pc, #68]	; (8004e04 <HAL_TIM_Encoder_MspInit+0xbc>)
 8004dc0:	f001 f910 	bl	8005fe4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	2018      	movs	r0, #24
 8004dca:	f000 fdec 	bl	80059a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004dce:	2018      	movs	r0, #24
 8004dd0:	f000 fe05 	bl	80059de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	2019      	movs	r0, #25
 8004dda:	f000 fde4 	bl	80059a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004dde:	2019      	movs	r0, #25
 8004de0:	f000 fdfd 	bl	80059de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004de4:	2200      	movs	r2, #0
 8004de6:	2100      	movs	r1, #0
 8004de8:	201a      	movs	r0, #26
 8004dea:	f000 fddc 	bl	80059a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004dee:	201a      	movs	r0, #26
 8004df0:	f000 fdf5 	bl	80059de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004df4:	bf00      	nop
 8004df6:	3728      	adds	r7, #40	; 0x28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40010000 	.word	0x40010000
 8004e00:	40023800 	.word	0x40023800
 8004e04:	40020000 	.word	0x40020000

08004e08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b090      	sub	sp, #64	; 0x40
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	609a      	str	r2, [r3, #8]
 8004e1c:	60da      	str	r2, [r3, #12]
 8004e1e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e28:	d10e      	bne.n	8004e48 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e2e:	4b68      	ldr	r3, [pc, #416]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	4a67      	ldr	r2, [pc, #412]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004e34:	f043 0301 	orr.w	r3, r3, #1
 8004e38:	6413      	str	r3, [r2, #64]	; 0x40
 8004e3a:	4b65      	ldr	r3, [pc, #404]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004e46:	e0be      	b.n	8004fc6 <HAL_TIM_Base_MspInit+0x1be>
  else if(htim_base->Instance==TIM4)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a61      	ldr	r2, [pc, #388]	; (8004fd4 <HAL_TIM_Base_MspInit+0x1cc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d134      	bne.n	8004ebc <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004e52:	2300      	movs	r3, #0
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
 8004e56:	4b5e      	ldr	r3, [pc, #376]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	4a5d      	ldr	r2, [pc, #372]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004e5c:	f043 0304 	orr.w	r3, r3, #4
 8004e60:	6413      	str	r3, [r2, #64]	; 0x40
 8004e62:	4b5b      	ldr	r3, [pc, #364]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e6e:	2300      	movs	r3, #0
 8004e70:	623b      	str	r3, [r7, #32]
 8004e72:	4b57      	ldr	r3, [pc, #348]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	4a56      	ldr	r2, [pc, #344]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004e78:	f043 0302 	orr.w	r3, r3, #2
 8004e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e7e:	4b54      	ldr	r3, [pc, #336]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	623b      	str	r3, [r7, #32]
 8004e88:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = RPM_Pin;
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e96:	2300      	movs	r3, #0
 8004e98:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(RPM_GPIO_Port, &GPIO_InitStruct);
 8004e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	484c      	ldr	r0, [pc, #304]	; (8004fd8 <HAL_TIM_Base_MspInit+0x1d0>)
 8004ea6:	f001 f89d 	bl	8005fe4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2100      	movs	r1, #0
 8004eae:	201e      	movs	r0, #30
 8004eb0:	f000 fd79 	bl	80059a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004eb4:	201e      	movs	r0, #30
 8004eb6:	f000 fd92 	bl	80059de <HAL_NVIC_EnableIRQ>
}
 8004eba:	e084      	b.n	8004fc6 <HAL_TIM_Base_MspInit+0x1be>
  else if(htim_base->Instance==TIM5)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a46      	ldr	r2, [pc, #280]	; (8004fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d12c      	bne.n	8004f20 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61fb      	str	r3, [r7, #28]
 8004eca:	4b41      	ldr	r3, [pc, #260]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	4a40      	ldr	r2, [pc, #256]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004ed0:	f043 0308 	orr.w	r3, r3, #8
 8004ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ed6:	4b3e      	ldr	r3, [pc, #248]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	4b3a      	ldr	r3, [pc, #232]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	4a39      	ldr	r2, [pc, #228]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ef2:	4b37      	ldr	r3, [pc, #220]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	61bb      	str	r3, [r7, #24]
 8004efc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PULSE_IN_Pin;
 8004efe:	2302      	movs	r3, #2
 8004f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f02:	2302      	movs	r3, #2
 8004f04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f06:	2300      	movs	r3, #0
 8004f08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004f0e:	2302      	movs	r3, #2
 8004f10:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(PULSE_IN_GPIO_Port, &GPIO_InitStruct);
 8004f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f16:	4619      	mov	r1, r3
 8004f18:	4831      	ldr	r0, [pc, #196]	; (8004fe0 <HAL_TIM_Base_MspInit+0x1d8>)
 8004f1a:	f001 f863 	bl	8005fe4 <HAL_GPIO_Init>
}
 8004f1e:	e052      	b.n	8004fc6 <HAL_TIM_Base_MspInit+0x1be>
  else if(htim_base->Instance==TIM9)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a2f      	ldr	r2, [pc, #188]	; (8004fe4 <HAL_TIM_Base_MspInit+0x1dc>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d116      	bne.n	8004f58 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	4b28      	ldr	r3, [pc, #160]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f32:	4a27      	ldr	r2, [pc, #156]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f38:	6453      	str	r3, [r2, #68]	; 0x44
 8004f3a:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004f46:	2200      	movs	r2, #0
 8004f48:	2100      	movs	r1, #0
 8004f4a:	2018      	movs	r0, #24
 8004f4c:	f000 fd2b 	bl	80059a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004f50:	2018      	movs	r0, #24
 8004f52:	f000 fd44 	bl	80059de <HAL_NVIC_EnableIRQ>
}
 8004f56:	e036      	b.n	8004fc6 <HAL_TIM_Base_MspInit+0x1be>
  else if(htim_base->Instance==TIM10)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a22      	ldr	r2, [pc, #136]	; (8004fe8 <HAL_TIM_Base_MspInit+0x1e0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d116      	bne.n	8004f90 <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004f62:	2300      	movs	r3, #0
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	4b1a      	ldr	r3, [pc, #104]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6a:	4a19      	ldr	r2, [pc, #100]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f70:	6453      	str	r3, [r2, #68]	; 0x44
 8004f72:	4b17      	ldr	r3, [pc, #92]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004f7e:	2200      	movs	r2, #0
 8004f80:	2100      	movs	r1, #0
 8004f82:	2019      	movs	r0, #25
 8004f84:	f000 fd0f 	bl	80059a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004f88:	2019      	movs	r0, #25
 8004f8a:	f000 fd28 	bl	80059de <HAL_NVIC_EnableIRQ>
}
 8004f8e:	e01a      	b.n	8004fc6 <HAL_TIM_Base_MspInit+0x1be>
  else if(htim_base->Instance==TIM11)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a15      	ldr	r2, [pc, #84]	; (8004fec <HAL_TIM_Base_MspInit+0x1e4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d115      	bne.n	8004fc6 <HAL_TIM_Base_MspInit+0x1be>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa2:	4a0b      	ldr	r2, [pc, #44]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8004faa:	4b09      	ldr	r3, [pc, #36]	; (8004fd0 <HAL_TIM_Base_MspInit+0x1c8>)
 8004fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2100      	movs	r1, #0
 8004fba:	201a      	movs	r0, #26
 8004fbc:	f000 fcf3 	bl	80059a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004fc0:	201a      	movs	r0, #26
 8004fc2:	f000 fd0c 	bl	80059de <HAL_NVIC_EnableIRQ>
}
 8004fc6:	bf00      	nop
 8004fc8:	3740      	adds	r7, #64	; 0x40
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	40000800 	.word	0x40000800
 8004fd8:	40020400 	.word	0x40020400
 8004fdc:	40000c00 	.word	0x40000c00
 8004fe0:	40020000 	.word	0x40020000
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40014400 	.word	0x40014400
 8004fec:	40014800 	.word	0x40014800

08004ff0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff8:	f107 030c 	add.w	r3, r7, #12
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	605a      	str	r2, [r3, #4]
 8005002:	609a      	str	r2, [r3, #8]
 8005004:	60da      	str	r2, [r3, #12]
 8005006:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005010:	d11d      	bne.n	800504e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005012:	2300      	movs	r3, #0
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	4b10      	ldr	r3, [pc, #64]	; (8005058 <HAL_TIM_MspPostInit+0x68>)
 8005018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501a:	4a0f      	ldr	r2, [pc, #60]	; (8005058 <HAL_TIM_MspPostInit+0x68>)
 800501c:	f043 0301 	orr.w	r3, r3, #1
 8005020:	6313      	str	r3, [r2, #48]	; 0x30
 8005022:	4b0d      	ldr	r3, [pc, #52]	; (8005058 <HAL_TIM_MspPostInit+0x68>)
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	60bb      	str	r3, [r7, #8]
 800502c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PULSE_Pin;
 800502e:	2301      	movs	r3, #1
 8005030:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005032:	2302      	movs	r3, #2
 8005034:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800503a:	2302      	movs	r3, #2
 800503c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800503e:	2301      	movs	r3, #1
 8005040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PULSE_GPIO_Port, &GPIO_InitStruct);
 8005042:	f107 030c 	add.w	r3, r7, #12
 8005046:	4619      	mov	r1, r3
 8005048:	4804      	ldr	r0, [pc, #16]	; (800505c <HAL_TIM_MspPostInit+0x6c>)
 800504a:	f000 ffcb 	bl	8005fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800504e:	bf00      	nop
 8005050:	3720      	adds	r7, #32
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40023800 	.word	0x40023800
 800505c:	40020000 	.word	0x40020000

08005060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005064:	e7fe      	b.n	8005064 <NMI_Handler+0x4>

08005066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005066:	b480      	push	{r7}
 8005068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800506a:	e7fe      	b.n	800506a <HardFault_Handler+0x4>

0800506c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005070:	e7fe      	b.n	8005070 <MemManage_Handler+0x4>

08005072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005072:	b480      	push	{r7}
 8005074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005076:	e7fe      	b.n	8005076 <BusFault_Handler+0x4>

08005078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800507c:	e7fe      	b.n	800507c <UsageFault_Handler+0x4>

0800507e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800507e:	b480      	push	{r7}
 8005080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005082:	bf00      	nop
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005090:	bf00      	nop
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800509a:	b480      	push	{r7}
 800509c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800509e:	bf00      	nop
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050ac:	f000 f8fa 	bl	80052a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80050b0:	bf00      	nop
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80050b8:	4803      	ldr	r0, [pc, #12]	; (80050c8 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80050ba:	f003 f81f 	bl	80080fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80050be:	4803      	ldr	r0, [pc, #12]	; (80050cc <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80050c0:	f003 f81c 	bl	80080fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80050c4:	bf00      	nop
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	200005d8 	.word	0x200005d8
 80050cc:	200006f8 	.word	0x200006f8

080050d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80050d4:	4803      	ldr	r0, [pc, #12]	; (80050e4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80050d6:	f003 f811 	bl	80080fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80050da:	4803      	ldr	r0, [pc, #12]	; (80050e8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80050dc:	f003 f80e 	bl	80080fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80050e0:	bf00      	nop
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	200005d8 	.word	0x200005d8
 80050e8:	20000740 	.word	0x20000740

080050ec <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80050f0:	4803      	ldr	r0, [pc, #12]	; (8005100 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80050f2:	f003 f803 	bl	80080fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80050f6:	4803      	ldr	r0, [pc, #12]	; (8005104 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80050f8:	f003 f800 	bl	80080fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80050fc:	bf00      	nop
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	200005d8 	.word	0x200005d8
 8005104:	20000788 	.word	0x20000788

08005108 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800510c:	4802      	ldr	r0, [pc, #8]	; (8005118 <TIM4_IRQHandler+0x10>)
 800510e:	f002 fff5 	bl	80080fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20000668 	.word	0x20000668

0800511c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005124:	4a14      	ldr	r2, [pc, #80]	; (8005178 <_sbrk+0x5c>)
 8005126:	4b15      	ldr	r3, [pc, #84]	; (800517c <_sbrk+0x60>)
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005130:	4b13      	ldr	r3, [pc, #76]	; (8005180 <_sbrk+0x64>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d102      	bne.n	800513e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005138:	4b11      	ldr	r3, [pc, #68]	; (8005180 <_sbrk+0x64>)
 800513a:	4a12      	ldr	r2, [pc, #72]	; (8005184 <_sbrk+0x68>)
 800513c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800513e:	4b10      	ldr	r3, [pc, #64]	; (8005180 <_sbrk+0x64>)
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4413      	add	r3, r2
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	429a      	cmp	r2, r3
 800514a:	d207      	bcs.n	800515c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800514c:	f004 f862 	bl	8009214 <__errno>
 8005150:	4603      	mov	r3, r0
 8005152:	220c      	movs	r2, #12
 8005154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005156:	f04f 33ff 	mov.w	r3, #4294967295
 800515a:	e009      	b.n	8005170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800515c:	4b08      	ldr	r3, [pc, #32]	; (8005180 <_sbrk+0x64>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005162:	4b07      	ldr	r3, [pc, #28]	; (8005180 <_sbrk+0x64>)
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4413      	add	r3, r2
 800516a:	4a05      	ldr	r2, [pc, #20]	; (8005180 <_sbrk+0x64>)
 800516c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800516e:	68fb      	ldr	r3, [r7, #12]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20010000 	.word	0x20010000
 800517c:	00000400 	.word	0x00000400
 8005180:	20000880 	.word	0x20000880
 8005184:	200008b8 	.word	0x200008b8

08005188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800518c:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <SystemInit+0x20>)
 800518e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005192:	4a05      	ldr	r2, [pc, #20]	; (80051a8 <SystemInit+0x20>)
 8005194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800519c:	bf00      	nop
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	e000ed00 	.word	0xe000ed00

080051ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80051ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80051b0:	480d      	ldr	r0, [pc, #52]	; (80051e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80051b2:	490e      	ldr	r1, [pc, #56]	; (80051ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80051b4:	4a0e      	ldr	r2, [pc, #56]	; (80051f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80051b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051b8:	e002      	b.n	80051c0 <LoopCopyDataInit>

080051ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051be:	3304      	adds	r3, #4

080051c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051c4:	d3f9      	bcc.n	80051ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051c6:	4a0b      	ldr	r2, [pc, #44]	; (80051f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80051c8:	4c0b      	ldr	r4, [pc, #44]	; (80051f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80051ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051cc:	e001      	b.n	80051d2 <LoopFillZerobss>

080051ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051d0:	3204      	adds	r2, #4

080051d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051d4:	d3fb      	bcc.n	80051ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80051d6:	f7ff ffd7 	bl	8005188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80051da:	f004 f821 	bl	8009220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80051de:	f7fc fac3 	bl	8001768 <main>
  bx  lr    
 80051e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80051e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80051e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051ec:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 80051f0:	08009e50 	.word	0x08009e50
  ldr r2, =_sbss
 80051f4:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 80051f8:	200008b8 	.word	0x200008b8

080051fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80051fc:	e7fe      	b.n	80051fc <ADC_IRQHandler>
	...

08005200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005204:	4b0e      	ldr	r3, [pc, #56]	; (8005240 <HAL_Init+0x40>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a0d      	ldr	r2, [pc, #52]	; (8005240 <HAL_Init+0x40>)
 800520a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800520e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <HAL_Init+0x40>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a0a      	ldr	r2, [pc, #40]	; (8005240 <HAL_Init+0x40>)
 8005216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800521a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800521c:	4b08      	ldr	r3, [pc, #32]	; (8005240 <HAL_Init+0x40>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a07      	ldr	r2, [pc, #28]	; (8005240 <HAL_Init+0x40>)
 8005222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005228:	2003      	movs	r0, #3
 800522a:	f000 fbb1 	bl	8005990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800522e:	200f      	movs	r0, #15
 8005230:	f000 f808 	bl	8005244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005234:	f7ff fcd4 	bl	8004be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	40023c00 	.word	0x40023c00

08005244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800524c:	4b12      	ldr	r3, [pc, #72]	; (8005298 <HAL_InitTick+0x54>)
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	4b12      	ldr	r3, [pc, #72]	; (800529c <HAL_InitTick+0x58>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	4619      	mov	r1, r3
 8005256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800525a:	fbb3 f3f1 	udiv	r3, r3, r1
 800525e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005262:	4618      	mov	r0, r3
 8005264:	f000 fbc9 	bl	80059fa <HAL_SYSTICK_Config>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e00e      	b.n	8005290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b0f      	cmp	r3, #15
 8005276:	d80a      	bhi.n	800528e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005278:	2200      	movs	r2, #0
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	f04f 30ff 	mov.w	r0, #4294967295
 8005280:	f000 fb91 	bl	80059a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005284:	4a06      	ldr	r2, [pc, #24]	; (80052a0 <HAL_InitTick+0x5c>)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	e000      	b.n	8005290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
}
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	200000a4 	.word	0x200000a4
 800529c:	200000ac 	.word	0x200000ac
 80052a0:	200000a8 	.word	0x200000a8

080052a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052a8:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <HAL_IncTick+0x20>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	461a      	mov	r2, r3
 80052ae:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <HAL_IncTick+0x24>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4413      	add	r3, r2
 80052b4:	4a04      	ldr	r2, [pc, #16]	; (80052c8 <HAL_IncTick+0x24>)
 80052b6:	6013      	str	r3, [r2, #0]
}
 80052b8:	bf00      	nop
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	200000ac 	.word	0x200000ac
 80052c8:	20000884 	.word	0x20000884

080052cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  return uwTick;
 80052d0:	4b03      	ldr	r3, [pc, #12]	; (80052e0 <HAL_GetTick+0x14>)
 80052d2:	681b      	ldr	r3, [r3, #0]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	20000884 	.word	0x20000884

080052e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052ec:	f7ff ffee 	bl	80052cc <HAL_GetTick>
 80052f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d005      	beq.n	800530a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052fe:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <HAL_Delay+0x44>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800530a:	bf00      	nop
 800530c:	f7ff ffde 	bl	80052cc <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	429a      	cmp	r2, r3
 800531a:	d8f7      	bhi.n	800530c <HAL_Delay+0x28>
  {
  }
}
 800531c:	bf00      	nop
 800531e:	bf00      	nop
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	200000ac 	.word	0x200000ac

0800532c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e033      	b.n	80053aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	2b00      	cmp	r3, #0
 8005348:	d109      	bne.n	800535e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff fc70 	bl	8004c30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f003 0310 	and.w	r3, r3, #16
 8005366:	2b00      	cmp	r3, #0
 8005368:	d118      	bne.n	800539c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005372:	f023 0302 	bic.w	r3, r3, #2
 8005376:	f043 0202 	orr.w	r2, r3, #2
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f93a 	bl	80055f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	f023 0303 	bic.w	r3, r3, #3
 8005392:	f043 0201 	orr.w	r2, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	641a      	str	r2, [r3, #64]	; 0x40
 800539a:	e001      	b.n	80053a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_ADC_ConfigChannel+0x1c>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e105      	b.n	80055dc <HAL_ADC_ConfigChannel+0x228>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b09      	cmp	r3, #9
 80053de:	d925      	bls.n	800542c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68d9      	ldr	r1, [r3, #12]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	4613      	mov	r3, r2
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	4413      	add	r3, r2
 80053f4:	3b1e      	subs	r3, #30
 80053f6:	2207      	movs	r2, #7
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	43da      	mvns	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	400a      	ands	r2, r1
 8005404:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68d9      	ldr	r1, [r3, #12]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	b29b      	uxth	r3, r3
 8005416:	4618      	mov	r0, r3
 8005418:	4603      	mov	r3, r0
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	4403      	add	r3, r0
 800541e:	3b1e      	subs	r3, #30
 8005420:	409a      	lsls	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	60da      	str	r2, [r3, #12]
 800542a:	e022      	b.n	8005472 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6919      	ldr	r1, [r3, #16]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	b29b      	uxth	r3, r3
 8005438:	461a      	mov	r2, r3
 800543a:	4613      	mov	r3, r2
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	4413      	add	r3, r2
 8005440:	2207      	movs	r2, #7
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	43da      	mvns	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	400a      	ands	r2, r1
 800544e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6919      	ldr	r1, [r3, #16]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	b29b      	uxth	r3, r3
 8005460:	4618      	mov	r0, r3
 8005462:	4603      	mov	r3, r0
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	4403      	add	r3, r0
 8005468:	409a      	lsls	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2b06      	cmp	r3, #6
 8005478:	d824      	bhi.n	80054c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	3b05      	subs	r3, #5
 800548c:	221f      	movs	r2, #31
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	43da      	mvns	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	400a      	ands	r2, r1
 800549a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	4618      	mov	r0, r3
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	3b05      	subs	r3, #5
 80054b6:	fa00 f203 	lsl.w	r2, r0, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	635a      	str	r2, [r3, #52]	; 0x34
 80054c2:	e04c      	b.n	800555e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b0c      	cmp	r3, #12
 80054ca:	d824      	bhi.n	8005516 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	4613      	mov	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	3b23      	subs	r3, #35	; 0x23
 80054de:	221f      	movs	r2, #31
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	43da      	mvns	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	400a      	ands	r2, r1
 80054ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	4618      	mov	r0, r3
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	4613      	mov	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	3b23      	subs	r3, #35	; 0x23
 8005508:	fa00 f203 	lsl.w	r2, r0, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	631a      	str	r2, [r3, #48]	; 0x30
 8005514:	e023      	b.n	800555e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	3b41      	subs	r3, #65	; 0x41
 8005528:	221f      	movs	r2, #31
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	43da      	mvns	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	400a      	ands	r2, r1
 8005536:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	4618      	mov	r0, r3
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	3b41      	subs	r3, #65	; 0x41
 8005552:	fa00 f203 	lsl.w	r2, r0, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800555e:	4b22      	ldr	r3, [pc, #136]	; (80055e8 <HAL_ADC_ConfigChannel+0x234>)
 8005560:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a21      	ldr	r2, [pc, #132]	; (80055ec <HAL_ADC_ConfigChannel+0x238>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d109      	bne.n	8005580 <HAL_ADC_ConfigChannel+0x1cc>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b12      	cmp	r3, #18
 8005572:	d105      	bne.n	8005580 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a19      	ldr	r2, [pc, #100]	; (80055ec <HAL_ADC_ConfigChannel+0x238>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d123      	bne.n	80055d2 <HAL_ADC_ConfigChannel+0x21e>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b10      	cmp	r3, #16
 8005590:	d003      	beq.n	800559a <HAL_ADC_ConfigChannel+0x1e6>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b11      	cmp	r3, #17
 8005598:	d11b      	bne.n	80055d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b10      	cmp	r3, #16
 80055ac:	d111      	bne.n	80055d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80055ae:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <HAL_ADC_ConfigChannel+0x23c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a10      	ldr	r2, [pc, #64]	; (80055f4 <HAL_ADC_ConfigChannel+0x240>)
 80055b4:	fba2 2303 	umull	r2, r3, r2, r3
 80055b8:	0c9a      	lsrs	r2, r3, #18
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80055c4:	e002      	b.n	80055cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1f9      	bne.n	80055c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	40012300 	.word	0x40012300
 80055ec:	40012000 	.word	0x40012000
 80055f0:	200000a4 	.word	0x200000a4
 80055f4:	431bde83 	.word	0x431bde83

080055f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005600:	4b79      	ldr	r3, [pc, #484]	; (80057e8 <ADC_Init+0x1f0>)
 8005602:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	431a      	orrs	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800562c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6859      	ldr	r1, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	021a      	lsls	r2, r3, #8
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005650:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6859      	ldr	r1, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005672:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6899      	ldr	r1, [r3, #8]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68da      	ldr	r2, [r3, #12]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	4a58      	ldr	r2, [pc, #352]	; (80057ec <ADC_Init+0x1f4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d022      	beq.n	80056d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800569e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6899      	ldr	r1, [r3, #8]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80056c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6899      	ldr	r1, [r3, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	609a      	str	r2, [r3, #8]
 80056d4:	e00f      	b.n	80056f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80056f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0202 	bic.w	r2, r2, #2
 8005704:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6899      	ldr	r1, [r3, #8]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	7e1b      	ldrb	r3, [r3, #24]
 8005710:	005a      	lsls	r2, r3, #1
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d01b      	beq.n	800575c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005732:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005742:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6859      	ldr	r1, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	3b01      	subs	r3, #1
 8005750:	035a      	lsls	r2, r3, #13
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
 800575a:	e007      	b.n	800576c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800576a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800577a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	3b01      	subs	r3, #1
 8005788:	051a      	lsls	r2, r3, #20
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80057a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6899      	ldr	r1, [r3, #8]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057ae:	025a      	lsls	r2, r3, #9
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6899      	ldr	r1, [r3, #8]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	029a      	lsls	r2, r3, #10
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	609a      	str	r2, [r3, #8]
}
 80057dc:	bf00      	nop
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	40012300 	.word	0x40012300
 80057ec:	0f000001 	.word	0x0f000001

080057f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005800:	4b0c      	ldr	r3, [pc, #48]	; (8005834 <__NVIC_SetPriorityGrouping+0x44>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800580c:	4013      	ands	r3, r2
 800580e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800581c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005822:	4a04      	ldr	r2, [pc, #16]	; (8005834 <__NVIC_SetPriorityGrouping+0x44>)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	60d3      	str	r3, [r2, #12]
}
 8005828:	bf00      	nop
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	e000ed00 	.word	0xe000ed00

08005838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800583c:	4b04      	ldr	r3, [pc, #16]	; (8005850 <__NVIC_GetPriorityGrouping+0x18>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	0a1b      	lsrs	r3, r3, #8
 8005842:	f003 0307 	and.w	r3, r3, #7
}
 8005846:	4618      	mov	r0, r3
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	e000ed00 	.word	0xe000ed00

08005854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800585e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005862:	2b00      	cmp	r3, #0
 8005864:	db0b      	blt.n	800587e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	f003 021f 	and.w	r2, r3, #31
 800586c:	4907      	ldr	r1, [pc, #28]	; (800588c <__NVIC_EnableIRQ+0x38>)
 800586e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	2001      	movs	r0, #1
 8005876:	fa00 f202 	lsl.w	r2, r0, r2
 800587a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	e000e100 	.word	0xe000e100

08005890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	4603      	mov	r3, r0
 8005898:	6039      	str	r1, [r7, #0]
 800589a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800589c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	db0a      	blt.n	80058ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	490c      	ldr	r1, [pc, #48]	; (80058dc <__NVIC_SetPriority+0x4c>)
 80058aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ae:	0112      	lsls	r2, r2, #4
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	440b      	add	r3, r1
 80058b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058b8:	e00a      	b.n	80058d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	4908      	ldr	r1, [pc, #32]	; (80058e0 <__NVIC_SetPriority+0x50>)
 80058c0:	79fb      	ldrb	r3, [r7, #7]
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	3b04      	subs	r3, #4
 80058c8:	0112      	lsls	r2, r2, #4
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	440b      	add	r3, r1
 80058ce:	761a      	strb	r2, [r3, #24]
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	e000e100 	.word	0xe000e100
 80058e0:	e000ed00 	.word	0xe000ed00

080058e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b089      	sub	sp, #36	; 0x24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f1c3 0307 	rsb	r3, r3, #7
 80058fe:	2b04      	cmp	r3, #4
 8005900:	bf28      	it	cs
 8005902:	2304      	movcs	r3, #4
 8005904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	3304      	adds	r3, #4
 800590a:	2b06      	cmp	r3, #6
 800590c:	d902      	bls.n	8005914 <NVIC_EncodePriority+0x30>
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	3b03      	subs	r3, #3
 8005912:	e000      	b.n	8005916 <NVIC_EncodePriority+0x32>
 8005914:	2300      	movs	r3, #0
 8005916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005918:	f04f 32ff 	mov.w	r2, #4294967295
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	43da      	mvns	r2, r3
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	401a      	ands	r2, r3
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800592c:	f04f 31ff 	mov.w	r1, #4294967295
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	fa01 f303 	lsl.w	r3, r1, r3
 8005936:	43d9      	mvns	r1, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800593c:	4313      	orrs	r3, r2
         );
}
 800593e:	4618      	mov	r0, r3
 8005940:	3724      	adds	r7, #36	; 0x24
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
	...

0800594c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3b01      	subs	r3, #1
 8005958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800595c:	d301      	bcc.n	8005962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800595e:	2301      	movs	r3, #1
 8005960:	e00f      	b.n	8005982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005962:	4a0a      	ldr	r2, [pc, #40]	; (800598c <SysTick_Config+0x40>)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3b01      	subs	r3, #1
 8005968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800596a:	210f      	movs	r1, #15
 800596c:	f04f 30ff 	mov.w	r0, #4294967295
 8005970:	f7ff ff8e 	bl	8005890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005974:	4b05      	ldr	r3, [pc, #20]	; (800598c <SysTick_Config+0x40>)
 8005976:	2200      	movs	r2, #0
 8005978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800597a:	4b04      	ldr	r3, [pc, #16]	; (800598c <SysTick_Config+0x40>)
 800597c:	2207      	movs	r2, #7
 800597e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	e000e010 	.word	0xe000e010

08005990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7ff ff29 	bl	80057f0 <__NVIC_SetPriorityGrouping>
}
 800599e:	bf00      	nop
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b086      	sub	sp, #24
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	4603      	mov	r3, r0
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	607a      	str	r2, [r7, #4]
 80059b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059b8:	f7ff ff3e 	bl	8005838 <__NVIC_GetPriorityGrouping>
 80059bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	6978      	ldr	r0, [r7, #20]
 80059c4:	f7ff ff8e 	bl	80058e4 <NVIC_EncodePriority>
 80059c8:	4602      	mov	r2, r0
 80059ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059ce:	4611      	mov	r1, r2
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7ff ff5d 	bl	8005890 <__NVIC_SetPriority>
}
 80059d6:	bf00      	nop
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b082      	sub	sp, #8
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	4603      	mov	r3, r0
 80059e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff ff31 	bl	8005854 <__NVIC_EnableIRQ>
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b082      	sub	sp, #8
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7ff ffa2 	bl	800594c <SysTick_Config>
 8005a08:	4603      	mov	r3, r0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005a26:	4b23      	ldr	r3, [pc, #140]	; (8005ab4 <HAL_FLASH_Program+0xa0>)
 8005a28:	7e1b      	ldrb	r3, [r3, #24]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_FLASH_Program+0x1e>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e03b      	b.n	8005aaa <HAL_FLASH_Program+0x96>
 8005a32:	4b20      	ldr	r3, [pc, #128]	; (8005ab4 <HAL_FLASH_Program+0xa0>)
 8005a34:	2201      	movs	r2, #1
 8005a36:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a3c:	f000 f870 	bl	8005b20 <FLASH_WaitForLastOperation>
 8005a40:	4603      	mov	r3, r0
 8005a42:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005a44:	7dfb      	ldrb	r3, [r7, #23]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d12b      	bne.n	8005aa2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d105      	bne.n	8005a5c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005a50:	783b      	ldrb	r3, [r7, #0]
 8005a52:	4619      	mov	r1, r3
 8005a54:	68b8      	ldr	r0, [r7, #8]
 8005a56:	f000 f91b 	bl	8005c90 <FLASH_Program_Byte>
 8005a5a:	e016      	b.n	8005a8a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d105      	bne.n	8005a6e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005a62:	883b      	ldrh	r3, [r7, #0]
 8005a64:	4619      	mov	r1, r3
 8005a66:	68b8      	ldr	r0, [r7, #8]
 8005a68:	f000 f8ee 	bl	8005c48 <FLASH_Program_HalfWord>
 8005a6c:	e00d      	b.n	8005a8a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d105      	bne.n	8005a80 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	4619      	mov	r1, r3
 8005a78:	68b8      	ldr	r0, [r7, #8]
 8005a7a:	f000 f8c3 	bl	8005c04 <FLASH_Program_Word>
 8005a7e:	e004      	b.n	8005a8a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a84:	68b8      	ldr	r0, [r7, #8]
 8005a86:	f000 f88b 	bl	8005ba0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a8a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a8e:	f000 f847 	bl	8005b20 <FLASH_WaitForLastOperation>
 8005a92:	4603      	mov	r3, r0
 8005a94:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005a96:	4b08      	ldr	r3, [pc, #32]	; (8005ab8 <HAL_FLASH_Program+0xa4>)
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	4a07      	ldr	r2, [pc, #28]	; (8005ab8 <HAL_FLASH_Program+0xa4>)
 8005a9c:	f023 0301 	bic.w	r3, r3, #1
 8005aa0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005aa2:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <HAL_FLASH_Program+0xa0>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000888 	.word	0x20000888
 8005ab8:	40023c00 	.word	0x40023c00

08005abc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <HAL_FLASH_Unlock+0x38>)
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	da0b      	bge.n	8005ae6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005ace:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <HAL_FLASH_Unlock+0x38>)
 8005ad0:	4a09      	ldr	r2, [pc, #36]	; (8005af8 <HAL_FLASH_Unlock+0x3c>)
 8005ad2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005ad4:	4b07      	ldr	r3, [pc, #28]	; (8005af4 <HAL_FLASH_Unlock+0x38>)
 8005ad6:	4a09      	ldr	r2, [pc, #36]	; (8005afc <HAL_FLASH_Unlock+0x40>)
 8005ad8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005ada:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <HAL_FLASH_Unlock+0x38>)
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	da01      	bge.n	8005ae6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	40023c00 	.word	0x40023c00
 8005af8:	45670123 	.word	0x45670123
 8005afc:	cdef89ab 	.word	0xcdef89ab

08005b00 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005b04:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <HAL_FLASH_Lock+0x1c>)
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	4a04      	ldr	r2, [pc, #16]	; (8005b1c <HAL_FLASH_Lock+0x1c>)
 8005b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b0e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	40023c00 	.word	0x40023c00

08005b20 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b2c:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <FLASH_WaitForLastOperation+0x78>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005b32:	f7ff fbcb 	bl	80052cc <HAL_GetTick>
 8005b36:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005b38:	e010      	b.n	8005b5c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b40:	d00c      	beq.n	8005b5c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <FLASH_WaitForLastOperation+0x38>
 8005b48:	f7ff fbc0 	bl	80052cc <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d201      	bcs.n	8005b5c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e019      	b.n	8005b90 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005b5c:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <FLASH_WaitForLastOperation+0x7c>)
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e8      	bne.n	8005b3a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005b68:	4b0c      	ldr	r3, [pc, #48]	; (8005b9c <FLASH_WaitForLastOperation+0x7c>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005b74:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <FLASH_WaitForLastOperation+0x7c>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005b7a:	4b08      	ldr	r3, [pc, #32]	; (8005b9c <FLASH_WaitForLastOperation+0x7c>)
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005b86:	f000 f8a5 	bl	8005cd4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e000      	b.n	8005b90 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
  
}  
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20000888 	.word	0x20000888
 8005b9c:	40023c00 	.word	0x40023c00

08005ba0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005bac:	4b14      	ldr	r3, [pc, #80]	; (8005c00 <FLASH_Program_DoubleWord+0x60>)
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	4a13      	ldr	r2, [pc, #76]	; (8005c00 <FLASH_Program_DoubleWord+0x60>)
 8005bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005bb8:	4b11      	ldr	r3, [pc, #68]	; (8005c00 <FLASH_Program_DoubleWord+0x60>)
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	4a10      	ldr	r2, [pc, #64]	; (8005c00 <FLASH_Program_DoubleWord+0x60>)
 8005bbe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005bc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005bc4:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <FLASH_Program_DoubleWord+0x60>)
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	4a0d      	ldr	r2, [pc, #52]	; (8005c00 <FLASH_Program_DoubleWord+0x60>)
 8005bca:	f043 0301 	orr.w	r3, r3, #1
 8005bce:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005bd6:	f3bf 8f6f 	isb	sy
}
 8005bda:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005bdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005be0:	f04f 0200 	mov.w	r2, #0
 8005be4:	f04f 0300 	mov.w	r3, #0
 8005be8:	000a      	movs	r2, r1
 8005bea:	2300      	movs	r3, #0
 8005bec:	68f9      	ldr	r1, [r7, #12]
 8005bee:	3104      	adds	r1, #4
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	600b      	str	r3, [r1, #0]
}
 8005bf4:	bf00      	nop
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	40023c00 	.word	0x40023c00

08005c04 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005c0e:	4b0d      	ldr	r3, [pc, #52]	; (8005c44 <FLASH_Program_Word+0x40>)
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	4a0c      	ldr	r2, [pc, #48]	; (8005c44 <FLASH_Program_Word+0x40>)
 8005c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c18:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005c1a:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <FLASH_Program_Word+0x40>)
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	4a09      	ldr	r2, [pc, #36]	; (8005c44 <FLASH_Program_Word+0x40>)
 8005c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005c26:	4b07      	ldr	r3, [pc, #28]	; (8005c44 <FLASH_Program_Word+0x40>)
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	4a06      	ldr	r2, [pc, #24]	; (8005c44 <FLASH_Program_Word+0x40>)
 8005c2c:	f043 0301 	orr.w	r3, r3, #1
 8005c30:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	601a      	str	r2, [r3, #0]
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	40023c00 	.word	0x40023c00

08005c48 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005c54:	4b0d      	ldr	r3, [pc, #52]	; (8005c8c <FLASH_Program_HalfWord+0x44>)
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	4a0c      	ldr	r2, [pc, #48]	; (8005c8c <FLASH_Program_HalfWord+0x44>)
 8005c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005c60:	4b0a      	ldr	r3, [pc, #40]	; (8005c8c <FLASH_Program_HalfWord+0x44>)
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	4a09      	ldr	r2, [pc, #36]	; (8005c8c <FLASH_Program_HalfWord+0x44>)
 8005c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005c6c:	4b07      	ldr	r3, [pc, #28]	; (8005c8c <FLASH_Program_HalfWord+0x44>)
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	4a06      	ldr	r2, [pc, #24]	; (8005c8c <FLASH_Program_HalfWord+0x44>)
 8005c72:	f043 0301 	orr.w	r3, r3, #1
 8005c76:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	887a      	ldrh	r2, [r7, #2]
 8005c7c:	801a      	strh	r2, [r3, #0]
}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	40023c00 	.word	0x40023c00

08005c90 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005c9c:	4b0c      	ldr	r3, [pc, #48]	; (8005cd0 <FLASH_Program_Byte+0x40>)
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	4a0b      	ldr	r2, [pc, #44]	; (8005cd0 <FLASH_Program_Byte+0x40>)
 8005ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005ca8:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <FLASH_Program_Byte+0x40>)
 8005caa:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <FLASH_Program_Byte+0x40>)
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <FLASH_Program_Byte+0x40>)
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	4a06      	ldr	r2, [pc, #24]	; (8005cd0 <FLASH_Program_Byte+0x40>)
 8005cb6:	f043 0301 	orr.w	r3, r3, #1
 8005cba:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	78fa      	ldrb	r2, [r7, #3]
 8005cc0:	701a      	strb	r2, [r3, #0]
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40023c00 	.word	0x40023c00

08005cd4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005cd8:	4b2f      	ldr	r3, [pc, #188]	; (8005d98 <FLASH_SetErrorCode+0xc4>)
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d008      	beq.n	8005cf6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005ce4:	4b2d      	ldr	r3, [pc, #180]	; (8005d9c <FLASH_SetErrorCode+0xc8>)
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	f043 0310 	orr.w	r3, r3, #16
 8005cec:	4a2b      	ldr	r2, [pc, #172]	; (8005d9c <FLASH_SetErrorCode+0xc8>)
 8005cee:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005cf0:	4b29      	ldr	r3, [pc, #164]	; (8005d98 <FLASH_SetErrorCode+0xc4>)
 8005cf2:	2210      	movs	r2, #16
 8005cf4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005cf6:	4b28      	ldr	r3, [pc, #160]	; (8005d98 <FLASH_SetErrorCode+0xc4>)
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f003 0320 	and.w	r3, r3, #32
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d008      	beq.n	8005d14 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005d02:	4b26      	ldr	r3, [pc, #152]	; (8005d9c <FLASH_SetErrorCode+0xc8>)
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	f043 0308 	orr.w	r3, r3, #8
 8005d0a:	4a24      	ldr	r2, [pc, #144]	; (8005d9c <FLASH_SetErrorCode+0xc8>)
 8005d0c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005d0e:	4b22      	ldr	r3, [pc, #136]	; (8005d98 <FLASH_SetErrorCode+0xc4>)
 8005d10:	2220      	movs	r2, #32
 8005d12:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005d14:	4b20      	ldr	r3, [pc, #128]	; (8005d98 <FLASH_SetErrorCode+0xc4>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d008      	beq.n	8005d32 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005d20:	4b1e      	ldr	r3, [pc, #120]	; (8005d9c <FLASH_SetErrorCode+0xc8>)
 8005d22:	69db      	ldr	r3, [r3, #28]
 8005d24:	f043 0304 	orr.w	r3, r3, #4
 8005d28:	4a1c      	ldr	r2, [pc, #112]	; (8005d9c <FLASH_SetErrorCode+0xc8>)
 8005d2a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005d2c:	4b1a      	ldr	r3, [pc, #104]	; (8005d98 <FLASH_SetErrorCode+0xc4>)
 8005d2e:	2240      	movs	r2, #64	; 0x40
 8005d30:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005d32:	4b19      	ldr	r3, [pc, #100]	; (8005d98 <FLASH_SetErrorCode+0xc4>)
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d008      	beq.n	8005d50 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005d3e:	4b17      	ldr	r3, [pc, #92]	; (8005d9c <FLASH_SetErrorCode+0xc8>)
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f043 0302 	orr.w	r3, r3, #2
 8005d46:	4a15      	ldr	r2, [pc, #84]	; (8005d9c <FLASH_SetErrorCode+0xc8>)
 8005d48:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005d4a:	4b13      	ldr	r3, [pc, #76]	; (8005d98 <FLASH_SetErrorCode+0xc4>)
 8005d4c:	2280      	movs	r2, #128	; 0x80
 8005d4e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005d50:	4b11      	ldr	r3, [pc, #68]	; (8005d98 <FLASH_SetErrorCode+0xc4>)
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d009      	beq.n	8005d70 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005d5c:	4b0f      	ldr	r3, [pc, #60]	; (8005d9c <FLASH_SetErrorCode+0xc8>)
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	f043 0301 	orr.w	r3, r3, #1
 8005d64:	4a0d      	ldr	r2, [pc, #52]	; (8005d9c <FLASH_SetErrorCode+0xc8>)
 8005d66:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005d68:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <FLASH_SetErrorCode+0xc4>)
 8005d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d6e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005d70:	4b09      	ldr	r3, [pc, #36]	; (8005d98 <FLASH_SetErrorCode+0xc4>)
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d008      	beq.n	8005d8e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005d7c:	4b07      	ldr	r3, [pc, #28]	; (8005d9c <FLASH_SetErrorCode+0xc8>)
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	f043 0320 	orr.w	r3, r3, #32
 8005d84:	4a05      	ldr	r2, [pc, #20]	; (8005d9c <FLASH_SetErrorCode+0xc8>)
 8005d86:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005d88:	4b03      	ldr	r3, [pc, #12]	; (8005d98 <FLASH_SetErrorCode+0xc4>)
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	60da      	str	r2, [r3, #12]
  }
}
 8005d8e:	bf00      	nop
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	40023c00 	.word	0x40023c00
 8005d9c:	20000888 	.word	0x20000888

08005da0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005db2:	4b31      	ldr	r3, [pc, #196]	; (8005e78 <HAL_FLASHEx_Erase+0xd8>)
 8005db4:	7e1b      	ldrb	r3, [r3, #24]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d101      	bne.n	8005dbe <HAL_FLASHEx_Erase+0x1e>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	e058      	b.n	8005e70 <HAL_FLASHEx_Erase+0xd0>
 8005dbe:	4b2e      	ldr	r3, [pc, #184]	; (8005e78 <HAL_FLASHEx_Erase+0xd8>)
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005dc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005dc8:	f7ff feaa 	bl	8005b20 <FLASH_WaitForLastOperation>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d148      	bne.n	8005e68 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ddc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d115      	bne.n	8005e12 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	4619      	mov	r1, r3
 8005df2:	4610      	mov	r0, r2
 8005df4:	f000 f844 	bl	8005e80 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005df8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005dfc:	f7ff fe90 	bl	8005b20 <FLASH_WaitForLastOperation>
 8005e00:	4603      	mov	r3, r0
 8005e02:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005e04:	4b1d      	ldr	r3, [pc, #116]	; (8005e7c <HAL_FLASHEx_Erase+0xdc>)
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	4a1c      	ldr	r2, [pc, #112]	; (8005e7c <HAL_FLASHEx_Erase+0xdc>)
 8005e0a:	f023 0304 	bic.w	r3, r3, #4
 8005e0e:	6113      	str	r3, [r2, #16]
 8005e10:	e028      	b.n	8005e64 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	60bb      	str	r3, [r7, #8]
 8005e18:	e01c      	b.n	8005e54 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	4619      	mov	r1, r3
 8005e22:	68b8      	ldr	r0, [r7, #8]
 8005e24:	f000 f850 	bl	8005ec8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e2c:	f7ff fe78 	bl	8005b20 <FLASH_WaitForLastOperation>
 8005e30:	4603      	mov	r3, r0
 8005e32:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005e34:	4b11      	ldr	r3, [pc, #68]	; (8005e7c <HAL_FLASHEx_Erase+0xdc>)
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	4a10      	ldr	r2, [pc, #64]	; (8005e7c <HAL_FLASHEx_Erase+0xdc>)
 8005e3a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005e3e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	601a      	str	r2, [r3, #0]
          break;
 8005e4c:	e00a      	b.n	8005e64 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	3301      	adds	r3, #1
 8005e52:	60bb      	str	r3, [r7, #8]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d3da      	bcc.n	8005e1a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005e64:	f000 f878 	bl	8005f58 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005e68:	4b03      	ldr	r3, [pc, #12]	; (8005e78 <HAL_FLASHEx_Erase+0xd8>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	761a      	strb	r2, [r3, #24]

  return status;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20000888 	.word	0x20000888
 8005e7c:	40023c00 	.word	0x40023c00

08005e80 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	4603      	mov	r3, r0
 8005e88:	6039      	str	r1, [r7, #0]
 8005e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005e8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <FLASH_MassErase+0x44>)
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	4a0c      	ldr	r2, [pc, #48]	; (8005ec4 <FLASH_MassErase+0x44>)
 8005e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005e98:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <FLASH_MassErase+0x44>)
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	4a09      	ldr	r2, [pc, #36]	; (8005ec4 <FLASH_MassErase+0x44>)
 8005e9e:	f043 0304 	orr.w	r3, r3, #4
 8005ea2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005ea4:	4b07      	ldr	r3, [pc, #28]	; (8005ec4 <FLASH_MassErase+0x44>)
 8005ea6:	691a      	ldr	r2, [r3, #16]
 8005ea8:	79fb      	ldrb	r3, [r7, #7]
 8005eaa:	021b      	lsls	r3, r3, #8
 8005eac:	4313      	orrs	r3, r2
 8005eae:	4a05      	ldr	r2, [pc, #20]	; (8005ec4 <FLASH_MassErase+0x44>)
 8005eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eb4:	6113      	str	r3, [r2, #16]
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40023c00 	.word	0x40023c00

08005ec8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005ed8:	78fb      	ldrb	r3, [r7, #3]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d102      	bne.n	8005ee4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	e010      	b.n	8005f06 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d103      	bne.n	8005ef2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005eea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	e009      	b.n	8005f06 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005ef2:	78fb      	ldrb	r3, [r7, #3]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d103      	bne.n	8005f00 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005efc:	60fb      	str	r3, [r7, #12]
 8005efe:	e002      	b.n	8005f06 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005f00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005f04:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005f06:	4b13      	ldr	r3, [pc, #76]	; (8005f54 <FLASH_Erase_Sector+0x8c>)
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	4a12      	ldr	r2, [pc, #72]	; (8005f54 <FLASH_Erase_Sector+0x8c>)
 8005f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005f12:	4b10      	ldr	r3, [pc, #64]	; (8005f54 <FLASH_Erase_Sector+0x8c>)
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	490f      	ldr	r1, [pc, #60]	; (8005f54 <FLASH_Erase_Sector+0x8c>)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005f1e:	4b0d      	ldr	r3, [pc, #52]	; (8005f54 <FLASH_Erase_Sector+0x8c>)
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	4a0c      	ldr	r2, [pc, #48]	; (8005f54 <FLASH_Erase_Sector+0x8c>)
 8005f24:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005f28:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005f2a:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <FLASH_Erase_Sector+0x8c>)
 8005f2c:	691a      	ldr	r2, [r3, #16]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	4313      	orrs	r3, r2
 8005f34:	4a07      	ldr	r2, [pc, #28]	; (8005f54 <FLASH_Erase_Sector+0x8c>)
 8005f36:	f043 0302 	orr.w	r3, r3, #2
 8005f3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005f3c:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <FLASH_Erase_Sector+0x8c>)
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	4a04      	ldr	r2, [pc, #16]	; (8005f54 <FLASH_Erase_Sector+0x8c>)
 8005f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f46:	6113      	str	r3, [r2, #16]
}
 8005f48:	bf00      	nop
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	40023c00 	.word	0x40023c00

08005f58 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005f5c:	4b20      	ldr	r3, [pc, #128]	; (8005fe0 <FLASH_FlushCaches+0x88>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d017      	beq.n	8005f98 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005f68:	4b1d      	ldr	r3, [pc, #116]	; (8005fe0 <FLASH_FlushCaches+0x88>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a1c      	ldr	r2, [pc, #112]	; (8005fe0 <FLASH_FlushCaches+0x88>)
 8005f6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f72:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005f74:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <FLASH_FlushCaches+0x88>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a19      	ldr	r2, [pc, #100]	; (8005fe0 <FLASH_FlushCaches+0x88>)
 8005f7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	4b17      	ldr	r3, [pc, #92]	; (8005fe0 <FLASH_FlushCaches+0x88>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a16      	ldr	r2, [pc, #88]	; (8005fe0 <FLASH_FlushCaches+0x88>)
 8005f86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f8a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f8c:	4b14      	ldr	r3, [pc, #80]	; (8005fe0 <FLASH_FlushCaches+0x88>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a13      	ldr	r2, [pc, #76]	; (8005fe0 <FLASH_FlushCaches+0x88>)
 8005f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f96:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005f98:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <FLASH_FlushCaches+0x88>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d017      	beq.n	8005fd4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005fa4:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <FLASH_FlushCaches+0x88>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a0d      	ldr	r2, [pc, #52]	; (8005fe0 <FLASH_FlushCaches+0x88>)
 8005faa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fae:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <FLASH_FlushCaches+0x88>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a0a      	ldr	r2, [pc, #40]	; (8005fe0 <FLASH_FlushCaches+0x88>)
 8005fb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	4b08      	ldr	r3, [pc, #32]	; (8005fe0 <FLASH_FlushCaches+0x88>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a07      	ldr	r2, [pc, #28]	; (8005fe0 <FLASH_FlushCaches+0x88>)
 8005fc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fc6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005fc8:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <FLASH_FlushCaches+0x88>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a04      	ldr	r2, [pc, #16]	; (8005fe0 <FLASH_FlushCaches+0x88>)
 8005fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fd2:	6013      	str	r3, [r2, #0]
  }
}
 8005fd4:	bf00      	nop
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40023c00 	.word	0x40023c00

08005fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b089      	sub	sp, #36	; 0x24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
 8005ffe:	e159      	b.n	80062b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006000:	2201      	movs	r2, #1
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	fa02 f303 	lsl.w	r3, r2, r3
 8006008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4013      	ands	r3, r2
 8006012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	429a      	cmp	r2, r3
 800601a:	f040 8148 	bne.w	80062ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	2b01      	cmp	r3, #1
 8006028:	d005      	beq.n	8006036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006032:	2b02      	cmp	r3, #2
 8006034:	d130      	bne.n	8006098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	2203      	movs	r2, #3
 8006042:	fa02 f303 	lsl.w	r3, r2, r3
 8006046:	43db      	mvns	r3, r3
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	4013      	ands	r3, r2
 800604c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	fa02 f303 	lsl.w	r3, r2, r3
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	4313      	orrs	r3, r2
 800605e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800606c:	2201      	movs	r2, #1
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	fa02 f303 	lsl.w	r3, r2, r3
 8006074:	43db      	mvns	r3, r3
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	4013      	ands	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	091b      	lsrs	r3, r3, #4
 8006082:	f003 0201 	and.w	r2, r3, #1
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	fa02 f303 	lsl.w	r3, r2, r3
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	4313      	orrs	r3, r2
 8006090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d017      	beq.n	80060d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	2203      	movs	r2, #3
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	43db      	mvns	r3, r3
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	4013      	ands	r3, r2
 80060ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f003 0303 	and.w	r3, r3, #3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d123      	bne.n	8006128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	08da      	lsrs	r2, r3, #3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3208      	adds	r2, #8
 80060e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	220f      	movs	r2, #15
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	43db      	mvns	r3, r3
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	4013      	ands	r3, r2
 8006102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	fa02 f303 	lsl.w	r3, r2, r3
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	4313      	orrs	r3, r2
 8006118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	08da      	lsrs	r2, r3, #3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3208      	adds	r2, #8
 8006122:	69b9      	ldr	r1, [r7, #24]
 8006124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	005b      	lsls	r3, r3, #1
 8006132:	2203      	movs	r2, #3
 8006134:	fa02 f303 	lsl.w	r3, r2, r3
 8006138:	43db      	mvns	r3, r3
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	4013      	ands	r3, r2
 800613e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f003 0203 	and.w	r2, r3, #3
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	4313      	orrs	r3, r2
 8006154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 80a2 	beq.w	80062ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	4b57      	ldr	r3, [pc, #348]	; (80062cc <HAL_GPIO_Init+0x2e8>)
 8006170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006172:	4a56      	ldr	r2, [pc, #344]	; (80062cc <HAL_GPIO_Init+0x2e8>)
 8006174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006178:	6453      	str	r3, [r2, #68]	; 0x44
 800617a:	4b54      	ldr	r3, [pc, #336]	; (80062cc <HAL_GPIO_Init+0x2e8>)
 800617c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006186:	4a52      	ldr	r2, [pc, #328]	; (80062d0 <HAL_GPIO_Init+0x2ec>)
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	089b      	lsrs	r3, r3, #2
 800618c:	3302      	adds	r3, #2
 800618e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	220f      	movs	r2, #15
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	43db      	mvns	r3, r3
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	4013      	ands	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a49      	ldr	r2, [pc, #292]	; (80062d4 <HAL_GPIO_Init+0x2f0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d019      	beq.n	80061e6 <HAL_GPIO_Init+0x202>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a48      	ldr	r2, [pc, #288]	; (80062d8 <HAL_GPIO_Init+0x2f4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d013      	beq.n	80061e2 <HAL_GPIO_Init+0x1fe>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a47      	ldr	r2, [pc, #284]	; (80062dc <HAL_GPIO_Init+0x2f8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00d      	beq.n	80061de <HAL_GPIO_Init+0x1fa>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a46      	ldr	r2, [pc, #280]	; (80062e0 <HAL_GPIO_Init+0x2fc>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d007      	beq.n	80061da <HAL_GPIO_Init+0x1f6>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a45      	ldr	r2, [pc, #276]	; (80062e4 <HAL_GPIO_Init+0x300>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d101      	bne.n	80061d6 <HAL_GPIO_Init+0x1f2>
 80061d2:	2304      	movs	r3, #4
 80061d4:	e008      	b.n	80061e8 <HAL_GPIO_Init+0x204>
 80061d6:	2307      	movs	r3, #7
 80061d8:	e006      	b.n	80061e8 <HAL_GPIO_Init+0x204>
 80061da:	2303      	movs	r3, #3
 80061dc:	e004      	b.n	80061e8 <HAL_GPIO_Init+0x204>
 80061de:	2302      	movs	r3, #2
 80061e0:	e002      	b.n	80061e8 <HAL_GPIO_Init+0x204>
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <HAL_GPIO_Init+0x204>
 80061e6:	2300      	movs	r3, #0
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	f002 0203 	and.w	r2, r2, #3
 80061ee:	0092      	lsls	r2, r2, #2
 80061f0:	4093      	lsls	r3, r2
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061f8:	4935      	ldr	r1, [pc, #212]	; (80062d0 <HAL_GPIO_Init+0x2ec>)
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	089b      	lsrs	r3, r3, #2
 80061fe:	3302      	adds	r3, #2
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006206:	4b38      	ldr	r3, [pc, #224]	; (80062e8 <HAL_GPIO_Init+0x304>)
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	43db      	mvns	r3, r3
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	4013      	ands	r3, r2
 8006214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	4313      	orrs	r3, r2
 8006228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800622a:	4a2f      	ldr	r2, [pc, #188]	; (80062e8 <HAL_GPIO_Init+0x304>)
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006230:	4b2d      	ldr	r3, [pc, #180]	; (80062e8 <HAL_GPIO_Init+0x304>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	43db      	mvns	r3, r3
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	4013      	ands	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	4313      	orrs	r3, r2
 8006252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006254:	4a24      	ldr	r2, [pc, #144]	; (80062e8 <HAL_GPIO_Init+0x304>)
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800625a:	4b23      	ldr	r3, [pc, #140]	; (80062e8 <HAL_GPIO_Init+0x304>)
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	43db      	mvns	r3, r3
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	4013      	ands	r3, r2
 8006268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	4313      	orrs	r3, r2
 800627c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800627e:	4a1a      	ldr	r2, [pc, #104]	; (80062e8 <HAL_GPIO_Init+0x304>)
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006284:	4b18      	ldr	r3, [pc, #96]	; (80062e8 <HAL_GPIO_Init+0x304>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	43db      	mvns	r3, r3
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	4013      	ands	r3, r2
 8006292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d003      	beq.n	80062a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80062a8:	4a0f      	ldr	r2, [pc, #60]	; (80062e8 <HAL_GPIO_Init+0x304>)
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	3301      	adds	r3, #1
 80062b2:	61fb      	str	r3, [r7, #28]
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	2b0f      	cmp	r3, #15
 80062b8:	f67f aea2 	bls.w	8006000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80062bc:	bf00      	nop
 80062be:	bf00      	nop
 80062c0:	3724      	adds	r7, #36	; 0x24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	40023800 	.word	0x40023800
 80062d0:	40013800 	.word	0x40013800
 80062d4:	40020000 	.word	0x40020000
 80062d8:	40020400 	.word	0x40020400
 80062dc:	40020800 	.word	0x40020800
 80062e0:	40020c00 	.word	0x40020c00
 80062e4:	40021000 	.word	0x40021000
 80062e8:	40013c00 	.word	0x40013c00

080062ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	460b      	mov	r3, r1
 80062f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	887b      	ldrh	r3, [r7, #2]
 80062fe:	4013      	ands	r3, r2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006304:	2301      	movs	r3, #1
 8006306:	73fb      	strb	r3, [r7, #15]
 8006308:	e001      	b.n	800630e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800630a:	2300      	movs	r3, #0
 800630c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800630e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	807b      	strh	r3, [r7, #2]
 8006328:	4613      	mov	r3, r2
 800632a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800632c:	787b      	ldrb	r3, [r7, #1]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006332:	887a      	ldrh	r2, [r7, #2]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006338:	e003      	b.n	8006342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800633a:	887b      	ldrh	r3, [r7, #2]
 800633c:	041a      	lsls	r2, r3, #16
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	619a      	str	r2, [r3, #24]
}
 8006342:	bf00      	nop
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
	...

08006350 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e12b      	b.n	80065ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d106      	bne.n	800637c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7fe fc9e 	bl	8004cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2224      	movs	r2, #36	; 0x24
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0201 	bic.w	r2, r2, #1
 8006392:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80063b4:	f001 f848 	bl	8007448 <HAL_RCC_GetPCLK1Freq>
 80063b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	4a81      	ldr	r2, [pc, #516]	; (80065c4 <HAL_I2C_Init+0x274>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d807      	bhi.n	80063d4 <HAL_I2C_Init+0x84>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4a80      	ldr	r2, [pc, #512]	; (80065c8 <HAL_I2C_Init+0x278>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	bf94      	ite	ls
 80063cc:	2301      	movls	r3, #1
 80063ce:	2300      	movhi	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	e006      	b.n	80063e2 <HAL_I2C_Init+0x92>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4a7d      	ldr	r2, [pc, #500]	; (80065cc <HAL_I2C_Init+0x27c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	bf94      	ite	ls
 80063dc:	2301      	movls	r3, #1
 80063de:	2300      	movhi	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e0e7      	b.n	80065ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4a78      	ldr	r2, [pc, #480]	; (80065d0 <HAL_I2C_Init+0x280>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	0c9b      	lsrs	r3, r3, #18
 80063f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	430a      	orrs	r2, r1
 8006408:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	4a6a      	ldr	r2, [pc, #424]	; (80065c4 <HAL_I2C_Init+0x274>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d802      	bhi.n	8006424 <HAL_I2C_Init+0xd4>
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	3301      	adds	r3, #1
 8006422:	e009      	b.n	8006438 <HAL_I2C_Init+0xe8>
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800642a:	fb02 f303 	mul.w	r3, r2, r3
 800642e:	4a69      	ldr	r2, [pc, #420]	; (80065d4 <HAL_I2C_Init+0x284>)
 8006430:	fba2 2303 	umull	r2, r3, r2, r3
 8006434:	099b      	lsrs	r3, r3, #6
 8006436:	3301      	adds	r3, #1
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6812      	ldr	r2, [r2, #0]
 800643c:	430b      	orrs	r3, r1
 800643e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800644a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	495c      	ldr	r1, [pc, #368]	; (80065c4 <HAL_I2C_Init+0x274>)
 8006454:	428b      	cmp	r3, r1
 8006456:	d819      	bhi.n	800648c <HAL_I2C_Init+0x13c>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	1e59      	subs	r1, r3, #1
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	fbb1 f3f3 	udiv	r3, r1, r3
 8006466:	1c59      	adds	r1, r3, #1
 8006468:	f640 73fc 	movw	r3, #4092	; 0xffc
 800646c:	400b      	ands	r3, r1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00a      	beq.n	8006488 <HAL_I2C_Init+0x138>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	1e59      	subs	r1, r3, #1
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	005b      	lsls	r3, r3, #1
 800647c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006480:	3301      	adds	r3, #1
 8006482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006486:	e051      	b.n	800652c <HAL_I2C_Init+0x1dc>
 8006488:	2304      	movs	r3, #4
 800648a:	e04f      	b.n	800652c <HAL_I2C_Init+0x1dc>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d111      	bne.n	80064b8 <HAL_I2C_Init+0x168>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	1e58      	subs	r0, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6859      	ldr	r1, [r3, #4]
 800649c:	460b      	mov	r3, r1
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	440b      	add	r3, r1
 80064a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80064a6:	3301      	adds	r3, #1
 80064a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	bf0c      	ite	eq
 80064b0:	2301      	moveq	r3, #1
 80064b2:	2300      	movne	r3, #0
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	e012      	b.n	80064de <HAL_I2C_Init+0x18e>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	1e58      	subs	r0, r3, #1
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6859      	ldr	r1, [r3, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	440b      	add	r3, r1
 80064c6:	0099      	lsls	r1, r3, #2
 80064c8:	440b      	add	r3, r1
 80064ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80064ce:	3301      	adds	r3, #1
 80064d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	bf0c      	ite	eq
 80064d8:	2301      	moveq	r3, #1
 80064da:	2300      	movne	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <HAL_I2C_Init+0x196>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e022      	b.n	800652c <HAL_I2C_Init+0x1dc>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10e      	bne.n	800650c <HAL_I2C_Init+0x1bc>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1e58      	subs	r0, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6859      	ldr	r1, [r3, #4]
 80064f6:	460b      	mov	r3, r1
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	440b      	add	r3, r1
 80064fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006500:	3301      	adds	r3, #1
 8006502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800650a:	e00f      	b.n	800652c <HAL_I2C_Init+0x1dc>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	1e58      	subs	r0, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6859      	ldr	r1, [r3, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	440b      	add	r3, r1
 800651a:	0099      	lsls	r1, r3, #2
 800651c:	440b      	add	r3, r1
 800651e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006522:	3301      	adds	r3, #1
 8006524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006528:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800652c:	6879      	ldr	r1, [r7, #4]
 800652e:	6809      	ldr	r1, [r1, #0]
 8006530:	4313      	orrs	r3, r2
 8006532:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69da      	ldr	r2, [r3, #28]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800655a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6911      	ldr	r1, [r2, #16]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	68d2      	ldr	r2, [r2, #12]
 8006566:	4311      	orrs	r1, r2
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6812      	ldr	r2, [r2, #0]
 800656c:	430b      	orrs	r3, r1
 800656e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	695a      	ldr	r2, [r3, #20]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0201 	orr.w	r2, r2, #1
 800659a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	000186a0 	.word	0x000186a0
 80065c8:	001e847f 	.word	0x001e847f
 80065cc:	003d08ff 	.word	0x003d08ff
 80065d0:	431bde83 	.word	0x431bde83
 80065d4:	10624dd3 	.word	0x10624dd3

080065d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b088      	sub	sp, #32
 80065dc:	af02      	add	r7, sp, #8
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	607a      	str	r2, [r7, #4]
 80065e2:	461a      	mov	r2, r3
 80065e4:	460b      	mov	r3, r1
 80065e6:	817b      	strh	r3, [r7, #10]
 80065e8:	4613      	mov	r3, r2
 80065ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065ec:	f7fe fe6e 	bl	80052cc <HAL_GetTick>
 80065f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	f040 80e0 	bne.w	80067c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	2319      	movs	r3, #25
 8006606:	2201      	movs	r2, #1
 8006608:	4970      	ldr	r1, [pc, #448]	; (80067cc <HAL_I2C_Master_Transmit+0x1f4>)
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 f964 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006616:	2302      	movs	r3, #2
 8006618:	e0d3      	b.n	80067c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006620:	2b01      	cmp	r3, #1
 8006622:	d101      	bne.n	8006628 <HAL_I2C_Master_Transmit+0x50>
 8006624:	2302      	movs	r3, #2
 8006626:	e0cc      	b.n	80067c2 <HAL_I2C_Master_Transmit+0x1ea>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b01      	cmp	r3, #1
 800663c:	d007      	beq.n	800664e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f042 0201 	orr.w	r2, r2, #1
 800664c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800665c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2221      	movs	r2, #33	; 0x21
 8006662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2210      	movs	r2, #16
 800666a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	893a      	ldrh	r2, [r7, #8]
 800667e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4a50      	ldr	r2, [pc, #320]	; (80067d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800668e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006690:	8979      	ldrh	r1, [r7, #10]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	6a3a      	ldr	r2, [r7, #32]
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 f89c 	bl	80067d4 <I2C_MasterRequestWrite>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e08d      	b.n	80067c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066a6:	2300      	movs	r3, #0
 80066a8:	613b      	str	r3, [r7, #16]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	613b      	str	r3, [r7, #16]
 80066ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80066bc:	e066      	b.n	800678c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	6a39      	ldr	r1, [r7, #32]
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 f9de 	bl	8006a84 <I2C_WaitOnTXEFlagUntilTimeout>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00d      	beq.n	80066ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d107      	bne.n	80066e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e06b      	b.n	80067c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	781a      	ldrb	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006704:	b29b      	uxth	r3, r3
 8006706:	3b01      	subs	r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006712:	3b01      	subs	r3, #1
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b04      	cmp	r3, #4
 8006726:	d11b      	bne.n	8006760 <HAL_I2C_Master_Transmit+0x188>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800672c:	2b00      	cmp	r3, #0
 800672e:	d017      	beq.n	8006760 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	781a      	ldrb	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674a:	b29b      	uxth	r3, r3
 800674c:	3b01      	subs	r3, #1
 800674e:	b29a      	uxth	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	6a39      	ldr	r1, [r7, #32]
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f9ce 	bl	8006b06 <I2C_WaitOnBTFFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00d      	beq.n	800678c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006774:	2b04      	cmp	r3, #4
 8006776:	d107      	bne.n	8006788 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006786:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e01a      	b.n	80067c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006790:	2b00      	cmp	r3, #0
 8006792:	d194      	bne.n	80066be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	e000      	b.n	80067c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80067c0:	2302      	movs	r3, #2
  }
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	00100002 	.word	0x00100002
 80067d0:	ffff0000 	.word	0xffff0000

080067d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b088      	sub	sp, #32
 80067d8:	af02      	add	r7, sp, #8
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	607a      	str	r2, [r7, #4]
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	460b      	mov	r3, r1
 80067e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d006      	beq.n	80067fe <I2C_MasterRequestWrite+0x2a>
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d003      	beq.n	80067fe <I2C_MasterRequestWrite+0x2a>
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067fc:	d108      	bne.n	8006810 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	e00b      	b.n	8006828 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006814:	2b12      	cmp	r3, #18
 8006816:	d107      	bne.n	8006828 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006826:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f000 f84f 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00d      	beq.n	800685c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800684e:	d103      	bne.n	8006858 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006856:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e035      	b.n	80068c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006864:	d108      	bne.n	8006878 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006866:	897b      	ldrh	r3, [r7, #10]
 8006868:	b2db      	uxtb	r3, r3
 800686a:	461a      	mov	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006874:	611a      	str	r2, [r3, #16]
 8006876:	e01b      	b.n	80068b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006878:	897b      	ldrh	r3, [r7, #10]
 800687a:	11db      	asrs	r3, r3, #7
 800687c:	b2db      	uxtb	r3, r3
 800687e:	f003 0306 	and.w	r3, r3, #6
 8006882:	b2db      	uxtb	r3, r3
 8006884:	f063 030f 	orn	r3, r3, #15
 8006888:	b2da      	uxtb	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	490e      	ldr	r1, [pc, #56]	; (80068d0 <I2C_MasterRequestWrite+0xfc>)
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 f875 	bl	8006986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e010      	b.n	80068c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80068a6:	897b      	ldrh	r3, [r7, #10]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	4907      	ldr	r1, [pc, #28]	; (80068d4 <I2C_MasterRequestWrite+0x100>)
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f865 	bl	8006986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e000      	b.n	80068c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	00010008 	.word	0x00010008
 80068d4:	00010002 	.word	0x00010002

080068d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	4613      	mov	r3, r2
 80068e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068e8:	e025      	b.n	8006936 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f0:	d021      	beq.n	8006936 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068f2:	f7fe fceb 	bl	80052cc <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d302      	bcc.n	8006908 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d116      	bne.n	8006936 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2220      	movs	r2, #32
 8006912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	f043 0220 	orr.w	r2, r3, #32
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e023      	b.n	800697e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	0c1b      	lsrs	r3, r3, #16
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b01      	cmp	r3, #1
 800693e:	d10d      	bne.n	800695c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	43da      	mvns	r2, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4013      	ands	r3, r2
 800694c:	b29b      	uxth	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	bf0c      	ite	eq
 8006952:	2301      	moveq	r3, #1
 8006954:	2300      	movne	r3, #0
 8006956:	b2db      	uxtb	r3, r3
 8006958:	461a      	mov	r2, r3
 800695a:	e00c      	b.n	8006976 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	43da      	mvns	r2, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4013      	ands	r3, r2
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	bf0c      	ite	eq
 800696e:	2301      	moveq	r3, #1
 8006970:	2300      	movne	r3, #0
 8006972:	b2db      	uxtb	r3, r3
 8006974:	461a      	mov	r2, r3
 8006976:	79fb      	ldrb	r3, [r7, #7]
 8006978:	429a      	cmp	r2, r3
 800697a:	d0b6      	beq.n	80068ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	60f8      	str	r0, [r7, #12]
 800698e:	60b9      	str	r1, [r7, #8]
 8006990:	607a      	str	r2, [r7, #4]
 8006992:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006994:	e051      	b.n	8006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069a4:	d123      	bne.n	80069ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2220      	movs	r2, #32
 80069ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	f043 0204 	orr.w	r2, r3, #4
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e046      	b.n	8006a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f4:	d021      	beq.n	8006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f6:	f7fe fc69 	bl	80052cc <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d302      	bcc.n	8006a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d116      	bne.n	8006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	f043 0220 	orr.w	r2, r3, #32
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e020      	b.n	8006a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	0c1b      	lsrs	r3, r3, #16
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d10c      	bne.n	8006a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	43da      	mvns	r2, r3
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bf14      	ite	ne
 8006a56:	2301      	movne	r3, #1
 8006a58:	2300      	moveq	r3, #0
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	e00b      	b.n	8006a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	43da      	mvns	r2, r3
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	bf14      	ite	ne
 8006a70:	2301      	movne	r3, #1
 8006a72:	2300      	moveq	r3, #0
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d18d      	bne.n	8006996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a90:	e02d      	b.n	8006aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 f878 	bl	8006b88 <I2C_IsAcknowledgeFailed>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e02d      	b.n	8006afe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa8:	d021      	beq.n	8006aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aaa:	f7fe fc0f 	bl	80052cc <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d302      	bcc.n	8006ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d116      	bne.n	8006aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	f043 0220 	orr.w	r2, r3, #32
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e007      	b.n	8006afe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af8:	2b80      	cmp	r3, #128	; 0x80
 8006afa:	d1ca      	bne.n	8006a92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	60f8      	str	r0, [r7, #12]
 8006b0e:	60b9      	str	r1, [r7, #8]
 8006b10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b12:	e02d      	b.n	8006b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 f837 	bl	8006b88 <I2C_IsAcknowledgeFailed>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e02d      	b.n	8006b80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2a:	d021      	beq.n	8006b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b2c:	f7fe fbce 	bl	80052cc <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d302      	bcc.n	8006b42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d116      	bne.n	8006b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	f043 0220 	orr.w	r2, r3, #32
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e007      	b.n	8006b80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	f003 0304 	and.w	r3, r3, #4
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	d1ca      	bne.n	8006b14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b9e:	d11b      	bne.n	8006bd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ba8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc4:	f043 0204 	orr.w	r2, r3, #4
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e000      	b.n	8006bda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
	...

08006be8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e267      	b.n	80070ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d075      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c06:	4b88      	ldr	r3, [pc, #544]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 030c 	and.w	r3, r3, #12
 8006c0e:	2b04      	cmp	r3, #4
 8006c10:	d00c      	beq.n	8006c2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c12:	4b85      	ldr	r3, [pc, #532]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c1a:	2b08      	cmp	r3, #8
 8006c1c:	d112      	bne.n	8006c44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c1e:	4b82      	ldr	r3, [pc, #520]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c2a:	d10b      	bne.n	8006c44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c2c:	4b7e      	ldr	r3, [pc, #504]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d05b      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x108>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d157      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e242      	b.n	80070ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c4c:	d106      	bne.n	8006c5c <HAL_RCC_OscConfig+0x74>
 8006c4e:	4b76      	ldr	r3, [pc, #472]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a75      	ldr	r2, [pc, #468]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	e01d      	b.n	8006c98 <HAL_RCC_OscConfig+0xb0>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c64:	d10c      	bne.n	8006c80 <HAL_RCC_OscConfig+0x98>
 8006c66:	4b70      	ldr	r3, [pc, #448]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a6f      	ldr	r2, [pc, #444]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	4b6d      	ldr	r3, [pc, #436]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a6c      	ldr	r2, [pc, #432]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c7c:	6013      	str	r3, [r2, #0]
 8006c7e:	e00b      	b.n	8006c98 <HAL_RCC_OscConfig+0xb0>
 8006c80:	4b69      	ldr	r3, [pc, #420]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a68      	ldr	r2, [pc, #416]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	4b66      	ldr	r3, [pc, #408]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a65      	ldr	r2, [pc, #404]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d013      	beq.n	8006cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ca0:	f7fe fb14 	bl	80052cc <HAL_GetTick>
 8006ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ca6:	e008      	b.n	8006cba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ca8:	f7fe fb10 	bl	80052cc <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b64      	cmp	r3, #100	; 0x64
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e207      	b.n	80070ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cba:	4b5b      	ldr	r3, [pc, #364]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0f0      	beq.n	8006ca8 <HAL_RCC_OscConfig+0xc0>
 8006cc6:	e014      	b.n	8006cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cc8:	f7fe fb00 	bl	80052cc <HAL_GetTick>
 8006ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cce:	e008      	b.n	8006ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cd0:	f7fe fafc 	bl	80052cc <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	2b64      	cmp	r3, #100	; 0x64
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e1f3      	b.n	80070ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ce2:	4b51      	ldr	r3, [pc, #324]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1f0      	bne.n	8006cd0 <HAL_RCC_OscConfig+0xe8>
 8006cee:	e000      	b.n	8006cf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0302 	and.w	r3, r3, #2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d063      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cfe:	4b4a      	ldr	r3, [pc, #296]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f003 030c 	and.w	r3, r3, #12
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00b      	beq.n	8006d22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d0a:	4b47      	ldr	r3, [pc, #284]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d12:	2b08      	cmp	r3, #8
 8006d14:	d11c      	bne.n	8006d50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d16:	4b44      	ldr	r3, [pc, #272]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d116      	bne.n	8006d50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d22:	4b41      	ldr	r3, [pc, #260]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d005      	beq.n	8006d3a <HAL_RCC_OscConfig+0x152>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d001      	beq.n	8006d3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e1c7      	b.n	80070ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d3a:	4b3b      	ldr	r3, [pc, #236]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	4937      	ldr	r1, [pc, #220]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d4e:	e03a      	b.n	8006dc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d020      	beq.n	8006d9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d58:	4b34      	ldr	r3, [pc, #208]	; (8006e2c <HAL_RCC_OscConfig+0x244>)
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d5e:	f7fe fab5 	bl	80052cc <HAL_GetTick>
 8006d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d64:	e008      	b.n	8006d78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d66:	f7fe fab1 	bl	80052cc <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d901      	bls.n	8006d78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e1a8      	b.n	80070ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d78:	4b2b      	ldr	r3, [pc, #172]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0f0      	beq.n	8006d66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d84:	4b28      	ldr	r3, [pc, #160]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	00db      	lsls	r3, r3, #3
 8006d92:	4925      	ldr	r1, [pc, #148]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	600b      	str	r3, [r1, #0]
 8006d98:	e015      	b.n	8006dc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d9a:	4b24      	ldr	r3, [pc, #144]	; (8006e2c <HAL_RCC_OscConfig+0x244>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da0:	f7fe fa94 	bl	80052cc <HAL_GetTick>
 8006da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006da6:	e008      	b.n	8006dba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006da8:	f7fe fa90 	bl	80052cc <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d901      	bls.n	8006dba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e187      	b.n	80070ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dba:	4b1b      	ldr	r3, [pc, #108]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1f0      	bne.n	8006da8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0308 	and.w	r3, r3, #8
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d036      	beq.n	8006e40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d016      	beq.n	8006e08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dda:	4b15      	ldr	r3, [pc, #84]	; (8006e30 <HAL_RCC_OscConfig+0x248>)
 8006ddc:	2201      	movs	r2, #1
 8006dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006de0:	f7fe fa74 	bl	80052cc <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006de8:	f7fe fa70 	bl	80052cc <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e167      	b.n	80070ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dfa:	4b0b      	ldr	r3, [pc, #44]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d0f0      	beq.n	8006de8 <HAL_RCC_OscConfig+0x200>
 8006e06:	e01b      	b.n	8006e40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e08:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <HAL_RCC_OscConfig+0x248>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e0e:	f7fe fa5d 	bl	80052cc <HAL_GetTick>
 8006e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e14:	e00e      	b.n	8006e34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e16:	f7fe fa59 	bl	80052cc <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d907      	bls.n	8006e34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e150      	b.n	80070ca <HAL_RCC_OscConfig+0x4e2>
 8006e28:	40023800 	.word	0x40023800
 8006e2c:	42470000 	.word	0x42470000
 8006e30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e34:	4b88      	ldr	r3, [pc, #544]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1ea      	bne.n	8006e16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0304 	and.w	r3, r3, #4
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 8097 	beq.w	8006f7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e52:	4b81      	ldr	r3, [pc, #516]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10f      	bne.n	8006e7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60bb      	str	r3, [r7, #8]
 8006e62:	4b7d      	ldr	r3, [pc, #500]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e66:	4a7c      	ldr	r2, [pc, #496]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e6e:	4b7a      	ldr	r3, [pc, #488]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e76:	60bb      	str	r3, [r7, #8]
 8006e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e7e:	4b77      	ldr	r3, [pc, #476]	; (800705c <HAL_RCC_OscConfig+0x474>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d118      	bne.n	8006ebc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e8a:	4b74      	ldr	r3, [pc, #464]	; (800705c <HAL_RCC_OscConfig+0x474>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a73      	ldr	r2, [pc, #460]	; (800705c <HAL_RCC_OscConfig+0x474>)
 8006e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e96:	f7fe fa19 	bl	80052cc <HAL_GetTick>
 8006e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e9c:	e008      	b.n	8006eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e9e:	f7fe fa15 	bl	80052cc <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d901      	bls.n	8006eb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e10c      	b.n	80070ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eb0:	4b6a      	ldr	r3, [pc, #424]	; (800705c <HAL_RCC_OscConfig+0x474>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d0f0      	beq.n	8006e9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d106      	bne.n	8006ed2 <HAL_RCC_OscConfig+0x2ea>
 8006ec4:	4b64      	ldr	r3, [pc, #400]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec8:	4a63      	ldr	r2, [pc, #396]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006eca:	f043 0301 	orr.w	r3, r3, #1
 8006ece:	6713      	str	r3, [r2, #112]	; 0x70
 8006ed0:	e01c      	b.n	8006f0c <HAL_RCC_OscConfig+0x324>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	2b05      	cmp	r3, #5
 8006ed8:	d10c      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x30c>
 8006eda:	4b5f      	ldr	r3, [pc, #380]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ede:	4a5e      	ldr	r2, [pc, #376]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006ee0:	f043 0304 	orr.w	r3, r3, #4
 8006ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ee6:	4b5c      	ldr	r3, [pc, #368]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eea:	4a5b      	ldr	r2, [pc, #364]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006eec:	f043 0301 	orr.w	r3, r3, #1
 8006ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ef2:	e00b      	b.n	8006f0c <HAL_RCC_OscConfig+0x324>
 8006ef4:	4b58      	ldr	r3, [pc, #352]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef8:	4a57      	ldr	r2, [pc, #348]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006efa:	f023 0301 	bic.w	r3, r3, #1
 8006efe:	6713      	str	r3, [r2, #112]	; 0x70
 8006f00:	4b55      	ldr	r3, [pc, #340]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f04:	4a54      	ldr	r2, [pc, #336]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006f06:	f023 0304 	bic.w	r3, r3, #4
 8006f0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d015      	beq.n	8006f40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f14:	f7fe f9da 	bl	80052cc <HAL_GetTick>
 8006f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f1a:	e00a      	b.n	8006f32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f1c:	f7fe f9d6 	bl	80052cc <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e0cb      	b.n	80070ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f32:	4b49      	ldr	r3, [pc, #292]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d0ee      	beq.n	8006f1c <HAL_RCC_OscConfig+0x334>
 8006f3e:	e014      	b.n	8006f6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f40:	f7fe f9c4 	bl	80052cc <HAL_GetTick>
 8006f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f46:	e00a      	b.n	8006f5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f48:	f7fe f9c0 	bl	80052cc <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e0b5      	b.n	80070ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f5e:	4b3e      	ldr	r3, [pc, #248]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1ee      	bne.n	8006f48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f6a:	7dfb      	ldrb	r3, [r7, #23]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d105      	bne.n	8006f7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f70:	4b39      	ldr	r3, [pc, #228]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f74:	4a38      	ldr	r2, [pc, #224]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 80a1 	beq.w	80070c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f86:	4b34      	ldr	r3, [pc, #208]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 030c 	and.w	r3, r3, #12
 8006f8e:	2b08      	cmp	r3, #8
 8006f90:	d05c      	beq.n	800704c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d141      	bne.n	800701e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f9a:	4b31      	ldr	r3, [pc, #196]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fa0:	f7fe f994 	bl	80052cc <HAL_GetTick>
 8006fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fa6:	e008      	b.n	8006fba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fa8:	f7fe f990 	bl	80052cc <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d901      	bls.n	8006fba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e087      	b.n	80070ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fba:	4b27      	ldr	r3, [pc, #156]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1f0      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	69da      	ldr	r2, [r3, #28]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	019b      	lsls	r3, r3, #6
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fdc:	085b      	lsrs	r3, r3, #1
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	041b      	lsls	r3, r3, #16
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	061b      	lsls	r3, r3, #24
 8006fea:	491b      	ldr	r1, [pc, #108]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ff0:	4b1b      	ldr	r3, [pc, #108]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ff6:	f7fe f969 	bl	80052cc <HAL_GetTick>
 8006ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ffc:	e008      	b.n	8007010 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ffe:	f7fe f965 	bl	80052cc <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	2b02      	cmp	r3, #2
 800700a:	d901      	bls.n	8007010 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e05c      	b.n	80070ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007010:	4b11      	ldr	r3, [pc, #68]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d0f0      	beq.n	8006ffe <HAL_RCC_OscConfig+0x416>
 800701c:	e054      	b.n	80070c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800701e:	4b10      	ldr	r3, [pc, #64]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8007020:	2200      	movs	r2, #0
 8007022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007024:	f7fe f952 	bl	80052cc <HAL_GetTick>
 8007028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800702a:	e008      	b.n	800703e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800702c:	f7fe f94e 	bl	80052cc <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b02      	cmp	r3, #2
 8007038:	d901      	bls.n	800703e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e045      	b.n	80070ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800703e:	4b06      	ldr	r3, [pc, #24]	; (8007058 <HAL_RCC_OscConfig+0x470>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1f0      	bne.n	800702c <HAL_RCC_OscConfig+0x444>
 800704a:	e03d      	b.n	80070c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d107      	bne.n	8007064 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e038      	b.n	80070ca <HAL_RCC_OscConfig+0x4e2>
 8007058:	40023800 	.word	0x40023800
 800705c:	40007000 	.word	0x40007000
 8007060:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007064:	4b1b      	ldr	r3, [pc, #108]	; (80070d4 <HAL_RCC_OscConfig+0x4ec>)
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d028      	beq.n	80070c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800707c:	429a      	cmp	r2, r3
 800707e:	d121      	bne.n	80070c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800708a:	429a      	cmp	r2, r3
 800708c:	d11a      	bne.n	80070c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007094:	4013      	ands	r3, r2
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800709a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800709c:	4293      	cmp	r3, r2
 800709e:	d111      	bne.n	80070c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070aa:	085b      	lsrs	r3, r3, #1
 80070ac:	3b01      	subs	r3, #1
 80070ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d107      	bne.n	80070c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d001      	beq.n	80070c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e000      	b.n	80070ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	40023800 	.word	0x40023800

080070d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e0cc      	b.n	8007286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070ec:	4b68      	ldr	r3, [pc, #416]	; (8007290 <HAL_RCC_ClockConfig+0x1b8>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d90c      	bls.n	8007114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070fa:	4b65      	ldr	r3, [pc, #404]	; (8007290 <HAL_RCC_ClockConfig+0x1b8>)
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007102:	4b63      	ldr	r3, [pc, #396]	; (8007290 <HAL_RCC_ClockConfig+0x1b8>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0307 	and.w	r3, r3, #7
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	429a      	cmp	r2, r3
 800710e:	d001      	beq.n	8007114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e0b8      	b.n	8007286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d020      	beq.n	8007162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0304 	and.w	r3, r3, #4
 8007128:	2b00      	cmp	r3, #0
 800712a:	d005      	beq.n	8007138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800712c:	4b59      	ldr	r3, [pc, #356]	; (8007294 <HAL_RCC_ClockConfig+0x1bc>)
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	4a58      	ldr	r2, [pc, #352]	; (8007294 <HAL_RCC_ClockConfig+0x1bc>)
 8007132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0308 	and.w	r3, r3, #8
 8007140:	2b00      	cmp	r3, #0
 8007142:	d005      	beq.n	8007150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007144:	4b53      	ldr	r3, [pc, #332]	; (8007294 <HAL_RCC_ClockConfig+0x1bc>)
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	4a52      	ldr	r2, [pc, #328]	; (8007294 <HAL_RCC_ClockConfig+0x1bc>)
 800714a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800714e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007150:	4b50      	ldr	r3, [pc, #320]	; (8007294 <HAL_RCC_ClockConfig+0x1bc>)
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	494d      	ldr	r1, [pc, #308]	; (8007294 <HAL_RCC_ClockConfig+0x1bc>)
 800715e:	4313      	orrs	r3, r2
 8007160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d044      	beq.n	80071f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d107      	bne.n	8007186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007176:	4b47      	ldr	r3, [pc, #284]	; (8007294 <HAL_RCC_ClockConfig+0x1bc>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d119      	bne.n	80071b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e07f      	b.n	8007286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	2b02      	cmp	r3, #2
 800718c:	d003      	beq.n	8007196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007192:	2b03      	cmp	r3, #3
 8007194:	d107      	bne.n	80071a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007196:	4b3f      	ldr	r3, [pc, #252]	; (8007294 <HAL_RCC_ClockConfig+0x1bc>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d109      	bne.n	80071b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e06f      	b.n	8007286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071a6:	4b3b      	ldr	r3, [pc, #236]	; (8007294 <HAL_RCC_ClockConfig+0x1bc>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e067      	b.n	8007286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071b6:	4b37      	ldr	r3, [pc, #220]	; (8007294 <HAL_RCC_ClockConfig+0x1bc>)
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f023 0203 	bic.w	r2, r3, #3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	4934      	ldr	r1, [pc, #208]	; (8007294 <HAL_RCC_ClockConfig+0x1bc>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071c8:	f7fe f880 	bl	80052cc <HAL_GetTick>
 80071cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071ce:	e00a      	b.n	80071e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071d0:	f7fe f87c 	bl	80052cc <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	f241 3288 	movw	r2, #5000	; 0x1388
 80071de:	4293      	cmp	r3, r2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e04f      	b.n	8007286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071e6:	4b2b      	ldr	r3, [pc, #172]	; (8007294 <HAL_RCC_ClockConfig+0x1bc>)
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f003 020c 	and.w	r2, r3, #12
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d1eb      	bne.n	80071d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071f8:	4b25      	ldr	r3, [pc, #148]	; (8007290 <HAL_RCC_ClockConfig+0x1b8>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0307 	and.w	r3, r3, #7
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	429a      	cmp	r2, r3
 8007204:	d20c      	bcs.n	8007220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007206:	4b22      	ldr	r3, [pc, #136]	; (8007290 <HAL_RCC_ClockConfig+0x1b8>)
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	b2d2      	uxtb	r2, r2
 800720c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800720e:	4b20      	ldr	r3, [pc, #128]	; (8007290 <HAL_RCC_ClockConfig+0x1b8>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0307 	and.w	r3, r3, #7
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	429a      	cmp	r2, r3
 800721a:	d001      	beq.n	8007220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e032      	b.n	8007286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b00      	cmp	r3, #0
 800722a:	d008      	beq.n	800723e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800722c:	4b19      	ldr	r3, [pc, #100]	; (8007294 <HAL_RCC_ClockConfig+0x1bc>)
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	4916      	ldr	r1, [pc, #88]	; (8007294 <HAL_RCC_ClockConfig+0x1bc>)
 800723a:	4313      	orrs	r3, r2
 800723c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0308 	and.w	r3, r3, #8
 8007246:	2b00      	cmp	r3, #0
 8007248:	d009      	beq.n	800725e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800724a:	4b12      	ldr	r3, [pc, #72]	; (8007294 <HAL_RCC_ClockConfig+0x1bc>)
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	00db      	lsls	r3, r3, #3
 8007258:	490e      	ldr	r1, [pc, #56]	; (8007294 <HAL_RCC_ClockConfig+0x1bc>)
 800725a:	4313      	orrs	r3, r2
 800725c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800725e:	f000 f821 	bl	80072a4 <HAL_RCC_GetSysClockFreq>
 8007262:	4602      	mov	r2, r0
 8007264:	4b0b      	ldr	r3, [pc, #44]	; (8007294 <HAL_RCC_ClockConfig+0x1bc>)
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	091b      	lsrs	r3, r3, #4
 800726a:	f003 030f 	and.w	r3, r3, #15
 800726e:	490a      	ldr	r1, [pc, #40]	; (8007298 <HAL_RCC_ClockConfig+0x1c0>)
 8007270:	5ccb      	ldrb	r3, [r1, r3]
 8007272:	fa22 f303 	lsr.w	r3, r2, r3
 8007276:	4a09      	ldr	r2, [pc, #36]	; (800729c <HAL_RCC_ClockConfig+0x1c4>)
 8007278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800727a:	4b09      	ldr	r3, [pc, #36]	; (80072a0 <HAL_RCC_ClockConfig+0x1c8>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4618      	mov	r0, r3
 8007280:	f7fd ffe0 	bl	8005244 <HAL_InitTick>

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	40023c00 	.word	0x40023c00
 8007294:	40023800 	.word	0x40023800
 8007298:	08009df4 	.word	0x08009df4
 800729c:	200000a4 	.word	0x200000a4
 80072a0:	200000a8 	.word	0x200000a8

080072a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072a8:	b090      	sub	sp, #64	; 0x40
 80072aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	637b      	str	r3, [r7, #52]	; 0x34
 80072b0:	2300      	movs	r3, #0
 80072b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072b4:	2300      	movs	r3, #0
 80072b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072bc:	4b59      	ldr	r3, [pc, #356]	; (8007424 <HAL_RCC_GetSysClockFreq+0x180>)
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f003 030c 	and.w	r3, r3, #12
 80072c4:	2b08      	cmp	r3, #8
 80072c6:	d00d      	beq.n	80072e4 <HAL_RCC_GetSysClockFreq+0x40>
 80072c8:	2b08      	cmp	r3, #8
 80072ca:	f200 80a1 	bhi.w	8007410 <HAL_RCC_GetSysClockFreq+0x16c>
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <HAL_RCC_GetSysClockFreq+0x34>
 80072d2:	2b04      	cmp	r3, #4
 80072d4:	d003      	beq.n	80072de <HAL_RCC_GetSysClockFreq+0x3a>
 80072d6:	e09b      	b.n	8007410 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072d8:	4b53      	ldr	r3, [pc, #332]	; (8007428 <HAL_RCC_GetSysClockFreq+0x184>)
 80072da:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80072dc:	e09b      	b.n	8007416 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072de:	4b53      	ldr	r3, [pc, #332]	; (800742c <HAL_RCC_GetSysClockFreq+0x188>)
 80072e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072e2:	e098      	b.n	8007416 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072e4:	4b4f      	ldr	r3, [pc, #316]	; (8007424 <HAL_RCC_GetSysClockFreq+0x180>)
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072ee:	4b4d      	ldr	r3, [pc, #308]	; (8007424 <HAL_RCC_GetSysClockFreq+0x180>)
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d028      	beq.n	800734c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072fa:	4b4a      	ldr	r3, [pc, #296]	; (8007424 <HAL_RCC_GetSysClockFreq+0x180>)
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	099b      	lsrs	r3, r3, #6
 8007300:	2200      	movs	r2, #0
 8007302:	623b      	str	r3, [r7, #32]
 8007304:	627a      	str	r2, [r7, #36]	; 0x24
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800730c:	2100      	movs	r1, #0
 800730e:	4b47      	ldr	r3, [pc, #284]	; (800742c <HAL_RCC_GetSysClockFreq+0x188>)
 8007310:	fb03 f201 	mul.w	r2, r3, r1
 8007314:	2300      	movs	r3, #0
 8007316:	fb00 f303 	mul.w	r3, r0, r3
 800731a:	4413      	add	r3, r2
 800731c:	4a43      	ldr	r2, [pc, #268]	; (800742c <HAL_RCC_GetSysClockFreq+0x188>)
 800731e:	fba0 1202 	umull	r1, r2, r0, r2
 8007322:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007324:	460a      	mov	r2, r1
 8007326:	62ba      	str	r2, [r7, #40]	; 0x28
 8007328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800732a:	4413      	add	r3, r2
 800732c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800732e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007330:	2200      	movs	r2, #0
 8007332:	61bb      	str	r3, [r7, #24]
 8007334:	61fa      	str	r2, [r7, #28]
 8007336:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800733a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800733e:	f7f9 fc6d 	bl	8000c1c <__aeabi_uldivmod>
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	4613      	mov	r3, r2
 8007348:	63fb      	str	r3, [r7, #60]	; 0x3c
 800734a:	e053      	b.n	80073f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800734c:	4b35      	ldr	r3, [pc, #212]	; (8007424 <HAL_RCC_GetSysClockFreq+0x180>)
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	099b      	lsrs	r3, r3, #6
 8007352:	2200      	movs	r2, #0
 8007354:	613b      	str	r3, [r7, #16]
 8007356:	617a      	str	r2, [r7, #20]
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800735e:	f04f 0b00 	mov.w	fp, #0
 8007362:	4652      	mov	r2, sl
 8007364:	465b      	mov	r3, fp
 8007366:	f04f 0000 	mov.w	r0, #0
 800736a:	f04f 0100 	mov.w	r1, #0
 800736e:	0159      	lsls	r1, r3, #5
 8007370:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007374:	0150      	lsls	r0, r2, #5
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	ebb2 080a 	subs.w	r8, r2, sl
 800737e:	eb63 090b 	sbc.w	r9, r3, fp
 8007382:	f04f 0200 	mov.w	r2, #0
 8007386:	f04f 0300 	mov.w	r3, #0
 800738a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800738e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007392:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007396:	ebb2 0408 	subs.w	r4, r2, r8
 800739a:	eb63 0509 	sbc.w	r5, r3, r9
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	00eb      	lsls	r3, r5, #3
 80073a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073ac:	00e2      	lsls	r2, r4, #3
 80073ae:	4614      	mov	r4, r2
 80073b0:	461d      	mov	r5, r3
 80073b2:	eb14 030a 	adds.w	r3, r4, sl
 80073b6:	603b      	str	r3, [r7, #0]
 80073b8:	eb45 030b 	adc.w	r3, r5, fp
 80073bc:	607b      	str	r3, [r7, #4]
 80073be:	f04f 0200 	mov.w	r2, #0
 80073c2:	f04f 0300 	mov.w	r3, #0
 80073c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073ca:	4629      	mov	r1, r5
 80073cc:	028b      	lsls	r3, r1, #10
 80073ce:	4621      	mov	r1, r4
 80073d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073d4:	4621      	mov	r1, r4
 80073d6:	028a      	lsls	r2, r1, #10
 80073d8:	4610      	mov	r0, r2
 80073da:	4619      	mov	r1, r3
 80073dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073de:	2200      	movs	r2, #0
 80073e0:	60bb      	str	r3, [r7, #8]
 80073e2:	60fa      	str	r2, [r7, #12]
 80073e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073e8:	f7f9 fc18 	bl	8000c1c <__aeabi_uldivmod>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4613      	mov	r3, r2
 80073f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073f4:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <HAL_RCC_GetSysClockFreq+0x180>)
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	0c1b      	lsrs	r3, r3, #16
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	3301      	adds	r3, #1
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007404:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	fbb2 f3f3 	udiv	r3, r2, r3
 800740c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800740e:	e002      	b.n	8007416 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007410:	4b05      	ldr	r3, [pc, #20]	; (8007428 <HAL_RCC_GetSysClockFreq+0x184>)
 8007412:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007418:	4618      	mov	r0, r3
 800741a:	3740      	adds	r7, #64	; 0x40
 800741c:	46bd      	mov	sp, r7
 800741e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007422:	bf00      	nop
 8007424:	40023800 	.word	0x40023800
 8007428:	00f42400 	.word	0x00f42400
 800742c:	017d7840 	.word	0x017d7840

08007430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007430:	b480      	push	{r7}
 8007432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007434:	4b03      	ldr	r3, [pc, #12]	; (8007444 <HAL_RCC_GetHCLKFreq+0x14>)
 8007436:	681b      	ldr	r3, [r3, #0]
}
 8007438:	4618      	mov	r0, r3
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	200000a4 	.word	0x200000a4

08007448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800744c:	f7ff fff0 	bl	8007430 <HAL_RCC_GetHCLKFreq>
 8007450:	4602      	mov	r2, r0
 8007452:	4b05      	ldr	r3, [pc, #20]	; (8007468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	0a9b      	lsrs	r3, r3, #10
 8007458:	f003 0307 	and.w	r3, r3, #7
 800745c:	4903      	ldr	r1, [pc, #12]	; (800746c <HAL_RCC_GetPCLK1Freq+0x24>)
 800745e:	5ccb      	ldrb	r3, [r1, r3]
 8007460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007464:	4618      	mov	r0, r3
 8007466:	bd80      	pop	{r7, pc}
 8007468:	40023800 	.word	0x40023800
 800746c:	08009e04 	.word	0x08009e04

08007470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e041      	b.n	8007506 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d106      	bne.n	800749c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7fd fcb6 	bl	8004e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	3304      	adds	r3, #4
 80074ac:	4619      	mov	r1, r3
 80074ae:	4610      	mov	r0, r2
 80074b0:	f001 f9b2 	bl	8008818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b01      	cmp	r3, #1
 8007522:	d001      	beq.n	8007528 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e03c      	b.n	80075a2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a1e      	ldr	r2, [pc, #120]	; (80075b0 <HAL_TIM_Base_Start+0xa0>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d018      	beq.n	800756c <HAL_TIM_Base_Start+0x5c>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007542:	d013      	beq.n	800756c <HAL_TIM_Base_Start+0x5c>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a1a      	ldr	r2, [pc, #104]	; (80075b4 <HAL_TIM_Base_Start+0xa4>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d00e      	beq.n	800756c <HAL_TIM_Base_Start+0x5c>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a19      	ldr	r2, [pc, #100]	; (80075b8 <HAL_TIM_Base_Start+0xa8>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d009      	beq.n	800756c <HAL_TIM_Base_Start+0x5c>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a17      	ldr	r2, [pc, #92]	; (80075bc <HAL_TIM_Base_Start+0xac>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d004      	beq.n	800756c <HAL_TIM_Base_Start+0x5c>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a16      	ldr	r2, [pc, #88]	; (80075c0 <HAL_TIM_Base_Start+0xb0>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d111      	bne.n	8007590 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 0307 	and.w	r3, r3, #7
 8007576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2b06      	cmp	r3, #6
 800757c:	d010      	beq.n	80075a0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f042 0201 	orr.w	r2, r2, #1
 800758c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800758e:	e007      	b.n	80075a0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f042 0201 	orr.w	r2, r2, #1
 800759e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40010000 	.word	0x40010000
 80075b4:	40000400 	.word	0x40000400
 80075b8:	40000800 	.word	0x40000800
 80075bc:	40000c00 	.word	0x40000c00
 80075c0:	40014000 	.word	0x40014000

080075c4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6a1a      	ldr	r2, [r3, #32]
 80075d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80075d6:	4013      	ands	r3, r2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10f      	bne.n	80075fc <HAL_TIM_Base_Stop+0x38>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6a1a      	ldr	r2, [r3, #32]
 80075e2:	f240 4344 	movw	r3, #1092	; 0x444
 80075e6:	4013      	ands	r3, r2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d107      	bne.n	80075fc <HAL_TIM_Base_Stop+0x38>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 0201 	bic.w	r2, r2, #1
 80075fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
	...

08007614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b01      	cmp	r3, #1
 8007626:	d001      	beq.n	800762c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e044      	b.n	80076b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68da      	ldr	r2, [r3, #12]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f042 0201 	orr.w	r2, r2, #1
 8007642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a1e      	ldr	r2, [pc, #120]	; (80076c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d018      	beq.n	8007680 <HAL_TIM_Base_Start_IT+0x6c>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007656:	d013      	beq.n	8007680 <HAL_TIM_Base_Start_IT+0x6c>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a1a      	ldr	r2, [pc, #104]	; (80076c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00e      	beq.n	8007680 <HAL_TIM_Base_Start_IT+0x6c>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a19      	ldr	r2, [pc, #100]	; (80076cc <HAL_TIM_Base_Start_IT+0xb8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d009      	beq.n	8007680 <HAL_TIM_Base_Start_IT+0x6c>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a17      	ldr	r2, [pc, #92]	; (80076d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d004      	beq.n	8007680 <HAL_TIM_Base_Start_IT+0x6c>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a16      	ldr	r2, [pc, #88]	; (80076d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d111      	bne.n	80076a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2b06      	cmp	r3, #6
 8007690:	d010      	beq.n	80076b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f042 0201 	orr.w	r2, r2, #1
 80076a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a2:	e007      	b.n	80076b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0201 	orr.w	r2, r2, #1
 80076b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	40010000 	.word	0x40010000
 80076c8:	40000400 	.word	0x40000400
 80076cc:	40000800 	.word	0x40000800
 80076d0:	40000c00 	.word	0x40000c00
 80076d4:	40014000 	.word	0x40014000

080076d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68da      	ldr	r2, [r3, #12]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0201 	bic.w	r2, r2, #1
 80076ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6a1a      	ldr	r2, [r3, #32]
 80076f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80076fa:	4013      	ands	r3, r2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10f      	bne.n	8007720 <HAL_TIM_Base_Stop_IT+0x48>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6a1a      	ldr	r2, [r3, #32]
 8007706:	f240 4344 	movw	r3, #1092	; 0x444
 800770a:	4013      	ands	r3, r2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d107      	bne.n	8007720 <HAL_TIM_Base_Stop_IT+0x48>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0201 	bic.w	r2, r2, #1
 800771e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b082      	sub	sp, #8
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e041      	b.n	80077cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	d106      	bne.n	8007762 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f839 	bl	80077d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2202      	movs	r2, #2
 8007766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3304      	adds	r3, #4
 8007772:	4619      	mov	r1, r3
 8007774:	4610      	mov	r0, r2
 8007776:	f001 f84f 	bl	8008818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d109      	bne.n	800780c <HAL_TIM_PWM_Start+0x24>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b01      	cmp	r3, #1
 8007802:	bf14      	ite	ne
 8007804:	2301      	movne	r3, #1
 8007806:	2300      	moveq	r3, #0
 8007808:	b2db      	uxtb	r3, r3
 800780a:	e022      	b.n	8007852 <HAL_TIM_PWM_Start+0x6a>
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2b04      	cmp	r3, #4
 8007810:	d109      	bne.n	8007826 <HAL_TIM_PWM_Start+0x3e>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b01      	cmp	r3, #1
 800781c:	bf14      	ite	ne
 800781e:	2301      	movne	r3, #1
 8007820:	2300      	moveq	r3, #0
 8007822:	b2db      	uxtb	r3, r3
 8007824:	e015      	b.n	8007852 <HAL_TIM_PWM_Start+0x6a>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2b08      	cmp	r3, #8
 800782a:	d109      	bne.n	8007840 <HAL_TIM_PWM_Start+0x58>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b01      	cmp	r3, #1
 8007836:	bf14      	ite	ne
 8007838:	2301      	movne	r3, #1
 800783a:	2300      	moveq	r3, #0
 800783c:	b2db      	uxtb	r3, r3
 800783e:	e008      	b.n	8007852 <HAL_TIM_PWM_Start+0x6a>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b01      	cmp	r3, #1
 800784a:	bf14      	ite	ne
 800784c:	2301      	movne	r3, #1
 800784e:	2300      	moveq	r3, #0
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e068      	b.n	800792c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d104      	bne.n	800786a <HAL_TIM_PWM_Start+0x82>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007868:	e013      	b.n	8007892 <HAL_TIM_PWM_Start+0xaa>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b04      	cmp	r3, #4
 800786e:	d104      	bne.n	800787a <HAL_TIM_PWM_Start+0x92>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007878:	e00b      	b.n	8007892 <HAL_TIM_PWM_Start+0xaa>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2b08      	cmp	r3, #8
 800787e:	d104      	bne.n	800788a <HAL_TIM_PWM_Start+0xa2>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2202      	movs	r2, #2
 8007884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007888:	e003      	b.n	8007892 <HAL_TIM_PWM_Start+0xaa>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2202      	movs	r2, #2
 800788e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2201      	movs	r2, #1
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	4618      	mov	r0, r3
 800789c:	f001 fc12 	bl	80090c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a23      	ldr	r2, [pc, #140]	; (8007934 <HAL_TIM_PWM_Start+0x14c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d107      	bne.n	80078ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a1d      	ldr	r2, [pc, #116]	; (8007934 <HAL_TIM_PWM_Start+0x14c>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d018      	beq.n	80078f6 <HAL_TIM_PWM_Start+0x10e>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078cc:	d013      	beq.n	80078f6 <HAL_TIM_PWM_Start+0x10e>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a19      	ldr	r2, [pc, #100]	; (8007938 <HAL_TIM_PWM_Start+0x150>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d00e      	beq.n	80078f6 <HAL_TIM_PWM_Start+0x10e>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a17      	ldr	r2, [pc, #92]	; (800793c <HAL_TIM_PWM_Start+0x154>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d009      	beq.n	80078f6 <HAL_TIM_PWM_Start+0x10e>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a16      	ldr	r2, [pc, #88]	; (8007940 <HAL_TIM_PWM_Start+0x158>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d004      	beq.n	80078f6 <HAL_TIM_PWM_Start+0x10e>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a14      	ldr	r2, [pc, #80]	; (8007944 <HAL_TIM_PWM_Start+0x15c>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d111      	bne.n	800791a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f003 0307 	and.w	r3, r3, #7
 8007900:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2b06      	cmp	r3, #6
 8007906:	d010      	beq.n	800792a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f042 0201 	orr.w	r2, r2, #1
 8007916:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007918:	e007      	b.n	800792a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f042 0201 	orr.w	r2, r2, #1
 8007928:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	40010000 	.word	0x40010000
 8007938:	40000400 	.word	0x40000400
 800793c:	40000800 	.word	0x40000800
 8007940:	40000c00 	.word	0x40000c00
 8007944:	40014000 	.word	0x40014000

08007948 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2200      	movs	r2, #0
 8007958:	6839      	ldr	r1, [r7, #0]
 800795a:	4618      	mov	r0, r3
 800795c:	f001 fbb2 	bl	80090c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a29      	ldr	r2, [pc, #164]	; (8007a0c <HAL_TIM_PWM_Stop+0xc4>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d117      	bne.n	800799a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	6a1a      	ldr	r2, [r3, #32]
 8007970:	f241 1311 	movw	r3, #4369	; 0x1111
 8007974:	4013      	ands	r3, r2
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10f      	bne.n	800799a <HAL_TIM_PWM_Stop+0x52>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6a1a      	ldr	r2, [r3, #32]
 8007980:	f240 4344 	movw	r3, #1092	; 0x444
 8007984:	4013      	ands	r3, r2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d107      	bne.n	800799a <HAL_TIM_PWM_Stop+0x52>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007998:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6a1a      	ldr	r2, [r3, #32]
 80079a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80079a4:	4013      	ands	r3, r2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10f      	bne.n	80079ca <HAL_TIM_PWM_Stop+0x82>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6a1a      	ldr	r2, [r3, #32]
 80079b0:	f240 4344 	movw	r3, #1092	; 0x444
 80079b4:	4013      	ands	r3, r2
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d107      	bne.n	80079ca <HAL_TIM_PWM_Stop+0x82>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 0201 	bic.w	r2, r2, #1
 80079c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d104      	bne.n	80079da <HAL_TIM_PWM_Stop+0x92>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079d8:	e013      	b.n	8007a02 <HAL_TIM_PWM_Stop+0xba>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b04      	cmp	r3, #4
 80079de:	d104      	bne.n	80079ea <HAL_TIM_PWM_Stop+0xa2>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079e8:	e00b      	b.n	8007a02 <HAL_TIM_PWM_Stop+0xba>
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b08      	cmp	r3, #8
 80079ee:	d104      	bne.n	80079fa <HAL_TIM_PWM_Stop+0xb2>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079f8:	e003      	b.n	8007a02 <HAL_TIM_PWM_Stop+0xba>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	40010000 	.word	0x40010000

08007a10 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e041      	b.n	8007aa6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d106      	bne.n	8007a3c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f839 	bl	8007aae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4610      	mov	r0, r2
 8007a50:	f000 fee2 	bl	8008818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b083      	sub	sp, #12
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007ab6:	bf00      	nop
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
	...

08007ac4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d104      	bne.n	8007ae2 <HAL_TIM_IC_Start_IT+0x1e>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	e013      	b.n	8007b0a <HAL_TIM_IC_Start_IT+0x46>
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b04      	cmp	r3, #4
 8007ae6:	d104      	bne.n	8007af2 <HAL_TIM_IC_Start_IT+0x2e>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	e00b      	b.n	8007b0a <HAL_TIM_IC_Start_IT+0x46>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b08      	cmp	r3, #8
 8007af6:	d104      	bne.n	8007b02 <HAL_TIM_IC_Start_IT+0x3e>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	e003      	b.n	8007b0a <HAL_TIM_IC_Start_IT+0x46>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d104      	bne.n	8007b1c <HAL_TIM_IC_Start_IT+0x58>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	e013      	b.n	8007b44 <HAL_TIM_IC_Start_IT+0x80>
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	d104      	bne.n	8007b2c <HAL_TIM_IC_Start_IT+0x68>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	e00b      	b.n	8007b44 <HAL_TIM_IC_Start_IT+0x80>
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2b08      	cmp	r3, #8
 8007b30:	d104      	bne.n	8007b3c <HAL_TIM_IC_Start_IT+0x78>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	e003      	b.n	8007b44 <HAL_TIM_IC_Start_IT+0x80>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b46:	7bbb      	ldrb	r3, [r7, #14]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d102      	bne.n	8007b52 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b4c:	7b7b      	ldrb	r3, [r7, #13]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d001      	beq.n	8007b56 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e0c2      	b.n	8007cdc <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d104      	bne.n	8007b66 <HAL_TIM_IC_Start_IT+0xa2>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b64:	e013      	b.n	8007b8e <HAL_TIM_IC_Start_IT+0xca>
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d104      	bne.n	8007b76 <HAL_TIM_IC_Start_IT+0xb2>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2202      	movs	r2, #2
 8007b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b74:	e00b      	b.n	8007b8e <HAL_TIM_IC_Start_IT+0xca>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b08      	cmp	r3, #8
 8007b7a:	d104      	bne.n	8007b86 <HAL_TIM_IC_Start_IT+0xc2>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b84:	e003      	b.n	8007b8e <HAL_TIM_IC_Start_IT+0xca>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2202      	movs	r2, #2
 8007b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d104      	bne.n	8007b9e <HAL_TIM_IC_Start_IT+0xda>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b9c:	e013      	b.n	8007bc6 <HAL_TIM_IC_Start_IT+0x102>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2b04      	cmp	r3, #4
 8007ba2:	d104      	bne.n	8007bae <HAL_TIM_IC_Start_IT+0xea>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bac:	e00b      	b.n	8007bc6 <HAL_TIM_IC_Start_IT+0x102>
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b08      	cmp	r3, #8
 8007bb2:	d104      	bne.n	8007bbe <HAL_TIM_IC_Start_IT+0xfa>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bbc:	e003      	b.n	8007bc6 <HAL_TIM_IC_Start_IT+0x102>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b0c      	cmp	r3, #12
 8007bca:	d841      	bhi.n	8007c50 <HAL_TIM_IC_Start_IT+0x18c>
 8007bcc:	a201      	add	r2, pc, #4	; (adr r2, 8007bd4 <HAL_TIM_IC_Start_IT+0x110>)
 8007bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd2:	bf00      	nop
 8007bd4:	08007c09 	.word	0x08007c09
 8007bd8:	08007c51 	.word	0x08007c51
 8007bdc:	08007c51 	.word	0x08007c51
 8007be0:	08007c51 	.word	0x08007c51
 8007be4:	08007c1b 	.word	0x08007c1b
 8007be8:	08007c51 	.word	0x08007c51
 8007bec:	08007c51 	.word	0x08007c51
 8007bf0:	08007c51 	.word	0x08007c51
 8007bf4:	08007c2d 	.word	0x08007c2d
 8007bf8:	08007c51 	.word	0x08007c51
 8007bfc:	08007c51 	.word	0x08007c51
 8007c00:	08007c51 	.word	0x08007c51
 8007c04:	08007c3f 	.word	0x08007c3f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68da      	ldr	r2, [r3, #12]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f042 0202 	orr.w	r2, r2, #2
 8007c16:	60da      	str	r2, [r3, #12]
      break;
 8007c18:	e01d      	b.n	8007c56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68da      	ldr	r2, [r3, #12]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f042 0204 	orr.w	r2, r2, #4
 8007c28:	60da      	str	r2, [r3, #12]
      break;
 8007c2a:	e014      	b.n	8007c56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f042 0208 	orr.w	r2, r2, #8
 8007c3a:	60da      	str	r2, [r3, #12]
      break;
 8007c3c:	e00b      	b.n	8007c56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68da      	ldr	r2, [r3, #12]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0210 	orr.w	r2, r2, #16
 8007c4c:	60da      	str	r2, [r3, #12]
      break;
 8007c4e:	e002      	b.n	8007c56 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	73fb      	strb	r3, [r7, #15]
      break;
 8007c54:	bf00      	nop
  }

  if (status == HAL_OK)
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d13e      	bne.n	8007cda <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2201      	movs	r2, #1
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f001 fa2d 	bl	80090c4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a1d      	ldr	r2, [pc, #116]	; (8007ce4 <HAL_TIM_IC_Start_IT+0x220>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d018      	beq.n	8007ca6 <HAL_TIM_IC_Start_IT+0x1e2>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c7c:	d013      	beq.n	8007ca6 <HAL_TIM_IC_Start_IT+0x1e2>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a19      	ldr	r2, [pc, #100]	; (8007ce8 <HAL_TIM_IC_Start_IT+0x224>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d00e      	beq.n	8007ca6 <HAL_TIM_IC_Start_IT+0x1e2>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a17      	ldr	r2, [pc, #92]	; (8007cec <HAL_TIM_IC_Start_IT+0x228>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d009      	beq.n	8007ca6 <HAL_TIM_IC_Start_IT+0x1e2>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a16      	ldr	r2, [pc, #88]	; (8007cf0 <HAL_TIM_IC_Start_IT+0x22c>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d004      	beq.n	8007ca6 <HAL_TIM_IC_Start_IT+0x1e2>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a14      	ldr	r2, [pc, #80]	; (8007cf4 <HAL_TIM_IC_Start_IT+0x230>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d111      	bne.n	8007cca <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f003 0307 	and.w	r3, r3, #7
 8007cb0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2b06      	cmp	r3, #6
 8007cb6:	d010      	beq.n	8007cda <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f042 0201 	orr.w	r2, r2, #1
 8007cc6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc8:	e007      	b.n	8007cda <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f042 0201 	orr.w	r2, r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	40010000 	.word	0x40010000
 8007ce8:	40000400 	.word	0x40000400
 8007cec:	40000800 	.word	0x40000800
 8007cf0:	40000c00 	.word	0x40000c00
 8007cf4:	40014000 	.word	0x40014000

08007cf8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b0c      	cmp	r3, #12
 8007d0a:	d841      	bhi.n	8007d90 <HAL_TIM_IC_Stop_IT+0x98>
 8007d0c:	a201      	add	r2, pc, #4	; (adr r2, 8007d14 <HAL_TIM_IC_Stop_IT+0x1c>)
 8007d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d12:	bf00      	nop
 8007d14:	08007d49 	.word	0x08007d49
 8007d18:	08007d91 	.word	0x08007d91
 8007d1c:	08007d91 	.word	0x08007d91
 8007d20:	08007d91 	.word	0x08007d91
 8007d24:	08007d5b 	.word	0x08007d5b
 8007d28:	08007d91 	.word	0x08007d91
 8007d2c:	08007d91 	.word	0x08007d91
 8007d30:	08007d91 	.word	0x08007d91
 8007d34:	08007d6d 	.word	0x08007d6d
 8007d38:	08007d91 	.word	0x08007d91
 8007d3c:	08007d91 	.word	0x08007d91
 8007d40:	08007d91 	.word	0x08007d91
 8007d44:	08007d7f 	.word	0x08007d7f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f022 0202 	bic.w	r2, r2, #2
 8007d56:	60da      	str	r2, [r3, #12]
      break;
 8007d58:	e01d      	b.n	8007d96 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68da      	ldr	r2, [r3, #12]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f022 0204 	bic.w	r2, r2, #4
 8007d68:	60da      	str	r2, [r3, #12]
      break;
 8007d6a:	e014      	b.n	8007d96 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68da      	ldr	r2, [r3, #12]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 0208 	bic.w	r2, r2, #8
 8007d7a:	60da      	str	r2, [r3, #12]
      break;
 8007d7c:	e00b      	b.n	8007d96 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 0210 	bic.w	r2, r2, #16
 8007d8c:	60da      	str	r2, [r3, #12]
      break;
 8007d8e:	e002      	b.n	8007d96 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	73fb      	strb	r3, [r7, #15]
      break;
 8007d94:	bf00      	nop
  }

  if (status == HAL_OK)
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d156      	bne.n	8007e4a <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2200      	movs	r2, #0
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	4618      	mov	r0, r3
 8007da6:	f001 f98d 	bl	80090c4 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6a1a      	ldr	r2, [r3, #32]
 8007db0:	f241 1311 	movw	r3, #4369	; 0x1111
 8007db4:	4013      	ands	r3, r2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10f      	bne.n	8007dda <HAL_TIM_IC_Stop_IT+0xe2>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6a1a      	ldr	r2, [r3, #32]
 8007dc0:	f240 4344 	movw	r3, #1092	; 0x444
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d107      	bne.n	8007dda <HAL_TIM_IC_Stop_IT+0xe2>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f022 0201 	bic.w	r2, r2, #1
 8007dd8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d104      	bne.n	8007dea <HAL_TIM_IC_Stop_IT+0xf2>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007de8:	e013      	b.n	8007e12 <HAL_TIM_IC_Stop_IT+0x11a>
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2b04      	cmp	r3, #4
 8007dee:	d104      	bne.n	8007dfa <HAL_TIM_IC_Stop_IT+0x102>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007df8:	e00b      	b.n	8007e12 <HAL_TIM_IC_Stop_IT+0x11a>
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	d104      	bne.n	8007e0a <HAL_TIM_IC_Stop_IT+0x112>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e08:	e003      	b.n	8007e12 <HAL_TIM_IC_Stop_IT+0x11a>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d104      	bne.n	8007e22 <HAL_TIM_IC_Stop_IT+0x12a>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e20:	e013      	b.n	8007e4a <HAL_TIM_IC_Stop_IT+0x152>
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b04      	cmp	r3, #4
 8007e26:	d104      	bne.n	8007e32 <HAL_TIM_IC_Stop_IT+0x13a>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e30:	e00b      	b.n	8007e4a <HAL_TIM_IC_Stop_IT+0x152>
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2b08      	cmp	r3, #8
 8007e36:	d104      	bne.n	8007e42 <HAL_TIM_IC_Stop_IT+0x14a>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e40:	e003      	b.n	8007e4a <HAL_TIM_IC_Stop_IT+0x152>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e097      	b.n	8007f98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d106      	bne.n	8007e82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7fc ff63 	bl	8004d48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2202      	movs	r2, #2
 8007e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	6812      	ldr	r2, [r2, #0]
 8007e94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e98:	f023 0307 	bic.w	r3, r3, #7
 8007e9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	f000 fcb5 	bl	8008818 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	6a1b      	ldr	r3, [r3, #32]
 8007ec4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ed6:	f023 0303 	bic.w	r3, r3, #3
 8007eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	021b      	lsls	r3, r3, #8
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007ef4:	f023 030c 	bic.w	r3, r3, #12
 8007ef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	021b      	lsls	r3, r3, #8
 8007f10:	4313      	orrs	r3, r2
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	011a      	lsls	r2, r3, #4
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	031b      	lsls	r3, r3, #12
 8007f24:	4313      	orrs	r3, r2
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007f32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007f3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685a      	ldr	r2, [r3, #4]
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	011b      	lsls	r3, r3, #4
 8007f46:	4313      	orrs	r3, r2
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3718      	adds	r7, #24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fb0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007fb8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007fc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007fc8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d110      	bne.n	8007ff2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d102      	bne.n	8007fdc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fd6:	7b7b      	ldrb	r3, [r7, #13]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d001      	beq.n	8007fe0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e089      	b.n	80080f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ff0:	e031      	b.n	8008056 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b04      	cmp	r3, #4
 8007ff6:	d110      	bne.n	800801a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ff8:	7bbb      	ldrb	r3, [r7, #14]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d102      	bne.n	8008004 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ffe:	7b3b      	ldrb	r3, [r7, #12]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d001      	beq.n	8008008 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e075      	b.n	80080f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2202      	movs	r2, #2
 800800c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008018:	e01d      	b.n	8008056 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d108      	bne.n	8008032 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008020:	7bbb      	ldrb	r3, [r7, #14]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d105      	bne.n	8008032 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008026:	7b7b      	ldrb	r3, [r7, #13]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d102      	bne.n	8008032 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800802c:	7b3b      	ldrb	r3, [r7, #12]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d001      	beq.n	8008036 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e05e      	b.n	80080f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2202      	movs	r2, #2
 800803a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2202      	movs	r2, #2
 8008042:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2202      	movs	r2, #2
 800804a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2202      	movs	r2, #2
 8008052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <HAL_TIM_Encoder_Start_IT+0xc4>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2b04      	cmp	r3, #4
 8008060:	d010      	beq.n	8008084 <HAL_TIM_Encoder_Start_IT+0xe4>
 8008062:	e01f      	b.n	80080a4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2201      	movs	r2, #1
 800806a:	2100      	movs	r1, #0
 800806c:	4618      	mov	r0, r3
 800806e:	f001 f829 	bl	80090c4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68da      	ldr	r2, [r3, #12]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f042 0202 	orr.w	r2, r2, #2
 8008080:	60da      	str	r2, [r3, #12]
      break;
 8008082:	e02e      	b.n	80080e2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2201      	movs	r2, #1
 800808a:	2104      	movs	r1, #4
 800808c:	4618      	mov	r0, r3
 800808e:	f001 f819 	bl	80090c4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f042 0204 	orr.w	r2, r2, #4
 80080a0:	60da      	str	r2, [r3, #12]
      break;
 80080a2:	e01e      	b.n	80080e2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2201      	movs	r2, #1
 80080aa:	2100      	movs	r1, #0
 80080ac:	4618      	mov	r0, r3
 80080ae:	f001 f809 	bl	80090c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2201      	movs	r2, #1
 80080b8:	2104      	movs	r1, #4
 80080ba:	4618      	mov	r0, r3
 80080bc:	f001 f802 	bl	80090c4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68da      	ldr	r2, [r3, #12]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f042 0202 	orr.w	r2, r2, #2
 80080ce:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f042 0204 	orr.w	r2, r2, #4
 80080de:	60da      	str	r2, [r3, #12]
      break;
 80080e0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f042 0201 	orr.w	r2, r2, #1
 80080f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	f003 0302 	and.w	r3, r3, #2
 800810e:	2b02      	cmp	r3, #2
 8008110:	d122      	bne.n	8008158 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f003 0302 	and.w	r3, r3, #2
 800811c:	2b02      	cmp	r3, #2
 800811e:	d11b      	bne.n	8008158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f06f 0202 	mvn.w	r2, #2
 8008128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	f003 0303 	and.w	r3, r3, #3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d003      	beq.n	8008146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7fb fc92 	bl	8003a68 <HAL_TIM_IC_CaptureCallback>
 8008144:	e005      	b.n	8008152 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fb47 	bl	80087da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fb4e 	bl	80087ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	f003 0304 	and.w	r3, r3, #4
 8008162:	2b04      	cmp	r3, #4
 8008164:	d122      	bne.n	80081ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	f003 0304 	and.w	r3, r3, #4
 8008170:	2b04      	cmp	r3, #4
 8008172:	d11b      	bne.n	80081ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f06f 0204 	mvn.w	r2, #4
 800817c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2202      	movs	r2, #2
 8008182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7fb fc68 	bl	8003a68 <HAL_TIM_IC_CaptureCallback>
 8008198:	e005      	b.n	80081a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fb1d 	bl	80087da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fb24 	bl	80087ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	f003 0308 	and.w	r3, r3, #8
 80081b6:	2b08      	cmp	r3, #8
 80081b8:	d122      	bne.n	8008200 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	f003 0308 	and.w	r3, r3, #8
 80081c4:	2b08      	cmp	r3, #8
 80081c6:	d11b      	bne.n	8008200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f06f 0208 	mvn.w	r2, #8
 80081d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2204      	movs	r2, #4
 80081d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	f003 0303 	and.w	r3, r3, #3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d003      	beq.n	80081ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7fb fc3e 	bl	8003a68 <HAL_TIM_IC_CaptureCallback>
 80081ec:	e005      	b.n	80081fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 faf3 	bl	80087da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fafa 	bl	80087ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	f003 0310 	and.w	r3, r3, #16
 800820a:	2b10      	cmp	r3, #16
 800820c:	d122      	bne.n	8008254 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f003 0310 	and.w	r3, r3, #16
 8008218:	2b10      	cmp	r3, #16
 800821a:	d11b      	bne.n	8008254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f06f 0210 	mvn.w	r2, #16
 8008224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2208      	movs	r2, #8
 800822a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	69db      	ldr	r3, [r3, #28]
 8008232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7fb fc14 	bl	8003a68 <HAL_TIM_IC_CaptureCallback>
 8008240:	e005      	b.n	800824e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fac9 	bl	80087da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fad0 	bl	80087ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b01      	cmp	r3, #1
 8008260:	d10e      	bne.n	8008280 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	2b01      	cmp	r3, #1
 800826e:	d107      	bne.n	8008280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f06f 0201 	mvn.w	r2, #1
 8008278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7fb fb3e 	bl	80038fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800828a:	2b80      	cmp	r3, #128	; 0x80
 800828c:	d10e      	bne.n	80082ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008298:	2b80      	cmp	r3, #128	; 0x80
 800829a:	d107      	bne.n	80082ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 ffaa 	bl	8009200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b6:	2b40      	cmp	r3, #64	; 0x40
 80082b8:	d10e      	bne.n	80082d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c4:	2b40      	cmp	r3, #64	; 0x40
 80082c6:	d107      	bne.n	80082d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fa95 	bl	8008802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	f003 0320 	and.w	r3, r3, #32
 80082e2:	2b20      	cmp	r3, #32
 80082e4:	d10e      	bne.n	8008304 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	f003 0320 	and.w	r3, r3, #32
 80082f0:	2b20      	cmp	r3, #32
 80082f2:	d107      	bne.n	8008304 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f06f 0220 	mvn.w	r2, #32
 80082fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 ff74 	bl	80091ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008304:	bf00      	nop
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008322:	2b01      	cmp	r3, #1
 8008324:	d101      	bne.n	800832a <HAL_TIM_IC_ConfigChannel+0x1e>
 8008326:	2302      	movs	r3, #2
 8008328:	e088      	b.n	800843c <HAL_TIM_IC_ConfigChannel+0x130>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d11b      	bne.n	8008370 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6818      	ldr	r0, [r3, #0]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	6819      	ldr	r1, [r3, #0]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	f000 fd04 	bl	8008d54 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	699a      	ldr	r2, [r3, #24]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f022 020c 	bic.w	r2, r2, #12
 800835a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6999      	ldr	r1, [r3, #24]
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	689a      	ldr	r2, [r3, #8]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	619a      	str	r2, [r3, #24]
 800836e:	e060      	b.n	8008432 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b04      	cmp	r3, #4
 8008374:	d11c      	bne.n	80083b0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6818      	ldr	r0, [r3, #0]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	6819      	ldr	r1, [r3, #0]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	f000 fd7c 	bl	8008e82 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	699a      	ldr	r2, [r3, #24]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008398:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	6999      	ldr	r1, [r3, #24]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	021a      	lsls	r2, r3, #8
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	619a      	str	r2, [r3, #24]
 80083ae:	e040      	b.n	8008432 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b08      	cmp	r3, #8
 80083b4:	d11b      	bne.n	80083ee <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	6819      	ldr	r1, [r3, #0]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	f000 fdc9 	bl	8008f5c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69da      	ldr	r2, [r3, #28]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f022 020c 	bic.w	r2, r2, #12
 80083d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	69d9      	ldr	r1, [r3, #28]
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	61da      	str	r2, [r3, #28]
 80083ec:	e021      	b.n	8008432 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b0c      	cmp	r3, #12
 80083f2:	d11c      	bne.n	800842e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6818      	ldr	r0, [r3, #0]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	6819      	ldr	r1, [r3, #0]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	f000 fde6 	bl	8008fd4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	69da      	ldr	r2, [r3, #28]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008416:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	69d9      	ldr	r1, [r3, #28]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	021a      	lsls	r2, r3, #8
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	430a      	orrs	r2, r1
 800842a:	61da      	str	r2, [r3, #28]
 800842c:	e001      	b.n	8008432 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800843a:	7dfb      	ldrb	r3, [r7, #23]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3718      	adds	r7, #24
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800845a:	2b01      	cmp	r3, #1
 800845c:	d101      	bne.n	8008462 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800845e:	2302      	movs	r3, #2
 8008460:	e0ae      	b.n	80085c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b0c      	cmp	r3, #12
 800846e:	f200 809f 	bhi.w	80085b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008472:	a201      	add	r2, pc, #4	; (adr r2, 8008478 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008478:	080084ad 	.word	0x080084ad
 800847c:	080085b1 	.word	0x080085b1
 8008480:	080085b1 	.word	0x080085b1
 8008484:	080085b1 	.word	0x080085b1
 8008488:	080084ed 	.word	0x080084ed
 800848c:	080085b1 	.word	0x080085b1
 8008490:	080085b1 	.word	0x080085b1
 8008494:	080085b1 	.word	0x080085b1
 8008498:	0800852f 	.word	0x0800852f
 800849c:	080085b1 	.word	0x080085b1
 80084a0:	080085b1 	.word	0x080085b1
 80084a4:	080085b1 	.word	0x080085b1
 80084a8:	0800856f 	.word	0x0800856f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68b9      	ldr	r1, [r7, #8]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 fa30 	bl	8008918 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	699a      	ldr	r2, [r3, #24]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f042 0208 	orr.w	r2, r2, #8
 80084c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	699a      	ldr	r2, [r3, #24]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f022 0204 	bic.w	r2, r2, #4
 80084d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6999      	ldr	r1, [r3, #24]
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	691a      	ldr	r2, [r3, #16]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	430a      	orrs	r2, r1
 80084e8:	619a      	str	r2, [r3, #24]
      break;
 80084ea:	e064      	b.n	80085b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68b9      	ldr	r1, [r7, #8]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 fa76 	bl	80089e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	699a      	ldr	r2, [r3, #24]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	699a      	ldr	r2, [r3, #24]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6999      	ldr	r1, [r3, #24]
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	021a      	lsls	r2, r3, #8
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	430a      	orrs	r2, r1
 800852a:	619a      	str	r2, [r3, #24]
      break;
 800852c:	e043      	b.n	80085b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68b9      	ldr	r1, [r7, #8]
 8008534:	4618      	mov	r0, r3
 8008536:	f000 fac1 	bl	8008abc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	69da      	ldr	r2, [r3, #28]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f042 0208 	orr.w	r2, r2, #8
 8008548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	69da      	ldr	r2, [r3, #28]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f022 0204 	bic.w	r2, r2, #4
 8008558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	69d9      	ldr	r1, [r3, #28]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	691a      	ldr	r2, [r3, #16]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	430a      	orrs	r2, r1
 800856a:	61da      	str	r2, [r3, #28]
      break;
 800856c:	e023      	b.n	80085b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68b9      	ldr	r1, [r7, #8]
 8008574:	4618      	mov	r0, r3
 8008576:	f000 fb0b 	bl	8008b90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	69da      	ldr	r2, [r3, #28]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	69da      	ldr	r2, [r3, #28]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	69d9      	ldr	r1, [r3, #28]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	021a      	lsls	r2, r3, #8
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	61da      	str	r2, [r3, #28]
      break;
 80085ae:	e002      	b.n	80085b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	75fb      	strb	r3, [r7, #23]
      break;
 80085b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085be:	7dfb      	ldrb	r3, [r7, #23]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3718      	adds	r7, #24
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d101      	bne.n	80085e4 <HAL_TIM_ConfigClockSource+0x1c>
 80085e0:	2302      	movs	r3, #2
 80085e2:	e0b4      	b.n	800874e <HAL_TIM_ConfigClockSource+0x186>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800860a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800861c:	d03e      	beq.n	800869c <HAL_TIM_ConfigClockSource+0xd4>
 800861e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008622:	f200 8087 	bhi.w	8008734 <HAL_TIM_ConfigClockSource+0x16c>
 8008626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800862a:	f000 8086 	beq.w	800873a <HAL_TIM_ConfigClockSource+0x172>
 800862e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008632:	d87f      	bhi.n	8008734 <HAL_TIM_ConfigClockSource+0x16c>
 8008634:	2b70      	cmp	r3, #112	; 0x70
 8008636:	d01a      	beq.n	800866e <HAL_TIM_ConfigClockSource+0xa6>
 8008638:	2b70      	cmp	r3, #112	; 0x70
 800863a:	d87b      	bhi.n	8008734 <HAL_TIM_ConfigClockSource+0x16c>
 800863c:	2b60      	cmp	r3, #96	; 0x60
 800863e:	d050      	beq.n	80086e2 <HAL_TIM_ConfigClockSource+0x11a>
 8008640:	2b60      	cmp	r3, #96	; 0x60
 8008642:	d877      	bhi.n	8008734 <HAL_TIM_ConfigClockSource+0x16c>
 8008644:	2b50      	cmp	r3, #80	; 0x50
 8008646:	d03c      	beq.n	80086c2 <HAL_TIM_ConfigClockSource+0xfa>
 8008648:	2b50      	cmp	r3, #80	; 0x50
 800864a:	d873      	bhi.n	8008734 <HAL_TIM_ConfigClockSource+0x16c>
 800864c:	2b40      	cmp	r3, #64	; 0x40
 800864e:	d058      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x13a>
 8008650:	2b40      	cmp	r3, #64	; 0x40
 8008652:	d86f      	bhi.n	8008734 <HAL_TIM_ConfigClockSource+0x16c>
 8008654:	2b30      	cmp	r3, #48	; 0x30
 8008656:	d064      	beq.n	8008722 <HAL_TIM_ConfigClockSource+0x15a>
 8008658:	2b30      	cmp	r3, #48	; 0x30
 800865a:	d86b      	bhi.n	8008734 <HAL_TIM_ConfigClockSource+0x16c>
 800865c:	2b20      	cmp	r3, #32
 800865e:	d060      	beq.n	8008722 <HAL_TIM_ConfigClockSource+0x15a>
 8008660:	2b20      	cmp	r3, #32
 8008662:	d867      	bhi.n	8008734 <HAL_TIM_ConfigClockSource+0x16c>
 8008664:	2b00      	cmp	r3, #0
 8008666:	d05c      	beq.n	8008722 <HAL_TIM_ConfigClockSource+0x15a>
 8008668:	2b10      	cmp	r3, #16
 800866a:	d05a      	beq.n	8008722 <HAL_TIM_ConfigClockSource+0x15a>
 800866c:	e062      	b.n	8008734 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6818      	ldr	r0, [r3, #0]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	6899      	ldr	r1, [r3, #8]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	f000 fd01 	bl	8009084 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008690:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	609a      	str	r2, [r3, #8]
      break;
 800869a:	e04f      	b.n	800873c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6818      	ldr	r0, [r3, #0]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	6899      	ldr	r1, [r3, #8]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	f000 fcea 	bl	8009084 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689a      	ldr	r2, [r3, #8]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086be:	609a      	str	r2, [r3, #8]
      break;
 80086c0:	e03c      	b.n	800873c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6818      	ldr	r0, [r3, #0]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	6859      	ldr	r1, [r3, #4]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	461a      	mov	r2, r3
 80086d0:	f000 fba8 	bl	8008e24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2150      	movs	r1, #80	; 0x50
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 fcb7 	bl	800904e <TIM_ITRx_SetConfig>
      break;
 80086e0:	e02c      	b.n	800873c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6818      	ldr	r0, [r3, #0]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	6859      	ldr	r1, [r3, #4]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	461a      	mov	r2, r3
 80086f0:	f000 fc04 	bl	8008efc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2160      	movs	r1, #96	; 0x60
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 fca7 	bl	800904e <TIM_ITRx_SetConfig>
      break;
 8008700:	e01c      	b.n	800873c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6818      	ldr	r0, [r3, #0]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	6859      	ldr	r1, [r3, #4]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	461a      	mov	r2, r3
 8008710:	f000 fb88 	bl	8008e24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2140      	movs	r1, #64	; 0x40
 800871a:	4618      	mov	r0, r3
 800871c:	f000 fc97 	bl	800904e <TIM_ITRx_SetConfig>
      break;
 8008720:	e00c      	b.n	800873c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4619      	mov	r1, r3
 800872c:	4610      	mov	r0, r2
 800872e:	f000 fc8e 	bl	800904e <TIM_ITRx_SetConfig>
      break;
 8008732:	e003      	b.n	800873c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	73fb      	strb	r3, [r7, #15]
      break;
 8008738:	e000      	b.n	800873c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800873a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800874c:	7bfb      	ldrb	r3, [r7, #15]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b082      	sub	sp, #8
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008766:	2b01      	cmp	r3, #1
 8008768:	d101      	bne.n	800876e <HAL_TIM_SlaveConfigSynchro+0x18>
 800876a:	2302      	movs	r3, #2
 800876c:	e031      	b.n	80087d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2202      	movs	r2, #2
 800877a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fa55 	bl	8008c30 <TIM_SlaveTimer_SetConfig>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d009      	beq.n	80087a0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e018      	b.n	80087d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68da      	ldr	r2, [r3, #12]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087ae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68da      	ldr	r2, [r3, #12]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80087be:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008802:	b480      	push	{r7}
 8008804:	b083      	sub	sp, #12
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800880a:	bf00      	nop
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
	...

08008818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a34      	ldr	r2, [pc, #208]	; (80088fc <TIM_Base_SetConfig+0xe4>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d00f      	beq.n	8008850 <TIM_Base_SetConfig+0x38>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008836:	d00b      	beq.n	8008850 <TIM_Base_SetConfig+0x38>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a31      	ldr	r2, [pc, #196]	; (8008900 <TIM_Base_SetConfig+0xe8>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d007      	beq.n	8008850 <TIM_Base_SetConfig+0x38>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a30      	ldr	r2, [pc, #192]	; (8008904 <TIM_Base_SetConfig+0xec>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d003      	beq.n	8008850 <TIM_Base_SetConfig+0x38>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a2f      	ldr	r2, [pc, #188]	; (8008908 <TIM_Base_SetConfig+0xf0>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d108      	bne.n	8008862 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	4313      	orrs	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a25      	ldr	r2, [pc, #148]	; (80088fc <TIM_Base_SetConfig+0xe4>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d01b      	beq.n	80088a2 <TIM_Base_SetConfig+0x8a>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008870:	d017      	beq.n	80088a2 <TIM_Base_SetConfig+0x8a>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a22      	ldr	r2, [pc, #136]	; (8008900 <TIM_Base_SetConfig+0xe8>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d013      	beq.n	80088a2 <TIM_Base_SetConfig+0x8a>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a21      	ldr	r2, [pc, #132]	; (8008904 <TIM_Base_SetConfig+0xec>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d00f      	beq.n	80088a2 <TIM_Base_SetConfig+0x8a>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a20      	ldr	r2, [pc, #128]	; (8008908 <TIM_Base_SetConfig+0xf0>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d00b      	beq.n	80088a2 <TIM_Base_SetConfig+0x8a>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a1f      	ldr	r2, [pc, #124]	; (800890c <TIM_Base_SetConfig+0xf4>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d007      	beq.n	80088a2 <TIM_Base_SetConfig+0x8a>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a1e      	ldr	r2, [pc, #120]	; (8008910 <TIM_Base_SetConfig+0xf8>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d003      	beq.n	80088a2 <TIM_Base_SetConfig+0x8a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a1d      	ldr	r2, [pc, #116]	; (8008914 <TIM_Base_SetConfig+0xfc>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d108      	bne.n	80088b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	4313      	orrs	r3, r2
 80088c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	689a      	ldr	r2, [r3, #8]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a08      	ldr	r2, [pc, #32]	; (80088fc <TIM_Base_SetConfig+0xe4>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d103      	bne.n	80088e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	691a      	ldr	r2, [r3, #16]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	615a      	str	r2, [r3, #20]
}
 80088ee:	bf00      	nop
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	40010000 	.word	0x40010000
 8008900:	40000400 	.word	0x40000400
 8008904:	40000800 	.word	0x40000800
 8008908:	40000c00 	.word	0x40000c00
 800890c:	40014000 	.word	0x40014000
 8008910:	40014400 	.word	0x40014400
 8008914:	40014800 	.word	0x40014800

08008918 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	f023 0201 	bic.w	r2, r3, #1
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f023 0303 	bic.w	r3, r3, #3
 800894e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	4313      	orrs	r3, r2
 8008958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f023 0302 	bic.w	r3, r3, #2
 8008960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	4313      	orrs	r3, r2
 800896a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a1c      	ldr	r2, [pc, #112]	; (80089e0 <TIM_OC1_SetConfig+0xc8>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d10c      	bne.n	800898e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	f023 0308 	bic.w	r3, r3, #8
 800897a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	4313      	orrs	r3, r2
 8008984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f023 0304 	bic.w	r3, r3, #4
 800898c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a13      	ldr	r2, [pc, #76]	; (80089e0 <TIM_OC1_SetConfig+0xc8>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d111      	bne.n	80089ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800899c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	621a      	str	r2, [r3, #32]
}
 80089d4:	bf00      	nop
 80089d6:	371c      	adds	r7, #28
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	40010000 	.word	0x40010000

080089e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b087      	sub	sp, #28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	f023 0210 	bic.w	r2, r3, #16
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	021b      	lsls	r3, r3, #8
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f023 0320 	bic.w	r3, r3, #32
 8008a2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	011b      	lsls	r3, r3, #4
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a1e      	ldr	r2, [pc, #120]	; (8008ab8 <TIM_OC2_SetConfig+0xd4>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d10d      	bne.n	8008a60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	011b      	lsls	r3, r3, #4
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a15      	ldr	r2, [pc, #84]	; (8008ab8 <TIM_OC2_SetConfig+0xd4>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d113      	bne.n	8008a90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	685a      	ldr	r2, [r3, #4]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	621a      	str	r2, [r3, #32]
}
 8008aaa:	bf00      	nop
 8008aac:	371c      	adds	r7, #28
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	40010000 	.word	0x40010000

08008abc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b087      	sub	sp, #28
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f023 0303 	bic.w	r3, r3, #3
 8008af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	021b      	lsls	r3, r3, #8
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a1d      	ldr	r2, [pc, #116]	; (8008b8c <TIM_OC3_SetConfig+0xd0>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d10d      	bne.n	8008b36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	021b      	lsls	r3, r3, #8
 8008b28:	697a      	ldr	r2, [r7, #20]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a14      	ldr	r2, [pc, #80]	; (8008b8c <TIM_OC3_SetConfig+0xd0>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d113      	bne.n	8008b66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	011b      	lsls	r3, r3, #4
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	011b      	lsls	r3, r3, #4
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	685a      	ldr	r2, [r3, #4]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	621a      	str	r2, [r3, #32]
}
 8008b80:	bf00      	nop
 8008b82:	371c      	adds	r7, #28
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	40010000 	.word	0x40010000

08008b90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b087      	sub	sp, #28
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a1b      	ldr	r3, [r3, #32]
 8008b9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	021b      	lsls	r3, r3, #8
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	031b      	lsls	r3, r3, #12
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a10      	ldr	r2, [pc, #64]	; (8008c2c <TIM_OC4_SetConfig+0x9c>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d109      	bne.n	8008c04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	695b      	ldr	r3, [r3, #20]
 8008bfc:	019b      	lsls	r3, r3, #6
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	685a      	ldr	r2, [r3, #4]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	621a      	str	r2, [r3, #32]
}
 8008c1e:	bf00      	nop
 8008c20:	371c      	adds	r7, #28
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	40010000 	.word	0x40010000

08008c30 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c4c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	693a      	ldr	r2, [r7, #16]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	f023 0307 	bic.w	r3, r3, #7
 8008c5e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	2b70      	cmp	r3, #112	; 0x70
 8008c78:	d01a      	beq.n	8008cb0 <TIM_SlaveTimer_SetConfig+0x80>
 8008c7a:	2b70      	cmp	r3, #112	; 0x70
 8008c7c:	d860      	bhi.n	8008d40 <TIM_SlaveTimer_SetConfig+0x110>
 8008c7e:	2b60      	cmp	r3, #96	; 0x60
 8008c80:	d054      	beq.n	8008d2c <TIM_SlaveTimer_SetConfig+0xfc>
 8008c82:	2b60      	cmp	r3, #96	; 0x60
 8008c84:	d85c      	bhi.n	8008d40 <TIM_SlaveTimer_SetConfig+0x110>
 8008c86:	2b50      	cmp	r3, #80	; 0x50
 8008c88:	d046      	beq.n	8008d18 <TIM_SlaveTimer_SetConfig+0xe8>
 8008c8a:	2b50      	cmp	r3, #80	; 0x50
 8008c8c:	d858      	bhi.n	8008d40 <TIM_SlaveTimer_SetConfig+0x110>
 8008c8e:	2b40      	cmp	r3, #64	; 0x40
 8008c90:	d019      	beq.n	8008cc6 <TIM_SlaveTimer_SetConfig+0x96>
 8008c92:	2b40      	cmp	r3, #64	; 0x40
 8008c94:	d854      	bhi.n	8008d40 <TIM_SlaveTimer_SetConfig+0x110>
 8008c96:	2b30      	cmp	r3, #48	; 0x30
 8008c98:	d055      	beq.n	8008d46 <TIM_SlaveTimer_SetConfig+0x116>
 8008c9a:	2b30      	cmp	r3, #48	; 0x30
 8008c9c:	d850      	bhi.n	8008d40 <TIM_SlaveTimer_SetConfig+0x110>
 8008c9e:	2b20      	cmp	r3, #32
 8008ca0:	d051      	beq.n	8008d46 <TIM_SlaveTimer_SetConfig+0x116>
 8008ca2:	2b20      	cmp	r3, #32
 8008ca4:	d84c      	bhi.n	8008d40 <TIM_SlaveTimer_SetConfig+0x110>
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d04d      	beq.n	8008d46 <TIM_SlaveTimer_SetConfig+0x116>
 8008caa:	2b10      	cmp	r3, #16
 8008cac:	d04b      	beq.n	8008d46 <TIM_SlaveTimer_SetConfig+0x116>
 8008cae:	e047      	b.n	8008d40 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6818      	ldr	r0, [r3, #0]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	68d9      	ldr	r1, [r3, #12]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	689a      	ldr	r2, [r3, #8]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	f000 f9e0 	bl	8009084 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8008cc4:	e040      	b.n	8008d48 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b05      	cmp	r3, #5
 8008ccc:	d101      	bne.n	8008cd2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e03b      	b.n	8008d4a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6a1a      	ldr	r2, [r3, #32]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f022 0201 	bic.w	r2, r2, #1
 8008ce8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cf8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	011b      	lsls	r3, r3, #4
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	621a      	str	r2, [r3, #32]
      break;
 8008d16:	e017      	b.n	8008d48 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6818      	ldr	r0, [r3, #0]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	6899      	ldr	r1, [r3, #8]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	461a      	mov	r2, r3
 8008d26:	f000 f87d 	bl	8008e24 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008d2a:	e00d      	b.n	8008d48 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6818      	ldr	r0, [r3, #0]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	6899      	ldr	r1, [r3, #8]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	f000 f8df 	bl	8008efc <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008d3e:	e003      	b.n	8008d48 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	75fb      	strb	r3, [r7, #23]
      break;
 8008d44:	e000      	b.n	8008d48 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008d46:	bf00      	nop
  }

  return status;
 8008d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3718      	adds	r7, #24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
	...

08008d54 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b087      	sub	sp, #28
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6a1b      	ldr	r3, [r3, #32]
 8008d66:	f023 0201 	bic.w	r2, r3, #1
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6a1b      	ldr	r3, [r3, #32]
 8008d78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	4a24      	ldr	r2, [pc, #144]	; (8008e10 <TIM_TI1_SetConfig+0xbc>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d013      	beq.n	8008daa <TIM_TI1_SetConfig+0x56>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d88:	d00f      	beq.n	8008daa <TIM_TI1_SetConfig+0x56>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4a21      	ldr	r2, [pc, #132]	; (8008e14 <TIM_TI1_SetConfig+0xc0>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d00b      	beq.n	8008daa <TIM_TI1_SetConfig+0x56>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	4a20      	ldr	r2, [pc, #128]	; (8008e18 <TIM_TI1_SetConfig+0xc4>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d007      	beq.n	8008daa <TIM_TI1_SetConfig+0x56>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	4a1f      	ldr	r2, [pc, #124]	; (8008e1c <TIM_TI1_SetConfig+0xc8>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d003      	beq.n	8008daa <TIM_TI1_SetConfig+0x56>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	4a1e      	ldr	r2, [pc, #120]	; (8008e20 <TIM_TI1_SetConfig+0xcc>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d101      	bne.n	8008dae <TIM_TI1_SetConfig+0x5a>
 8008daa:	2301      	movs	r3, #1
 8008dac:	e000      	b.n	8008db0 <TIM_TI1_SetConfig+0x5c>
 8008dae:	2300      	movs	r3, #0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d008      	beq.n	8008dc6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	f023 0303 	bic.w	r3, r3, #3
 8008dba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	617b      	str	r3, [r7, #20]
 8008dc4:	e003      	b.n	8008dce <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	f043 0301 	orr.w	r3, r3, #1
 8008dcc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008dd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	011b      	lsls	r3, r3, #4
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f023 030a 	bic.w	r3, r3, #10
 8008de8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	f003 030a 	and.w	r3, r3, #10
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	621a      	str	r2, [r3, #32]
}
 8008e02:	bf00      	nop
 8008e04:	371c      	adds	r7, #28
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	40010000 	.word	0x40010000
 8008e14:	40000400 	.word	0x40000400
 8008e18:	40000800 	.word	0x40000800
 8008e1c:	40000c00 	.word	0x40000c00
 8008e20:	40014000 	.word	0x40014000

08008e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6a1b      	ldr	r3, [r3, #32]
 8008e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6a1b      	ldr	r3, [r3, #32]
 8008e3a:	f023 0201 	bic.w	r2, r3, #1
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	011b      	lsls	r3, r3, #4
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	f023 030a 	bic.w	r3, r3, #10
 8008e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	621a      	str	r2, [r3, #32]
}
 8008e76:	bf00      	nop
 8008e78:	371c      	adds	r7, #28
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b087      	sub	sp, #28
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	60f8      	str	r0, [r7, #12]
 8008e8a:	60b9      	str	r1, [r7, #8]
 8008e8c:	607a      	str	r2, [r7, #4]
 8008e8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6a1b      	ldr	r3, [r3, #32]
 8008e94:	f023 0210 	bic.w	r2, r3, #16
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	021b      	lsls	r3, r3, #8
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ec0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	031b      	lsls	r3, r3, #12
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ed4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	011b      	lsls	r3, r3, #4
 8008eda:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008ede:	693a      	ldr	r2, [r7, #16]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	621a      	str	r2, [r3, #32]
}
 8008ef0:	bf00      	nop
 8008ef2:	371c      	adds	r7, #28
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b087      	sub	sp, #28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6a1b      	ldr	r3, [r3, #32]
 8008f0c:	f023 0210 	bic.w	r2, r3, #16
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	031b      	lsls	r3, r3, #12
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	011b      	lsls	r3, r3, #4
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	621a      	str	r2, [r3, #32]
}
 8008f50:	bf00      	nop
 8008f52:	371c      	adds	r7, #28
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b087      	sub	sp, #28
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	607a      	str	r2, [r7, #4]
 8008f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6a1b      	ldr	r3, [r3, #32]
 8008f80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f023 0303 	bic.w	r3, r3, #3
 8008f88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008f8a:	697a      	ldr	r2, [r7, #20]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	011b      	lsls	r3, r3, #4
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008fac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	021b      	lsls	r3, r3, #8
 8008fb2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	693a      	ldr	r2, [r7, #16]
 8008fc6:	621a      	str	r2, [r3, #32]
}
 8008fc8:	bf00      	nop
 8008fca:	371c      	adds	r7, #28
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
 8008fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6a1b      	ldr	r3, [r3, #32]
 8008ff8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009000:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	021b      	lsls	r3, r3, #8
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	4313      	orrs	r3, r2
 800900a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009012:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	031b      	lsls	r3, r3, #12
 8009018:	b29b      	uxth	r3, r3
 800901a:	697a      	ldr	r2, [r7, #20]
 800901c:	4313      	orrs	r3, r2
 800901e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009026:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	031b      	lsls	r3, r3, #12
 800902c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	4313      	orrs	r3, r2
 8009034:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	621a      	str	r2, [r3, #32]
}
 8009042:	bf00      	nop
 8009044:	371c      	adds	r7, #28
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800904e:	b480      	push	{r7}
 8009050:	b085      	sub	sp, #20
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009064:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	4313      	orrs	r3, r2
 800906c:	f043 0307 	orr.w	r3, r3, #7
 8009070:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	609a      	str	r2, [r3, #8]
}
 8009078:	bf00      	nop
 800907a:	3714      	adds	r7, #20
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009084:	b480      	push	{r7}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
 8009090:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800909e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	021a      	lsls	r2, r3, #8
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	431a      	orrs	r2, r3
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	697a      	ldr	r2, [r7, #20]
 80090b6:	609a      	str	r2, [r3, #8]
}
 80090b8:	bf00      	nop
 80090ba:	371c      	adds	r7, #28
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b087      	sub	sp, #28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	f003 031f 	and.w	r3, r3, #31
 80090d6:	2201      	movs	r2, #1
 80090d8:	fa02 f303 	lsl.w	r3, r2, r3
 80090dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6a1a      	ldr	r2, [r3, #32]
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	43db      	mvns	r3, r3
 80090e6:	401a      	ands	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6a1a      	ldr	r2, [r3, #32]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f003 031f 	and.w	r3, r3, #31
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	fa01 f303 	lsl.w	r3, r1, r3
 80090fc:	431a      	orrs	r2, r3
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	621a      	str	r2, [r3, #32]
}
 8009102:	bf00      	nop
 8009104:	371c      	adds	r7, #28
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
	...

08009110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009120:	2b01      	cmp	r3, #1
 8009122:	d101      	bne.n	8009128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009124:	2302      	movs	r3, #2
 8009126:	e050      	b.n	80091ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2202      	movs	r2, #2
 8009134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800914e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	4313      	orrs	r3, r2
 8009158:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a1c      	ldr	r2, [pc, #112]	; (80091d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d018      	beq.n	800919e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009174:	d013      	beq.n	800919e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a18      	ldr	r2, [pc, #96]	; (80091dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d00e      	beq.n	800919e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a16      	ldr	r2, [pc, #88]	; (80091e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d009      	beq.n	800919e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a15      	ldr	r2, [pc, #84]	; (80091e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d004      	beq.n	800919e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a13      	ldr	r2, [pc, #76]	; (80091e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d10c      	bne.n	80091b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	40010000 	.word	0x40010000
 80091dc:	40000400 	.word	0x40000400
 80091e0:	40000800 	.word	0x40000800
 80091e4:	40000c00 	.word	0x40000c00
 80091e8:	40014000 	.word	0x40014000

080091ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <__errno>:
 8009214:	4b01      	ldr	r3, [pc, #4]	; (800921c <__errno+0x8>)
 8009216:	6818      	ldr	r0, [r3, #0]
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	200000b0 	.word	0x200000b0

08009220 <__libc_init_array>:
 8009220:	b570      	push	{r4, r5, r6, lr}
 8009222:	4d0d      	ldr	r5, [pc, #52]	; (8009258 <__libc_init_array+0x38>)
 8009224:	4c0d      	ldr	r4, [pc, #52]	; (800925c <__libc_init_array+0x3c>)
 8009226:	1b64      	subs	r4, r4, r5
 8009228:	10a4      	asrs	r4, r4, #2
 800922a:	2600      	movs	r6, #0
 800922c:	42a6      	cmp	r6, r4
 800922e:	d109      	bne.n	8009244 <__libc_init_array+0x24>
 8009230:	4d0b      	ldr	r5, [pc, #44]	; (8009260 <__libc_init_array+0x40>)
 8009232:	4c0c      	ldr	r4, [pc, #48]	; (8009264 <__libc_init_array+0x44>)
 8009234:	f000 fc8e 	bl	8009b54 <_init>
 8009238:	1b64      	subs	r4, r4, r5
 800923a:	10a4      	asrs	r4, r4, #2
 800923c:	2600      	movs	r6, #0
 800923e:	42a6      	cmp	r6, r4
 8009240:	d105      	bne.n	800924e <__libc_init_array+0x2e>
 8009242:	bd70      	pop	{r4, r5, r6, pc}
 8009244:	f855 3b04 	ldr.w	r3, [r5], #4
 8009248:	4798      	blx	r3
 800924a:	3601      	adds	r6, #1
 800924c:	e7ee      	b.n	800922c <__libc_init_array+0xc>
 800924e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009252:	4798      	blx	r3
 8009254:	3601      	adds	r6, #1
 8009256:	e7f2      	b.n	800923e <__libc_init_array+0x1e>
 8009258:	08009e48 	.word	0x08009e48
 800925c:	08009e48 	.word	0x08009e48
 8009260:	08009e48 	.word	0x08009e48
 8009264:	08009e4c 	.word	0x08009e4c

08009268 <memcpy>:
 8009268:	440a      	add	r2, r1
 800926a:	4291      	cmp	r1, r2
 800926c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009270:	d100      	bne.n	8009274 <memcpy+0xc>
 8009272:	4770      	bx	lr
 8009274:	b510      	push	{r4, lr}
 8009276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800927a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800927e:	4291      	cmp	r1, r2
 8009280:	d1f9      	bne.n	8009276 <memcpy+0xe>
 8009282:	bd10      	pop	{r4, pc}

08009284 <memset>:
 8009284:	4402      	add	r2, r0
 8009286:	4603      	mov	r3, r0
 8009288:	4293      	cmp	r3, r2
 800928a:	d100      	bne.n	800928e <memset+0xa>
 800928c:	4770      	bx	lr
 800928e:	f803 1b01 	strb.w	r1, [r3], #1
 8009292:	e7f9      	b.n	8009288 <memset+0x4>

08009294 <siprintf>:
 8009294:	b40e      	push	{r1, r2, r3}
 8009296:	b500      	push	{lr}
 8009298:	b09c      	sub	sp, #112	; 0x70
 800929a:	ab1d      	add	r3, sp, #116	; 0x74
 800929c:	9002      	str	r0, [sp, #8]
 800929e:	9006      	str	r0, [sp, #24]
 80092a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092a4:	4809      	ldr	r0, [pc, #36]	; (80092cc <siprintf+0x38>)
 80092a6:	9107      	str	r1, [sp, #28]
 80092a8:	9104      	str	r1, [sp, #16]
 80092aa:	4909      	ldr	r1, [pc, #36]	; (80092d0 <siprintf+0x3c>)
 80092ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80092b0:	9105      	str	r1, [sp, #20]
 80092b2:	6800      	ldr	r0, [r0, #0]
 80092b4:	9301      	str	r3, [sp, #4]
 80092b6:	a902      	add	r1, sp, #8
 80092b8:	f000 f868 	bl	800938c <_svfiprintf_r>
 80092bc:	9b02      	ldr	r3, [sp, #8]
 80092be:	2200      	movs	r2, #0
 80092c0:	701a      	strb	r2, [r3, #0]
 80092c2:	b01c      	add	sp, #112	; 0x70
 80092c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092c8:	b003      	add	sp, #12
 80092ca:	4770      	bx	lr
 80092cc:	200000b0 	.word	0x200000b0
 80092d0:	ffff0208 	.word	0xffff0208

080092d4 <__ssputs_r>:
 80092d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092d8:	688e      	ldr	r6, [r1, #8]
 80092da:	429e      	cmp	r6, r3
 80092dc:	4682      	mov	sl, r0
 80092de:	460c      	mov	r4, r1
 80092e0:	4690      	mov	r8, r2
 80092e2:	461f      	mov	r7, r3
 80092e4:	d838      	bhi.n	8009358 <__ssputs_r+0x84>
 80092e6:	898a      	ldrh	r2, [r1, #12]
 80092e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092ec:	d032      	beq.n	8009354 <__ssputs_r+0x80>
 80092ee:	6825      	ldr	r5, [r4, #0]
 80092f0:	6909      	ldr	r1, [r1, #16]
 80092f2:	eba5 0901 	sub.w	r9, r5, r1
 80092f6:	6965      	ldr	r5, [r4, #20]
 80092f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009300:	3301      	adds	r3, #1
 8009302:	444b      	add	r3, r9
 8009304:	106d      	asrs	r5, r5, #1
 8009306:	429d      	cmp	r5, r3
 8009308:	bf38      	it	cc
 800930a:	461d      	movcc	r5, r3
 800930c:	0553      	lsls	r3, r2, #21
 800930e:	d531      	bpl.n	8009374 <__ssputs_r+0xa0>
 8009310:	4629      	mov	r1, r5
 8009312:	f000 fb55 	bl	80099c0 <_malloc_r>
 8009316:	4606      	mov	r6, r0
 8009318:	b950      	cbnz	r0, 8009330 <__ssputs_r+0x5c>
 800931a:	230c      	movs	r3, #12
 800931c:	f8ca 3000 	str.w	r3, [sl]
 8009320:	89a3      	ldrh	r3, [r4, #12]
 8009322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009326:	81a3      	strh	r3, [r4, #12]
 8009328:	f04f 30ff 	mov.w	r0, #4294967295
 800932c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009330:	6921      	ldr	r1, [r4, #16]
 8009332:	464a      	mov	r2, r9
 8009334:	f7ff ff98 	bl	8009268 <memcpy>
 8009338:	89a3      	ldrh	r3, [r4, #12]
 800933a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800933e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009342:	81a3      	strh	r3, [r4, #12]
 8009344:	6126      	str	r6, [r4, #16]
 8009346:	6165      	str	r5, [r4, #20]
 8009348:	444e      	add	r6, r9
 800934a:	eba5 0509 	sub.w	r5, r5, r9
 800934e:	6026      	str	r6, [r4, #0]
 8009350:	60a5      	str	r5, [r4, #8]
 8009352:	463e      	mov	r6, r7
 8009354:	42be      	cmp	r6, r7
 8009356:	d900      	bls.n	800935a <__ssputs_r+0x86>
 8009358:	463e      	mov	r6, r7
 800935a:	6820      	ldr	r0, [r4, #0]
 800935c:	4632      	mov	r2, r6
 800935e:	4641      	mov	r1, r8
 8009360:	f000 faa8 	bl	80098b4 <memmove>
 8009364:	68a3      	ldr	r3, [r4, #8]
 8009366:	1b9b      	subs	r3, r3, r6
 8009368:	60a3      	str	r3, [r4, #8]
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	4433      	add	r3, r6
 800936e:	6023      	str	r3, [r4, #0]
 8009370:	2000      	movs	r0, #0
 8009372:	e7db      	b.n	800932c <__ssputs_r+0x58>
 8009374:	462a      	mov	r2, r5
 8009376:	f000 fb97 	bl	8009aa8 <_realloc_r>
 800937a:	4606      	mov	r6, r0
 800937c:	2800      	cmp	r0, #0
 800937e:	d1e1      	bne.n	8009344 <__ssputs_r+0x70>
 8009380:	6921      	ldr	r1, [r4, #16]
 8009382:	4650      	mov	r0, sl
 8009384:	f000 fab0 	bl	80098e8 <_free_r>
 8009388:	e7c7      	b.n	800931a <__ssputs_r+0x46>
	...

0800938c <_svfiprintf_r>:
 800938c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009390:	4698      	mov	r8, r3
 8009392:	898b      	ldrh	r3, [r1, #12]
 8009394:	061b      	lsls	r3, r3, #24
 8009396:	b09d      	sub	sp, #116	; 0x74
 8009398:	4607      	mov	r7, r0
 800939a:	460d      	mov	r5, r1
 800939c:	4614      	mov	r4, r2
 800939e:	d50e      	bpl.n	80093be <_svfiprintf_r+0x32>
 80093a0:	690b      	ldr	r3, [r1, #16]
 80093a2:	b963      	cbnz	r3, 80093be <_svfiprintf_r+0x32>
 80093a4:	2140      	movs	r1, #64	; 0x40
 80093a6:	f000 fb0b 	bl	80099c0 <_malloc_r>
 80093aa:	6028      	str	r0, [r5, #0]
 80093ac:	6128      	str	r0, [r5, #16]
 80093ae:	b920      	cbnz	r0, 80093ba <_svfiprintf_r+0x2e>
 80093b0:	230c      	movs	r3, #12
 80093b2:	603b      	str	r3, [r7, #0]
 80093b4:	f04f 30ff 	mov.w	r0, #4294967295
 80093b8:	e0d1      	b.n	800955e <_svfiprintf_r+0x1d2>
 80093ba:	2340      	movs	r3, #64	; 0x40
 80093bc:	616b      	str	r3, [r5, #20]
 80093be:	2300      	movs	r3, #0
 80093c0:	9309      	str	r3, [sp, #36]	; 0x24
 80093c2:	2320      	movs	r3, #32
 80093c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80093cc:	2330      	movs	r3, #48	; 0x30
 80093ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009578 <_svfiprintf_r+0x1ec>
 80093d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093d6:	f04f 0901 	mov.w	r9, #1
 80093da:	4623      	mov	r3, r4
 80093dc:	469a      	mov	sl, r3
 80093de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093e2:	b10a      	cbz	r2, 80093e8 <_svfiprintf_r+0x5c>
 80093e4:	2a25      	cmp	r2, #37	; 0x25
 80093e6:	d1f9      	bne.n	80093dc <_svfiprintf_r+0x50>
 80093e8:	ebba 0b04 	subs.w	fp, sl, r4
 80093ec:	d00b      	beq.n	8009406 <_svfiprintf_r+0x7a>
 80093ee:	465b      	mov	r3, fp
 80093f0:	4622      	mov	r2, r4
 80093f2:	4629      	mov	r1, r5
 80093f4:	4638      	mov	r0, r7
 80093f6:	f7ff ff6d 	bl	80092d4 <__ssputs_r>
 80093fa:	3001      	adds	r0, #1
 80093fc:	f000 80aa 	beq.w	8009554 <_svfiprintf_r+0x1c8>
 8009400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009402:	445a      	add	r2, fp
 8009404:	9209      	str	r2, [sp, #36]	; 0x24
 8009406:	f89a 3000 	ldrb.w	r3, [sl]
 800940a:	2b00      	cmp	r3, #0
 800940c:	f000 80a2 	beq.w	8009554 <_svfiprintf_r+0x1c8>
 8009410:	2300      	movs	r3, #0
 8009412:	f04f 32ff 	mov.w	r2, #4294967295
 8009416:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800941a:	f10a 0a01 	add.w	sl, sl, #1
 800941e:	9304      	str	r3, [sp, #16]
 8009420:	9307      	str	r3, [sp, #28]
 8009422:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009426:	931a      	str	r3, [sp, #104]	; 0x68
 8009428:	4654      	mov	r4, sl
 800942a:	2205      	movs	r2, #5
 800942c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009430:	4851      	ldr	r0, [pc, #324]	; (8009578 <_svfiprintf_r+0x1ec>)
 8009432:	f7f6 fedd 	bl	80001f0 <memchr>
 8009436:	9a04      	ldr	r2, [sp, #16]
 8009438:	b9d8      	cbnz	r0, 8009472 <_svfiprintf_r+0xe6>
 800943a:	06d0      	lsls	r0, r2, #27
 800943c:	bf44      	itt	mi
 800943e:	2320      	movmi	r3, #32
 8009440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009444:	0711      	lsls	r1, r2, #28
 8009446:	bf44      	itt	mi
 8009448:	232b      	movmi	r3, #43	; 0x2b
 800944a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800944e:	f89a 3000 	ldrb.w	r3, [sl]
 8009452:	2b2a      	cmp	r3, #42	; 0x2a
 8009454:	d015      	beq.n	8009482 <_svfiprintf_r+0xf6>
 8009456:	9a07      	ldr	r2, [sp, #28]
 8009458:	4654      	mov	r4, sl
 800945a:	2000      	movs	r0, #0
 800945c:	f04f 0c0a 	mov.w	ip, #10
 8009460:	4621      	mov	r1, r4
 8009462:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009466:	3b30      	subs	r3, #48	; 0x30
 8009468:	2b09      	cmp	r3, #9
 800946a:	d94e      	bls.n	800950a <_svfiprintf_r+0x17e>
 800946c:	b1b0      	cbz	r0, 800949c <_svfiprintf_r+0x110>
 800946e:	9207      	str	r2, [sp, #28]
 8009470:	e014      	b.n	800949c <_svfiprintf_r+0x110>
 8009472:	eba0 0308 	sub.w	r3, r0, r8
 8009476:	fa09 f303 	lsl.w	r3, r9, r3
 800947a:	4313      	orrs	r3, r2
 800947c:	9304      	str	r3, [sp, #16]
 800947e:	46a2      	mov	sl, r4
 8009480:	e7d2      	b.n	8009428 <_svfiprintf_r+0x9c>
 8009482:	9b03      	ldr	r3, [sp, #12]
 8009484:	1d19      	adds	r1, r3, #4
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	9103      	str	r1, [sp, #12]
 800948a:	2b00      	cmp	r3, #0
 800948c:	bfbb      	ittet	lt
 800948e:	425b      	neglt	r3, r3
 8009490:	f042 0202 	orrlt.w	r2, r2, #2
 8009494:	9307      	strge	r3, [sp, #28]
 8009496:	9307      	strlt	r3, [sp, #28]
 8009498:	bfb8      	it	lt
 800949a:	9204      	strlt	r2, [sp, #16]
 800949c:	7823      	ldrb	r3, [r4, #0]
 800949e:	2b2e      	cmp	r3, #46	; 0x2e
 80094a0:	d10c      	bne.n	80094bc <_svfiprintf_r+0x130>
 80094a2:	7863      	ldrb	r3, [r4, #1]
 80094a4:	2b2a      	cmp	r3, #42	; 0x2a
 80094a6:	d135      	bne.n	8009514 <_svfiprintf_r+0x188>
 80094a8:	9b03      	ldr	r3, [sp, #12]
 80094aa:	1d1a      	adds	r2, r3, #4
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	9203      	str	r2, [sp, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	bfb8      	it	lt
 80094b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80094b8:	3402      	adds	r4, #2
 80094ba:	9305      	str	r3, [sp, #20]
 80094bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009588 <_svfiprintf_r+0x1fc>
 80094c0:	7821      	ldrb	r1, [r4, #0]
 80094c2:	2203      	movs	r2, #3
 80094c4:	4650      	mov	r0, sl
 80094c6:	f7f6 fe93 	bl	80001f0 <memchr>
 80094ca:	b140      	cbz	r0, 80094de <_svfiprintf_r+0x152>
 80094cc:	2340      	movs	r3, #64	; 0x40
 80094ce:	eba0 000a 	sub.w	r0, r0, sl
 80094d2:	fa03 f000 	lsl.w	r0, r3, r0
 80094d6:	9b04      	ldr	r3, [sp, #16]
 80094d8:	4303      	orrs	r3, r0
 80094da:	3401      	adds	r4, #1
 80094dc:	9304      	str	r3, [sp, #16]
 80094de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094e2:	4826      	ldr	r0, [pc, #152]	; (800957c <_svfiprintf_r+0x1f0>)
 80094e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094e8:	2206      	movs	r2, #6
 80094ea:	f7f6 fe81 	bl	80001f0 <memchr>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d038      	beq.n	8009564 <_svfiprintf_r+0x1d8>
 80094f2:	4b23      	ldr	r3, [pc, #140]	; (8009580 <_svfiprintf_r+0x1f4>)
 80094f4:	bb1b      	cbnz	r3, 800953e <_svfiprintf_r+0x1b2>
 80094f6:	9b03      	ldr	r3, [sp, #12]
 80094f8:	3307      	adds	r3, #7
 80094fa:	f023 0307 	bic.w	r3, r3, #7
 80094fe:	3308      	adds	r3, #8
 8009500:	9303      	str	r3, [sp, #12]
 8009502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009504:	4433      	add	r3, r6
 8009506:	9309      	str	r3, [sp, #36]	; 0x24
 8009508:	e767      	b.n	80093da <_svfiprintf_r+0x4e>
 800950a:	fb0c 3202 	mla	r2, ip, r2, r3
 800950e:	460c      	mov	r4, r1
 8009510:	2001      	movs	r0, #1
 8009512:	e7a5      	b.n	8009460 <_svfiprintf_r+0xd4>
 8009514:	2300      	movs	r3, #0
 8009516:	3401      	adds	r4, #1
 8009518:	9305      	str	r3, [sp, #20]
 800951a:	4619      	mov	r1, r3
 800951c:	f04f 0c0a 	mov.w	ip, #10
 8009520:	4620      	mov	r0, r4
 8009522:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009526:	3a30      	subs	r2, #48	; 0x30
 8009528:	2a09      	cmp	r2, #9
 800952a:	d903      	bls.n	8009534 <_svfiprintf_r+0x1a8>
 800952c:	2b00      	cmp	r3, #0
 800952e:	d0c5      	beq.n	80094bc <_svfiprintf_r+0x130>
 8009530:	9105      	str	r1, [sp, #20]
 8009532:	e7c3      	b.n	80094bc <_svfiprintf_r+0x130>
 8009534:	fb0c 2101 	mla	r1, ip, r1, r2
 8009538:	4604      	mov	r4, r0
 800953a:	2301      	movs	r3, #1
 800953c:	e7f0      	b.n	8009520 <_svfiprintf_r+0x194>
 800953e:	ab03      	add	r3, sp, #12
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	462a      	mov	r2, r5
 8009544:	4b0f      	ldr	r3, [pc, #60]	; (8009584 <_svfiprintf_r+0x1f8>)
 8009546:	a904      	add	r1, sp, #16
 8009548:	4638      	mov	r0, r7
 800954a:	f3af 8000 	nop.w
 800954e:	1c42      	adds	r2, r0, #1
 8009550:	4606      	mov	r6, r0
 8009552:	d1d6      	bne.n	8009502 <_svfiprintf_r+0x176>
 8009554:	89ab      	ldrh	r3, [r5, #12]
 8009556:	065b      	lsls	r3, r3, #25
 8009558:	f53f af2c 	bmi.w	80093b4 <_svfiprintf_r+0x28>
 800955c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800955e:	b01d      	add	sp, #116	; 0x74
 8009560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009564:	ab03      	add	r3, sp, #12
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	462a      	mov	r2, r5
 800956a:	4b06      	ldr	r3, [pc, #24]	; (8009584 <_svfiprintf_r+0x1f8>)
 800956c:	a904      	add	r1, sp, #16
 800956e:	4638      	mov	r0, r7
 8009570:	f000 f87a 	bl	8009668 <_printf_i>
 8009574:	e7eb      	b.n	800954e <_svfiprintf_r+0x1c2>
 8009576:	bf00      	nop
 8009578:	08009e0c 	.word	0x08009e0c
 800957c:	08009e16 	.word	0x08009e16
 8009580:	00000000 	.word	0x00000000
 8009584:	080092d5 	.word	0x080092d5
 8009588:	08009e12 	.word	0x08009e12

0800958c <_printf_common>:
 800958c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009590:	4616      	mov	r6, r2
 8009592:	4699      	mov	r9, r3
 8009594:	688a      	ldr	r2, [r1, #8]
 8009596:	690b      	ldr	r3, [r1, #16]
 8009598:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800959c:	4293      	cmp	r3, r2
 800959e:	bfb8      	it	lt
 80095a0:	4613      	movlt	r3, r2
 80095a2:	6033      	str	r3, [r6, #0]
 80095a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095a8:	4607      	mov	r7, r0
 80095aa:	460c      	mov	r4, r1
 80095ac:	b10a      	cbz	r2, 80095b2 <_printf_common+0x26>
 80095ae:	3301      	adds	r3, #1
 80095b0:	6033      	str	r3, [r6, #0]
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	0699      	lsls	r1, r3, #26
 80095b6:	bf42      	ittt	mi
 80095b8:	6833      	ldrmi	r3, [r6, #0]
 80095ba:	3302      	addmi	r3, #2
 80095bc:	6033      	strmi	r3, [r6, #0]
 80095be:	6825      	ldr	r5, [r4, #0]
 80095c0:	f015 0506 	ands.w	r5, r5, #6
 80095c4:	d106      	bne.n	80095d4 <_printf_common+0x48>
 80095c6:	f104 0a19 	add.w	sl, r4, #25
 80095ca:	68e3      	ldr	r3, [r4, #12]
 80095cc:	6832      	ldr	r2, [r6, #0]
 80095ce:	1a9b      	subs	r3, r3, r2
 80095d0:	42ab      	cmp	r3, r5
 80095d2:	dc26      	bgt.n	8009622 <_printf_common+0x96>
 80095d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095d8:	1e13      	subs	r3, r2, #0
 80095da:	6822      	ldr	r2, [r4, #0]
 80095dc:	bf18      	it	ne
 80095de:	2301      	movne	r3, #1
 80095e0:	0692      	lsls	r2, r2, #26
 80095e2:	d42b      	bmi.n	800963c <_printf_common+0xb0>
 80095e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095e8:	4649      	mov	r1, r9
 80095ea:	4638      	mov	r0, r7
 80095ec:	47c0      	blx	r8
 80095ee:	3001      	adds	r0, #1
 80095f0:	d01e      	beq.n	8009630 <_printf_common+0xa4>
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	68e5      	ldr	r5, [r4, #12]
 80095f6:	6832      	ldr	r2, [r6, #0]
 80095f8:	f003 0306 	and.w	r3, r3, #6
 80095fc:	2b04      	cmp	r3, #4
 80095fe:	bf08      	it	eq
 8009600:	1aad      	subeq	r5, r5, r2
 8009602:	68a3      	ldr	r3, [r4, #8]
 8009604:	6922      	ldr	r2, [r4, #16]
 8009606:	bf0c      	ite	eq
 8009608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800960c:	2500      	movne	r5, #0
 800960e:	4293      	cmp	r3, r2
 8009610:	bfc4      	itt	gt
 8009612:	1a9b      	subgt	r3, r3, r2
 8009614:	18ed      	addgt	r5, r5, r3
 8009616:	2600      	movs	r6, #0
 8009618:	341a      	adds	r4, #26
 800961a:	42b5      	cmp	r5, r6
 800961c:	d11a      	bne.n	8009654 <_printf_common+0xc8>
 800961e:	2000      	movs	r0, #0
 8009620:	e008      	b.n	8009634 <_printf_common+0xa8>
 8009622:	2301      	movs	r3, #1
 8009624:	4652      	mov	r2, sl
 8009626:	4649      	mov	r1, r9
 8009628:	4638      	mov	r0, r7
 800962a:	47c0      	blx	r8
 800962c:	3001      	adds	r0, #1
 800962e:	d103      	bne.n	8009638 <_printf_common+0xac>
 8009630:	f04f 30ff 	mov.w	r0, #4294967295
 8009634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009638:	3501      	adds	r5, #1
 800963a:	e7c6      	b.n	80095ca <_printf_common+0x3e>
 800963c:	18e1      	adds	r1, r4, r3
 800963e:	1c5a      	adds	r2, r3, #1
 8009640:	2030      	movs	r0, #48	; 0x30
 8009642:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009646:	4422      	add	r2, r4
 8009648:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800964c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009650:	3302      	adds	r3, #2
 8009652:	e7c7      	b.n	80095e4 <_printf_common+0x58>
 8009654:	2301      	movs	r3, #1
 8009656:	4622      	mov	r2, r4
 8009658:	4649      	mov	r1, r9
 800965a:	4638      	mov	r0, r7
 800965c:	47c0      	blx	r8
 800965e:	3001      	adds	r0, #1
 8009660:	d0e6      	beq.n	8009630 <_printf_common+0xa4>
 8009662:	3601      	adds	r6, #1
 8009664:	e7d9      	b.n	800961a <_printf_common+0x8e>
	...

08009668 <_printf_i>:
 8009668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800966c:	7e0f      	ldrb	r7, [r1, #24]
 800966e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009670:	2f78      	cmp	r7, #120	; 0x78
 8009672:	4691      	mov	r9, r2
 8009674:	4680      	mov	r8, r0
 8009676:	460c      	mov	r4, r1
 8009678:	469a      	mov	sl, r3
 800967a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800967e:	d807      	bhi.n	8009690 <_printf_i+0x28>
 8009680:	2f62      	cmp	r7, #98	; 0x62
 8009682:	d80a      	bhi.n	800969a <_printf_i+0x32>
 8009684:	2f00      	cmp	r7, #0
 8009686:	f000 80d8 	beq.w	800983a <_printf_i+0x1d2>
 800968a:	2f58      	cmp	r7, #88	; 0x58
 800968c:	f000 80a3 	beq.w	80097d6 <_printf_i+0x16e>
 8009690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009694:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009698:	e03a      	b.n	8009710 <_printf_i+0xa8>
 800969a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800969e:	2b15      	cmp	r3, #21
 80096a0:	d8f6      	bhi.n	8009690 <_printf_i+0x28>
 80096a2:	a101      	add	r1, pc, #4	; (adr r1, 80096a8 <_printf_i+0x40>)
 80096a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096a8:	08009701 	.word	0x08009701
 80096ac:	08009715 	.word	0x08009715
 80096b0:	08009691 	.word	0x08009691
 80096b4:	08009691 	.word	0x08009691
 80096b8:	08009691 	.word	0x08009691
 80096bc:	08009691 	.word	0x08009691
 80096c0:	08009715 	.word	0x08009715
 80096c4:	08009691 	.word	0x08009691
 80096c8:	08009691 	.word	0x08009691
 80096cc:	08009691 	.word	0x08009691
 80096d0:	08009691 	.word	0x08009691
 80096d4:	08009821 	.word	0x08009821
 80096d8:	08009745 	.word	0x08009745
 80096dc:	08009803 	.word	0x08009803
 80096e0:	08009691 	.word	0x08009691
 80096e4:	08009691 	.word	0x08009691
 80096e8:	08009843 	.word	0x08009843
 80096ec:	08009691 	.word	0x08009691
 80096f0:	08009745 	.word	0x08009745
 80096f4:	08009691 	.word	0x08009691
 80096f8:	08009691 	.word	0x08009691
 80096fc:	0800980b 	.word	0x0800980b
 8009700:	682b      	ldr	r3, [r5, #0]
 8009702:	1d1a      	adds	r2, r3, #4
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	602a      	str	r2, [r5, #0]
 8009708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800970c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009710:	2301      	movs	r3, #1
 8009712:	e0a3      	b.n	800985c <_printf_i+0x1f4>
 8009714:	6820      	ldr	r0, [r4, #0]
 8009716:	6829      	ldr	r1, [r5, #0]
 8009718:	0606      	lsls	r6, r0, #24
 800971a:	f101 0304 	add.w	r3, r1, #4
 800971e:	d50a      	bpl.n	8009736 <_printf_i+0xce>
 8009720:	680e      	ldr	r6, [r1, #0]
 8009722:	602b      	str	r3, [r5, #0]
 8009724:	2e00      	cmp	r6, #0
 8009726:	da03      	bge.n	8009730 <_printf_i+0xc8>
 8009728:	232d      	movs	r3, #45	; 0x2d
 800972a:	4276      	negs	r6, r6
 800972c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009730:	485e      	ldr	r0, [pc, #376]	; (80098ac <_printf_i+0x244>)
 8009732:	230a      	movs	r3, #10
 8009734:	e019      	b.n	800976a <_printf_i+0x102>
 8009736:	680e      	ldr	r6, [r1, #0]
 8009738:	602b      	str	r3, [r5, #0]
 800973a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800973e:	bf18      	it	ne
 8009740:	b236      	sxthne	r6, r6
 8009742:	e7ef      	b.n	8009724 <_printf_i+0xbc>
 8009744:	682b      	ldr	r3, [r5, #0]
 8009746:	6820      	ldr	r0, [r4, #0]
 8009748:	1d19      	adds	r1, r3, #4
 800974a:	6029      	str	r1, [r5, #0]
 800974c:	0601      	lsls	r1, r0, #24
 800974e:	d501      	bpl.n	8009754 <_printf_i+0xec>
 8009750:	681e      	ldr	r6, [r3, #0]
 8009752:	e002      	b.n	800975a <_printf_i+0xf2>
 8009754:	0646      	lsls	r6, r0, #25
 8009756:	d5fb      	bpl.n	8009750 <_printf_i+0xe8>
 8009758:	881e      	ldrh	r6, [r3, #0]
 800975a:	4854      	ldr	r0, [pc, #336]	; (80098ac <_printf_i+0x244>)
 800975c:	2f6f      	cmp	r7, #111	; 0x6f
 800975e:	bf0c      	ite	eq
 8009760:	2308      	moveq	r3, #8
 8009762:	230a      	movne	r3, #10
 8009764:	2100      	movs	r1, #0
 8009766:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800976a:	6865      	ldr	r5, [r4, #4]
 800976c:	60a5      	str	r5, [r4, #8]
 800976e:	2d00      	cmp	r5, #0
 8009770:	bfa2      	ittt	ge
 8009772:	6821      	ldrge	r1, [r4, #0]
 8009774:	f021 0104 	bicge.w	r1, r1, #4
 8009778:	6021      	strge	r1, [r4, #0]
 800977a:	b90e      	cbnz	r6, 8009780 <_printf_i+0x118>
 800977c:	2d00      	cmp	r5, #0
 800977e:	d04d      	beq.n	800981c <_printf_i+0x1b4>
 8009780:	4615      	mov	r5, r2
 8009782:	fbb6 f1f3 	udiv	r1, r6, r3
 8009786:	fb03 6711 	mls	r7, r3, r1, r6
 800978a:	5dc7      	ldrb	r7, [r0, r7]
 800978c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009790:	4637      	mov	r7, r6
 8009792:	42bb      	cmp	r3, r7
 8009794:	460e      	mov	r6, r1
 8009796:	d9f4      	bls.n	8009782 <_printf_i+0x11a>
 8009798:	2b08      	cmp	r3, #8
 800979a:	d10b      	bne.n	80097b4 <_printf_i+0x14c>
 800979c:	6823      	ldr	r3, [r4, #0]
 800979e:	07de      	lsls	r6, r3, #31
 80097a0:	d508      	bpl.n	80097b4 <_printf_i+0x14c>
 80097a2:	6923      	ldr	r3, [r4, #16]
 80097a4:	6861      	ldr	r1, [r4, #4]
 80097a6:	4299      	cmp	r1, r3
 80097a8:	bfde      	ittt	le
 80097aa:	2330      	movle	r3, #48	; 0x30
 80097ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097b4:	1b52      	subs	r2, r2, r5
 80097b6:	6122      	str	r2, [r4, #16]
 80097b8:	f8cd a000 	str.w	sl, [sp]
 80097bc:	464b      	mov	r3, r9
 80097be:	aa03      	add	r2, sp, #12
 80097c0:	4621      	mov	r1, r4
 80097c2:	4640      	mov	r0, r8
 80097c4:	f7ff fee2 	bl	800958c <_printf_common>
 80097c8:	3001      	adds	r0, #1
 80097ca:	d14c      	bne.n	8009866 <_printf_i+0x1fe>
 80097cc:	f04f 30ff 	mov.w	r0, #4294967295
 80097d0:	b004      	add	sp, #16
 80097d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d6:	4835      	ldr	r0, [pc, #212]	; (80098ac <_printf_i+0x244>)
 80097d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80097dc:	6829      	ldr	r1, [r5, #0]
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80097e4:	6029      	str	r1, [r5, #0]
 80097e6:	061d      	lsls	r5, r3, #24
 80097e8:	d514      	bpl.n	8009814 <_printf_i+0x1ac>
 80097ea:	07df      	lsls	r7, r3, #31
 80097ec:	bf44      	itt	mi
 80097ee:	f043 0320 	orrmi.w	r3, r3, #32
 80097f2:	6023      	strmi	r3, [r4, #0]
 80097f4:	b91e      	cbnz	r6, 80097fe <_printf_i+0x196>
 80097f6:	6823      	ldr	r3, [r4, #0]
 80097f8:	f023 0320 	bic.w	r3, r3, #32
 80097fc:	6023      	str	r3, [r4, #0]
 80097fe:	2310      	movs	r3, #16
 8009800:	e7b0      	b.n	8009764 <_printf_i+0xfc>
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	f043 0320 	orr.w	r3, r3, #32
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	2378      	movs	r3, #120	; 0x78
 800980c:	4828      	ldr	r0, [pc, #160]	; (80098b0 <_printf_i+0x248>)
 800980e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009812:	e7e3      	b.n	80097dc <_printf_i+0x174>
 8009814:	0659      	lsls	r1, r3, #25
 8009816:	bf48      	it	mi
 8009818:	b2b6      	uxthmi	r6, r6
 800981a:	e7e6      	b.n	80097ea <_printf_i+0x182>
 800981c:	4615      	mov	r5, r2
 800981e:	e7bb      	b.n	8009798 <_printf_i+0x130>
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	6826      	ldr	r6, [r4, #0]
 8009824:	6961      	ldr	r1, [r4, #20]
 8009826:	1d18      	adds	r0, r3, #4
 8009828:	6028      	str	r0, [r5, #0]
 800982a:	0635      	lsls	r5, r6, #24
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	d501      	bpl.n	8009834 <_printf_i+0x1cc>
 8009830:	6019      	str	r1, [r3, #0]
 8009832:	e002      	b.n	800983a <_printf_i+0x1d2>
 8009834:	0670      	lsls	r0, r6, #25
 8009836:	d5fb      	bpl.n	8009830 <_printf_i+0x1c8>
 8009838:	8019      	strh	r1, [r3, #0]
 800983a:	2300      	movs	r3, #0
 800983c:	6123      	str	r3, [r4, #16]
 800983e:	4615      	mov	r5, r2
 8009840:	e7ba      	b.n	80097b8 <_printf_i+0x150>
 8009842:	682b      	ldr	r3, [r5, #0]
 8009844:	1d1a      	adds	r2, r3, #4
 8009846:	602a      	str	r2, [r5, #0]
 8009848:	681d      	ldr	r5, [r3, #0]
 800984a:	6862      	ldr	r2, [r4, #4]
 800984c:	2100      	movs	r1, #0
 800984e:	4628      	mov	r0, r5
 8009850:	f7f6 fcce 	bl	80001f0 <memchr>
 8009854:	b108      	cbz	r0, 800985a <_printf_i+0x1f2>
 8009856:	1b40      	subs	r0, r0, r5
 8009858:	6060      	str	r0, [r4, #4]
 800985a:	6863      	ldr	r3, [r4, #4]
 800985c:	6123      	str	r3, [r4, #16]
 800985e:	2300      	movs	r3, #0
 8009860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009864:	e7a8      	b.n	80097b8 <_printf_i+0x150>
 8009866:	6923      	ldr	r3, [r4, #16]
 8009868:	462a      	mov	r2, r5
 800986a:	4649      	mov	r1, r9
 800986c:	4640      	mov	r0, r8
 800986e:	47d0      	blx	sl
 8009870:	3001      	adds	r0, #1
 8009872:	d0ab      	beq.n	80097cc <_printf_i+0x164>
 8009874:	6823      	ldr	r3, [r4, #0]
 8009876:	079b      	lsls	r3, r3, #30
 8009878:	d413      	bmi.n	80098a2 <_printf_i+0x23a>
 800987a:	68e0      	ldr	r0, [r4, #12]
 800987c:	9b03      	ldr	r3, [sp, #12]
 800987e:	4298      	cmp	r0, r3
 8009880:	bfb8      	it	lt
 8009882:	4618      	movlt	r0, r3
 8009884:	e7a4      	b.n	80097d0 <_printf_i+0x168>
 8009886:	2301      	movs	r3, #1
 8009888:	4632      	mov	r2, r6
 800988a:	4649      	mov	r1, r9
 800988c:	4640      	mov	r0, r8
 800988e:	47d0      	blx	sl
 8009890:	3001      	adds	r0, #1
 8009892:	d09b      	beq.n	80097cc <_printf_i+0x164>
 8009894:	3501      	adds	r5, #1
 8009896:	68e3      	ldr	r3, [r4, #12]
 8009898:	9903      	ldr	r1, [sp, #12]
 800989a:	1a5b      	subs	r3, r3, r1
 800989c:	42ab      	cmp	r3, r5
 800989e:	dcf2      	bgt.n	8009886 <_printf_i+0x21e>
 80098a0:	e7eb      	b.n	800987a <_printf_i+0x212>
 80098a2:	2500      	movs	r5, #0
 80098a4:	f104 0619 	add.w	r6, r4, #25
 80098a8:	e7f5      	b.n	8009896 <_printf_i+0x22e>
 80098aa:	bf00      	nop
 80098ac:	08009e1d 	.word	0x08009e1d
 80098b0:	08009e2e 	.word	0x08009e2e

080098b4 <memmove>:
 80098b4:	4288      	cmp	r0, r1
 80098b6:	b510      	push	{r4, lr}
 80098b8:	eb01 0402 	add.w	r4, r1, r2
 80098bc:	d902      	bls.n	80098c4 <memmove+0x10>
 80098be:	4284      	cmp	r4, r0
 80098c0:	4623      	mov	r3, r4
 80098c2:	d807      	bhi.n	80098d4 <memmove+0x20>
 80098c4:	1e43      	subs	r3, r0, #1
 80098c6:	42a1      	cmp	r1, r4
 80098c8:	d008      	beq.n	80098dc <memmove+0x28>
 80098ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098d2:	e7f8      	b.n	80098c6 <memmove+0x12>
 80098d4:	4402      	add	r2, r0
 80098d6:	4601      	mov	r1, r0
 80098d8:	428a      	cmp	r2, r1
 80098da:	d100      	bne.n	80098de <memmove+0x2a>
 80098dc:	bd10      	pop	{r4, pc}
 80098de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098e6:	e7f7      	b.n	80098d8 <memmove+0x24>

080098e8 <_free_r>:
 80098e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098ea:	2900      	cmp	r1, #0
 80098ec:	d044      	beq.n	8009978 <_free_r+0x90>
 80098ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098f2:	9001      	str	r0, [sp, #4]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f1a1 0404 	sub.w	r4, r1, #4
 80098fa:	bfb8      	it	lt
 80098fc:	18e4      	addlt	r4, r4, r3
 80098fe:	f000 f913 	bl	8009b28 <__malloc_lock>
 8009902:	4a1e      	ldr	r2, [pc, #120]	; (800997c <_free_r+0x94>)
 8009904:	9801      	ldr	r0, [sp, #4]
 8009906:	6813      	ldr	r3, [r2, #0]
 8009908:	b933      	cbnz	r3, 8009918 <_free_r+0x30>
 800990a:	6063      	str	r3, [r4, #4]
 800990c:	6014      	str	r4, [r2, #0]
 800990e:	b003      	add	sp, #12
 8009910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009914:	f000 b90e 	b.w	8009b34 <__malloc_unlock>
 8009918:	42a3      	cmp	r3, r4
 800991a:	d908      	bls.n	800992e <_free_r+0x46>
 800991c:	6825      	ldr	r5, [r4, #0]
 800991e:	1961      	adds	r1, r4, r5
 8009920:	428b      	cmp	r3, r1
 8009922:	bf01      	itttt	eq
 8009924:	6819      	ldreq	r1, [r3, #0]
 8009926:	685b      	ldreq	r3, [r3, #4]
 8009928:	1949      	addeq	r1, r1, r5
 800992a:	6021      	streq	r1, [r4, #0]
 800992c:	e7ed      	b.n	800990a <_free_r+0x22>
 800992e:	461a      	mov	r2, r3
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	b10b      	cbz	r3, 8009938 <_free_r+0x50>
 8009934:	42a3      	cmp	r3, r4
 8009936:	d9fa      	bls.n	800992e <_free_r+0x46>
 8009938:	6811      	ldr	r1, [r2, #0]
 800993a:	1855      	adds	r5, r2, r1
 800993c:	42a5      	cmp	r5, r4
 800993e:	d10b      	bne.n	8009958 <_free_r+0x70>
 8009940:	6824      	ldr	r4, [r4, #0]
 8009942:	4421      	add	r1, r4
 8009944:	1854      	adds	r4, r2, r1
 8009946:	42a3      	cmp	r3, r4
 8009948:	6011      	str	r1, [r2, #0]
 800994a:	d1e0      	bne.n	800990e <_free_r+0x26>
 800994c:	681c      	ldr	r4, [r3, #0]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	6053      	str	r3, [r2, #4]
 8009952:	4421      	add	r1, r4
 8009954:	6011      	str	r1, [r2, #0]
 8009956:	e7da      	b.n	800990e <_free_r+0x26>
 8009958:	d902      	bls.n	8009960 <_free_r+0x78>
 800995a:	230c      	movs	r3, #12
 800995c:	6003      	str	r3, [r0, #0]
 800995e:	e7d6      	b.n	800990e <_free_r+0x26>
 8009960:	6825      	ldr	r5, [r4, #0]
 8009962:	1961      	adds	r1, r4, r5
 8009964:	428b      	cmp	r3, r1
 8009966:	bf04      	itt	eq
 8009968:	6819      	ldreq	r1, [r3, #0]
 800996a:	685b      	ldreq	r3, [r3, #4]
 800996c:	6063      	str	r3, [r4, #4]
 800996e:	bf04      	itt	eq
 8009970:	1949      	addeq	r1, r1, r5
 8009972:	6021      	streq	r1, [r4, #0]
 8009974:	6054      	str	r4, [r2, #4]
 8009976:	e7ca      	b.n	800990e <_free_r+0x26>
 8009978:	b003      	add	sp, #12
 800997a:	bd30      	pop	{r4, r5, pc}
 800997c:	200008a8 	.word	0x200008a8

08009980 <sbrk_aligned>:
 8009980:	b570      	push	{r4, r5, r6, lr}
 8009982:	4e0e      	ldr	r6, [pc, #56]	; (80099bc <sbrk_aligned+0x3c>)
 8009984:	460c      	mov	r4, r1
 8009986:	6831      	ldr	r1, [r6, #0]
 8009988:	4605      	mov	r5, r0
 800998a:	b911      	cbnz	r1, 8009992 <sbrk_aligned+0x12>
 800998c:	f000 f8bc 	bl	8009b08 <_sbrk_r>
 8009990:	6030      	str	r0, [r6, #0]
 8009992:	4621      	mov	r1, r4
 8009994:	4628      	mov	r0, r5
 8009996:	f000 f8b7 	bl	8009b08 <_sbrk_r>
 800999a:	1c43      	adds	r3, r0, #1
 800999c:	d00a      	beq.n	80099b4 <sbrk_aligned+0x34>
 800999e:	1cc4      	adds	r4, r0, #3
 80099a0:	f024 0403 	bic.w	r4, r4, #3
 80099a4:	42a0      	cmp	r0, r4
 80099a6:	d007      	beq.n	80099b8 <sbrk_aligned+0x38>
 80099a8:	1a21      	subs	r1, r4, r0
 80099aa:	4628      	mov	r0, r5
 80099ac:	f000 f8ac 	bl	8009b08 <_sbrk_r>
 80099b0:	3001      	adds	r0, #1
 80099b2:	d101      	bne.n	80099b8 <sbrk_aligned+0x38>
 80099b4:	f04f 34ff 	mov.w	r4, #4294967295
 80099b8:	4620      	mov	r0, r4
 80099ba:	bd70      	pop	{r4, r5, r6, pc}
 80099bc:	200008ac 	.word	0x200008ac

080099c0 <_malloc_r>:
 80099c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c4:	1ccd      	adds	r5, r1, #3
 80099c6:	f025 0503 	bic.w	r5, r5, #3
 80099ca:	3508      	adds	r5, #8
 80099cc:	2d0c      	cmp	r5, #12
 80099ce:	bf38      	it	cc
 80099d0:	250c      	movcc	r5, #12
 80099d2:	2d00      	cmp	r5, #0
 80099d4:	4607      	mov	r7, r0
 80099d6:	db01      	blt.n	80099dc <_malloc_r+0x1c>
 80099d8:	42a9      	cmp	r1, r5
 80099da:	d905      	bls.n	80099e8 <_malloc_r+0x28>
 80099dc:	230c      	movs	r3, #12
 80099de:	603b      	str	r3, [r7, #0]
 80099e0:	2600      	movs	r6, #0
 80099e2:	4630      	mov	r0, r6
 80099e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e8:	4e2e      	ldr	r6, [pc, #184]	; (8009aa4 <_malloc_r+0xe4>)
 80099ea:	f000 f89d 	bl	8009b28 <__malloc_lock>
 80099ee:	6833      	ldr	r3, [r6, #0]
 80099f0:	461c      	mov	r4, r3
 80099f2:	bb34      	cbnz	r4, 8009a42 <_malloc_r+0x82>
 80099f4:	4629      	mov	r1, r5
 80099f6:	4638      	mov	r0, r7
 80099f8:	f7ff ffc2 	bl	8009980 <sbrk_aligned>
 80099fc:	1c43      	adds	r3, r0, #1
 80099fe:	4604      	mov	r4, r0
 8009a00:	d14d      	bne.n	8009a9e <_malloc_r+0xde>
 8009a02:	6834      	ldr	r4, [r6, #0]
 8009a04:	4626      	mov	r6, r4
 8009a06:	2e00      	cmp	r6, #0
 8009a08:	d140      	bne.n	8009a8c <_malloc_r+0xcc>
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	4638      	mov	r0, r7
 8009a10:	eb04 0803 	add.w	r8, r4, r3
 8009a14:	f000 f878 	bl	8009b08 <_sbrk_r>
 8009a18:	4580      	cmp	r8, r0
 8009a1a:	d13a      	bne.n	8009a92 <_malloc_r+0xd2>
 8009a1c:	6821      	ldr	r1, [r4, #0]
 8009a1e:	3503      	adds	r5, #3
 8009a20:	1a6d      	subs	r5, r5, r1
 8009a22:	f025 0503 	bic.w	r5, r5, #3
 8009a26:	3508      	adds	r5, #8
 8009a28:	2d0c      	cmp	r5, #12
 8009a2a:	bf38      	it	cc
 8009a2c:	250c      	movcc	r5, #12
 8009a2e:	4629      	mov	r1, r5
 8009a30:	4638      	mov	r0, r7
 8009a32:	f7ff ffa5 	bl	8009980 <sbrk_aligned>
 8009a36:	3001      	adds	r0, #1
 8009a38:	d02b      	beq.n	8009a92 <_malloc_r+0xd2>
 8009a3a:	6823      	ldr	r3, [r4, #0]
 8009a3c:	442b      	add	r3, r5
 8009a3e:	6023      	str	r3, [r4, #0]
 8009a40:	e00e      	b.n	8009a60 <_malloc_r+0xa0>
 8009a42:	6822      	ldr	r2, [r4, #0]
 8009a44:	1b52      	subs	r2, r2, r5
 8009a46:	d41e      	bmi.n	8009a86 <_malloc_r+0xc6>
 8009a48:	2a0b      	cmp	r2, #11
 8009a4a:	d916      	bls.n	8009a7a <_malloc_r+0xba>
 8009a4c:	1961      	adds	r1, r4, r5
 8009a4e:	42a3      	cmp	r3, r4
 8009a50:	6025      	str	r5, [r4, #0]
 8009a52:	bf18      	it	ne
 8009a54:	6059      	strne	r1, [r3, #4]
 8009a56:	6863      	ldr	r3, [r4, #4]
 8009a58:	bf08      	it	eq
 8009a5a:	6031      	streq	r1, [r6, #0]
 8009a5c:	5162      	str	r2, [r4, r5]
 8009a5e:	604b      	str	r3, [r1, #4]
 8009a60:	4638      	mov	r0, r7
 8009a62:	f104 060b 	add.w	r6, r4, #11
 8009a66:	f000 f865 	bl	8009b34 <__malloc_unlock>
 8009a6a:	f026 0607 	bic.w	r6, r6, #7
 8009a6e:	1d23      	adds	r3, r4, #4
 8009a70:	1af2      	subs	r2, r6, r3
 8009a72:	d0b6      	beq.n	80099e2 <_malloc_r+0x22>
 8009a74:	1b9b      	subs	r3, r3, r6
 8009a76:	50a3      	str	r3, [r4, r2]
 8009a78:	e7b3      	b.n	80099e2 <_malloc_r+0x22>
 8009a7a:	6862      	ldr	r2, [r4, #4]
 8009a7c:	42a3      	cmp	r3, r4
 8009a7e:	bf0c      	ite	eq
 8009a80:	6032      	streq	r2, [r6, #0]
 8009a82:	605a      	strne	r2, [r3, #4]
 8009a84:	e7ec      	b.n	8009a60 <_malloc_r+0xa0>
 8009a86:	4623      	mov	r3, r4
 8009a88:	6864      	ldr	r4, [r4, #4]
 8009a8a:	e7b2      	b.n	80099f2 <_malloc_r+0x32>
 8009a8c:	4634      	mov	r4, r6
 8009a8e:	6876      	ldr	r6, [r6, #4]
 8009a90:	e7b9      	b.n	8009a06 <_malloc_r+0x46>
 8009a92:	230c      	movs	r3, #12
 8009a94:	603b      	str	r3, [r7, #0]
 8009a96:	4638      	mov	r0, r7
 8009a98:	f000 f84c 	bl	8009b34 <__malloc_unlock>
 8009a9c:	e7a1      	b.n	80099e2 <_malloc_r+0x22>
 8009a9e:	6025      	str	r5, [r4, #0]
 8009aa0:	e7de      	b.n	8009a60 <_malloc_r+0xa0>
 8009aa2:	bf00      	nop
 8009aa4:	200008a8 	.word	0x200008a8

08009aa8 <_realloc_r>:
 8009aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aac:	4680      	mov	r8, r0
 8009aae:	4614      	mov	r4, r2
 8009ab0:	460e      	mov	r6, r1
 8009ab2:	b921      	cbnz	r1, 8009abe <_realloc_r+0x16>
 8009ab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab8:	4611      	mov	r1, r2
 8009aba:	f7ff bf81 	b.w	80099c0 <_malloc_r>
 8009abe:	b92a      	cbnz	r2, 8009acc <_realloc_r+0x24>
 8009ac0:	f7ff ff12 	bl	80098e8 <_free_r>
 8009ac4:	4625      	mov	r5, r4
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009acc:	f000 f838 	bl	8009b40 <_malloc_usable_size_r>
 8009ad0:	4284      	cmp	r4, r0
 8009ad2:	4607      	mov	r7, r0
 8009ad4:	d802      	bhi.n	8009adc <_realloc_r+0x34>
 8009ad6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ada:	d812      	bhi.n	8009b02 <_realloc_r+0x5a>
 8009adc:	4621      	mov	r1, r4
 8009ade:	4640      	mov	r0, r8
 8009ae0:	f7ff ff6e 	bl	80099c0 <_malloc_r>
 8009ae4:	4605      	mov	r5, r0
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	d0ed      	beq.n	8009ac6 <_realloc_r+0x1e>
 8009aea:	42bc      	cmp	r4, r7
 8009aec:	4622      	mov	r2, r4
 8009aee:	4631      	mov	r1, r6
 8009af0:	bf28      	it	cs
 8009af2:	463a      	movcs	r2, r7
 8009af4:	f7ff fbb8 	bl	8009268 <memcpy>
 8009af8:	4631      	mov	r1, r6
 8009afa:	4640      	mov	r0, r8
 8009afc:	f7ff fef4 	bl	80098e8 <_free_r>
 8009b00:	e7e1      	b.n	8009ac6 <_realloc_r+0x1e>
 8009b02:	4635      	mov	r5, r6
 8009b04:	e7df      	b.n	8009ac6 <_realloc_r+0x1e>
	...

08009b08 <_sbrk_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4d06      	ldr	r5, [pc, #24]	; (8009b24 <_sbrk_r+0x1c>)
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	4604      	mov	r4, r0
 8009b10:	4608      	mov	r0, r1
 8009b12:	602b      	str	r3, [r5, #0]
 8009b14:	f7fb fb02 	bl	800511c <_sbrk>
 8009b18:	1c43      	adds	r3, r0, #1
 8009b1a:	d102      	bne.n	8009b22 <_sbrk_r+0x1a>
 8009b1c:	682b      	ldr	r3, [r5, #0]
 8009b1e:	b103      	cbz	r3, 8009b22 <_sbrk_r+0x1a>
 8009b20:	6023      	str	r3, [r4, #0]
 8009b22:	bd38      	pop	{r3, r4, r5, pc}
 8009b24:	200008b0 	.word	0x200008b0

08009b28 <__malloc_lock>:
 8009b28:	4801      	ldr	r0, [pc, #4]	; (8009b30 <__malloc_lock+0x8>)
 8009b2a:	f000 b811 	b.w	8009b50 <__retarget_lock_acquire_recursive>
 8009b2e:	bf00      	nop
 8009b30:	200008b4 	.word	0x200008b4

08009b34 <__malloc_unlock>:
 8009b34:	4801      	ldr	r0, [pc, #4]	; (8009b3c <__malloc_unlock+0x8>)
 8009b36:	f000 b80c 	b.w	8009b52 <__retarget_lock_release_recursive>
 8009b3a:	bf00      	nop
 8009b3c:	200008b4 	.word	0x200008b4

08009b40 <_malloc_usable_size_r>:
 8009b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b44:	1f18      	subs	r0, r3, #4
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	bfbc      	itt	lt
 8009b4a:	580b      	ldrlt	r3, [r1, r0]
 8009b4c:	18c0      	addlt	r0, r0, r3
 8009b4e:	4770      	bx	lr

08009b50 <__retarget_lock_acquire_recursive>:
 8009b50:	4770      	bx	lr

08009b52 <__retarget_lock_release_recursive>:
 8009b52:	4770      	bx	lr

08009b54 <_init>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	bf00      	nop
 8009b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b5a:	bc08      	pop	{r3}
 8009b5c:	469e      	mov	lr, r3
 8009b5e:	4770      	bx	lr

08009b60 <_fini>:
 8009b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b62:	bf00      	nop
 8009b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b66:	bc08      	pop	{r3}
 8009b68:	469e      	mov	lr, r3
 8009b6a:	4770      	bx	lr
