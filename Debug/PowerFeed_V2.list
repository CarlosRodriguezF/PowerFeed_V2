
PowerFeed_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005554  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057b4  080057b4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080057b4  080057b4  000157b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057bc  080057bc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057bc  080057bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057c0  080057c0  000157c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080057c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000084  08005848  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08005848  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d429  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c76  00000000  00000000  0002d4dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  0002f158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  0002ff18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017076  00000000  00000000  00030c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f012  00000000  00000000  00047c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f936  00000000  00000000  00056ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e65d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee4  00000000  00000000  000e6628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080056dc 	.word	0x080056dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	080056dc 	.word	0x080056dc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2uiz>:
 8000608:	004a      	lsls	r2, r1, #1
 800060a:	d211      	bcs.n	8000630 <__aeabi_d2uiz+0x28>
 800060c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000610:	d211      	bcs.n	8000636 <__aeabi_d2uiz+0x2e>
 8000612:	d50d      	bpl.n	8000630 <__aeabi_d2uiz+0x28>
 8000614:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000618:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800061c:	d40e      	bmi.n	800063c <__aeabi_d2uiz+0x34>
 800061e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000626:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800062a:	fa23 f002 	lsr.w	r0, r3, r2
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800063a:	d102      	bne.n	8000642 <__aeabi_d2uiz+0x3a>
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b974 	b.w	8000948 <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	4604      	mov	r4, r0
 8000680:	468e      	mov	lr, r1
 8000682:	2b00      	cmp	r3, #0
 8000684:	d14d      	bne.n	8000722 <__udivmoddi4+0xaa>
 8000686:	428a      	cmp	r2, r1
 8000688:	4694      	mov	ip, r2
 800068a:	d969      	bls.n	8000760 <__udivmoddi4+0xe8>
 800068c:	fab2 f282 	clz	r2, r2
 8000690:	b152      	cbz	r2, 80006a8 <__udivmoddi4+0x30>
 8000692:	fa01 f302 	lsl.w	r3, r1, r2
 8000696:	f1c2 0120 	rsb	r1, r2, #32
 800069a:	fa20 f101 	lsr.w	r1, r0, r1
 800069e:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a2:	ea41 0e03 	orr.w	lr, r1, r3
 80006a6:	4094      	lsls	r4, r2
 80006a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006ac:	0c21      	lsrs	r1, r4, #16
 80006ae:	fbbe f6f8 	udiv	r6, lr, r8
 80006b2:	fa1f f78c 	uxth.w	r7, ip
 80006b6:	fb08 e316 	mls	r3, r8, r6, lr
 80006ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006be:	fb06 f107 	mul.w	r1, r6, r7
 80006c2:	4299      	cmp	r1, r3
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x64>
 80006c6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ce:	f080 811f 	bcs.w	8000910 <__udivmoddi4+0x298>
 80006d2:	4299      	cmp	r1, r3
 80006d4:	f240 811c 	bls.w	8000910 <__udivmoddi4+0x298>
 80006d8:	3e02      	subs	r6, #2
 80006da:	4463      	add	r3, ip
 80006dc:	1a5b      	subs	r3, r3, r1
 80006de:	b2a4      	uxth	r4, r4
 80006e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006e4:	fb08 3310 	mls	r3, r8, r0, r3
 80006e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006ec:	fb00 f707 	mul.w	r7, r0, r7
 80006f0:	42a7      	cmp	r7, r4
 80006f2:	d90a      	bls.n	800070a <__udivmoddi4+0x92>
 80006f4:	eb1c 0404 	adds.w	r4, ip, r4
 80006f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006fc:	f080 810a 	bcs.w	8000914 <__udivmoddi4+0x29c>
 8000700:	42a7      	cmp	r7, r4
 8000702:	f240 8107 	bls.w	8000914 <__udivmoddi4+0x29c>
 8000706:	4464      	add	r4, ip
 8000708:	3802      	subs	r0, #2
 800070a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800070e:	1be4      	subs	r4, r4, r7
 8000710:	2600      	movs	r6, #0
 8000712:	b11d      	cbz	r5, 800071c <__udivmoddi4+0xa4>
 8000714:	40d4      	lsrs	r4, r2
 8000716:	2300      	movs	r3, #0
 8000718:	e9c5 4300 	strd	r4, r3, [r5]
 800071c:	4631      	mov	r1, r6
 800071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000722:	428b      	cmp	r3, r1
 8000724:	d909      	bls.n	800073a <__udivmoddi4+0xc2>
 8000726:	2d00      	cmp	r5, #0
 8000728:	f000 80ef 	beq.w	800090a <__udivmoddi4+0x292>
 800072c:	2600      	movs	r6, #0
 800072e:	e9c5 0100 	strd	r0, r1, [r5]
 8000732:	4630      	mov	r0, r6
 8000734:	4631      	mov	r1, r6
 8000736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073a:	fab3 f683 	clz	r6, r3
 800073e:	2e00      	cmp	r6, #0
 8000740:	d14a      	bne.n	80007d8 <__udivmoddi4+0x160>
 8000742:	428b      	cmp	r3, r1
 8000744:	d302      	bcc.n	800074c <__udivmoddi4+0xd4>
 8000746:	4282      	cmp	r2, r0
 8000748:	f200 80f9 	bhi.w	800093e <__udivmoddi4+0x2c6>
 800074c:	1a84      	subs	r4, r0, r2
 800074e:	eb61 0303 	sbc.w	r3, r1, r3
 8000752:	2001      	movs	r0, #1
 8000754:	469e      	mov	lr, r3
 8000756:	2d00      	cmp	r5, #0
 8000758:	d0e0      	beq.n	800071c <__udivmoddi4+0xa4>
 800075a:	e9c5 4e00 	strd	r4, lr, [r5]
 800075e:	e7dd      	b.n	800071c <__udivmoddi4+0xa4>
 8000760:	b902      	cbnz	r2, 8000764 <__udivmoddi4+0xec>
 8000762:	deff      	udf	#255	; 0xff
 8000764:	fab2 f282 	clz	r2, r2
 8000768:	2a00      	cmp	r2, #0
 800076a:	f040 8092 	bne.w	8000892 <__udivmoddi4+0x21a>
 800076e:	eba1 010c 	sub.w	r1, r1, ip
 8000772:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000776:	fa1f fe8c 	uxth.w	lr, ip
 800077a:	2601      	movs	r6, #1
 800077c:	0c20      	lsrs	r0, r4, #16
 800077e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000782:	fb07 1113 	mls	r1, r7, r3, r1
 8000786:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800078a:	fb0e f003 	mul.w	r0, lr, r3
 800078e:	4288      	cmp	r0, r1
 8000790:	d908      	bls.n	80007a4 <__udivmoddi4+0x12c>
 8000792:	eb1c 0101 	adds.w	r1, ip, r1
 8000796:	f103 38ff 	add.w	r8, r3, #4294967295
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x12a>
 800079c:	4288      	cmp	r0, r1
 800079e:	f200 80cb 	bhi.w	8000938 <__udivmoddi4+0x2c0>
 80007a2:	4643      	mov	r3, r8
 80007a4:	1a09      	subs	r1, r1, r0
 80007a6:	b2a4      	uxth	r4, r4
 80007a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007ac:	fb07 1110 	mls	r1, r7, r0, r1
 80007b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007b4:	fb0e fe00 	mul.w	lr, lr, r0
 80007b8:	45a6      	cmp	lr, r4
 80007ba:	d908      	bls.n	80007ce <__udivmoddi4+0x156>
 80007bc:	eb1c 0404 	adds.w	r4, ip, r4
 80007c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007c4:	d202      	bcs.n	80007cc <__udivmoddi4+0x154>
 80007c6:	45a6      	cmp	lr, r4
 80007c8:	f200 80bb 	bhi.w	8000942 <__udivmoddi4+0x2ca>
 80007cc:	4608      	mov	r0, r1
 80007ce:	eba4 040e 	sub.w	r4, r4, lr
 80007d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007d6:	e79c      	b.n	8000712 <__udivmoddi4+0x9a>
 80007d8:	f1c6 0720 	rsb	r7, r6, #32
 80007dc:	40b3      	lsls	r3, r6
 80007de:	fa22 fc07 	lsr.w	ip, r2, r7
 80007e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007e6:	fa20 f407 	lsr.w	r4, r0, r7
 80007ea:	fa01 f306 	lsl.w	r3, r1, r6
 80007ee:	431c      	orrs	r4, r3
 80007f0:	40f9      	lsrs	r1, r7
 80007f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007f6:	fa00 f306 	lsl.w	r3, r0, r6
 80007fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80007fe:	0c20      	lsrs	r0, r4, #16
 8000800:	fa1f fe8c 	uxth.w	lr, ip
 8000804:	fb09 1118 	mls	r1, r9, r8, r1
 8000808:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800080c:	fb08 f00e 	mul.w	r0, r8, lr
 8000810:	4288      	cmp	r0, r1
 8000812:	fa02 f206 	lsl.w	r2, r2, r6
 8000816:	d90b      	bls.n	8000830 <__udivmoddi4+0x1b8>
 8000818:	eb1c 0101 	adds.w	r1, ip, r1
 800081c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000820:	f080 8088 	bcs.w	8000934 <__udivmoddi4+0x2bc>
 8000824:	4288      	cmp	r0, r1
 8000826:	f240 8085 	bls.w	8000934 <__udivmoddi4+0x2bc>
 800082a:	f1a8 0802 	sub.w	r8, r8, #2
 800082e:	4461      	add	r1, ip
 8000830:	1a09      	subs	r1, r1, r0
 8000832:	b2a4      	uxth	r4, r4
 8000834:	fbb1 f0f9 	udiv	r0, r1, r9
 8000838:	fb09 1110 	mls	r1, r9, r0, r1
 800083c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000840:	fb00 fe0e 	mul.w	lr, r0, lr
 8000844:	458e      	cmp	lr, r1
 8000846:	d908      	bls.n	800085a <__udivmoddi4+0x1e2>
 8000848:	eb1c 0101 	adds.w	r1, ip, r1
 800084c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000850:	d26c      	bcs.n	800092c <__udivmoddi4+0x2b4>
 8000852:	458e      	cmp	lr, r1
 8000854:	d96a      	bls.n	800092c <__udivmoddi4+0x2b4>
 8000856:	3802      	subs	r0, #2
 8000858:	4461      	add	r1, ip
 800085a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800085e:	fba0 9402 	umull	r9, r4, r0, r2
 8000862:	eba1 010e 	sub.w	r1, r1, lr
 8000866:	42a1      	cmp	r1, r4
 8000868:	46c8      	mov	r8, r9
 800086a:	46a6      	mov	lr, r4
 800086c:	d356      	bcc.n	800091c <__udivmoddi4+0x2a4>
 800086e:	d053      	beq.n	8000918 <__udivmoddi4+0x2a0>
 8000870:	b15d      	cbz	r5, 800088a <__udivmoddi4+0x212>
 8000872:	ebb3 0208 	subs.w	r2, r3, r8
 8000876:	eb61 010e 	sbc.w	r1, r1, lr
 800087a:	fa01 f707 	lsl.w	r7, r1, r7
 800087e:	fa22 f306 	lsr.w	r3, r2, r6
 8000882:	40f1      	lsrs	r1, r6
 8000884:	431f      	orrs	r7, r3
 8000886:	e9c5 7100 	strd	r7, r1, [r5]
 800088a:	2600      	movs	r6, #0
 800088c:	4631      	mov	r1, r6
 800088e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000892:	f1c2 0320 	rsb	r3, r2, #32
 8000896:	40d8      	lsrs	r0, r3
 8000898:	fa0c fc02 	lsl.w	ip, ip, r2
 800089c:	fa21 f303 	lsr.w	r3, r1, r3
 80008a0:	4091      	lsls	r1, r2
 80008a2:	4301      	orrs	r1, r0
 80008a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a8:	fa1f fe8c 	uxth.w	lr, ip
 80008ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80008b0:	fb07 3610 	mls	r6, r7, r0, r3
 80008b4:	0c0b      	lsrs	r3, r1, #16
 80008b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008ba:	fb00 f60e 	mul.w	r6, r0, lr
 80008be:	429e      	cmp	r6, r3
 80008c0:	fa04 f402 	lsl.w	r4, r4, r2
 80008c4:	d908      	bls.n	80008d8 <__udivmoddi4+0x260>
 80008c6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ce:	d22f      	bcs.n	8000930 <__udivmoddi4+0x2b8>
 80008d0:	429e      	cmp	r6, r3
 80008d2:	d92d      	bls.n	8000930 <__udivmoddi4+0x2b8>
 80008d4:	3802      	subs	r0, #2
 80008d6:	4463      	add	r3, ip
 80008d8:	1b9b      	subs	r3, r3, r6
 80008da:	b289      	uxth	r1, r1
 80008dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80008e0:	fb07 3316 	mls	r3, r7, r6, r3
 80008e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e8:	fb06 f30e 	mul.w	r3, r6, lr
 80008ec:	428b      	cmp	r3, r1
 80008ee:	d908      	bls.n	8000902 <__udivmoddi4+0x28a>
 80008f0:	eb1c 0101 	adds.w	r1, ip, r1
 80008f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008f8:	d216      	bcs.n	8000928 <__udivmoddi4+0x2b0>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d914      	bls.n	8000928 <__udivmoddi4+0x2b0>
 80008fe:	3e02      	subs	r6, #2
 8000900:	4461      	add	r1, ip
 8000902:	1ac9      	subs	r1, r1, r3
 8000904:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000908:	e738      	b.n	800077c <__udivmoddi4+0x104>
 800090a:	462e      	mov	r6, r5
 800090c:	4628      	mov	r0, r5
 800090e:	e705      	b.n	800071c <__udivmoddi4+0xa4>
 8000910:	4606      	mov	r6, r0
 8000912:	e6e3      	b.n	80006dc <__udivmoddi4+0x64>
 8000914:	4618      	mov	r0, r3
 8000916:	e6f8      	b.n	800070a <__udivmoddi4+0x92>
 8000918:	454b      	cmp	r3, r9
 800091a:	d2a9      	bcs.n	8000870 <__udivmoddi4+0x1f8>
 800091c:	ebb9 0802 	subs.w	r8, r9, r2
 8000920:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000924:	3801      	subs	r0, #1
 8000926:	e7a3      	b.n	8000870 <__udivmoddi4+0x1f8>
 8000928:	4646      	mov	r6, r8
 800092a:	e7ea      	b.n	8000902 <__udivmoddi4+0x28a>
 800092c:	4620      	mov	r0, r4
 800092e:	e794      	b.n	800085a <__udivmoddi4+0x1e2>
 8000930:	4640      	mov	r0, r8
 8000932:	e7d1      	b.n	80008d8 <__udivmoddi4+0x260>
 8000934:	46d0      	mov	r8, sl
 8000936:	e77b      	b.n	8000830 <__udivmoddi4+0x1b8>
 8000938:	3b02      	subs	r3, #2
 800093a:	4461      	add	r1, ip
 800093c:	e732      	b.n	80007a4 <__udivmoddi4+0x12c>
 800093e:	4630      	mov	r0, r6
 8000940:	e709      	b.n	8000756 <__udivmoddi4+0xde>
 8000942:	4464      	add	r4, ip
 8000944:	3802      	subs	r0, #2
 8000946:	e742      	b.n	80007ce <__udivmoddi4+0x156>

08000948 <__aeabi_idiv0>:
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <LiquidCrystal_I2C>:
}
*/



void LiquidCrystal_I2C(uint8_t lcd_addr, uint8_t lcd_cols, uint8_t lcd_rows) {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
 8000956:	460b      	mov	r3, r1
 8000958:	71bb      	strb	r3, [r7, #6]
 800095a:	4613      	mov	r3, r2
 800095c:	717b      	strb	r3, [r7, #5]
	_addr = lcd_addr;
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <LiquidCrystal_I2C+0x3c>)
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	7013      	strb	r3, [r2, #0]
	_cols = lcd_cols;
 8000964:	4a09      	ldr	r2, [pc, #36]	; (800098c <LiquidCrystal_I2C+0x40>)
 8000966:	79bb      	ldrb	r3, [r7, #6]
 8000968:	7013      	strb	r3, [r2, #0]
	_rows = lcd_rows;
 800096a:	4a09      	ldr	r2, [pc, #36]	; (8000990 <LiquidCrystal_I2C+0x44>)
 800096c:	797b      	ldrb	r3, [r7, #5]
 800096e:	7013      	strb	r3, [r2, #0]
	_charsize = LCD_5x8DOTS;
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <LiquidCrystal_I2C+0x48>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
	_backlightval = LCD_BACKLIGHT;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <LiquidCrystal_I2C+0x4c>)
 8000978:	2208      	movs	r2, #8
 800097a:	701a      	strb	r2, [r3, #0]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	200000a0 	.word	0x200000a0
 800098c:	200000a4 	.word	0x200000a4
 8000990:	200000a5 	.word	0x200000a5
 8000994:	200000a6 	.word	0x200000a6
 8000998:	200000a7 	.word	0x200000a7

0800099c <lcdBegin>:

void lcdBegin(void) {
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80009a0:	4b32      	ldr	r3, [pc, #200]	; (8000a6c <lcdBegin+0xd0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]

	if (_rows > 1) {
 80009a6:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <lcdBegin+0xd4>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d906      	bls.n	80009bc <lcdBegin+0x20>
		_displayfunction |= LCD_2LINE;
 80009ae:	4b2f      	ldr	r3, [pc, #188]	; (8000a6c <lcdBegin+0xd0>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	f043 0308 	orr.w	r3, r3, #8
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <lcdBegin+0xd0>)
 80009ba:	701a      	strb	r2, [r3, #0]
	}

	setRowOffsets(0x00, 0x40, 0x00 + _cols, 0x40 + _cols);
 80009bc:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <lcdBegin+0xd8>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <lcdBegin+0xd8>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	3340      	adds	r3, #64	; 0x40
 80009c8:	2140      	movs	r1, #64	; 0x40
 80009ca:	2000      	movs	r0, #0
 80009cc:	f000 f900 	bl	8000bd0 <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((_charsize != 0) && (_rows == 1)) {
 80009d0:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <lcdBegin+0xdc>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d00a      	beq.n	80009ee <lcdBegin+0x52>
 80009d8:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <lcdBegin+0xd4>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d106      	bne.n	80009ee <lcdBegin+0x52>
		_displayfunction |= LCD_5x10DOTS;
 80009e0:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <lcdBegin+0xd0>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <lcdBegin+0xd0>)
 80009ec:	701a      	strb	r2, [r3, #0]
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	HAL_Delay(50);
 80009ee:	2032      	movs	r0, #50	; 0x32
 80009f0:	f001 fcdc 	bl	80023ac <HAL_Delay>

	// Now we pull both RS and R/W low to begin commands
	write8bits(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
 80009f4:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <lcdBegin+0xe0>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 f959 	bl	8000cb0 <write8bits>
	HAL_Delay(1);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f001 fcd4 	bl	80023ac <HAL_Delay>
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	write4bits(0x03 << 4);
 8000a04:	2030      	movs	r0, #48	; 0x30
 8000a06:	f000 f941 	bl	8000c8c <write4bits>
	HAL_Delay(5); // wait min 4.1ms
 8000a0a:	2005      	movs	r0, #5
 8000a0c:	f001 fcce 	bl	80023ac <HAL_Delay>

	// second try
	write4bits(0x03 << 4);
 8000a10:	2030      	movs	r0, #48	; 0x30
 8000a12:	f000 f93b 	bl	8000c8c <write4bits>
	HAL_Delay(5); // wait min 4.1ms
 8000a16:	2005      	movs	r0, #5
 8000a18:	f001 fcc8 	bl	80023ac <HAL_Delay>

	// third go!
	write4bits(0x03 << 4);
 8000a1c:	2030      	movs	r0, #48	; 0x30
 8000a1e:	f000 f935 	bl	8000c8c <write4bits>
	HAL_Delay(5);
 8000a22:	2005      	movs	r0, #5
 8000a24:	f001 fcc2 	bl	80023ac <HAL_Delay>

	// finally, set to 4-bit interface
	write4bits(0x02 << 4);
 8000a28:	2020      	movs	r0, #32
 8000a2a:	f000 f92f 	bl	8000c8c <write4bits>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <lcdBegin+0xd0>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	f043 0320 	orr.w	r3, r3, #32
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 f8bb 	bl	8000bb4 <command>

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <lcdBegin+0xe4>)
 8000a40:	2204      	movs	r2, #4
 8000a42:	701a      	strb	r2, [r3, #0]
	lcdDisplay();
 8000a44:	f000 f834 	bl	8000ab0 <lcdDisplay>

	// clear it off
	lcdClear();
 8000a48:	f000 f81e 	bl	8000a88 <lcdClear>

	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <lcdBegin+0xe8>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <lcdBegin+0xe8>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f8a9 	bl	8000bb4 <command>

	lcdHome();
 8000a62:	f000 f81b 	bl	8000a9c <lcdHome>
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200000a1 	.word	0x200000a1
 8000a70:	200000a5 	.word	0x200000a5
 8000a74:	200000a4 	.word	0x200000a4
 8000a78:	200000a6 	.word	0x200000a6
 8000a7c:	200000a7 	.word	0x200000a7
 8000a80:	200000a2 	.word	0x200000a2
 8000a84:	200000a3 	.word	0x200000a3

08000a88 <lcdClear>:

/********** high level commands, for the user! */
void lcdClear(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f000 f891 	bl	8000bb4 <command>
	HAL_Delay(2);  // this command takes a long time!
 8000a92:	2002      	movs	r0, #2
 8000a94:	f001 fc8a 	bl	80023ac <HAL_Delay>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <lcdHome>:

void lcdHome(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	command(LCD_RETURNHOME);  // set cursor position to zero
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f000 f887 	bl	8000bb4 <command>
	HAL_Delay(2);  // this command takes a long time!
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f001 fc80 	bl	80023ac <HAL_Delay>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <lcdDisplay>:
// Turn the display on/off (quickly)
void lcdNoDisplay(void) {
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void lcdDisplay(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <lcdDisplay+0x28>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <lcdDisplay+0x28>)
 8000ac0:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <lcdDisplay+0x28>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	f043 0308 	orr.w	r3, r3, #8
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 f871 	bl	8000bb4 <command>
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000a2 	.word	0x200000a2

08000adc <lcdSetCursor>:
	for (int i = 0; i < 8; i++) {
		lcdWrite(charmap[i]);
	}
}

void lcdSetCursor(uint8_t col, uint8_t row) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	460a      	mov	r2, r1
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	71bb      	strb	r3, [r7, #6]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8000aec:	2304      	movs	r3, #4
 8000aee:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 8000af0:	79bb      	ldrb	r3, [r7, #6]
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d803      	bhi.n	8000b00 <lcdSetCursor+0x24>
		row = max_lines - 1;    // we count rows starting w/0
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	3b01      	subs	r3, #1
 8000afe:	71bb      	strb	r3, [r7, #6]
	}
	if ( row >= _rows ) {
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <lcdSetCursor+0x5c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	79ba      	ldrb	r2, [r7, #6]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d303      	bcc.n	8000b12 <lcdSetCursor+0x36>
		row = _rows - 1;   		// we count rows starting w/0
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <lcdSetCursor+0x5c>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	71bb      	strb	r3, [r7, #6]
	}

	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000b12:	79bb      	ldrb	r3, [r7, #6]
 8000b14:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <lcdSetCursor+0x60>)
 8000b16:	5cd2      	ldrb	r2, [r2, r3]
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f843 	bl	8000bb4 <command>
}
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000a5 	.word	0x200000a5
 8000b3c:	200000a8 	.word	0x200000a8

08000b40 <lcdPrint>:

// This will print character string to the LCD
size_t lcdPrint(const char str[]) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	if (str == NULL) return 0;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d101      	bne.n	8000b52 <lcdPrint+0x12>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e01d      	b.n	8000b8e <lcdPrint+0x4e>

	const uint8_t *buffer = (const uint8_t *)str;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	617b      	str	r3, [r7, #20]
	size_t size = strlen(str);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff fb42 	bl	80001e0 <strlen>
 8000b5c:	6138      	str	r0, [r7, #16]
	size_t n = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]

	while (size--) {
 8000b62:	e00c      	b.n	8000b7e <lcdPrint+0x3e>
	if (lcdWrite(*buffer++)) n++;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	617a      	str	r2, [r7, #20]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 f812 	bl	8000b96 <lcdWrite>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d008      	beq.n	8000b8a <lcdPrint+0x4a>
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
	while (size--) {
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	1e5a      	subs	r2, r3, #1
 8000b82:	613a      	str	r2, [r7, #16]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1ed      	bne.n	8000b64 <lcdPrint+0x24>
 8000b88:	e000      	b.n	8000b8c <lcdPrint+0x4c>
	else break;
 8000b8a:	bf00      	nop
	}
	return n;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <lcdWrite>:

/*********** mid level commands, for sending data/cmds */
size_t lcdWrite(uint8_t value) {
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71fb      	strb	r3, [r7, #7]
	send(value, Rs);
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 f850 	bl	8000c4a <send>
	return 1;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <command>:

void command(uint8_t value) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	send(value, 0);
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f841 	bl	8000c4a <send>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <setRowOffsets>:

/************ low level data pushing commands **********/
void setRowOffsets(int row0, int row1, int row2, int row3) {
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <setRowOffsets+0x3c>)
 8000be4:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <setRowOffsets+0x3c>)
 8000bec:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <setRowOffsets+0x3c>)
 8000bf4:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <setRowOffsets+0x3c>)
 8000bfc:	70da      	strb	r2, [r3, #3]
}
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	200000a8 	.word	0x200000a8

08000c10 <pulseEnable>:

void pulseEnable(uint8_t _data) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
	write8bits(_data | En);		// En high
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f844 	bl	8000cb0 <write8bits>
	HAL_Delay(1);
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f001 fbbf 	bl	80023ac <HAL_Delay>
	//DWT_Delay_us(5);		// enable pulse must be >450ns //To Be Checked

	write8bits(_data & ~En);	// En low
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f023 0304 	bic.w	r3, r3, #4
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 f83a 	bl	8000cb0 <write8bits>
	HAL_Delay(1);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f001 fbb5 	bl	80023ac <HAL_Delay>
	//DWT_Delay_us(1);		// commands need > 37us to settle //To Be Checked
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <send>:

// write either command or data
void send(uint8_t value, uint8_t mode) {
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b084      	sub	sp, #16
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	460a      	mov	r2, r1
 8000c54:	71fb      	strb	r3, [r7, #7]
 8000c56:	4613      	mov	r3, r2
 8000c58:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib = value & 0xf0;
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f023 030f 	bic.w	r3, r3, #15
 8000c60:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (value << 4) & 0xf0;
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	011b      	lsls	r3, r3, #4
 8000c66:	73bb      	strb	r3, [r7, #14]
	write4bits((highnib) | mode);
 8000c68:	7bfa      	ldrb	r2, [r7, #15]
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 f80b 	bl	8000c8c <write4bits>
	write4bits((lownib) | mode);
 8000c76:	7bba      	ldrb	r2, [r7, #14]
 8000c78:	79bb      	ldrb	r3, [r7, #6]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f804 	bl	8000c8c <write4bits>
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <write4bits>:

void write4bits(uint8_t value) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
	write8bits(value);
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f809 	bl	8000cb0 <write8bits>
	pulseEnable(value);
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ffb5 	bl	8000c10 <pulseEnable>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <write8bits>:

void write8bits(uint8_t _data){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af02      	add	r7, sp, #8
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	uint8_t data_t[1];
	data_t[0] = _data | _backlightval;
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <write8bits+0x34>)
 8000cbc:	781a      	ldrb	r2, [r3, #0]
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit (&hi2c1, _addr, (uint8_t *) data_t, 1, 100);
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <write8bits+0x38>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	b299      	uxth	r1, r3
 8000ccc:	f107 020c 	add.w	r2, r7, #12
 8000cd0:	2364      	movs	r3, #100	; 0x64
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <write8bits+0x3c>)
 8000cd8:	f001 ff98 	bl	8002c0c <HAL_I2C_Master_Transmit>
}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200000a7 	.word	0x200000a7
 8000ce8:	200000a0 	.word	0x200000a0
 8000cec:	200000ac 	.word	0x200000ac

08000cf0 <main>:
/**
  * @brief  Electronic Leadscrew Feedrate
  * @retval int
  */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf4:	f001 fae8 	bl	80022c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf8:	f000 faaa 	bl	8001250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfc:	f000 fc96 	bl	800162c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d00:	f000 fb10 	bl	8001324 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000d04:	f000 fb3c 	bl	8001380 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d08:	f000 fb9a 	bl	8001440 <MX_TIM2_Init>
  MX_TIM11_Init();
 8000d0c:	f000 fc4e 	bl	80015ac <MX_TIM11_Init>
  MX_TIM10_Init();
 8000d10:	f000 fc0a 	bl	8001528 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  LiquidCrystal_I2C(0x4E, 20, 4);	//Initialization of LCD (Select your LCD address)
 8000d14:	2204      	movs	r2, #4
 8000d16:	2114      	movs	r1, #20
 8000d18:	204e      	movs	r0, #78	; 0x4e
 8000d1a:	f7ff fe17 	bl	800094c <LiquidCrystal_I2C>
  lcdBegin();
 8000d1e:	f7ff fe3d 	bl	800099c <lcdBegin>
  lcdSetCursor(2,1);
 8000d22:	2101      	movs	r1, #1
 8000d24:	2002      	movs	r0, #2
 8000d26:	f7ff fed9 	bl	8000adc <lcdSetCursor>
  lcdPrint("Power Feed V2.0");
 8000d2a:	4899      	ldr	r0, [pc, #612]	; (8000f90 <main+0x2a0>)
 8000d2c:	f7ff ff08 	bl	8000b40 <lcdPrint>
  HAL_Delay(2000);
 8000d30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d34:	f001 fb3a 	bl	80023ac <HAL_Delay>
  lcdClear();
 8000d38:	f7ff fea6 	bl	8000a88 <lcdClear>
  lcd_update = FALSE;				//LCD has been updated
 8000d3c:	4b95      	ldr	r3, [pc, #596]	; (8000f94 <main+0x2a4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	801a      	strh	r2, [r3, #0]

  /* Encoder Initialization */
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000d42:	213c      	movs	r1, #60	; 0x3c
 8000d44:	4894      	ldr	r0, [pc, #592]	; (8000f98 <main+0x2a8>)
 8000d46:	f003 f973 	bl	8004030 <HAL_TIM_Encoder_Start_IT>
  /* Initialization Timers */
  HAL_TIM_Base_Start_IT(&htim11);	//Timer for debouncing
 8000d4a:	4894      	ldr	r0, [pc, #592]	; (8000f9c <main+0x2ac>)
 8000d4c:	f002 fefa 	bl	8003b44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);	//Timer for acceleration update
 8000d50:	4893      	ldr	r0, [pc, #588]	; (8000fa0 <main+0x2b0>)
 8000d52:	f002 fef7 	bl	8003b44 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  switch (state)
 8000d56:	4b93      	ldr	r3, [pc, #588]	; (8000fa4 <main+0x2b4>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d8fb      	bhi.n	8000d56 <main+0x66>
 8000d5e:	a201      	add	r2, pc, #4	; (adr r2, 8000d64 <main+0x74>)
 8000d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d64:	08000d75 	.word	0x08000d75
 8000d68:	08000e9b 	.word	0x08000e9b
 8000d6c:	08001079 	.word	0x08001079
 8000d70:	08000dd5 	.word	0x08000dd5
	  {
	  	  case INITIALIZATION:	//Initialization state
	  		  if ( Switch_Status_Read() != MID ){	//If the switch is not in MID state, report error
 8000d74:	f000 ff98 	bl	8001ca8 <Switch_Status_Read>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d00e      	beq.n	8000d9c <main+0xac>
	  			  lcdSetCursor(8,1);				//Print Error message
 8000d7e:	2101      	movs	r1, #1
 8000d80:	2008      	movs	r0, #8
 8000d82:	f7ff feab 	bl	8000adc <lcdSetCursor>
	  			  lcdPrint("ERROR!");
 8000d86:	4888      	ldr	r0, [pc, #544]	; (8000fa8 <main+0x2b8>)
 8000d88:	f7ff feda 	bl	8000b40 <lcdPrint>
	  			  lcdSetCursor(3,2);
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	2003      	movs	r0, #3
 8000d90:	f7ff fea4 	bl	8000adc <lcdSetCursor>
	  			  lcdPrint("Release Switch");
 8000d94:	4885      	ldr	r0, [pc, #532]	; (8000fac <main+0x2bc>)
 8000d96:	f7ff fed3 	bl	8000b40 <lcdPrint>
				  lcdSetCursor(0,1);
				  lcdPrint("Mode: STOP ");
				  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
				  state = STANDBY;								//Go to standby
	  		  }
	  		  break;
 8000d9a:	e23a      	b.n	8001212 <main+0x522>
	  			  lcdClear();
 8000d9c:	f7ff fe74 	bl	8000a88 <lcdClear>
				  lcdSetCursor(0,0);
 8000da0:	2100      	movs	r1, #0
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff fe9a 	bl	8000adc <lcdSetCursor>
				  lcdPrint("Feed Rate:");
 8000da8:	4881      	ldr	r0, [pc, #516]	; (8000fb0 <main+0x2c0>)
 8000daa:	f7ff fec9 	bl	8000b40 <lcdPrint>
				  lcdSetCursor(0,1);
 8000dae:	2101      	movs	r1, #1
 8000db0:	2000      	movs	r0, #0
 8000db2:	f7ff fe93 	bl	8000adc <lcdSetCursor>
				  lcdPrint("Mode: STOP ");
 8000db6:	487f      	ldr	r0, [pc, #508]	; (8000fb4 <main+0x2c4>)
 8000db8:	f7ff fec2 	bl	8000b40 <lcdPrint>
				  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 8000dbc:	4b7e      	ldr	r3, [pc, #504]	; (8000fb8 <main+0x2c8>)
 8000dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	210b      	movs	r1, #11
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 ff50 	bl	8001c6c <LCD_Write_Feedrate>
				  state = STANDBY;								//Go to standby
 8000dcc:	4b75      	ldr	r3, [pc, #468]	; (8000fa4 <main+0x2b4>)
 8000dce:	2203      	movs	r2, #3
 8000dd0:	801a      	strh	r2, [r3, #0]
	  		  break;
 8000dd2:	e21e      	b.n	8001212 <main+0x522>
	  	  case STANDBY:		//Standby state (Not movement, switch in the middle)
	  		Update_Feedrate(&target_feedrate);				//Update the feedrate from encoder
 8000dd4:	4879      	ldr	r0, [pc, #484]	; (8000fbc <main+0x2cc>)
 8000dd6:	f000 ffb1 	bl	8001d3c <Update_Feedrate>
	  		display_feedrate = target_feedrate;				//Update variable to display the feedrate
 8000dda:	4b78      	ldr	r3, [pc, #480]	; (8000fbc <main+0x2cc>)
 8000ddc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000de0:	4b75      	ldr	r3, [pc, #468]	; (8000fb8 <main+0x2c8>)
 8000de2:	801a      	strh	r2, [r3, #0]
	  		LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 8000de4:	4b74      	ldr	r3, [pc, #464]	; (8000fb8 <main+0x2c8>)
 8000de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dea:	2200      	movs	r2, #0
 8000dec:	210b      	movs	r1, #11
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 ff3c 	bl	8001c6c <LCD_Write_Feedrate>
	  		if ( Encoder_Switch_Status_Read() ){			//Check if the encoder is pressed to change the step mode
 8000df4:	f000 ffec 	bl	8001dd0 <Encoder_Switch_Status_Read>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00e      	beq.n	8000e1c <main+0x12c>
	  			if (step_mode == STEP_NORMAL){
 8000dfe:	4b70      	ldr	r3, [pc, #448]	; (8000fc0 <main+0x2d0>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d103      	bne.n	8000e0e <main+0x11e>
	  				step_mode = STEP_x10;
 8000e06:	4b6e      	ldr	r3, [pc, #440]	; (8000fc0 <main+0x2d0>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	801a      	strh	r2, [r3, #0]
 8000e0c:	e006      	b.n	8000e1c <main+0x12c>
	  			}else if(step_mode == STEP_x10){
 8000e0e:	4b6c      	ldr	r3, [pc, #432]	; (8000fc0 <main+0x2d0>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d102      	bne.n	8000e1c <main+0x12c>
	  				step_mode = STEP_NORMAL;
 8000e16:	4b6a      	ldr	r3, [pc, #424]	; (8000fc0 <main+0x2d0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	801a      	strh	r2, [r3, #0]
	  			}
	  		}
	  		if (lcd_update){				//Update the LCD coming from others states
 8000e1c:	4b5d      	ldr	r3, [pc, #372]	; (8000f94 <main+0x2a4>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d009      	beq.n	8000e38 <main+0x148>
	  			lcdSetCursor(0,1);
 8000e24:	2101      	movs	r1, #1
 8000e26:	2000      	movs	r0, #0
 8000e28:	f7ff fe58 	bl	8000adc <lcdSetCursor>
	  			lcdPrint("Mode: STOP ");
 8000e2c:	4861      	ldr	r0, [pc, #388]	; (8000fb4 <main+0x2c4>)
 8000e2e:	f7ff fe87 	bl	8000b40 <lcdPrint>
	  			lcd_update = FALSE;			//Reset flag for LCD Update
 8000e32:	4b58      	ldr	r3, [pc, #352]	; (8000f94 <main+0x2a4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	801a      	strh	r2, [r3, #0]
	  		}
	  		if (previous_state != STANDBY){		//If previous status is Standby the enable motor and direction
 8000e38:	4b62      	ldr	r3, [pc, #392]	; (8000fc4 <main+0x2d4>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d002      	beq.n	8000e46 <main+0x156>
	  			previous_state = STANDBY;		//Change previous state to current one
 8000e40:	4b60      	ldr	r3, [pc, #384]	; (8000fc4 <main+0x2d4>)
 8000e42:	2203      	movs	r2, #3
 8000e44:	801a      	strh	r2, [r3, #0]
	  		}
	  		if ( ( Switch_Status_Read() == RIGHT ) && ( current_feedrate == 0 ) ){		//Check if the switch is on right mode
 8000e46:	f000 ff2f 	bl	8001ca8 <Switch_Status_Read>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d10e      	bne.n	8000e6e <main+0x17e>
 8000e50:	4b5d      	ldr	r3, [pc, #372]	; (8000fc8 <main+0x2d8>)
 8000e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d109      	bne.n	8000e6e <main+0x17e>
	  			previous_state = STANDBY;		//Setting previous state to STANDBY
 8000e5a:	4b5a      	ldr	r3, [pc, #360]	; (8000fc4 <main+0x2d4>)
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	801a      	strh	r2, [r3, #0]
	  			state = MOVE_RIGHT;				//Change state to RIGHT
 8000e60:	4b50      	ldr	r3, [pc, #320]	; (8000fa4 <main+0x2b4>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	801a      	strh	r2, [r3, #0]
	  			lcd_update = TRUE;				//Set flag for LCD update
 8000e66:	4b4b      	ldr	r3, [pc, #300]	; (8000f94 <main+0x2a4>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	801a      	strh	r2, [r3, #0]
	  		}else if ( ( Switch_Status_Read() == LEFT ) && ( current_feedrate == 0 ) ){	//Check if the switch is on left mode
	  			previous_state = STANDBY;		//Setting previous state to STANDBY
	  			state = MOVE_LEFT;				//Change state to RIGHT
	  			lcd_update = TRUE;				//Set flag for LCD update
	  		}
	  		  break;
 8000e6c:	e1cc      	b.n	8001208 <main+0x518>
	  		}else if ( ( Switch_Status_Read() == LEFT ) && ( current_feedrate == 0 ) ){	//Check if the switch is on left mode
 8000e6e:	f000 ff1b 	bl	8001ca8 <Switch_Status_Read>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f040 81c7 	bne.w	8001208 <main+0x518>
 8000e7a:	4b53      	ldr	r3, [pc, #332]	; (8000fc8 <main+0x2d8>)
 8000e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f040 81c1 	bne.w	8001208 <main+0x518>
	  			previous_state = STANDBY;		//Setting previous state to STANDBY
 8000e86:	4b4f      	ldr	r3, [pc, #316]	; (8000fc4 <main+0x2d4>)
 8000e88:	2203      	movs	r2, #3
 8000e8a:	801a      	strh	r2, [r3, #0]
	  			state = MOVE_LEFT;				//Change state to RIGHT
 8000e8c:	4b45      	ldr	r3, [pc, #276]	; (8000fa4 <main+0x2b4>)
 8000e8e:	2202      	movs	r2, #2
 8000e90:	801a      	strh	r2, [r3, #0]
	  			lcd_update = TRUE;				//Set flag for LCD update
 8000e92:	4b40      	ldr	r3, [pc, #256]	; (8000f94 <main+0x2a4>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	801a      	strh	r2, [r3, #0]
	  		  break;
 8000e98:	e1b6      	b.n	8001208 <main+0x518>
	  	  case MOVE_RIGHT:	//Right state, movement to the RIGHT
	  		  encoder_sw_status = Encoder_Switch_Status_Read();
 8000e9a:	f000 ff99 	bl	8001dd0 <Encoder_Switch_Status_Read>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b4a      	ldr	r3, [pc, #296]	; (8000fcc <main+0x2dc>)
 8000ea4:	801a      	strh	r2, [r3, #0]
	  		  if ( encoder_sw_status == TRUE ){	//Check if the encoder is pressed to change the step mode
 8000ea6:	4b49      	ldr	r3, [pc, #292]	; (8000fcc <main+0x2dc>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d10f      	bne.n	8000ece <main+0x1de>
	  			  if (step_mode == STEP_NORMAL){
 8000eae:	4b44      	ldr	r3, [pc, #272]	; (8000fc0 <main+0x2d0>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d103      	bne.n	8000ebe <main+0x1ce>
	  				  step_mode = STEP_x10;
 8000eb6:	4b42      	ldr	r3, [pc, #264]	; (8000fc0 <main+0x2d0>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	801a      	strh	r2, [r3, #0]
 8000ebc:	e01a      	b.n	8000ef4 <main+0x204>
	  			  }else if(step_mode == STEP_x10){
 8000ebe:	4b40      	ldr	r3, [pc, #256]	; (8000fc0 <main+0x2d0>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d116      	bne.n	8000ef4 <main+0x204>
	  				  step_mode = STEP_NORMAL;
 8000ec6:	4b3e      	ldr	r3, [pc, #248]	; (8000fc0 <main+0x2d0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	801a      	strh	r2, [r3, #0]
 8000ecc:	e012      	b.n	8000ef4 <main+0x204>
	  			  }
	  		  }else if ( encoder_sw_status == TRUE_HOLD ){
 8000ece:	4b3f      	ldr	r3, [pc, #252]	; (8000fcc <main+0x2dc>)
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d105      	bne.n	8000ee2 <main+0x1f2>
	  			target_feedrate = FAST_MOVEMENT_FEEDRATE;
 8000ed6:	4b3e      	ldr	r3, [pc, #248]	; (8000fd0 <main+0x2e0>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	4b37      	ldr	r3, [pc, #220]	; (8000fbc <main+0x2cc>)
 8000ede:	801a      	strh	r2, [r3, #0]
 8000ee0:	e008      	b.n	8000ef4 <main+0x204>
	  		  }else if ( encoder_sw_status == FALSE ){
 8000ee2:	4b3a      	ldr	r3, [pc, #232]	; (8000fcc <main+0x2dc>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d104      	bne.n	8000ef4 <main+0x204>
	  			target_feedrate = display_feedrate;
 8000eea:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <main+0x2c8>)
 8000eec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ef0:	4b32      	ldr	r3, [pc, #200]	; (8000fbc <main+0x2cc>)
 8000ef2:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  sw_status = Switch_Status_Read();		//Read the switch
 8000ef4:	f000 fed8 	bl	8001ca8 <Switch_Status_Read>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <main+0x2e4>)
 8000efe:	801a      	strh	r2, [r3, #0]
	  		  if ( sw_status == RIGHT ){			//If it is on right position, update the feedrate target comming from others modes
 8000f00:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <main+0x2e4>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d126      	bne.n	8000f56 <main+0x266>
	  			  if (target_feedrate == 0){
 8000f08:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <main+0x2cc>)
 8000f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d104      	bne.n	8000f1c <main+0x22c>
	  				  target_feedrate = display_feedrate;
 8000f12:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <main+0x2c8>)
 8000f14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f18:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <main+0x2cc>)
 8000f1a:	801a      	strh	r2, [r3, #0]
	  			  }
	  			  if (encoder_sw_status != TRUE_HOLD){
 8000f1c:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <main+0x2dc>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d078      	beq.n	8001016 <main+0x326>
					  Update_Feedrate(&target_feedrate);				//Update the feedrate from encoder
 8000f24:	4825      	ldr	r0, [pc, #148]	; (8000fbc <main+0x2cc>)
 8000f26:	f000 ff09 	bl	8001d3c <Update_Feedrate>
					  if (display_feedrate != target_feedrate){			//Check if the feedrate changed to update LCD
 8000f2a:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <main+0x2c8>)
 8000f2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <main+0x2cc>)
 8000f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d06d      	beq.n	8001016 <main+0x326>
						  display_feedrate = target_feedrate;
 8000f3a:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <main+0x2cc>)
 8000f3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <main+0x2c8>)
 8000f42:	801a      	strh	r2, [r3, #0]
						  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 8000f44:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <main+0x2c8>)
 8000f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	210b      	movs	r1, #11
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fe8c 	bl	8001c6c <LCD_Write_Feedrate>
 8000f54:	e05f      	b.n	8001016 <main+0x326>
					  }
	  			  }
	  		  }else if ( sw_status == LEFT){		//If it is on left position, change to left, set feedrate to zero
 8000f56:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <main+0x2e4>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d13e      	bne.n	8000fdc <main+0x2ec>
		  		target_feedrate = 0;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <main+0x2cc>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	801a      	strh	r2, [r3, #0]
			  	if ( current_feedrate == 0 ){		//If motor is stopped then move to left status
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <main+0x2d8>)
 8000f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d153      	bne.n	8001016 <main+0x326>
			  		state = MOVE_LEFT;				//Change state to left
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <main+0x2b4>)
 8000f70:	2202      	movs	r2, #2
 8000f72:	801a      	strh	r2, [r3, #0]
			  		lcd_update = TRUE;				//Set flag to update display
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <main+0x2a4>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	801a      	strh	r2, [r3, #0]
			  		Motor_Disable(en_invert);		//Disable Motor
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <main+0x2e8>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fd2c 	bl	80019dc <Motor_Disable>
			  		target_feedrate = display_feedrate;	//Update feedrate
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <main+0x2c8>)
 8000f86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <main+0x2cc>)
 8000f8c:	801a      	strh	r2, [r3, #0]
			  		break;							//Exit this state
 8000f8e:	e140      	b.n	8001212 <main+0x522>
 8000f90:	080056f4 	.word	0x080056f4
 8000f94:	20000232 	.word	0x20000232
 8000f98:	20000100 	.word	0x20000100
 8000f9c:	200001d8 	.word	0x200001d8
 8000fa0:	20000190 	.word	0x20000190
 8000fa4:	20000220 	.word	0x20000220
 8000fa8:	08005704 	.word	0x08005704
 8000fac:	0800570c 	.word	0x0800570c
 8000fb0:	0800571c 	.word	0x0800571c
 8000fb4:	08005728 	.word	0x08005728
 8000fb8:	2000000e 	.word	0x2000000e
 8000fbc:	2000000c 	.word	0x2000000c
 8000fc0:	20000224 	.word	0x20000224
 8000fc4:	20000222 	.word	0x20000222
 8000fc8:	2000022a 	.word	0x2000022a
 8000fcc:	2000022e 	.word	0x2000022e
 8000fd0:	2000000a 	.word	0x2000000a
 8000fd4:	2000022c 	.word	0x2000022c
 8000fd8:	20000226 	.word	0x20000226
			  	}
	  		  }else if ( sw_status == MID ){		//If it is on Mid position, change to STOP or STANDBY status
 8000fdc:	4b8d      	ldr	r3, [pc, #564]	; (8001214 <main+0x524>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d118      	bne.n	8001016 <main+0x326>
	  			target_feedrate = 0;
 8000fe4:	4b8c      	ldr	r3, [pc, #560]	; (8001218 <main+0x528>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	801a      	strh	r2, [r3, #0]
	  			if ( current_feedrate == 0 ){
 8000fea:	4b8c      	ldr	r3, [pc, #560]	; (800121c <main+0x52c>)
 8000fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d110      	bne.n	8001016 <main+0x326>
	  				state = STANDBY;				//Change state to standby
 8000ff4:	4b8a      	ldr	r3, [pc, #552]	; (8001220 <main+0x530>)
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	801a      	strh	r2, [r3, #0]
	  				lcd_update = TRUE;				//Set flag to update display
 8000ffa:	4b8a      	ldr	r3, [pc, #552]	; (8001224 <main+0x534>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	801a      	strh	r2, [r3, #0]
	  				Motor_Disable(en_invert);		//Disable Motor
 8001000:	4b89      	ldr	r3, [pc, #548]	; (8001228 <main+0x538>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f000 fce9 	bl	80019dc <Motor_Disable>
	  				target_feedrate = display_feedrate;	//Update feedrate
 800100a:	4b88      	ldr	r3, [pc, #544]	; (800122c <main+0x53c>)
 800100c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001010:	4b81      	ldr	r3, [pc, #516]	; (8001218 <main+0x528>)
 8001012:	801a      	strh	r2, [r3, #0]
	  				break;							//Exit this state
 8001014:	e0fd      	b.n	8001212 <main+0x522>
	  			}
	  		  }
	  		  if (lcd_update){				//Update the LCD coming from others states
 8001016:	4b83      	ldr	r3, [pc, #524]	; (8001224 <main+0x534>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d009      	beq.n	8001032 <main+0x342>
	  			  lcdSetCursor(0,1);
 800101e:	2101      	movs	r1, #1
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff fd5b 	bl	8000adc <lcdSetCursor>
	  			  lcdPrint("Mode: RIGHT");
 8001026:	4882      	ldr	r0, [pc, #520]	; (8001230 <main+0x540>)
 8001028:	f7ff fd8a 	bl	8000b40 <lcdPrint>
	  			  lcd_update = FALSE;			//Reset flag for LCD Update
 800102c:	4b7d      	ldr	r3, [pc, #500]	; (8001224 <main+0x534>)
 800102e:	2200      	movs	r2, #0
 8001030:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (previous_state != MOVE_RIGHT){		//If previous status is Standby the enable motor and direcction
 8001032:	4b80      	ldr	r3, [pc, #512]	; (8001234 <main+0x544>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d00d      	beq.n	8001056 <main+0x366>
				  Motor_Direction(RIGHT, dir_invert);	//Set direction to right
 800103a:	4b7f      	ldr	r3, [pc, #508]	; (8001238 <main+0x548>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	2001      	movs	r0, #1
 8001042:	f000 fce3 	bl	8001a0c <Motor_Direction>
				  Motor_Enable(en_invert);				//Enable Motor
 8001046:	4b78      	ldr	r3, [pc, #480]	; (8001228 <main+0x538>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fcb0 	bl	80019b0 <Motor_Enable>
				  previous_state = MOVE_RIGHT;			//Change previous state to current one
 8001050:	4b78      	ldr	r3, [pc, #480]	; (8001234 <main+0x544>)
 8001052:	2201      	movs	r2, #1
 8001054:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (update_speed){					//Update speed if the flag is set
 8001056:	4b79      	ldr	r3, [pc, #484]	; (800123c <main+0x54c>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 80d6 	beq.w	800120c <main+0x51c>
	  			  current_feedrate = Motor_Feedrate_Update(&current_feedrate, &target_feedrate);
 8001060:	496d      	ldr	r1, [pc, #436]	; (8001218 <main+0x528>)
 8001062:	486e      	ldr	r0, [pc, #440]	; (800121c <main+0x52c>)
 8001064:	f000 fd44 	bl	8001af0 <Motor_Feedrate_Update>
 8001068:	4603      	mov	r3, r0
 800106a:	b21a      	sxth	r2, r3
 800106c:	4b6b      	ldr	r3, [pc, #428]	; (800121c <main+0x52c>)
 800106e:	801a      	strh	r2, [r3, #0]
				  update_speed = 0;					//Reset the update_speed flag
 8001070:	4b72      	ldr	r3, [pc, #456]	; (800123c <main+0x54c>)
 8001072:	2200      	movs	r2, #0
 8001074:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  break;
 8001076:	e0c9      	b.n	800120c <main+0x51c>
	  	  case MOVE_LEFT:
	  		  encoder_sw_status = Encoder_Switch_Status_Read();
 8001078:	f000 feaa 	bl	8001dd0 <Encoder_Switch_Status_Read>
 800107c:	4603      	mov	r3, r0
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b6f      	ldr	r3, [pc, #444]	; (8001240 <main+0x550>)
 8001082:	801a      	strh	r2, [r3, #0]
	  		  if ( encoder_sw_status == TRUE ){	//Check if the encoder is pressed to change the step mode
 8001084:	4b6e      	ldr	r3, [pc, #440]	; (8001240 <main+0x550>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d10f      	bne.n	80010ac <main+0x3bc>
	  			  if (step_mode == STEP_NORMAL){
 800108c:	4b6d      	ldr	r3, [pc, #436]	; (8001244 <main+0x554>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d103      	bne.n	800109c <main+0x3ac>
	  				  step_mode = STEP_x10;
 8001094:	4b6b      	ldr	r3, [pc, #428]	; (8001244 <main+0x554>)
 8001096:	2201      	movs	r2, #1
 8001098:	801a      	strh	r2, [r3, #0]
 800109a:	e01a      	b.n	80010d2 <main+0x3e2>
	  			  }else if(step_mode == STEP_x10){
 800109c:	4b69      	ldr	r3, [pc, #420]	; (8001244 <main+0x554>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d116      	bne.n	80010d2 <main+0x3e2>
	  				  step_mode = STEP_NORMAL;
 80010a4:	4b67      	ldr	r3, [pc, #412]	; (8001244 <main+0x554>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	801a      	strh	r2, [r3, #0]
 80010aa:	e012      	b.n	80010d2 <main+0x3e2>
	  			  }
	  		  }else if ( encoder_sw_status == TRUE_HOLD ){
 80010ac:	4b64      	ldr	r3, [pc, #400]	; (8001240 <main+0x550>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d105      	bne.n	80010c0 <main+0x3d0>
	  			target_feedrate = FAST_MOVEMENT_FEEDRATE;
 80010b4:	4b64      	ldr	r3, [pc, #400]	; (8001248 <main+0x558>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	4b57      	ldr	r3, [pc, #348]	; (8001218 <main+0x528>)
 80010bc:	801a      	strh	r2, [r3, #0]
 80010be:	e008      	b.n	80010d2 <main+0x3e2>
	  		  }else if ( encoder_sw_status == FALSE ){
 80010c0:	4b5f      	ldr	r3, [pc, #380]	; (8001240 <main+0x550>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d104      	bne.n	80010d2 <main+0x3e2>
	  			target_feedrate = display_feedrate;
 80010c8:	4b58      	ldr	r3, [pc, #352]	; (800122c <main+0x53c>)
 80010ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010ce:	4b52      	ldr	r3, [pc, #328]	; (8001218 <main+0x528>)
 80010d0:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  sw_status = Switch_Status_Read();		//Read the switch
 80010d2:	f000 fde9 	bl	8001ca8 <Switch_Status_Read>
 80010d6:	4603      	mov	r3, r0
 80010d8:	b29a      	uxth	r2, r3
 80010da:	4b4e      	ldr	r3, [pc, #312]	; (8001214 <main+0x524>)
 80010dc:	801a      	strh	r2, [r3, #0]
	  		  if ( sw_status == LEFT ){				//If it is on left position, update the feedrate target comming from others modes
 80010de:	4b4d      	ldr	r3, [pc, #308]	; (8001214 <main+0x524>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d126      	bne.n	8001134 <main+0x444>
	  			  if (target_feedrate == 0){
 80010e6:	4b4c      	ldr	r3, [pc, #304]	; (8001218 <main+0x528>)
 80010e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d104      	bne.n	80010fa <main+0x40a>
	  				  target_feedrate = display_feedrate;
 80010f0:	4b4e      	ldr	r3, [pc, #312]	; (800122c <main+0x53c>)
 80010f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010f6:	4b48      	ldr	r3, [pc, #288]	; (8001218 <main+0x528>)
 80010f8:	801a      	strh	r2, [r3, #0]
	  			  }
	  			  if (encoder_sw_status != TRUE_HOLD){
 80010fa:	4b51      	ldr	r3, [pc, #324]	; (8001240 <main+0x550>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d052      	beq.n	80011a8 <main+0x4b8>
					  Update_Feedrate(&target_feedrate);				//Update the feedrate from encoder
 8001102:	4845      	ldr	r0, [pc, #276]	; (8001218 <main+0x528>)
 8001104:	f000 fe1a 	bl	8001d3c <Update_Feedrate>
					  if (display_feedrate != target_feedrate){			//Check if the feedrate changed to update LCD
 8001108:	4b48      	ldr	r3, [pc, #288]	; (800122c <main+0x53c>)
 800110a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800110e:	4b42      	ldr	r3, [pc, #264]	; (8001218 <main+0x528>)
 8001110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001114:	429a      	cmp	r2, r3
 8001116:	d047      	beq.n	80011a8 <main+0x4b8>
						  display_feedrate = target_feedrate;
 8001118:	4b3f      	ldr	r3, [pc, #252]	; (8001218 <main+0x528>)
 800111a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800111e:	4b43      	ldr	r3, [pc, #268]	; (800122c <main+0x53c>)
 8001120:	801a      	strh	r2, [r3, #0]
						  LCD_Write_Feedrate(display_feedrate, 11, 0);	//Print the default speed
 8001122:	4b42      	ldr	r3, [pc, #264]	; (800122c <main+0x53c>)
 8001124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001128:	2200      	movs	r2, #0
 800112a:	210b      	movs	r1, #11
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fd9d 	bl	8001c6c <LCD_Write_Feedrate>
 8001132:	e039      	b.n	80011a8 <main+0x4b8>
					  }
	  			  }
	  		  }else if ( sw_status == RIGHT){		//If it is on right position, change to right, set feedrate to zero
 8001134:	4b37      	ldr	r3, [pc, #220]	; (8001214 <main+0x524>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d118      	bne.n	800116e <main+0x47e>
		  		target_feedrate = 0;
 800113c:	4b36      	ldr	r3, [pc, #216]	; (8001218 <main+0x528>)
 800113e:	2200      	movs	r2, #0
 8001140:	801a      	strh	r2, [r3, #0]
		  		if ( current_feedrate == 0 ){		//If motor is stopped then move to right status
 8001142:	4b36      	ldr	r3, [pc, #216]	; (800121c <main+0x52c>)
 8001144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d12d      	bne.n	80011a8 <main+0x4b8>
		  			state = MOVE_RIGHT;				//Change state to right
 800114c:	4b34      	ldr	r3, [pc, #208]	; (8001220 <main+0x530>)
 800114e:	2201      	movs	r2, #1
 8001150:	801a      	strh	r2, [r3, #0]
		  			lcd_update = TRUE;				//Set flag to update display
 8001152:	4b34      	ldr	r3, [pc, #208]	; (8001224 <main+0x534>)
 8001154:	2201      	movs	r2, #1
 8001156:	801a      	strh	r2, [r3, #0]
		  			Motor_Disable(en_invert);		//Disable Motor
 8001158:	4b33      	ldr	r3, [pc, #204]	; (8001228 <main+0x538>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f000 fc3d 	bl	80019dc <Motor_Disable>
		  			target_feedrate = display_feedrate;	//Update feedrate
 8001162:	4b32      	ldr	r3, [pc, #200]	; (800122c <main+0x53c>)
 8001164:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001168:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <main+0x528>)
 800116a:	801a      	strh	r2, [r3, #0]
		  			break;							//Exit this state
 800116c:	e051      	b.n	8001212 <main+0x522>
		  		}
	  		  }else if ( sw_status == MID ){		//If it is on Mid position, change to STOP or STANDBY status
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <main+0x524>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d118      	bne.n	80011a8 <main+0x4b8>
	  			target_feedrate = 0;
 8001176:	4b28      	ldr	r3, [pc, #160]	; (8001218 <main+0x528>)
 8001178:	2200      	movs	r2, #0
 800117a:	801a      	strh	r2, [r3, #0]
	  			if ( current_feedrate == 0 ){
 800117c:	4b27      	ldr	r3, [pc, #156]	; (800121c <main+0x52c>)
 800117e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d110      	bne.n	80011a8 <main+0x4b8>
	  				state = STANDBY;				//Change state to standby
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <main+0x530>)
 8001188:	2203      	movs	r2, #3
 800118a:	801a      	strh	r2, [r3, #0]
	  				lcd_update = TRUE;				//Set flag to update display
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <main+0x534>)
 800118e:	2201      	movs	r2, #1
 8001190:	801a      	strh	r2, [r3, #0]
	  				Motor_Disable(en_invert);		//Disable Motor
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <main+0x538>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fc20 	bl	80019dc <Motor_Disable>
	  				target_feedrate = display_feedrate;	//Update feedrate
 800119c:	4b23      	ldr	r3, [pc, #140]	; (800122c <main+0x53c>)
 800119e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <main+0x528>)
 80011a4:	801a      	strh	r2, [r3, #0]
	  				break;							//Exit this state
 80011a6:	e034      	b.n	8001212 <main+0x522>
	  			}
	  		  }
	  		  if (lcd_update){				//Update the LCD comming from others states
 80011a8:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <main+0x534>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d009      	beq.n	80011c4 <main+0x4d4>
	  			lcdSetCursor(0,1);
 80011b0:	2101      	movs	r1, #1
 80011b2:	2000      	movs	r0, #0
 80011b4:	f7ff fc92 	bl	8000adc <lcdSetCursor>
	  			lcdPrint("Mode: LEFT ");
 80011b8:	4824      	ldr	r0, [pc, #144]	; (800124c <main+0x55c>)
 80011ba:	f7ff fcc1 	bl	8000b40 <lcdPrint>
	  			lcd_update = FALSE;			//Reset flag for LCD Update
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <main+0x534>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (previous_state != MOVE_LEFT){		//If previous status is Standby the enable motor and direcction
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <main+0x544>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d00d      	beq.n	80011e8 <main+0x4f8>
	  		  Motor_Direction(LEFT, dir_invert);	//Set direction to left
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <main+0x548>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	2000      	movs	r0, #0
 80011d4:	f000 fc1a 	bl	8001a0c <Motor_Direction>
	  		  Motor_Enable(en_invert);				//Enable Motor
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <main+0x538>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fbe7 	bl	80019b0 <Motor_Enable>
	  		  previous_state = MOVE_LEFT;			//Change previous state to current one
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <main+0x544>)
 80011e4:	2202      	movs	r2, #2
 80011e6:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if (update_speed){					//Update speed if the flag is set
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <main+0x54c>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00f      	beq.n	8001210 <main+0x520>
	  			  current_feedrate = Motor_Feedrate_Update(&current_feedrate, &target_feedrate);
 80011f0:	4909      	ldr	r1, [pc, #36]	; (8001218 <main+0x528>)
 80011f2:	480a      	ldr	r0, [pc, #40]	; (800121c <main+0x52c>)
 80011f4:	f000 fc7c 	bl	8001af0 <Motor_Feedrate_Update>
 80011f8:	4603      	mov	r3, r0
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <main+0x52c>)
 80011fe:	801a      	strh	r2, [r3, #0]
				  update_speed = 0;					//Reset the update_speed flag
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <main+0x54c>)
 8001202:	2200      	movs	r2, #0
 8001204:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  break;
 8001206:	e003      	b.n	8001210 <main+0x520>
	  		  break;
 8001208:	bf00      	nop
 800120a:	e5a4      	b.n	8000d56 <main+0x66>
	  		  break;
 800120c:	bf00      	nop
 800120e:	e5a2      	b.n	8000d56 <main+0x66>
	  		  break;
 8001210:	bf00      	nop
	  switch (state)
 8001212:	e5a0      	b.n	8000d56 <main+0x66>
 8001214:	2000022c 	.word	0x2000022c
 8001218:	2000000c 	.word	0x2000000c
 800121c:	2000022a 	.word	0x2000022a
 8001220:	20000220 	.word	0x20000220
 8001224:	20000232 	.word	0x20000232
 8001228:	20000226 	.word	0x20000226
 800122c:	2000000e 	.word	0x2000000e
 8001230:	08005734 	.word	0x08005734
 8001234:	20000222 	.word	0x20000222
 8001238:	20000228 	.word	0x20000228
 800123c:	20000230 	.word	0x20000230
 8001240:	2000022e 	.word	0x2000022e
 8001244:	20000224 	.word	0x20000224
 8001248:	2000000a 	.word	0x2000000a
 800124c:	08005740 	.word	0x08005740

08001250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b094      	sub	sp, #80	; 0x50
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	f107 0320 	add.w	r3, r7, #32
 800125a:	2230      	movs	r2, #48	; 0x30
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f003 fdc6 	bl	8004df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	4b28      	ldr	r3, [pc, #160]	; (800131c <SystemClock_Config+0xcc>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	4a27      	ldr	r2, [pc, #156]	; (800131c <SystemClock_Config+0xcc>)
 800127e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001282:	6413      	str	r3, [r2, #64]	; 0x40
 8001284:	4b25      	ldr	r3, [pc, #148]	; (800131c <SystemClock_Config+0xcc>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	4b22      	ldr	r3, [pc, #136]	; (8001320 <SystemClock_Config+0xd0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800129c:	4a20      	ldr	r2, [pc, #128]	; (8001320 <SystemClock_Config+0xd0>)
 800129e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <SystemClock_Config+0xd0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b0:	2301      	movs	r3, #1
 80012b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ba:	2302      	movs	r3, #2
 80012bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80012c4:	2319      	movs	r3, #25
 80012c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012c8:	23a8      	movs	r3, #168	; 0xa8
 80012ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012cc:	2304      	movs	r3, #4
 80012ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012d0:	2304      	movs	r3, #4
 80012d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d4:	f107 0320 	add.w	r3, r7, #32
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 ff9f 	bl	800321c <HAL_RCC_OscConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012e4:	f000 fdd8 	bl	8001e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e8:	230f      	movs	r3, #15
 80012ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ec:	2302      	movs	r3, #2
 80012ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2101      	movs	r1, #1
 8001302:	4618      	mov	r0, r3
 8001304:	f002 fa02 	bl	800370c <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800130e:	f000 fdc3 	bl	8001e98 <Error_Handler>
  }
}
 8001312:	bf00      	nop
 8001314:	3750      	adds	r7, #80	; 0x50
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40007000 	.word	0x40007000

08001324 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_I2C1_Init+0x50>)
 800132a:	4a13      	ldr	r2, [pc, #76]	; (8001378 <MX_I2C1_Init+0x54>)
 800132c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_I2C1_Init+0x50>)
 8001330:	4a12      	ldr	r2, [pc, #72]	; (800137c <MX_I2C1_Init+0x58>)
 8001332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_I2C1_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_I2C1_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_I2C1_Init+0x50>)
 8001342:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001346:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <MX_I2C1_Init+0x50>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_I2C1_Init+0x50>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <MX_I2C1_Init+0x50>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_I2C1_Init+0x50>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <MX_I2C1_Init+0x50>)
 8001362:	f001 fb0f 	bl	8002984 <HAL_I2C_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800136c:	f000 fd94 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200000ac 	.word	0x200000ac
 8001378:	40005400 	.word	0x40005400
 800137c:	000186a0 	.word	0x000186a0

08001380 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	; 0x30
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2224      	movs	r2, #36	; 0x24
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f003 fd2e 	bl	8004df0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <MX_TIM1_Init+0xb8>)
 800139e:	4a27      	ldr	r2, [pc, #156]	; (800143c <MX_TIM1_Init+0xbc>)
 80013a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013a2:	4b25      	ldr	r3, [pc, #148]	; (8001438 <MX_TIM1_Init+0xb8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b23      	ldr	r3, [pc, #140]	; (8001438 <MX_TIM1_Init+0xb8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013ae:	4b22      	ldr	r3, [pc, #136]	; (8001438 <MX_TIM1_Init+0xb8>)
 80013b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <MX_TIM1_Init+0xb8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <MX_TIM1_Init+0xb8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <MX_TIM1_Init+0xb8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013d0:	2301      	movs	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80013d8:	2302      	movs	r3, #2
 80013da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013e0:	2301      	movs	r3, #1
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 80013e8:	2302      	movs	r3, #2
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	4619      	mov	r1, r3
 80013f2:	4811      	ldr	r0, [pc, #68]	; (8001438 <MX_TIM1_Init+0xb8>)
 80013f4:	f002 fd76 	bl	8003ee4 <HAL_TIM_Encoder_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80013fe:	f000 fd4b 	bl	8001e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	4619      	mov	r1, r3
 800140e:	480a      	ldr	r0, [pc, #40]	; (8001438 <MX_TIM1_Init+0xb8>)
 8001410:	f003 fc42 	bl	8004c98 <HAL_TIMEx_MasterConfigSynchronization>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800141a:	f000 fd3d 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->CNT = 0x7FFF;		//Initialization CNT in middle value to avoid Over/Under flow
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <MX_TIM1_Init+0xbc>)
 8001420:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
  TIM1->SR = ~(1UL << 0);	//Clear UIF flag
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <MX_TIM1_Init+0xbc>)
 8001428:	f06f 0201 	mvn.w	r2, #1
 800142c:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM1_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	3730      	adds	r7, #48	; 0x30
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000100 	.word	0x20000100
 800143c:	40010000 	.word	0x40010000

08001440 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08e      	sub	sp, #56	; 0x38
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
 800146c:	615a      	str	r2, [r3, #20]
 800146e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001470:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <MX_TIM2_Init+0xe4>)
 8001472:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001476:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001478:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <MX_TIM2_Init+0xe4>)
 800147a:	2200      	movs	r2, #0
 800147c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147e:	4b29      	ldr	r3, [pc, #164]	; (8001524 <MX_TIM2_Init+0xe4>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 8001484:	4b27      	ldr	r3, [pc, #156]	; (8001524 <MX_TIM2_Init+0xe4>)
 8001486:	2202      	movs	r2, #2
 8001488:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <MX_TIM2_Init+0xe4>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001490:	4b24      	ldr	r3, [pc, #144]	; (8001524 <MX_TIM2_Init+0xe4>)
 8001492:	2280      	movs	r2, #128	; 0x80
 8001494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001496:	4823      	ldr	r0, [pc, #140]	; (8001524 <MX_TIM2_Init+0xe4>)
 8001498:	f002 fb04 	bl	8003aa4 <HAL_TIM_Base_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80014a2:	f000 fcf9 	bl	8001e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b0:	4619      	mov	r1, r3
 80014b2:	481c      	ldr	r0, [pc, #112]	; (8001524 <MX_TIM2_Init+0xe4>)
 80014b4:	f003 f834 	bl	8004520 <HAL_TIM_ConfigClockSource>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80014be:	f000 fceb 	bl	8001e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014c2:	4818      	ldr	r0, [pc, #96]	; (8001524 <MX_TIM2_Init+0xe4>)
 80014c4:	f002 fba0 	bl	8003c08 <HAL_TIM_PWM_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80014ce:	f000 fce3 	bl	8001e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014da:	f107 0320 	add.w	r3, r7, #32
 80014de:	4619      	mov	r1, r3
 80014e0:	4810      	ldr	r0, [pc, #64]	; (8001524 <MX_TIM2_Init+0xe4>)
 80014e2:	f003 fbd9 	bl	8004c98 <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80014ec:	f000 fcd4 	bl	8001e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f0:	2360      	movs	r3, #96	; 0x60
 80014f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 80014f4:	2301      	movs	r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80014fc:	2304      	movs	r3, #4
 80014fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2200      	movs	r2, #0
 8001504:	4619      	mov	r1, r3
 8001506:	4807      	ldr	r0, [pc, #28]	; (8001524 <MX_TIM2_Init+0xe4>)
 8001508:	f002 ff48 	bl	800439c <HAL_TIM_PWM_ConfigChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001512:	f000 fcc1 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001516:	4803      	ldr	r0, [pc, #12]	; (8001524 <MX_TIM2_Init+0xe4>)
 8001518:	f000 fde6 	bl	80020e8 <HAL_TIM_MspPostInit>

}
 800151c:	bf00      	nop
 800151e:	3738      	adds	r7, #56	; 0x38
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000148 	.word	0x20000148

08001528 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */
	float TIM10_period_ms = (float)DEBOUNCING_TIME/1000;		//Period to load into the timer, calculated from Define
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <MX_TIM10_Init+0x74>)
 8001530:	607b      	str	r3, [r7, #4]
	uint16_t TIM10_preescaler = 642;							//Preescaler, max 1 second
 8001532:	f240 2382 	movw	r3, #642	; 0x282
 8001536:	807b      	strh	r3, [r7, #2]
	uint16_t TIM10_ARR;
	TIM10_ARR = ( (float) (CLK_FREQ_T2/(TIM10_preescaler+1))*TIM10_period_ms );	//Calculation value for ARR register to set correct period
 8001538:	887b      	ldrh	r3, [r7, #2]
 800153a:	3301      	adds	r3, #1
 800153c:	4a18      	ldr	r2, [pc, #96]	; (80015a0 <MX_TIM10_Init+0x78>)
 800153e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800154a:	edd7 7a01 	vldr	s15, [r7, #4]
 800154e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001556:	ee17 3a90 	vmov	r3, s15
 800155a:	803b      	strh	r3, [r7, #0]
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_TIM10_Init+0x7c>)
 800155e:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <MX_TIM10_Init+0x80>)
 8001560:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 642;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <MX_TIM10_Init+0x7c>)
 8001564:	f240 2282 	movw	r2, #642	; 0x282
 8001568:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_TIM10_Init+0x7c>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = TIM10_ARR;
 8001570:	883b      	ldrh	r3, [r7, #0]
 8001572:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <MX_TIM10_Init+0x7c>)
 8001574:	60d3      	str	r3, [r2, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <MX_TIM10_Init+0x7c>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_TIM10_Init+0x7c>)
 800157e:	2280      	movs	r2, #128	; 0x80
 8001580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001582:	4808      	ldr	r0, [pc, #32]	; (80015a4 <MX_TIM10_Init+0x7c>)
 8001584:	f002 fa8e 	bl	8003aa4 <HAL_TIM_Base_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM10_Init+0x6a>
  {
    Error_Handler();
 800158e:	f000 fc83 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	3dcccccd 	.word	0x3dcccccd
 80015a0:	0280de80 	.word	0x0280de80
 80015a4:	20000190 	.word	0x20000190
 80015a8:	40014400 	.word	0x40014400

080015ac <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */
	float TIM11_period_ms = (float)ACC_UPDATE_RATIO/1000;		//Period to load into the timer, calculated from Define
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_TIM11_Init+0x70>)
 80015b4:	607b      	str	r3, [r7, #4]
	uint16_t TIM11_preescaler = 642;							//Preescaler, max 1 second
 80015b6:	f240 2382 	movw	r3, #642	; 0x282
 80015ba:	807b      	strh	r3, [r7, #2]
	uint16_t TIM11_ARR;
	TIM11_ARR = ( (float) (CLK_FREQ_T2/(TIM11_preescaler+1))*TIM11_period_ms );	//Calculation value for ARR register to set correct period
 80015bc:	887b      	ldrh	r3, [r7, #2]
 80015be:	3301      	adds	r3, #1
 80015c0:	4a17      	ldr	r2, [pc, #92]	; (8001620 <MX_TIM11_Init+0x74>)
 80015c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80015c6:	ee07 3a90 	vmov	s15, r3
 80015ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80015d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015da:	ee17 3a90 	vmov	r3, s15
 80015de:	803b      	strh	r3, [r7, #0]
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <MX_TIM11_Init+0x78>)
 80015e2:	4a11      	ldr	r2, [pc, #68]	; (8001628 <MX_TIM11_Init+0x7c>)
 80015e4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = TIM11_preescaler;
 80015e6:	887b      	ldrh	r3, [r7, #2]
 80015e8:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <MX_TIM11_Init+0x78>)
 80015ea:	6053      	str	r3, [r2, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <MX_TIM11_Init+0x78>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = TIM11_ARR;
 80015f2:	883b      	ldrh	r3, [r7, #0]
 80015f4:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <MX_TIM11_Init+0x78>)
 80015f6:	60d3      	str	r3, [r2, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <MX_TIM11_Init+0x78>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_TIM11_Init+0x78>)
 8001600:	2280      	movs	r2, #128	; 0x80
 8001602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001604:	4807      	ldr	r0, [pc, #28]	; (8001624 <MX_TIM11_Init+0x78>)
 8001606:	f002 fa4d 	bl	8003aa4 <HAL_TIM_Base_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM11_Init+0x68>
  {
    Error_Handler();
 8001610:	f000 fc42 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	3d4ccccd 	.word	0x3d4ccccd
 8001620:	0280de80 	.word	0x0280de80
 8001624:	200001d8 	.word	0x200001d8
 8001628:	40014800 	.word	0x40014800

0800162c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <MX_GPIO_Init+0xb4>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a25      	ldr	r2, [pc, #148]	; (80016e0 <MX_GPIO_Init+0xb4>)
 800164c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <MX_GPIO_Init+0xb4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <MX_GPIO_Init+0xb4>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a1e      	ldr	r2, [pc, #120]	; (80016e0 <MX_GPIO_Init+0xb4>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <MX_GPIO_Init+0xb4>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <MX_GPIO_Init+0xb4>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a17      	ldr	r2, [pc, #92]	; (80016e0 <MX_GPIO_Init+0xb4>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <MX_GPIO_Init+0xb4>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_Pin|DIR_Pin, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	2106      	movs	r1, #6
 800169a:	4812      	ldr	r0, [pc, #72]	; (80016e4 <MX_GPIO_Init+0xb8>)
 800169c:	f001 f958 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENABLE_Pin DIR_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin|DIR_Pin;
 80016a0:	2306      	movs	r3, #6
 80016a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	480b      	ldr	r0, [pc, #44]	; (80016e4 <MX_GPIO_Init+0xb8>)
 80016b8:	f000 ffae 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_LEFT_Pin SW_RIGHT_Pin EN_SW_Pin */
  GPIO_InitStruct.Pin = SW_LEFT_Pin|SW_RIGHT_Pin|EN_SW_Pin;
 80016bc:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80016c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4619      	mov	r1, r3
 80016d0:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_GPIO_Init+0xbc>)
 80016d2:	f000 ffa1 	bl	8002618 <HAL_GPIO_Init>

}
 80016d6:	bf00      	nop
 80016d8:	3720      	adds	r7, #32
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020000 	.word	0x40020000
 80016e8:	40020400 	.word	0x40020400

080016ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	if (htim == &htim11 ){		//Checking if the IRQ is from Timer11 Acceleration
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a11      	ldr	r2, [pc, #68]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d103      	bne.n	8001704 <HAL_TIM_PeriodElapsedCallback+0x18>
		update_speed = 1;
 80016fc:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80016fe:	2201      	movs	r2, #1
 8001700:	801a      	strh	r2, [r3, #0]
			debouncing = debouncing + 1;
		}else if (!debouncing_en_sw){	//If debouncing disable reset counter
			debouncing = 0;
		}
	}
}
 8001702:	e015      	b.n	8001730 <HAL_TIM_PeriodElapsedCallback+0x44>
	}else if ( htim == &htim10 ){	//Checking if the IRQ is from Timer10 Debouncing
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d111      	bne.n	8001730 <HAL_TIM_PeriodElapsedCallback+0x44>
		if (debouncing_en_sw){		//If debouncing enable, increment counter
 800170c:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <HAL_TIM_PeriodElapsedCallback+0x36>
			debouncing = debouncing + 1;
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	b29a      	uxth	r2, r3
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800171e:	801a      	strh	r2, [r3, #0]
}
 8001720:	e006      	b.n	8001730 <HAL_TIM_PeriodElapsedCallback+0x44>
		}else if (!debouncing_en_sw){	//If debouncing disable reset counter
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d102      	bne.n	8001730 <HAL_TIM_PeriodElapsedCallback+0x44>
			debouncing = 0;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800172c:	2200      	movs	r2, #0
 800172e:	801a      	strh	r2, [r3, #0]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	200001d8 	.word	0x200001d8
 8001740:	20000230 	.word	0x20000230
 8001744:	20000190 	.word	0x20000190
 8001748:	20000234 	.word	0x20000234
 800174c:	20000236 	.word	0x20000236

08001750 <Encoder_Read>:
  * @brief Encoder Steps Read Function
  * @param old_value - Pointer to the value storage as latest encoder value
  * @retval encoder_steps - Number of steps increased or decreased on the encoder
  */
int32_t Encoder_Read(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
	int32_t encoder_steps;
	static int32_t old_value = 0x7FFF;		//Initialisation old_value variable

	if (TIM1->SR & (1 << 0)){		//If overflow or underflow occurs reset the CNT value
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <Encoder_Read+0x78>)
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00d      	beq.n	800177e <Encoder_Read+0x2e>
		TIM1->SR = ~(1UL << 0);		//Reset UIF bit
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <Encoder_Read+0x78>)
 8001764:	f06f 0201 	mvn.w	r2, #1
 8001768:	611a      	str	r2, [r3, #16]
		TIM1->CNT = 0x7FFF;			//Reload CNT register to ox7FFF
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <Encoder_Read+0x78>)
 800176c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001770:	625a      	str	r2, [r3, #36]	; 0x24
		old_value = 0x7FFF;
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <Encoder_Read+0x7c>)
 8001774:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001778:	601a      	str	r2, [r3, #0]
		return 0;					//Return 0
 800177a:	2300      	movs	r3, #0
 800177c:	e01d      	b.n	80017ba <Encoder_Read+0x6a>
	}

	uint16_t encoder_value = TIM1->CNT;		//Variable to storage the CNT register value
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <Encoder_Read+0x78>)
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	80fb      	strh	r3, [r7, #6]
	if ( ( encoder_value - old_value >= 2 ) || ( encoder_value - old_value <= -2 ) ){		//If the value in the encoder register changed (At least 2, to avoid glitches) calculate increment
 8001784:	88fa      	ldrh	r2, [r7, #6]
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <Encoder_Read+0x7c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b01      	cmp	r3, #1
 800178e:	dc06      	bgt.n	800179e <Encoder_Read+0x4e>
 8001790:	88fa      	ldrh	r2, [r7, #6]
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <Encoder_Read+0x7c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	da0c      	bge.n	80017b8 <Encoder_Read+0x68>
		encoder_steps = (old_value - encoder_value)/2;	//Divide by 2 is needed due to increments by two on the encoder
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <Encoder_Read+0x7c>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	0fda      	lsrs	r2, r3, #31
 80017a8:	4413      	add	r3, r2
 80017aa:	105b      	asrs	r3, r3, #1
 80017ac:	603b      	str	r3, [r7, #0]
		old_value = encoder_value;			//Reload the old_value
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4a06      	ldr	r2, [pc, #24]	; (80017cc <Encoder_Read+0x7c>)
 80017b2:	6013      	str	r3, [r2, #0]
		return encoder_steps;				//Return the increments, can be positive or negative
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	e000      	b.n	80017ba <Encoder_Read+0x6a>
	}else{
		return 0;							//Return 0 in case no changes
 80017b8:	2300      	movs	r3, #0
	}
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40010000 	.word	0x40010000
 80017cc:	20000010 	.word	0x20000010

080017d0 <LCD_Write_Number>:
  * 		col_pos - column position for the number
  * 		row_pos - raw position for the number
  * @retval
  */
void LCD_Write_Number(int32_t value, int32_t col_pos, int32_t row_pos)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
	char str[10];					//Variable to storage the string
	sprintf(str, "%ld", value);		//Convert number to string
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	496e      	ldr	r1, [pc, #440]	; (800199c <LCD_Write_Number+0x1cc>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f003 fb0b 	bl	8004e00 <siprintf>
	if (value > 0){					//If value is positive
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	dd5b      	ble.n	80018a8 <LCD_Write_Number+0xd8>
		if (value < 10){			//If value is lower than 10
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b09      	cmp	r3, #9
 80017f4:	dc1a      	bgt.n	800182c <LCD_Write_Number+0x5c>
			lcdSetCursor(col_pos+1,row_pos);
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	3301      	adds	r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff f969 	bl	8000adc <lcdSetCursor>
			lcdPrint(" ");
 800180a:	4865      	ldr	r0, [pc, #404]	; (80019a0 <LCD_Write_Number+0x1d0>)
 800180c:	f7ff f998 	bl	8000b40 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	4611      	mov	r1, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff f95e 	bl	8000adc <lcdSetCursor>
			lcdPrint(str);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff f98b 	bl	8000b40 <lcdPrint>
		lcdSetCursor(col_pos,row_pos);
		lcdPrint("  ");
		lcdSetCursor(col_pos,row_pos);
		lcdPrint("0");
	}
}
 800182a:	e0b3      	b.n	8001994 <LCD_Write_Number+0x1c4>
		}else if (value < 100){		//If value is lower than 100
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b63      	cmp	r3, #99	; 0x63
 8001830:	dc1a      	bgt.n	8001868 <LCD_Write_Number+0x98>
			lcdSetCursor(col_pos+2,row_pos);
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	3302      	adds	r3, #2
 8001838:	b2db      	uxtb	r3, r3
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff f94b 	bl	8000adc <lcdSetCursor>
			lcdPrint(" ");
 8001846:	4856      	ldr	r0, [pc, #344]	; (80019a0 <LCD_Write_Number+0x1d0>)
 8001848:	f7ff f97a 	bl	8000b40 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff f940 	bl	8000adc <lcdSetCursor>
			lcdPrint(str);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff f96d 	bl	8000b40 <lcdPrint>
}
 8001866:	e095      	b.n	8001994 <LCD_Write_Number+0x1c4>
		}else if (value < 1000){	//If value is lower than 1000
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800186e:	f280 8091 	bge.w	8001994 <LCD_Write_Number+0x1c4>
			lcdSetCursor(col_pos+3,row_pos);
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	3303      	adds	r3, #3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff f92b 	bl	8000adc <lcdSetCursor>
			lcdPrint(" ");
 8001886:	4846      	ldr	r0, [pc, #280]	; (80019a0 <LCD_Write_Number+0x1d0>)
 8001888:	f7ff f95a 	bl	8000b40 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f920 	bl	8000adc <lcdSetCursor>
			lcdPrint(str);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff f94d 	bl	8000b40 <lcdPrint>
}
 80018a6:	e075      	b.n	8001994 <LCD_Write_Number+0x1c4>
	}else if (value < 0) {			//If value is negative
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	da5c      	bge.n	8001968 <LCD_Write_Number+0x198>
		if (value > -10){			//If value is higher than -10
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f113 0f09 	cmn.w	r3, #9
 80018b4:	db1a      	blt.n	80018ec <LCD_Write_Number+0x11c>
			lcdSetCursor(col_pos+2,row_pos);
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	3302      	adds	r3, #2
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff f909 	bl	8000adc <lcdSetCursor>
			lcdPrint(" ");
 80018ca:	4835      	ldr	r0, [pc, #212]	; (80019a0 <LCD_Write_Number+0x1d0>)
 80018cc:	f7ff f938 	bl	8000b40 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	4611      	mov	r1, r2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f8fe 	bl	8000adc <lcdSetCursor>
			lcdPrint(str);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff f92b 	bl	8000b40 <lcdPrint>
}
 80018ea:	e053      	b.n	8001994 <LCD_Write_Number+0x1c4>
		}else if (value > -100){	//If value is higher than -100
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80018f2:	db1a      	blt.n	800192a <LCD_Write_Number+0x15a>
			lcdSetCursor(col_pos+2,row_pos);
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	3302      	adds	r3, #2
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	4611      	mov	r1, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f8ea 	bl	8000adc <lcdSetCursor>
			lcdPrint("  ");
 8001908:	4826      	ldr	r0, [pc, #152]	; (80019a4 <LCD_Write_Number+0x1d4>)
 800190a:	f7ff f919 	bl	8000b40 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff f8df 	bl	8000adc <lcdSetCursor>
			lcdPrint(str);
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff f90c 	bl	8000b40 <lcdPrint>
}
 8001928:	e034      	b.n	8001994 <LCD_Write_Number+0x1c4>
		}else if (value > -1000){	//If value is higher than -1000
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001930:	dd30      	ble.n	8001994 <LCD_Write_Number+0x1c4>
			lcdSetCursor(col_pos+2,row_pos);
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	3302      	adds	r3, #2
 8001938:	b2db      	uxtb	r3, r3
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff f8cb 	bl	8000adc <lcdSetCursor>
			lcdPrint("   ");
 8001946:	4818      	ldr	r0, [pc, #96]	; (80019a8 <LCD_Write_Number+0x1d8>)
 8001948:	f7ff f8fa 	bl	8000b40 <lcdPrint>
			lcdSetCursor(col_pos,row_pos);
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f8c0 	bl	8000adc <lcdSetCursor>
			lcdPrint(str);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff f8ed 	bl	8000b40 <lcdPrint>
}
 8001966:	e015      	b.n	8001994 <LCD_Write_Number+0x1c4>
		lcdSetCursor(col_pos,row_pos);
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	4611      	mov	r1, r2
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff f8b2 	bl	8000adc <lcdSetCursor>
		lcdPrint("  ");
 8001978:	480a      	ldr	r0, [pc, #40]	; (80019a4 <LCD_Write_Number+0x1d4>)
 800197a:	f7ff f8e1 	bl	8000b40 <lcdPrint>
		lcdSetCursor(col_pos,row_pos);
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff f8a7 	bl	8000adc <lcdSetCursor>
		lcdPrint("0");
 800198e:	4807      	ldr	r0, [pc, #28]	; (80019ac <LCD_Write_Number+0x1dc>)
 8001990:	f7ff f8d6 	bl	8000b40 <lcdPrint>
}
 8001994:	bf00      	nop
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	0800574c 	.word	0x0800574c
 80019a0:	08005750 	.word	0x08005750
 80019a4:	08005754 	.word	0x08005754
 80019a8:	08005758 	.word	0x08005758
 80019ac:	0800575c 	.word	0x0800575c

080019b0 <Motor_Enable>:
/**
  * @brief Function to Enable EN signal for Motor Driver
  * @param 	invert - variable to invert the EN pin logic
  * @retval
  */
void Motor_Enable(uint16_t invert){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, ENABLE_Pin, (GPIO_PIN_SET^invert));	//Enable Motor, XOR with SET to invert it if selected
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f083 0301 	eor.w	r3, r3, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	461a      	mov	r2, r3
 80019c6:	2102      	movs	r1, #2
 80019c8:	4803      	ldr	r0, [pc, #12]	; (80019d8 <Motor_Enable+0x28>)
 80019ca:	f000 ffc1 	bl	8002950 <HAL_GPIO_WritePin>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40020000 	.word	0x40020000

080019dc <Motor_Disable>:
/**
  * @brief Function to Disable EN signal for Motor Driver
  * @param 	invert - variable to invert the EN pin logic
  * @retval
  */
void Motor_Disable(uint16_t invert){
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, ENABLE_Pin, (GPIO_PIN_RESET^invert));	//Disable Motor, XOR with SET to invert it if selected
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	461a      	mov	r2, r3
 80019ec:	2102      	movs	r1, #2
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <Motor_Disable+0x28>)
 80019f0:	f000 ffae 	bl	8002950 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80019f4:	2100      	movs	r1, #0
 80019f6:	4804      	ldr	r0, [pc, #16]	; (8001a08 <Motor_Disable+0x2c>)
 80019f8:	f002 fa10 	bl	8003e1c <HAL_TIM_PWM_Stop>
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40020000 	.word	0x40020000
 8001a08:	20000148 	.word	0x20000148

08001a0c <Motor_Direction>:
  * @brief Function to select the direction of the motor
  * @param 	direction - variable to set the direction of the motor (RIGHT or LEFT)
  * 		invert - variable to invert the DIR pin logic
  * @retval
  */
void Motor_Direction(uint16_t direction, uint16_t invert){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	460a      	mov	r2, r1
 8001a16:	80fb      	strh	r3, [r7, #6]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	80bb      	strh	r3, [r7, #4]
	if ( direction == RIGHT ){
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d10a      	bne.n	8001a38 <Motor_Direction+0x2c>
		HAL_GPIO_WritePin(GPIOA, DIR_Pin, (GPIO_PIN_SET^invert));	//Disable Motor, XOR with SET to invert it if selected
 8001a22:	88bb      	ldrh	r3, [r7, #4]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	f083 0301 	eor.w	r3, r3, #1
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	2104      	movs	r1, #4
 8001a30:	4808      	ldr	r0, [pc, #32]	; (8001a54 <Motor_Direction+0x48>)
 8001a32:	f000 ff8d 	bl	8002950 <HAL_GPIO_WritePin>
	}else if (direction == LEFT){
		HAL_GPIO_WritePin(GPIOA, DIR_Pin, (GPIO_PIN_RESET^invert));	//Disable Motor, XOR with SET to invert it if selected
	}

}
 8001a36:	e009      	b.n	8001a4c <Motor_Direction+0x40>
	}else if (direction == LEFT){
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <Motor_Direction+0x40>
		HAL_GPIO_WritePin(GPIOA, DIR_Pin, (GPIO_PIN_RESET^invert));	//Disable Motor, XOR with SET to invert it if selected
 8001a3e:	88bb      	ldrh	r3, [r7, #4]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	461a      	mov	r2, r3
 8001a44:	2104      	movs	r1, #4
 8001a46:	4803      	ldr	r0, [pc, #12]	; (8001a54 <Motor_Direction+0x48>)
 8001a48:	f000 ff82 	bl	8002950 <HAL_GPIO_WritePin>
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40020000 	.word	0x40020000

08001a58 <Motor_Speed_RPM>:
/**
  * @brief Function to select the speed of the motor in RPM
  * @param 	rpm - Speed value in RPM it is wanted
  * @retval
  */
void Motor_Speed_RPM(uint16_t speed){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	80fb      	strh	r3, [r7, #6]
	float ARR_value_temp = 0;
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
	uint32_t ARR_value;
	if ((TIM2->CR1 & (1 << 0)) ^ (1 << 0)){			//Checking if the Timer is already enabled, if not, enable it
 8001a68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <Motor_Speed_RPM+0x22>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <Motor_Speed_RPM+0x24>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <Motor_Speed_RPM+0x30>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	//Enable Timer2 on PWM Mode
 8001a80:	2100      	movs	r1, #0
 8001a82:	4818      	ldr	r0, [pc, #96]	; (8001ae4 <Motor_Speed_RPM+0x8c>)
 8001a84:	f002 f91a 	bl	8003cbc <HAL_TIM_PWM_Start>
	}
	if (speed > 0){
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d021      	beq.n	8001ad2 <Motor_Speed_RPM+0x7a>
	ARR_value_temp = ((60 * (float) CLK_FREQ_T2)/(speed*motor_stepsrev));	//Calculation Value to load in ARR
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	4a15      	ldr	r2, [pc, #84]	; (8001ae8 <Motor_Speed_RPM+0x90>)
 8001a92:	8812      	ldrh	r2, [r2, #0]
 8001a94:	fb02 f303 	mul.w	r3, r2, r3
 8001a98:	ee07 3a90 	vmov	s15, r3
 8001a9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa0:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001aec <Motor_Speed_RPM+0x94>
 8001aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aa8:	edc7 7a03 	vstr	s15, [r7, #12]
	ARR_value = (uint32_t) ARR_value_temp;	//Uint32 casting
 8001aac:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ab4:	ee17 3a90 	vmov	r3, s15
 8001ab8:	60bb      	str	r3, [r7, #8]
	TIM2->ARR = ARR_value+1;				//Load ARR + 1
 8001aba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CCR1 = (uint32_t) (ARR_value+1)/2;	//Load CCR1 to have always 50% Duty Cycle
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001acc:	085b      	lsrs	r3, r3, #1
 8001ace:	6353      	str	r3, [r2, #52]	; 0x34
	}else{
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);	//Disable Timer2 on PWM Mode
	}
}
 8001ad0:	e003      	b.n	8001ada <Motor_Speed_RPM+0x82>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);	//Disable Timer2 on PWM Mode
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <Motor_Speed_RPM+0x8c>)
 8001ad6:	f002 f9a1 	bl	8003e1c <HAL_TIM_PWM_Stop>
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000148 	.word	0x20000148
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	4f163426 	.word	0x4f163426

08001af0 <Motor_Feedrate_Update>:
  * @brief Function to update the feedrate of the motor following the acceleration
  * @param 	current_feedrate - Current feedrate
  * 		target_speed - Target feedrate
  * @retval updated_feedrate - Updated feedrate
  */
uint16_t Motor_Feedrate_Update(int16_t *current_feedrate, int16_t *target_feedrate){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
	static uint16_t prev_target_feedrate;	//Static Variable to storage the previous target feedrate
	static uint16_t acc_step_increment;		//Static Variable to storage the acceleration step increment
	static uint16_t diff_feedrate;			//Static variable to storage the delta feedrate

	uint16_t acc_step = ceil(ACC_TIME/ACC_UPDATE_RATIO);	//Calculation acc_step with the desired time in ms, and the refresh ratio on acc update
 8001afa:	2314      	movs	r3, #20
 8001afc:	81fb      	strh	r3, [r7, #14]
															//This will provide the number of steps we need to do to accelerate on the desired ACC_TIME

	diff_feedrate = *target_feedrate - *current_feedrate;	//Calculation for the Delta feedrate
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b52      	ldr	r3, [pc, #328]	; (8001c5c <Motor_Feedrate_Update+0x16c>)
 8001b14:	801a      	strh	r2, [r3, #0]

	if (prev_target_feedrate != *target_feedrate){			//If the storaged feedrate changed since last time
 8001b16:	4b52      	ldr	r3, [pc, #328]	; (8001c60 <Motor_Feedrate_Update+0x170>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d026      	beq.n	8001b74 <Motor_Feedrate_Update+0x84>
		prev_target_feedrate = *target_feedrate;				//Reload the prev_target_feedrate with latest value
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	4b4c      	ldr	r3, [pc, #304]	; (8001c60 <Motor_Feedrate_Update+0x170>)
 8001b30:	801a      	strh	r2, [r3, #0]
		diff_feedrate = abs(*target_feedrate - *current_feedrate);	//Re-calculate the delta feedrate
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	bfb8      	it	lt
 8001b46:	425b      	neglt	r3, r3
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	4b44      	ldr	r3, [pc, #272]	; (8001c5c <Motor_Feedrate_Update+0x16c>)
 8001b4c:	801a      	strh	r2, [r3, #0]
		acc_step_increment = ceil(diff_feedrate / acc_step);	//Re-calculate the acceleration step increment, so we take the Delta feedrate and divide it by
 8001b4e:	4b43      	ldr	r3, [pc, #268]	; (8001c5c <Motor_Feedrate_Update+0x16c>)
 8001b50:	881a      	ldrh	r2, [r3, #0]
 8001b52:	89fb      	ldrh	r3, [r7, #14]
 8001b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fcea 	bl	8000534 <__aeabi_i2d>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7fe fd4e 	bl	8000608 <__aeabi_d2uiz>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	4b3c      	ldr	r3, [pc, #240]	; (8001c64 <Motor_Feedrate_Update+0x174>)
 8001b72:	801a      	strh	r2, [r3, #0]
																//the numbers of step required to meeting the timing
	}

	if ( *current_feedrate < *target_feedrate){			//If the current feedrate is lower than the target, accelerate
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	da1f      	bge.n	8001bc4 <Motor_Feedrate_Update+0xd4>
		if (  (acc_step_increment >= diff_feedrate) || (!acc_step_increment) ){	//If the step increment is lower than the delta feedrate then we increase by one to reach the target
 8001b84:	4b37      	ldr	r3, [pc, #220]	; (8001c64 <Motor_Feedrate_Update+0x174>)
 8001b86:	881a      	ldrh	r2, [r3, #0]
 8001b88:	4b34      	ldr	r3, [pc, #208]	; (8001c5c <Motor_Feedrate_Update+0x16c>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d203      	bcs.n	8001b98 <Motor_Feedrate_Update+0xa8>
 8001b90:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <Motor_Feedrate_Update+0x174>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d109      	bne.n	8001bac <Motor_Feedrate_Update+0xbc>
																				//Or if the acceleration step increment is zero (If the delta feedrate is lower than the acceleration step)
			*current_feedrate = *current_feedrate + 1;	//Increment by one
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	801a      	strh	r2, [r3, #0]
 8001baa:	e03a      	b.n	8001c22 <Motor_Feedrate_Update+0x132>
		}else{											//If the delta feedrate is bigger than acc_step and the the step incrmenet is lower than the delta feedrate the we increase
			*current_feedrate = *current_feedrate + acc_step_increment;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <Motor_Feedrate_Update+0x174>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	4413      	add	r3, r2
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	b21a      	sxth	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	801a      	strh	r2, [r3, #0]
 8001bc2:	e02e      	b.n	8001c22 <Motor_Feedrate_Update+0x132>
		}
	}else if (*current_feedrate == *target_feedrate){	//If the target is achieved
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d026      	beq.n	8001c22 <Motor_Feedrate_Update+0x132>

	}else if ( *current_feedrate > *target_feedrate ){	//If the current feedrate is higher than the target, decelerate
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dd1e      	ble.n	8001c22 <Motor_Feedrate_Update+0x132>
		if (  (acc_step_increment >= diff_feedrate) || (!acc_step_increment) ){	//If the step increment is lower than the delta feedrate then we increase by one to reach the target
 8001be4:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <Motor_Feedrate_Update+0x174>)
 8001be6:	881a      	ldrh	r2, [r3, #0]
 8001be8:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <Motor_Feedrate_Update+0x16c>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d203      	bcs.n	8001bf8 <Motor_Feedrate_Update+0x108>
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <Motor_Feedrate_Update+0x174>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d109      	bne.n	8001c0c <Motor_Feedrate_Update+0x11c>
																						//Or if the acceleration step increment is zero (If the delta feedrate is lower than the acceleration step)
			*current_feedrate = *current_feedrate - 1;	//Decrement by one
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b21a      	sxth	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	801a      	strh	r2, [r3, #0]
 8001c0a:	e00a      	b.n	8001c22 <Motor_Feedrate_Update+0x132>
		}else{											//If the delta feedrate is bigger than acc_step and the the step incrmenet is lower than the delta feedrate the we increase
			*current_feedrate = *current_feedrate - acc_step_increment;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <Motor_Feedrate_Update+0x174>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	b21a      	sxth	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	801a      	strh	r2, [r3, #0]
		}
	}

	uint16_t rpm = *current_feedrate/leadscrew_pitch;	//Calculation for RPM with the leadscrew pitch
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c28:	ee07 3a90 	vmov	s15, r3
 8001c2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <Motor_Feedrate_Update+0x178>)
 8001c32:	ed93 7a00 	vldr	s14, [r3]
 8001c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c3e:	ee17 3a90 	vmov	r3, s15
 8001c42:	81bb      	strh	r3, [r7, #12]
	Motor_Speed_RPM(rpm);	//Set the motor speed
 8001c44:	89bb      	ldrh	r3, [r7, #12]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff06 	bl	8001a58 <Motor_Speed_RPM>

	return *current_feedrate;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c52:	b29b      	uxth	r3, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000238 	.word	0x20000238
 8001c60:	2000023a 	.word	0x2000023a
 8001c64:	2000023c 	.word	0x2000023c
 8001c68:	20000004 	.word	0x20000004

08001c6c <LCD_Write_Feedrate>:
  * @param 	feedrate - feedrate value which expected to be writen into the LCD
  * 		col_pos - column position for the number
  * 		row_pos - raw position for the number
  * @retval
  */
void LCD_Write_Feedrate(int32_t feedrate, int32_t col_pos, int32_t row_pos){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
	static int32_t saved_feedrate;
	if ( saved_feedrate != feedrate ){					//Print only if the feedrate changed
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <LCD_Write_Feedrate+0x34>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d00a      	beq.n	8001c98 <LCD_Write_Feedrate+0x2c>
		LCD_Write_Number(feedrate,col_pos,row_pos);		//Write the number in the desired position
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f7ff fda2 	bl	80017d0 <LCD_Write_Number>
		lcdPrint("mm/min ");							//Adding mm/min
 8001c8c:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <LCD_Write_Feedrate+0x38>)
 8001c8e:	f7fe ff57 	bl	8000b40 <lcdPrint>
		saved_feedrate = feedrate;						//Updating Feedrate Saved
 8001c92:	4a03      	ldr	r2, [pc, #12]	; (8001ca0 <LCD_Write_Feedrate+0x34>)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6013      	str	r3, [r2, #0]
	}
}
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000240 	.word	0x20000240
 8001ca4:	08005760 	.word	0x08005760

08001ca8 <Switch_Status_Read>:
/**
  * @brief Function to read the value for the switchs
  * @param	- NONE
  * @retval	- Switch Status RIGHT, LEFT, MID, FAIL
  */
int16_t Switch_Status_Read(void){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
	int16_t switch_right, switch_left, sw_status;
	switch_right = HAL_GPIO_ReadPin(SW_RIGHT_GPIO_Port, SW_RIGHT_Pin);	//Storage value of RIGHT pin
 8001cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb2:	4821      	ldr	r0, [pc, #132]	; (8001d38 <Switch_Status_Read+0x90>)
 8001cb4:	f000 fe34 	bl	8002920 <HAL_GPIO_ReadPin>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	80bb      	strh	r3, [r7, #4]
	switch_left = HAL_GPIO_ReadPin(SW_LEFT_GPIO_Port, SW_LEFT_Pin);		//Storage value of LEFT pin
 8001cbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cc0:	481d      	ldr	r0, [pc, #116]	; (8001d38 <Switch_Status_Read+0x90>)
 8001cc2:	f000 fe2d 	bl	8002920 <HAL_GPIO_ReadPin>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	807b      	strh	r3, [r7, #2]
	if ( !switch_right & !switch_left ){	//If both are enabled at same time, return FAIL
 8001cca:	88ba      	ldrh	r2, [r7, #4]
 8001ccc:	887b      	ldrh	r3, [r7, #2]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	b21b      	sxth	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d103      	bne.n	8001cde <Switch_Status_Read+0x36>
		sw_status = FAIL;
 8001cd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cda:	80fb      	strh	r3, [r7, #6]
 8001cdc:	e026      	b.n	8001d2c <Switch_Status_Read+0x84>
	}else if( switch_right & switch_left ){	//If none are enabled return MID point
 8001cde:	88ba      	ldrh	r2, [r7, #4]
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <Switch_Status_Read+0x48>
		sw_status = MID;
 8001cea:	2302      	movs	r3, #2
 8001cec:	80fb      	strh	r3, [r7, #6]
 8001cee:	e01d      	b.n	8001d2c <Switch_Status_Read+0x84>
	}else if ( ( !switch_right ) & switch_left ){	//If right is enable return RIGHT
 8001cf0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf0c      	ite	eq
 8001cf8:	2301      	moveq	r3, #1
 8001cfa:	2300      	movne	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <Switch_Status_Read+0x68>
		sw_status = RIGHT;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	80fb      	strh	r3, [r7, #6]
 8001d0e:	e00d      	b.n	8001d2c <Switch_Status_Read+0x84>
	}else if ( switch_right & ( !switch_left ) ){	//If left is enable return LEFT
 8001d10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d14:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001d18:	2a00      	cmp	r2, #0
 8001d1a:	bf0c      	ite	eq
 8001d1c:	2201      	moveq	r2, #1
 8001d1e:	2200      	movne	r2, #0
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <Switch_Status_Read+0x84>
		sw_status = LEFT;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	80fb      	strh	r3, [r7, #6]
	}
	return sw_status;
 8001d2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40020400 	.word	0x40020400

08001d3c <Update_Feedrate>:
/**
  * @brief Update Feedrate Function
  * @param old_value - Pointer to the value storaged as latest feedrate value
  * @retval new_feedrate - Updated Feedrate
  */
void Update_Feedrate(int16_t *feedrate){
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	if (step_mode == STEP_NORMAL){
 8001d44:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <Update_Feedrate+0x8c>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10d      	bne.n	8001d68 <Update_Feedrate+0x2c>
		*feedrate += Encoder_Read();	//Update Feedrate
 8001d4c:	f7ff fd00 	bl	8001750 <Encoder_Read>
 8001d50:	4601      	mov	r1, r0
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	b28b      	uxth	r3, r1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	b21a      	sxth	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	801a      	strh	r2, [r3, #0]
 8001d66:	e015      	b.n	8001d94 <Update_Feedrate+0x58>
	}else if (step_mode == STEP_x10){
 8001d68:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <Update_Feedrate+0x8c>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d111      	bne.n	8001d94 <Update_Feedrate+0x58>
		*feedrate += ( 10 * Encoder_Read());	//Update Feedrate
 8001d70:	f7ff fcee 	bl	8001750 <Encoder_Read>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4619      	mov	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	b28b      	uxth	r3, r1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	b21a      	sxth	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	801a      	strh	r2, [r3, #0]
	}
	if (*feedrate <= 0 ){	//Limit the min value to zero
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	dc03      	bgt.n	8001da6 <Update_Feedrate+0x6a>
		*feedrate = 1;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	801a      	strh	r2, [r3, #0]
	}else if (*feedrate > MAX_FEEDRATE){
		*feedrate = MAX_FEEDRATE;
	}
}
 8001da4:	e00c      	b.n	8001dc0 <Update_Feedrate+0x84>
	}else if (*feedrate > MAX_FEEDRATE){
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <Update_Feedrate+0x90>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	dd04      	ble.n	8001dc0 <Update_Feedrate+0x84>
		*feedrate = MAX_FEEDRATE;
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <Update_Feedrate+0x90>)
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	b21a      	sxth	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	801a      	strh	r2, [r3, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000224 	.word	0x20000224
 8001dcc:	20000008 	.word	0x20000008

08001dd0 <Encoder_Switch_Status_Read>:
/**
  * @brief Function to read the value for the encoder switch
  * @param	- NONE
  * @retval	- Encoder Switch Status TRUE, FALSE or TRUE_HOLD
  */
int16_t Encoder_Switch_Status_Read(void){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
	static uint16_t temp_debouncing = 0;	//Temporal variable to storage the debouncing
	static uint16_t previous_en_sw_status;	//Variable to storage the previous status of the encoder switch
	uint16_t en_sw_status;
	uint16_t encoder_sw_read_value;

	encoder_sw_read_value = HAL_GPIO_ReadPin(EN_SW_GPIO_Port, EN_SW_Pin);
 8001dd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dda:	482a      	ldr	r0, [pc, #168]	; (8001e84 <Encoder_Switch_Status_Read+0xb4>)
 8001ddc:	f000 fda0 	bl	8002920 <HAL_GPIO_ReadPin>
 8001de0:	4603      	mov	r3, r0
 8001de2:	80bb      	strh	r3, [r7, #4]

	if ( ( !encoder_sw_read_value ) && ( !debouncing_en_sw ) ){	//If encoder is pressed and debouncing not enable
 8001de4:	88bb      	ldrh	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10d      	bne.n	8001e06 <Encoder_Switch_Status_Read+0x36>
 8001dea:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <Encoder_Switch_Status_Read+0xb8>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <Encoder_Switch_Status_Read+0x36>
		debouncing_en_sw = TRUE;	//Enable debouncing
 8001df2:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <Encoder_Switch_Status_Read+0xb8>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	801a      	strh	r2, [r3, #0]
		temp_debouncing = debouncing;	//Load value from debouncing
 8001df8:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <Encoder_Switch_Status_Read+0xbc>)
 8001dfa:	881a      	ldrh	r2, [r3, #0]
 8001dfc:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <Encoder_Switch_Status_Read+0xc0>)
 8001dfe:	801a      	strh	r2, [r3, #0]
		en_sw_status = FALSE;			//SW status still disable waiting debouncing time
 8001e00:	2300      	movs	r3, #0
 8001e02:	80fb      	strh	r3, [r7, #6]
 8001e04:	e037      	b.n	8001e76 <Encoder_Switch_Status_Read+0xa6>
	}else if ( ( !encoder_sw_read_value ) && ( temp_debouncing+2 <= debouncing )){ //If encoder still pressed and debouncing +2 already passed
 8001e06:	88bb      	ldrh	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d118      	bne.n	8001e3e <Encoder_Switch_Status_Read+0x6e>
 8001e0c:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <Encoder_Switch_Status_Read+0xc0>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	3301      	adds	r3, #1
 8001e12:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <Encoder_Switch_Status_Read+0xbc>)
 8001e14:	8812      	ldrh	r2, [r2, #0]
 8001e16:	4293      	cmp	r3, r2
 8001e18:	da11      	bge.n	8001e3e <Encoder_Switch_Status_Read+0x6e>
		en_sw_status = FALSE;	//Status still FALSE
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	80fb      	strh	r3, [r7, #6]
		//debouncing_en_sw = FALSE;	//Disable debouncing
		previous_en_sw_status = TRUE;	//Set previous status of enable TRUE
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <Encoder_Switch_Status_Read+0xc4>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	801a      	strh	r2, [r3, #0]
		if ( temp_debouncing+SW_HOLD_TIME <= debouncing ){	//If we keep the button pressed more than the time defines
 8001e24:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <Encoder_Switch_Status_Read+0xc0>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	3309      	adds	r3, #9
 8001e2a:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <Encoder_Switch_Status_Read+0xbc>)
 8001e2c:	8812      	ldrh	r2, [r2, #0]
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	da21      	bge.n	8001e76 <Encoder_Switch_Status_Read+0xa6>
			en_sw_status = TRUE_HOLD;
 8001e32:	2303      	movs	r3, #3
 8001e34:	80fb      	strh	r3, [r7, #6]
			previous_en_sw_status = TRUE_HOLD;
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <Encoder_Switch_Status_Read+0xc4>)
 8001e38:	2203      	movs	r2, #3
 8001e3a:	801a      	strh	r2, [r3, #0]
		if ( temp_debouncing+SW_HOLD_TIME <= debouncing ){	//If we keep the button pressed more than the time defines
 8001e3c:	e01b      	b.n	8001e76 <Encoder_Switch_Status_Read+0xa6>
		}
	}else if( ( encoder_sw_read_value )){
 8001e3e:	88bb      	ldrh	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d018      	beq.n	8001e76 <Encoder_Switch_Status_Read+0xa6>
		if ( previous_en_sw_status == TRUE_HOLD ){	//If previous status was HOLD< do not report push
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <Encoder_Switch_Status_Read+0xc4>)
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d102      	bne.n	8001e52 <Encoder_Switch_Status_Read+0x82>
			en_sw_status = FALSE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	80fb      	strh	r3, [r7, #6]
 8001e50:	e00e      	b.n	8001e70 <Encoder_Switch_Status_Read+0xa0>
		}else if ( previous_en_sw_status == TRUE ){
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <Encoder_Switch_Status_Read+0xc4>)
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d105      	bne.n	8001e66 <Encoder_Switch_Status_Read+0x96>
			en_sw_status = TRUE;	//If button released then send status TRUE
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	80fb      	strh	r3, [r7, #6]
			debouncing_en_sw = FALSE;	//Disable debouncing
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <Encoder_Switch_Status_Read+0xb8>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	801a      	strh	r2, [r3, #0]
 8001e64:	e004      	b.n	8001e70 <Encoder_Switch_Status_Read+0xa0>
		}else{
			en_sw_status = FALSE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	80fb      	strh	r3, [r7, #6]
			debouncing_en_sw = FALSE;	//Disable debouncing
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <Encoder_Switch_Status_Read+0xb8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	801a      	strh	r2, [r3, #0]
		}
		previous_en_sw_status = FALSE;	//Reset variable of previous status
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <Encoder_Switch_Status_Read+0xc4>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	801a      	strh	r2, [r3, #0]
	}else{
		//en_sw_status = FALSE;	//In case other condition, send FALSE
	}
	return en_sw_status;
 8001e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40020400 	.word	0x40020400
 8001e88:	20000234 	.word	0x20000234
 8001e8c:	20000236 	.word	0x20000236
 8001e90:	20000244 	.word	0x20000244
 8001e94:	20000246 	.word	0x20000246

08001e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e9c:	b672      	cpsid	i
}
 8001e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <Error_Handler+0x8>
	...

08001ea4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	4a0f      	ldr	r2, [pc, #60]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <HAL_I2C_MspInit+0x84>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d12b      	bne.n	8001f6e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_I2C_MspInit+0x88>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <HAL_I2C_MspInit+0x88>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_I2C_MspInit+0x88>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f32:	23c0      	movs	r3, #192	; 0xc0
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f36:	2312      	movs	r3, #18
 8001f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f42:	2304      	movs	r3, #4
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480c      	ldr	r0, [pc, #48]	; (8001f80 <HAL_I2C_MspInit+0x8c>)
 8001f4e:	f000 fb63 	bl	8002618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_I2C_MspInit+0x88>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	4a08      	ldr	r2, [pc, #32]	; (8001f7c <HAL_I2C_MspInit+0x88>)
 8001f5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f60:	6413      	str	r3, [r2, #64]	; 0x40
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_I2C_MspInit+0x88>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f6e:	bf00      	nop
 8001f70:	3728      	adds	r7, #40	; 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40005400 	.word	0x40005400
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020400 	.word	0x40020400

08001f84 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a21      	ldr	r2, [pc, #132]	; (8002028 <HAL_TIM_Encoder_MspInit+0xa4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d13c      	bne.n	8002020 <HAL_TIM_Encoder_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_TIM_Encoder_MspInit+0xa8>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	4a1f      	ldr	r2, [pc, #124]	; (800202c <HAL_TIM_Encoder_MspInit+0xa8>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_TIM_Encoder_MspInit+0xa8>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_TIM_Encoder_MspInit+0xa8>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a18      	ldr	r2, [pc, #96]	; (800202c <HAL_TIM_Encoder_MspInit+0xa8>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b16      	ldr	r3, [pc, #88]	; (800202c <HAL_TIM_Encoder_MspInit+0xa8>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN_A_Pin|EN_B_Pin;
 8001fde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	480d      	ldr	r0, [pc, #52]	; (8002030 <HAL_TIM_Encoder_MspInit+0xac>)
 8001ffc:	f000 fb0c 	bl	8002618 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002000:	2200      	movs	r2, #0
 8002002:	2100      	movs	r1, #0
 8002004:	2019      	movs	r0, #25
 8002006:	f000 fad0 	bl	80025aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800200a:	2019      	movs	r0, #25
 800200c:	f000 fae9 	bl	80025e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002010:	2200      	movs	r2, #0
 8002012:	2100      	movs	r1, #0
 8002014:	201a      	movs	r0, #26
 8002016:	f000 fac8 	bl	80025aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800201a:	201a      	movs	r0, #26
 800201c:	f000 fae1 	bl	80025e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002020:	bf00      	nop
 8002022:	3728      	adds	r7, #40	; 0x28
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40010000 	.word	0x40010000
 800202c:	40023800 	.word	0x40023800
 8002030:	40020000 	.word	0x40020000

08002034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002044:	d10e      	bne.n	8002064 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_TIM_Base_MspInit+0xa8>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a23      	ldr	r2, [pc, #140]	; (80020dc <HAL_TIM_Base_MspInit+0xa8>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_TIM_Base_MspInit+0xa8>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002062:	e036      	b.n	80020d2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM10)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <HAL_TIM_Base_MspInit+0xac>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d116      	bne.n	800209c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <HAL_TIM_Base_MspInit+0xa8>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a19      	ldr	r2, [pc, #100]	; (80020dc <HAL_TIM_Base_MspInit+0xa8>)
 8002078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b17      	ldr	r3, [pc, #92]	; (80020dc <HAL_TIM_Base_MspInit+0xa8>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	2019      	movs	r0, #25
 8002090:	f000 fa8b 	bl	80025aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002094:	2019      	movs	r0, #25
 8002096:	f000 faa4 	bl	80025e2 <HAL_NVIC_EnableIRQ>
}
 800209a:	e01a      	b.n	80020d2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <HAL_TIM_Base_MspInit+0xb0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d115      	bne.n	80020d2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <HAL_TIM_Base_MspInit+0xa8>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <HAL_TIM_Base_MspInit+0xa8>)
 80020b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b4:	6453      	str	r3, [r2, #68]	; 0x44
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_TIM_Base_MspInit+0xa8>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	201a      	movs	r0, #26
 80020c8:	f000 fa6f 	bl	80025aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80020cc:	201a      	movs	r0, #26
 80020ce:	f000 fa88 	bl	80025e2 <HAL_NVIC_EnableIRQ>
}
 80020d2:	bf00      	nop
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40014400 	.word	0x40014400
 80020e4:	40014800 	.word	0x40014800

080020e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 030c 	add.w	r3, r7, #12
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002108:	d11d      	bne.n	8002146 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <HAL_TIM_MspPostInit+0x68>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a0f      	ldr	r2, [pc, #60]	; (8002150 <HAL_TIM_MspPostInit+0x68>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <HAL_TIM_MspPostInit+0x68>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PULSE_Pin;
 8002126:	2301      	movs	r3, #1
 8002128:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002132:	2302      	movs	r3, #2
 8002134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002136:	2301      	movs	r3, #1
 8002138:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PULSE_GPIO_Port, &GPIO_InitStruct);
 800213a:	f107 030c 	add.w	r3, r7, #12
 800213e:	4619      	mov	r1, r3
 8002140:	4804      	ldr	r0, [pc, #16]	; (8002154 <HAL_TIM_MspPostInit+0x6c>)
 8002142:	f000 fa69 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002146:	bf00      	nop
 8002148:	3720      	adds	r7, #32
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	40020000 	.word	0x40020000

08002158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800215c:	e7fe      	b.n	800215c <NMI_Handler+0x4>

0800215e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002162:	e7fe      	b.n	8002162 <HardFault_Handler+0x4>

08002164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <MemManage_Handler+0x4>

0800216a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800216e:	e7fe      	b.n	800216e <BusFault_Handler+0x4>

08002170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <UsageFault_Handler+0x4>

08002176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a4:	f000 f8e2 	bl	800236c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}

080021ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021b0:	4803      	ldr	r0, [pc, #12]	; (80021c0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80021b2:	f001 ffeb 	bl	800418c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80021b6:	4803      	ldr	r0, [pc, #12]	; (80021c4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80021b8:	f001 ffe8 	bl	800418c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000100 	.word	0x20000100
 80021c4:	20000190 	.word	0x20000190

080021c8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021cc:	4803      	ldr	r0, [pc, #12]	; (80021dc <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80021ce:	f001 ffdd 	bl	800418c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80021d2:	4803      	ldr	r0, [pc, #12]	; (80021e0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80021d4:	f001 ffda 	bl	800418c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000100 	.word	0x20000100
 80021e0:	200001d8 	.word	0x200001d8

080021e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021ec:	4a14      	ldr	r2, [pc, #80]	; (8002240 <_sbrk+0x5c>)
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <_sbrk+0x60>)
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f8:	4b13      	ldr	r3, [pc, #76]	; (8002248 <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <_sbrk+0x64>)
 8002202:	4a12      	ldr	r2, [pc, #72]	; (800224c <_sbrk+0x68>)
 8002204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <_sbrk+0x64>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	429a      	cmp	r2, r3
 8002212:	d207      	bcs.n	8002224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002214:	f002 fdc2 	bl	8004d9c <__errno>
 8002218:	4603      	mov	r3, r0
 800221a:	220c      	movs	r2, #12
 800221c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295
 8002222:	e009      	b.n	8002238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <_sbrk+0x64>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800222a:	4b07      	ldr	r3, [pc, #28]	; (8002248 <_sbrk+0x64>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	4a05      	ldr	r2, [pc, #20]	; (8002248 <_sbrk+0x64>)
 8002234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002236:	68fb      	ldr	r3, [r7, #12]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20010000 	.word	0x20010000
 8002244:	00000400 	.word	0x00000400
 8002248:	20000248 	.word	0x20000248
 800224c:	20000260 	.word	0x20000260

08002250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <SystemInit+0x20>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	4a05      	ldr	r2, [pc, #20]	; (8002270 <SystemInit+0x20>)
 800225c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <Reset_Handler>:
 8002274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022ac <LoopFillZerobss+0x12>
 8002278:	480d      	ldr	r0, [pc, #52]	; (80022b0 <LoopFillZerobss+0x16>)
 800227a:	490e      	ldr	r1, [pc, #56]	; (80022b4 <LoopFillZerobss+0x1a>)
 800227c:	4a0e      	ldr	r2, [pc, #56]	; (80022b8 <LoopFillZerobss+0x1e>)
 800227e:	2300      	movs	r3, #0
 8002280:	e002      	b.n	8002288 <LoopCopyDataInit>

08002282 <CopyDataInit>:
 8002282:	58d4      	ldr	r4, [r2, r3]
 8002284:	50c4      	str	r4, [r0, r3]
 8002286:	3304      	adds	r3, #4

08002288 <LoopCopyDataInit>:
 8002288:	18c4      	adds	r4, r0, r3
 800228a:	428c      	cmp	r4, r1
 800228c:	d3f9      	bcc.n	8002282 <CopyDataInit>
 800228e:	4a0b      	ldr	r2, [pc, #44]	; (80022bc <LoopFillZerobss+0x22>)
 8002290:	4c0b      	ldr	r4, [pc, #44]	; (80022c0 <LoopFillZerobss+0x26>)
 8002292:	2300      	movs	r3, #0
 8002294:	e001      	b.n	800229a <LoopFillZerobss>

08002296 <FillZerobss>:
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	3204      	adds	r2, #4

0800229a <LoopFillZerobss>:
 800229a:	42a2      	cmp	r2, r4
 800229c:	d3fb      	bcc.n	8002296 <FillZerobss>
 800229e:	f7ff ffd7 	bl	8002250 <SystemInit>
 80022a2:	f002 fd81 	bl	8004da8 <__libc_init_array>
 80022a6:	f7fe fd23 	bl	8000cf0 <main>
 80022aa:	4770      	bx	lr
 80022ac:	20010000 	.word	0x20010000
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000084 	.word	0x20000084
 80022b8:	080057c4 	.word	0x080057c4
 80022bc:	20000084 	.word	0x20000084
 80022c0:	20000260 	.word	0x20000260

080022c4 <ADC_IRQHandler>:
 80022c4:	e7fe      	b.n	80022c4 <ADC_IRQHandler>
	...

080022c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022cc:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_Init+0x40>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0d      	ldr	r2, [pc, #52]	; (8002308 <HAL_Init+0x40>)
 80022d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_Init+0x40>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <HAL_Init+0x40>)
 80022de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_Init+0x40>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a07      	ldr	r2, [pc, #28]	; (8002308 <HAL_Init+0x40>)
 80022ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f0:	2003      	movs	r0, #3
 80022f2:	f000 f94f 	bl	8002594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f6:	200f      	movs	r0, #15
 80022f8:	f000 f808 	bl	800230c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022fc:	f7ff fdd2 	bl	8001ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023c00 	.word	0x40023c00

0800230c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_InitTick+0x54>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_InitTick+0x58>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4619      	mov	r1, r3
 800231e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002322:	fbb3 f3f1 	udiv	r3, r3, r1
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f967 	bl	80025fe <HAL_SYSTICK_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e00e      	b.n	8002358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b0f      	cmp	r3, #15
 800233e:	d80a      	bhi.n	8002356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002340:	2200      	movs	r2, #0
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	f04f 30ff 	mov.w	r0, #4294967295
 8002348:	f000 f92f 	bl	80025aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800234c:	4a06      	ldr	r2, [pc, #24]	; (8002368 <HAL_InitTick+0x5c>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	e000      	b.n	8002358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000014 	.word	0x20000014
 8002364:	2000001c 	.word	0x2000001c
 8002368:	20000018 	.word	0x20000018

0800236c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_IncTick+0x20>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_IncTick+0x24>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4413      	add	r3, r2
 800237c:	4a04      	ldr	r2, [pc, #16]	; (8002390 <HAL_IncTick+0x24>)
 800237e:	6013      	str	r3, [r2, #0]
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	2000001c 	.word	0x2000001c
 8002390:	2000024c 	.word	0x2000024c

08002394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return uwTick;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_GetTick+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	2000024c 	.word	0x2000024c

080023ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff ffee 	bl	8002394 <HAL_GetTick>
 80023b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d005      	beq.n	80023d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <HAL_Delay+0x44>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4413      	add	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023d2:	bf00      	nop
 80023d4:	f7ff ffde 	bl	8002394 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d8f7      	bhi.n	80023d4 <HAL_Delay+0x28>
  {
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	2000001c 	.word	0x2000001c

080023f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002410:	4013      	ands	r3, r2
 8002412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800241c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002426:	4a04      	ldr	r2, [pc, #16]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	60d3      	str	r3, [r2, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <__NVIC_GetPriorityGrouping+0x18>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	f003 0307 	and.w	r3, r3, #7
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	2b00      	cmp	r3, #0
 8002468:	db0b      	blt.n	8002482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	4907      	ldr	r1, [pc, #28]	; (8002490 <__NVIC_EnableIRQ+0x38>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2001      	movs	r0, #1
 800247a:	fa00 f202 	lsl.w	r2, r0, r2
 800247e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000e100 	.word	0xe000e100

08002494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	6039      	str	r1, [r7, #0]
 800249e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	db0a      	blt.n	80024be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	490c      	ldr	r1, [pc, #48]	; (80024e0 <__NVIC_SetPriority+0x4c>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	0112      	lsls	r2, r2, #4
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	440b      	add	r3, r1
 80024b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024bc:	e00a      	b.n	80024d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4908      	ldr	r1, [pc, #32]	; (80024e4 <__NVIC_SetPriority+0x50>)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	3b04      	subs	r3, #4
 80024cc:	0112      	lsls	r2, r2, #4
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	440b      	add	r3, r1
 80024d2:	761a      	strb	r2, [r3, #24]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000e100 	.word	0xe000e100
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f1c3 0307 	rsb	r3, r3, #7
 8002502:	2b04      	cmp	r3, #4
 8002504:	bf28      	it	cs
 8002506:	2304      	movcs	r3, #4
 8002508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3304      	adds	r3, #4
 800250e:	2b06      	cmp	r3, #6
 8002510:	d902      	bls.n	8002518 <NVIC_EncodePriority+0x30>
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3b03      	subs	r3, #3
 8002516:	e000      	b.n	800251a <NVIC_EncodePriority+0x32>
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800251c:	f04f 32ff 	mov.w	r2, #4294967295
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	401a      	ands	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002530:	f04f 31ff 	mov.w	r1, #4294967295
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	43d9      	mvns	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	4313      	orrs	r3, r2
         );
}
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002560:	d301      	bcc.n	8002566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002562:	2301      	movs	r3, #1
 8002564:	e00f      	b.n	8002586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <SysTick_Config+0x40>)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256e:	210f      	movs	r1, #15
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	f7ff ff8e 	bl	8002494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <SysTick_Config+0x40>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257e:	4b04      	ldr	r3, [pc, #16]	; (8002590 <SysTick_Config+0x40>)
 8002580:	2207      	movs	r2, #7
 8002582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	e000e010 	.word	0xe000e010

08002594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ff29 	bl	80023f4 <__NVIC_SetPriorityGrouping>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b086      	sub	sp, #24
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025bc:	f7ff ff3e 	bl	800243c <__NVIC_GetPriorityGrouping>
 80025c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f7ff ff8e 	bl	80024e8 <NVIC_EncodePriority>
 80025cc:	4602      	mov	r2, r0
 80025ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff5d 	bl	8002494 <__NVIC_SetPriority>
}
 80025da:	bf00      	nop
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff31 	bl	8002458 <__NVIC_EnableIRQ>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ffa2 	bl	8002550 <SysTick_Config>
 800260c:	4603      	mov	r3, r0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	e159      	b.n	80028e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002634:	2201      	movs	r2, #1
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	429a      	cmp	r2, r3
 800264e:	f040 8148 	bne.w	80028e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b01      	cmp	r3, #1
 800265c:	d005      	beq.n	800266a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002666:	2b02      	cmp	r3, #2
 8002668:	d130      	bne.n	80026cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	2203      	movs	r2, #3
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a0:	2201      	movs	r2, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 0201 	and.w	r2, r3, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d017      	beq.n	8002708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2203      	movs	r2, #3
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d123      	bne.n	800275c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	08da      	lsrs	r2, r3, #3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3208      	adds	r2, #8
 800271c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	220f      	movs	r2, #15
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	08da      	lsrs	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3208      	adds	r2, #8
 8002756:	69b9      	ldr	r1, [r7, #24]
 8002758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0203 	and.w	r2, r3, #3
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80a2 	beq.w	80028e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	4b57      	ldr	r3, [pc, #348]	; (8002900 <HAL_GPIO_Init+0x2e8>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	4a56      	ldr	r2, [pc, #344]	; (8002900 <HAL_GPIO_Init+0x2e8>)
 80027a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ac:	6453      	str	r3, [r2, #68]	; 0x44
 80027ae:	4b54      	ldr	r3, [pc, #336]	; (8002900 <HAL_GPIO_Init+0x2e8>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ba:	4a52      	ldr	r2, [pc, #328]	; (8002904 <HAL_GPIO_Init+0x2ec>)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3302      	adds	r3, #2
 80027c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	220f      	movs	r2, #15
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a49      	ldr	r2, [pc, #292]	; (8002908 <HAL_GPIO_Init+0x2f0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d019      	beq.n	800281a <HAL_GPIO_Init+0x202>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a48      	ldr	r2, [pc, #288]	; (800290c <HAL_GPIO_Init+0x2f4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d013      	beq.n	8002816 <HAL_GPIO_Init+0x1fe>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a47      	ldr	r2, [pc, #284]	; (8002910 <HAL_GPIO_Init+0x2f8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00d      	beq.n	8002812 <HAL_GPIO_Init+0x1fa>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a46      	ldr	r2, [pc, #280]	; (8002914 <HAL_GPIO_Init+0x2fc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d007      	beq.n	800280e <HAL_GPIO_Init+0x1f6>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a45      	ldr	r2, [pc, #276]	; (8002918 <HAL_GPIO_Init+0x300>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d101      	bne.n	800280a <HAL_GPIO_Init+0x1f2>
 8002806:	2304      	movs	r3, #4
 8002808:	e008      	b.n	800281c <HAL_GPIO_Init+0x204>
 800280a:	2307      	movs	r3, #7
 800280c:	e006      	b.n	800281c <HAL_GPIO_Init+0x204>
 800280e:	2303      	movs	r3, #3
 8002810:	e004      	b.n	800281c <HAL_GPIO_Init+0x204>
 8002812:	2302      	movs	r3, #2
 8002814:	e002      	b.n	800281c <HAL_GPIO_Init+0x204>
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <HAL_GPIO_Init+0x204>
 800281a:	2300      	movs	r3, #0
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	f002 0203 	and.w	r2, r2, #3
 8002822:	0092      	lsls	r2, r2, #2
 8002824:	4093      	lsls	r3, r2
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800282c:	4935      	ldr	r1, [pc, #212]	; (8002904 <HAL_GPIO_Init+0x2ec>)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	089b      	lsrs	r3, r3, #2
 8002832:	3302      	adds	r3, #2
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283a:	4b38      	ldr	r3, [pc, #224]	; (800291c <HAL_GPIO_Init+0x304>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	43db      	mvns	r3, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800285e:	4a2f      	ldr	r2, [pc, #188]	; (800291c <HAL_GPIO_Init+0x304>)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002864:	4b2d      	ldr	r3, [pc, #180]	; (800291c <HAL_GPIO_Init+0x304>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002888:	4a24      	ldr	r2, [pc, #144]	; (800291c <HAL_GPIO_Init+0x304>)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800288e:	4b23      	ldr	r3, [pc, #140]	; (800291c <HAL_GPIO_Init+0x304>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b2:	4a1a      	ldr	r2, [pc, #104]	; (800291c <HAL_GPIO_Init+0x304>)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b8:	4b18      	ldr	r3, [pc, #96]	; (800291c <HAL_GPIO_Init+0x304>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028dc:	4a0f      	ldr	r2, [pc, #60]	; (800291c <HAL_GPIO_Init+0x304>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3301      	adds	r3, #1
 80028e6:	61fb      	str	r3, [r7, #28]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	2b0f      	cmp	r3, #15
 80028ec:	f67f aea2 	bls.w	8002634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	3724      	adds	r7, #36	; 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800
 8002904:	40013800 	.word	0x40013800
 8002908:	40020000 	.word	0x40020000
 800290c:	40020400 	.word	0x40020400
 8002910:	40020800 	.word	0x40020800
 8002914:	40020c00 	.word	0x40020c00
 8002918:	40021000 	.word	0x40021000
 800291c:	40013c00 	.word	0x40013c00

08002920 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	887b      	ldrh	r3, [r7, #2]
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
 800293c:	e001      	b.n	8002942 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002942:	7bfb      	ldrb	r3, [r7, #15]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	807b      	strh	r3, [r7, #2]
 800295c:	4613      	mov	r3, r2
 800295e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002960:	787b      	ldrb	r3, [r7, #1]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002966:	887a      	ldrh	r2, [r7, #2]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800296c:	e003      	b.n	8002976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800296e:	887b      	ldrh	r3, [r7, #2]
 8002970:	041a      	lsls	r2, r3, #16
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	619a      	str	r2, [r3, #24]
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e12b      	b.n	8002bee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff faa2 	bl	8001ef4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2224      	movs	r2, #36	; 0x24
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0201 	bic.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029e8:	f001 f848 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 80029ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4a81      	ldr	r2, [pc, #516]	; (8002bf8 <HAL_I2C_Init+0x274>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d807      	bhi.n	8002a08 <HAL_I2C_Init+0x84>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4a80      	ldr	r2, [pc, #512]	; (8002bfc <HAL_I2C_Init+0x278>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	bf94      	ite	ls
 8002a00:	2301      	movls	r3, #1
 8002a02:	2300      	movhi	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	e006      	b.n	8002a16 <HAL_I2C_Init+0x92>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4a7d      	ldr	r2, [pc, #500]	; (8002c00 <HAL_I2C_Init+0x27c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	bf94      	ite	ls
 8002a10:	2301      	movls	r3, #1
 8002a12:	2300      	movhi	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e0e7      	b.n	8002bee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4a78      	ldr	r2, [pc, #480]	; (8002c04 <HAL_I2C_Init+0x280>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0c9b      	lsrs	r3, r3, #18
 8002a28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a6a      	ldr	r2, [pc, #424]	; (8002bf8 <HAL_I2C_Init+0x274>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d802      	bhi.n	8002a58 <HAL_I2C_Init+0xd4>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	3301      	adds	r3, #1
 8002a56:	e009      	b.n	8002a6c <HAL_I2C_Init+0xe8>
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a5e:	fb02 f303 	mul.w	r3, r2, r3
 8002a62:	4a69      	ldr	r2, [pc, #420]	; (8002c08 <HAL_I2C_Init+0x284>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	099b      	lsrs	r3, r3, #6
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	430b      	orrs	r3, r1
 8002a72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	495c      	ldr	r1, [pc, #368]	; (8002bf8 <HAL_I2C_Init+0x274>)
 8002a88:	428b      	cmp	r3, r1
 8002a8a:	d819      	bhi.n	8002ac0 <HAL_I2C_Init+0x13c>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1e59      	subs	r1, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a9a:	1c59      	adds	r1, r3, #1
 8002a9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002aa0:	400b      	ands	r3, r1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_I2C_Init+0x138>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1e59      	subs	r1, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aba:	e051      	b.n	8002b60 <HAL_I2C_Init+0x1dc>
 8002abc:	2304      	movs	r3, #4
 8002abe:	e04f      	b.n	8002b60 <HAL_I2C_Init+0x1dc>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d111      	bne.n	8002aec <HAL_I2C_Init+0x168>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1e58      	subs	r0, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	440b      	add	r3, r1
 8002ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf0c      	ite	eq
 8002ae4:	2301      	moveq	r3, #1
 8002ae6:	2300      	movne	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	e012      	b.n	8002b12 <HAL_I2C_Init+0x18e>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1e58      	subs	r0, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6859      	ldr	r1, [r3, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	0099      	lsls	r1, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b02:	3301      	adds	r3, #1
 8002b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Init+0x196>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e022      	b.n	8002b60 <HAL_I2C_Init+0x1dc>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10e      	bne.n	8002b40 <HAL_I2C_Init+0x1bc>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1e58      	subs	r0, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6859      	ldr	r1, [r3, #4]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	440b      	add	r3, r1
 8002b30:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b34:	3301      	adds	r3, #1
 8002b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b3e:	e00f      	b.n	8002b60 <HAL_I2C_Init+0x1dc>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	1e58      	subs	r0, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6859      	ldr	r1, [r3, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	0099      	lsls	r1, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b56:	3301      	adds	r3, #1
 8002b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	6809      	ldr	r1, [r1, #0]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69da      	ldr	r2, [r3, #28]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6911      	ldr	r1, [r2, #16]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	68d2      	ldr	r2, [r2, #12]
 8002b9a:	4311      	orrs	r1, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	000186a0 	.word	0x000186a0
 8002bfc:	001e847f 	.word	0x001e847f
 8002c00:	003d08ff 	.word	0x003d08ff
 8002c04:	431bde83 	.word	0x431bde83
 8002c08:	10624dd3 	.word	0x10624dd3

08002c0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	607a      	str	r2, [r7, #4]
 8002c16:	461a      	mov	r2, r3
 8002c18:	460b      	mov	r3, r1
 8002c1a:	817b      	strh	r3, [r7, #10]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c20:	f7ff fbb8 	bl	8002394 <HAL_GetTick>
 8002c24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	f040 80e0 	bne.w	8002df4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	2319      	movs	r3, #25
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	4970      	ldr	r1, [pc, #448]	; (8002e00 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f964 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e0d3      	b.n	8002df6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_I2C_Master_Transmit+0x50>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e0cc      	b.n	8002df6 <HAL_I2C_Master_Transmit+0x1ea>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d007      	beq.n	8002c82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0201 	orr.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2221      	movs	r2, #33	; 0x21
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	893a      	ldrh	r2, [r7, #8]
 8002cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4a50      	ldr	r2, [pc, #320]	; (8002e04 <HAL_I2C_Master_Transmit+0x1f8>)
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cc4:	8979      	ldrh	r1, [r7, #10]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	6a3a      	ldr	r2, [r7, #32]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f89c 	bl	8002e08 <I2C_MasterRequestWrite>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e08d      	b.n	8002df6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cf0:	e066      	b.n	8002dc0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	6a39      	ldr	r1, [r7, #32]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f9de 	bl	80030b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00d      	beq.n	8002d1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d107      	bne.n	8002d1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e06b      	b.n	8002df6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	781a      	ldrb	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d11b      	bne.n	8002d94 <HAL_I2C_Master_Transmit+0x188>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d017      	beq.n	8002d94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	6a39      	ldr	r1, [r7, #32]
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f9ce 	bl	800313a <I2C_WaitOnBTFFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00d      	beq.n	8002dc0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d107      	bne.n	8002dbc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e01a      	b.n	8002df6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d194      	bne.n	8002cf2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	00100002 	.word	0x00100002
 8002e04:	ffff0000 	.word	0xffff0000

08002e08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	603b      	str	r3, [r7, #0]
 8002e14:	460b      	mov	r3, r1
 8002e16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d006      	beq.n	8002e32 <I2C_MasterRequestWrite+0x2a>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d003      	beq.n	8002e32 <I2C_MasterRequestWrite+0x2a>
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e30:	d108      	bne.n	8002e44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	e00b      	b.n	8002e5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	2b12      	cmp	r3, #18
 8002e4a:	d107      	bne.n	8002e5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f84f 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00d      	beq.n	8002e90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e82:	d103      	bne.n	8002e8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e035      	b.n	8002efc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e98:	d108      	bne.n	8002eac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e9a:	897b      	ldrh	r3, [r7, #10]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ea8:	611a      	str	r2, [r3, #16]
 8002eaa:	e01b      	b.n	8002ee4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002eac:	897b      	ldrh	r3, [r7, #10]
 8002eae:	11db      	asrs	r3, r3, #7
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f003 0306 	and.w	r3, r3, #6
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f063 030f 	orn	r3, r3, #15
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	490e      	ldr	r1, [pc, #56]	; (8002f04 <I2C_MasterRequestWrite+0xfc>)
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f875 	bl	8002fba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e010      	b.n	8002efc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002eda:	897b      	ldrh	r3, [r7, #10]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4907      	ldr	r1, [pc, #28]	; (8002f08 <I2C_MasterRequestWrite+0x100>)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f865 	bl	8002fba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	00010008 	.word	0x00010008
 8002f08:	00010002 	.word	0x00010002

08002f0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f1c:	e025      	b.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f24:	d021      	beq.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f26:	f7ff fa35 	bl	8002394 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d302      	bcc.n	8002f3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d116      	bne.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f043 0220 	orr.w	r2, r3, #32
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e023      	b.n	8002fb2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	0c1b      	lsrs	r3, r3, #16
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d10d      	bne.n	8002f90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	bf0c      	ite	eq
 8002f86:	2301      	moveq	r3, #1
 8002f88:	2300      	movne	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	e00c      	b.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	43da      	mvns	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	bf0c      	ite	eq
 8002fa2:	2301      	moveq	r3, #1
 8002fa4:	2300      	movne	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d0b6      	beq.n	8002f1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fc8:	e051      	b.n	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd8:	d123      	bne.n	8003022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ff2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f043 0204 	orr.w	r2, r3, #4
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e046      	b.n	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d021      	beq.n	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302a:	f7ff f9b3 	bl	8002394 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	429a      	cmp	r2, r3
 8003038:	d302      	bcc.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d116      	bne.n	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f043 0220 	orr.w	r2, r3, #32
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e020      	b.n	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	0c1b      	lsrs	r3, r3, #16
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	d10c      	bne.n	8003092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	43da      	mvns	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4013      	ands	r3, r2
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	bf14      	ite	ne
 800308a:	2301      	movne	r3, #1
 800308c:	2300      	moveq	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	e00b      	b.n	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	43da      	mvns	r2, r3
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	4013      	ands	r3, r2
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	bf14      	ite	ne
 80030a4:	2301      	movne	r3, #1
 80030a6:	2300      	moveq	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d18d      	bne.n	8002fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030c4:	e02d      	b.n	8003122 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f878 	bl	80031bc <I2C_IsAcknowledgeFailed>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e02d      	b.n	8003132 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d021      	beq.n	8003122 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030de:	f7ff f959 	bl	8002394 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d116      	bne.n	8003122 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f043 0220 	orr.w	r2, r3, #32
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e007      	b.n	8003132 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312c:	2b80      	cmp	r3, #128	; 0x80
 800312e:	d1ca      	bne.n	80030c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003146:	e02d      	b.n	80031a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f837 	bl	80031bc <I2C_IsAcknowledgeFailed>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e02d      	b.n	80031b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315e:	d021      	beq.n	80031a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003160:	f7ff f918 	bl	8002394 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	429a      	cmp	r2, r3
 800316e:	d302      	bcc.n	8003176 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d116      	bne.n	80031a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	f043 0220 	orr.w	r2, r3, #32
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e007      	b.n	80031b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d1ca      	bne.n	8003148 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d2:	d11b      	bne.n	800320c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	f043 0204 	orr.w	r2, r3, #4
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
	...

0800321c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e267      	b.n	80036fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d075      	beq.n	8003326 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800323a:	4b88      	ldr	r3, [pc, #544]	; (800345c <HAL_RCC_OscConfig+0x240>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 030c 	and.w	r3, r3, #12
 8003242:	2b04      	cmp	r3, #4
 8003244:	d00c      	beq.n	8003260 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003246:	4b85      	ldr	r3, [pc, #532]	; (800345c <HAL_RCC_OscConfig+0x240>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800324e:	2b08      	cmp	r3, #8
 8003250:	d112      	bne.n	8003278 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003252:	4b82      	ldr	r3, [pc, #520]	; (800345c <HAL_RCC_OscConfig+0x240>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800325e:	d10b      	bne.n	8003278 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003260:	4b7e      	ldr	r3, [pc, #504]	; (800345c <HAL_RCC_OscConfig+0x240>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d05b      	beq.n	8003324 <HAL_RCC_OscConfig+0x108>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d157      	bne.n	8003324 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e242      	b.n	80036fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003280:	d106      	bne.n	8003290 <HAL_RCC_OscConfig+0x74>
 8003282:	4b76      	ldr	r3, [pc, #472]	; (800345c <HAL_RCC_OscConfig+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a75      	ldr	r2, [pc, #468]	; (800345c <HAL_RCC_OscConfig+0x240>)
 8003288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	e01d      	b.n	80032cc <HAL_RCC_OscConfig+0xb0>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003298:	d10c      	bne.n	80032b4 <HAL_RCC_OscConfig+0x98>
 800329a:	4b70      	ldr	r3, [pc, #448]	; (800345c <HAL_RCC_OscConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a6f      	ldr	r2, [pc, #444]	; (800345c <HAL_RCC_OscConfig+0x240>)
 80032a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	4b6d      	ldr	r3, [pc, #436]	; (800345c <HAL_RCC_OscConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a6c      	ldr	r2, [pc, #432]	; (800345c <HAL_RCC_OscConfig+0x240>)
 80032ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	e00b      	b.n	80032cc <HAL_RCC_OscConfig+0xb0>
 80032b4:	4b69      	ldr	r3, [pc, #420]	; (800345c <HAL_RCC_OscConfig+0x240>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a68      	ldr	r2, [pc, #416]	; (800345c <HAL_RCC_OscConfig+0x240>)
 80032ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	4b66      	ldr	r3, [pc, #408]	; (800345c <HAL_RCC_OscConfig+0x240>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a65      	ldr	r2, [pc, #404]	; (800345c <HAL_RCC_OscConfig+0x240>)
 80032c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d013      	beq.n	80032fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d4:	f7ff f85e 	bl	8002394 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032dc:	f7ff f85a 	bl	8002394 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b64      	cmp	r3, #100	; 0x64
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e207      	b.n	80036fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	4b5b      	ldr	r3, [pc, #364]	; (800345c <HAL_RCC_OscConfig+0x240>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0xc0>
 80032fa:	e014      	b.n	8003326 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7ff f84a 	bl	8002394 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003304:	f7ff f846 	bl	8002394 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	; 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e1f3      	b.n	80036fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003316:	4b51      	ldr	r3, [pc, #324]	; (800345c <HAL_RCC_OscConfig+0x240>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0xe8>
 8003322:	e000      	b.n	8003326 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d063      	beq.n	80033fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003332:	4b4a      	ldr	r3, [pc, #296]	; (800345c <HAL_RCC_OscConfig+0x240>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00b      	beq.n	8003356 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800333e:	4b47      	ldr	r3, [pc, #284]	; (800345c <HAL_RCC_OscConfig+0x240>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003346:	2b08      	cmp	r3, #8
 8003348:	d11c      	bne.n	8003384 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800334a:	4b44      	ldr	r3, [pc, #272]	; (800345c <HAL_RCC_OscConfig+0x240>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d116      	bne.n	8003384 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003356:	4b41      	ldr	r3, [pc, #260]	; (800345c <HAL_RCC_OscConfig+0x240>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <HAL_RCC_OscConfig+0x152>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d001      	beq.n	800336e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e1c7      	b.n	80036fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336e:	4b3b      	ldr	r3, [pc, #236]	; (800345c <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4937      	ldr	r1, [pc, #220]	; (800345c <HAL_RCC_OscConfig+0x240>)
 800337e:	4313      	orrs	r3, r2
 8003380:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003382:	e03a      	b.n	80033fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d020      	beq.n	80033ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800338c:	4b34      	ldr	r3, [pc, #208]	; (8003460 <HAL_RCC_OscConfig+0x244>)
 800338e:	2201      	movs	r2, #1
 8003390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003392:	f7fe ffff 	bl	8002394 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800339a:	f7fe fffb 	bl	8002394 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e1a8      	b.n	80036fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ac:	4b2b      	ldr	r3, [pc, #172]	; (800345c <HAL_RCC_OscConfig+0x240>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0f0      	beq.n	800339a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b8:	4b28      	ldr	r3, [pc, #160]	; (800345c <HAL_RCC_OscConfig+0x240>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4925      	ldr	r1, [pc, #148]	; (800345c <HAL_RCC_OscConfig+0x240>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	600b      	str	r3, [r1, #0]
 80033cc:	e015      	b.n	80033fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ce:	4b24      	ldr	r3, [pc, #144]	; (8003460 <HAL_RCC_OscConfig+0x244>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d4:	f7fe ffde 	bl	8002394 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033dc:	f7fe ffda 	bl	8002394 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e187      	b.n	80036fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ee:	4b1b      	ldr	r3, [pc, #108]	; (800345c <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d036      	beq.n	8003474 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d016      	beq.n	800343c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800340e:	4b15      	ldr	r3, [pc, #84]	; (8003464 <HAL_RCC_OscConfig+0x248>)
 8003410:	2201      	movs	r2, #1
 8003412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003414:	f7fe ffbe 	bl	8002394 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800341c:	f7fe ffba 	bl	8002394 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e167      	b.n	80036fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342e:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_RCC_OscConfig+0x240>)
 8003430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x200>
 800343a:	e01b      	b.n	8003474 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800343c:	4b09      	ldr	r3, [pc, #36]	; (8003464 <HAL_RCC_OscConfig+0x248>)
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003442:	f7fe ffa7 	bl	8002394 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003448:	e00e      	b.n	8003468 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800344a:	f7fe ffa3 	bl	8002394 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d907      	bls.n	8003468 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e150      	b.n	80036fe <HAL_RCC_OscConfig+0x4e2>
 800345c:	40023800 	.word	0x40023800
 8003460:	42470000 	.word	0x42470000
 8003464:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003468:	4b88      	ldr	r3, [pc, #544]	; (800368c <HAL_RCC_OscConfig+0x470>)
 800346a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1ea      	bne.n	800344a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 8097 	beq.w	80035b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003482:	2300      	movs	r3, #0
 8003484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003486:	4b81      	ldr	r3, [pc, #516]	; (800368c <HAL_RCC_OscConfig+0x470>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10f      	bne.n	80034b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003492:	2300      	movs	r3, #0
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	4b7d      	ldr	r3, [pc, #500]	; (800368c <HAL_RCC_OscConfig+0x470>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	4a7c      	ldr	r2, [pc, #496]	; (800368c <HAL_RCC_OscConfig+0x470>)
 800349c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a0:	6413      	str	r3, [r2, #64]	; 0x40
 80034a2:	4b7a      	ldr	r3, [pc, #488]	; (800368c <HAL_RCC_OscConfig+0x470>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ae:	2301      	movs	r3, #1
 80034b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b2:	4b77      	ldr	r3, [pc, #476]	; (8003690 <HAL_RCC_OscConfig+0x474>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d118      	bne.n	80034f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034be:	4b74      	ldr	r3, [pc, #464]	; (8003690 <HAL_RCC_OscConfig+0x474>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a73      	ldr	r2, [pc, #460]	; (8003690 <HAL_RCC_OscConfig+0x474>)
 80034c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ca:	f7fe ff63 	bl	8002394 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d2:	f7fe ff5f 	bl	8002394 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e10c      	b.n	80036fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	4b6a      	ldr	r3, [pc, #424]	; (8003690 <HAL_RCC_OscConfig+0x474>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d106      	bne.n	8003506 <HAL_RCC_OscConfig+0x2ea>
 80034f8:	4b64      	ldr	r3, [pc, #400]	; (800368c <HAL_RCC_OscConfig+0x470>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	4a63      	ldr	r2, [pc, #396]	; (800368c <HAL_RCC_OscConfig+0x470>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	6713      	str	r3, [r2, #112]	; 0x70
 8003504:	e01c      	b.n	8003540 <HAL_RCC_OscConfig+0x324>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b05      	cmp	r3, #5
 800350c:	d10c      	bne.n	8003528 <HAL_RCC_OscConfig+0x30c>
 800350e:	4b5f      	ldr	r3, [pc, #380]	; (800368c <HAL_RCC_OscConfig+0x470>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	4a5e      	ldr	r2, [pc, #376]	; (800368c <HAL_RCC_OscConfig+0x470>)
 8003514:	f043 0304 	orr.w	r3, r3, #4
 8003518:	6713      	str	r3, [r2, #112]	; 0x70
 800351a:	4b5c      	ldr	r3, [pc, #368]	; (800368c <HAL_RCC_OscConfig+0x470>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351e:	4a5b      	ldr	r2, [pc, #364]	; (800368c <HAL_RCC_OscConfig+0x470>)
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	6713      	str	r3, [r2, #112]	; 0x70
 8003526:	e00b      	b.n	8003540 <HAL_RCC_OscConfig+0x324>
 8003528:	4b58      	ldr	r3, [pc, #352]	; (800368c <HAL_RCC_OscConfig+0x470>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	4a57      	ldr	r2, [pc, #348]	; (800368c <HAL_RCC_OscConfig+0x470>)
 800352e:	f023 0301 	bic.w	r3, r3, #1
 8003532:	6713      	str	r3, [r2, #112]	; 0x70
 8003534:	4b55      	ldr	r3, [pc, #340]	; (800368c <HAL_RCC_OscConfig+0x470>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	4a54      	ldr	r2, [pc, #336]	; (800368c <HAL_RCC_OscConfig+0x470>)
 800353a:	f023 0304 	bic.w	r3, r3, #4
 800353e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d015      	beq.n	8003574 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7fe ff24 	bl	8002394 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354e:	e00a      	b.n	8003566 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003550:	f7fe ff20 	bl	8002394 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	f241 3288 	movw	r2, #5000	; 0x1388
 800355e:	4293      	cmp	r3, r2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e0cb      	b.n	80036fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003566:	4b49      	ldr	r3, [pc, #292]	; (800368c <HAL_RCC_OscConfig+0x470>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0ee      	beq.n	8003550 <HAL_RCC_OscConfig+0x334>
 8003572:	e014      	b.n	800359e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003574:	f7fe ff0e 	bl	8002394 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357a:	e00a      	b.n	8003592 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800357c:	f7fe ff0a 	bl	8002394 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	; 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e0b5      	b.n	80036fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003592:	4b3e      	ldr	r3, [pc, #248]	; (800368c <HAL_RCC_OscConfig+0x470>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1ee      	bne.n	800357c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800359e:	7dfb      	ldrb	r3, [r7, #23]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d105      	bne.n	80035b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a4:	4b39      	ldr	r3, [pc, #228]	; (800368c <HAL_RCC_OscConfig+0x470>)
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	4a38      	ldr	r2, [pc, #224]	; (800368c <HAL_RCC_OscConfig+0x470>)
 80035aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80a1 	beq.w	80036fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ba:	4b34      	ldr	r3, [pc, #208]	; (800368c <HAL_RCC_OscConfig+0x470>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d05c      	beq.n	8003680 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d141      	bne.n	8003652 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ce:	4b31      	ldr	r3, [pc, #196]	; (8003694 <HAL_RCC_OscConfig+0x478>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7fe fede 	bl	8002394 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035dc:	f7fe feda 	bl	8002394 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e087      	b.n	80036fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ee:	4b27      	ldr	r3, [pc, #156]	; (800368c <HAL_RCC_OscConfig+0x470>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69da      	ldr	r2, [r3, #28]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	019b      	lsls	r3, r3, #6
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	085b      	lsrs	r3, r3, #1
 8003612:	3b01      	subs	r3, #1
 8003614:	041b      	lsls	r3, r3, #16
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	061b      	lsls	r3, r3, #24
 800361e:	491b      	ldr	r1, [pc, #108]	; (800368c <HAL_RCC_OscConfig+0x470>)
 8003620:	4313      	orrs	r3, r2
 8003622:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003624:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <HAL_RCC_OscConfig+0x478>)
 8003626:	2201      	movs	r2, #1
 8003628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362a:	f7fe feb3 	bl	8002394 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003632:	f7fe feaf 	bl	8002394 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e05c      	b.n	80036fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003644:	4b11      	ldr	r3, [pc, #68]	; (800368c <HAL_RCC_OscConfig+0x470>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x416>
 8003650:	e054      	b.n	80036fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003652:	4b10      	ldr	r3, [pc, #64]	; (8003694 <HAL_RCC_OscConfig+0x478>)
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fe fe9c 	bl	8002394 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003660:	f7fe fe98 	bl	8002394 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e045      	b.n	80036fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003672:	4b06      	ldr	r3, [pc, #24]	; (800368c <HAL_RCC_OscConfig+0x470>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x444>
 800367e:	e03d      	b.n	80036fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d107      	bne.n	8003698 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e038      	b.n	80036fe <HAL_RCC_OscConfig+0x4e2>
 800368c:	40023800 	.word	0x40023800
 8003690:	40007000 	.word	0x40007000
 8003694:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003698:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <HAL_RCC_OscConfig+0x4ec>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d028      	beq.n	80036f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d121      	bne.n	80036f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d11a      	bne.n	80036f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036c8:	4013      	ands	r3, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d111      	bne.n	80036f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036de:	085b      	lsrs	r3, r3, #1
 80036e0:	3b01      	subs	r3, #1
 80036e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d107      	bne.n	80036f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800

0800370c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0cc      	b.n	80038ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003720:	4b68      	ldr	r3, [pc, #416]	; (80038c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d90c      	bls.n	8003748 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372e:	4b65      	ldr	r3, [pc, #404]	; (80038c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003736:	4b63      	ldr	r3, [pc, #396]	; (80038c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d001      	beq.n	8003748 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0b8      	b.n	80038ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d020      	beq.n	8003796 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003760:	4b59      	ldr	r3, [pc, #356]	; (80038c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4a58      	ldr	r2, [pc, #352]	; (80038c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800376a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003778:	4b53      	ldr	r3, [pc, #332]	; (80038c8 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	4a52      	ldr	r2, [pc, #328]	; (80038c8 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003782:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003784:	4b50      	ldr	r3, [pc, #320]	; (80038c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	494d      	ldr	r1, [pc, #308]	; (80038c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d044      	beq.n	800382c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037aa:	4b47      	ldr	r3, [pc, #284]	; (80038c8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d119      	bne.n	80037ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e07f      	b.n	80038ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d003      	beq.n	80037ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d107      	bne.n	80037da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ca:	4b3f      	ldr	r3, [pc, #252]	; (80038c8 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e06f      	b.n	80038ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037da:	4b3b      	ldr	r3, [pc, #236]	; (80038c8 <HAL_RCC_ClockConfig+0x1bc>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e067      	b.n	80038ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ea:	4b37      	ldr	r3, [pc, #220]	; (80038c8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f023 0203 	bic.w	r2, r3, #3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	4934      	ldr	r1, [pc, #208]	; (80038c8 <HAL_RCC_ClockConfig+0x1bc>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037fc:	f7fe fdca 	bl	8002394 <HAL_GetTick>
 8003800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003802:	e00a      	b.n	800381a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003804:	f7fe fdc6 	bl	8002394 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003812:	4293      	cmp	r3, r2
 8003814:	d901      	bls.n	800381a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e04f      	b.n	80038ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381a:	4b2b      	ldr	r3, [pc, #172]	; (80038c8 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 020c 	and.w	r2, r3, #12
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	429a      	cmp	r2, r3
 800382a:	d1eb      	bne.n	8003804 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800382c:	4b25      	ldr	r3, [pc, #148]	; (80038c4 <HAL_RCC_ClockConfig+0x1b8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d20c      	bcs.n	8003854 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383a:	4b22      	ldr	r3, [pc, #136]	; (80038c4 <HAL_RCC_ClockConfig+0x1b8>)
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003842:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e032      	b.n	80038ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003860:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4916      	ldr	r1, [pc, #88]	; (80038c8 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	4313      	orrs	r3, r2
 8003870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800387e:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	490e      	ldr	r1, [pc, #56]	; (80038c8 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	4313      	orrs	r3, r2
 8003890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003892:	f000 f821 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 8003896:	4602      	mov	r2, r0
 8003898:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	091b      	lsrs	r3, r3, #4
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	490a      	ldr	r1, [pc, #40]	; (80038cc <HAL_RCC_ClockConfig+0x1c0>)
 80038a4:	5ccb      	ldrb	r3, [r1, r3]
 80038a6:	fa22 f303 	lsr.w	r3, r2, r3
 80038aa:	4a09      	ldr	r2, [pc, #36]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 80038ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038ae:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe fd2a 	bl	800230c <HAL_InitTick>

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40023c00 	.word	0x40023c00
 80038c8:	40023800 	.word	0x40023800
 80038cc:	08005768 	.word	0x08005768
 80038d0:	20000014 	.word	0x20000014
 80038d4:	20000018 	.word	0x20000018

080038d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038dc:	b090      	sub	sp, #64	; 0x40
 80038de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	637b      	str	r3, [r7, #52]	; 0x34
 80038e4:	2300      	movs	r3, #0
 80038e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038e8:	2300      	movs	r3, #0
 80038ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038f0:	4b59      	ldr	r3, [pc, #356]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x180>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 030c 	and.w	r3, r3, #12
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d00d      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x40>
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	f200 80a1 	bhi.w	8003a44 <HAL_RCC_GetSysClockFreq+0x16c>
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x34>
 8003906:	2b04      	cmp	r3, #4
 8003908:	d003      	beq.n	8003912 <HAL_RCC_GetSysClockFreq+0x3a>
 800390a:	e09b      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800390c:	4b53      	ldr	r3, [pc, #332]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x184>)
 800390e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003910:	e09b      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003912:	4b53      	ldr	r3, [pc, #332]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003914:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003916:	e098      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003918:	4b4f      	ldr	r3, [pc, #316]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x180>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003920:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003922:	4b4d      	ldr	r3, [pc, #308]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d028      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800392e:	4b4a      	ldr	r3, [pc, #296]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	099b      	lsrs	r3, r3, #6
 8003934:	2200      	movs	r2, #0
 8003936:	623b      	str	r3, [r7, #32]
 8003938:	627a      	str	r2, [r7, #36]	; 0x24
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003940:	2100      	movs	r1, #0
 8003942:	4b47      	ldr	r3, [pc, #284]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003944:	fb03 f201 	mul.w	r2, r3, r1
 8003948:	2300      	movs	r3, #0
 800394a:	fb00 f303 	mul.w	r3, r0, r3
 800394e:	4413      	add	r3, r2
 8003950:	4a43      	ldr	r2, [pc, #268]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003952:	fba0 1202 	umull	r1, r2, r0, r2
 8003956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003958:	460a      	mov	r2, r1
 800395a:	62ba      	str	r2, [r7, #40]	; 0x28
 800395c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800395e:	4413      	add	r3, r2
 8003960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003964:	2200      	movs	r2, #0
 8003966:	61bb      	str	r3, [r7, #24]
 8003968:	61fa      	str	r2, [r7, #28]
 800396a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800396e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003972:	f7fc fe69 	bl	8000648 <__aeabi_uldivmod>
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	4613      	mov	r3, r2
 800397c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800397e:	e053      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003980:	4b35      	ldr	r3, [pc, #212]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	099b      	lsrs	r3, r3, #6
 8003986:	2200      	movs	r2, #0
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	617a      	str	r2, [r7, #20]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003992:	f04f 0b00 	mov.w	fp, #0
 8003996:	4652      	mov	r2, sl
 8003998:	465b      	mov	r3, fp
 800399a:	f04f 0000 	mov.w	r0, #0
 800399e:	f04f 0100 	mov.w	r1, #0
 80039a2:	0159      	lsls	r1, r3, #5
 80039a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039a8:	0150      	lsls	r0, r2, #5
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	ebb2 080a 	subs.w	r8, r2, sl
 80039b2:	eb63 090b 	sbc.w	r9, r3, fp
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039ca:	ebb2 0408 	subs.w	r4, r2, r8
 80039ce:	eb63 0509 	sbc.w	r5, r3, r9
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	00eb      	lsls	r3, r5, #3
 80039dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039e0:	00e2      	lsls	r2, r4, #3
 80039e2:	4614      	mov	r4, r2
 80039e4:	461d      	mov	r5, r3
 80039e6:	eb14 030a 	adds.w	r3, r4, sl
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	eb45 030b 	adc.w	r3, r5, fp
 80039f0:	607b      	str	r3, [r7, #4]
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039fe:	4629      	mov	r1, r5
 8003a00:	028b      	lsls	r3, r1, #10
 8003a02:	4621      	mov	r1, r4
 8003a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a08:	4621      	mov	r1, r4
 8003a0a:	028a      	lsls	r2, r1, #10
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4619      	mov	r1, r3
 8003a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a12:	2200      	movs	r2, #0
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	60fa      	str	r2, [r7, #12]
 8003a18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a1c:	f7fc fe14 	bl	8000648 <__aeabi_uldivmod>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4613      	mov	r3, r2
 8003a26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	0c1b      	lsrs	r3, r3, #16
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	3301      	adds	r3, #1
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003a38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a42:	e002      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x184>)
 8003a46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3740      	adds	r7, #64	; 0x40
 8003a50:	46bd      	mov	sp, r7
 8003a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	00f42400 	.word	0x00f42400
 8003a60:	017d7840 	.word	0x017d7840

08003a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a68:	4b03      	ldr	r3, [pc, #12]	; (8003a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	20000014 	.word	0x20000014

08003a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a80:	f7ff fff0 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003a84:	4602      	mov	r2, r0
 8003a86:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	0a9b      	lsrs	r3, r3, #10
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	4903      	ldr	r1, [pc, #12]	; (8003aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a92:	5ccb      	ldrb	r3, [r1, r3]
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	08005778 	.word	0x08005778

08003aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e041      	b.n	8003b3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fe fab2 	bl	8002034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f000 fe0c 	bl	8004700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d001      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e044      	b.n	8003be6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1e      	ldr	r2, [pc, #120]	; (8003bf4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d018      	beq.n	8003bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b86:	d013      	beq.n	8003bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a1a      	ldr	r2, [pc, #104]	; (8003bf8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00e      	beq.n	8003bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a19      	ldr	r2, [pc, #100]	; (8003bfc <HAL_TIM_Base_Start_IT+0xb8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d009      	beq.n	8003bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a17      	ldr	r2, [pc, #92]	; (8003c00 <HAL_TIM_Base_Start_IT+0xbc>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d004      	beq.n	8003bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a16      	ldr	r2, [pc, #88]	; (8003c04 <HAL_TIM_Base_Start_IT+0xc0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d111      	bne.n	8003bd4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b06      	cmp	r3, #6
 8003bc0:	d010      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0201 	orr.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd2:	e007      	b.n	8003be4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40010000 	.word	0x40010000
 8003bf8:	40000400 	.word	0x40000400
 8003bfc:	40000800 	.word	0x40000800
 8003c00:	40000c00 	.word	0x40000c00
 8003c04:	40014000 	.word	0x40014000

08003c08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e041      	b.n	8003c9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f839 	bl	8003ca6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4619      	mov	r1, r3
 8003c46:	4610      	mov	r0, r2
 8003c48:	f000 fd5a 	bl	8004700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
	...

08003cbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d109      	bne.n	8003ce0 <HAL_TIM_PWM_Start+0x24>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	bf14      	ite	ne
 8003cd8:	2301      	movne	r3, #1
 8003cda:	2300      	moveq	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	e022      	b.n	8003d26 <HAL_TIM_PWM_Start+0x6a>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d109      	bne.n	8003cfa <HAL_TIM_PWM_Start+0x3e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	bf14      	ite	ne
 8003cf2:	2301      	movne	r3, #1
 8003cf4:	2300      	moveq	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	e015      	b.n	8003d26 <HAL_TIM_PWM_Start+0x6a>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d109      	bne.n	8003d14 <HAL_TIM_PWM_Start+0x58>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	bf14      	ite	ne
 8003d0c:	2301      	movne	r3, #1
 8003d0e:	2300      	moveq	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	e008      	b.n	8003d26 <HAL_TIM_PWM_Start+0x6a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	bf14      	ite	ne
 8003d20:	2301      	movne	r3, #1
 8003d22:	2300      	moveq	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e068      	b.n	8003e00 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d104      	bne.n	8003d3e <HAL_TIM_PWM_Start+0x82>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d3c:	e013      	b.n	8003d66 <HAL_TIM_PWM_Start+0xaa>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d104      	bne.n	8003d4e <HAL_TIM_PWM_Start+0x92>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d4c:	e00b      	b.n	8003d66 <HAL_TIM_PWM_Start+0xaa>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d104      	bne.n	8003d5e <HAL_TIM_PWM_Start+0xa2>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d5c:	e003      	b.n	8003d66 <HAL_TIM_PWM_Start+0xaa>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2202      	movs	r2, #2
 8003d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	6839      	ldr	r1, [r7, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 ff6c 	bl	8004c4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a23      	ldr	r2, [pc, #140]	; (8003e08 <HAL_TIM_PWM_Start+0x14c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d107      	bne.n	8003d8e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <HAL_TIM_PWM_Start+0x14c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d018      	beq.n	8003dca <HAL_TIM_PWM_Start+0x10e>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da0:	d013      	beq.n	8003dca <HAL_TIM_PWM_Start+0x10e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a19      	ldr	r2, [pc, #100]	; (8003e0c <HAL_TIM_PWM_Start+0x150>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00e      	beq.n	8003dca <HAL_TIM_PWM_Start+0x10e>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a17      	ldr	r2, [pc, #92]	; (8003e10 <HAL_TIM_PWM_Start+0x154>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d009      	beq.n	8003dca <HAL_TIM_PWM_Start+0x10e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a16      	ldr	r2, [pc, #88]	; (8003e14 <HAL_TIM_PWM_Start+0x158>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d004      	beq.n	8003dca <HAL_TIM_PWM_Start+0x10e>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a14      	ldr	r2, [pc, #80]	; (8003e18 <HAL_TIM_PWM_Start+0x15c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d111      	bne.n	8003dee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b06      	cmp	r3, #6
 8003dda:	d010      	beq.n	8003dfe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dec:	e007      	b.n	8003dfe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0201 	orr.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40000400 	.word	0x40000400
 8003e10:	40000800 	.word	0x40000800
 8003e14:	40000c00 	.word	0x40000c00
 8003e18:	40014000 	.word	0x40014000

08003e1c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	6839      	ldr	r1, [r7, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 ff0c 	bl	8004c4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a29      	ldr	r2, [pc, #164]	; (8003ee0 <HAL_TIM_PWM_Stop+0xc4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d117      	bne.n	8003e6e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a1a      	ldr	r2, [r3, #32]
 8003e44:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10f      	bne.n	8003e6e <HAL_TIM_PWM_Stop+0x52>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6a1a      	ldr	r2, [r3, #32]
 8003e54:	f240 4344 	movw	r3, #1092	; 0x444
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d107      	bne.n	8003e6e <HAL_TIM_PWM_Stop+0x52>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6a1a      	ldr	r2, [r3, #32]
 8003e74:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <HAL_TIM_PWM_Stop+0x82>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6a1a      	ldr	r2, [r3, #32]
 8003e84:	f240 4344 	movw	r3, #1092	; 0x444
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d107      	bne.n	8003e9e <HAL_TIM_PWM_Stop+0x82>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0201 	bic.w	r2, r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d104      	bne.n	8003eae <HAL_TIM_PWM_Stop+0x92>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eac:	e013      	b.n	8003ed6 <HAL_TIM_PWM_Stop+0xba>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d104      	bne.n	8003ebe <HAL_TIM_PWM_Stop+0xa2>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ebc:	e00b      	b.n	8003ed6 <HAL_TIM_PWM_Stop+0xba>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d104      	bne.n	8003ece <HAL_TIM_PWM_Stop+0xb2>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ecc:	e003      	b.n	8003ed6 <HAL_TIM_PWM_Stop+0xba>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40010000 	.word	0x40010000

08003ee4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e097      	b.n	8004028 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7fe f839 	bl	8001f84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2202      	movs	r2, #2
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f28:	f023 0307 	bic.w	r3, r3, #7
 8003f2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3304      	adds	r3, #4
 8003f36:	4619      	mov	r1, r3
 8003f38:	4610      	mov	r0, r2
 8003f3a:	f000 fbe1 	bl	8004700 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f66:	f023 0303 	bic.w	r3, r3, #3
 8003f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	4313      	orrs	r3, r2
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003f84:	f023 030c 	bic.w	r3, r3, #12
 8003f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	011a      	lsls	r2, r3, #4
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	031b      	lsls	r3, r3, #12
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003fc2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004040:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004048:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004050:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004058:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d110      	bne.n	8004082 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d102      	bne.n	800406c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004066:	7b7b      	ldrb	r3, [r7, #13]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d001      	beq.n	8004070 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e089      	b.n	8004184 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004080:	e031      	b.n	80040e6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b04      	cmp	r3, #4
 8004086:	d110      	bne.n	80040aa <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004088:	7bbb      	ldrb	r3, [r7, #14]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d102      	bne.n	8004094 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800408e:	7b3b      	ldrb	r3, [r7, #12]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d001      	beq.n	8004098 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e075      	b.n	8004184 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040a8:	e01d      	b.n	80040e6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d108      	bne.n	80040c2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80040b0:	7bbb      	ldrb	r3, [r7, #14]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d105      	bne.n	80040c2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80040b6:	7b7b      	ldrb	r3, [r7, #13]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d102      	bne.n	80040c2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80040bc:	7b3b      	ldrb	r3, [r7, #12]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d001      	beq.n	80040c6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e05e      	b.n	8004184 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2202      	movs	r2, #2
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2202      	movs	r2, #2
 80040d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2202      	movs	r2, #2
 80040da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2202      	movs	r2, #2
 80040e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_TIM_Encoder_Start_IT+0xc4>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d010      	beq.n	8004114 <HAL_TIM_Encoder_Start_IT+0xe4>
 80040f2:	e01f      	b.n	8004134 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2201      	movs	r2, #1
 80040fa:	2100      	movs	r1, #0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fda5 	bl	8004c4c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0202 	orr.w	r2, r2, #2
 8004110:	60da      	str	r2, [r3, #12]
      break;
 8004112:	e02e      	b.n	8004172 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2201      	movs	r2, #1
 800411a:	2104      	movs	r1, #4
 800411c:	4618      	mov	r0, r3
 800411e:	f000 fd95 	bl	8004c4c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f042 0204 	orr.w	r2, r2, #4
 8004130:	60da      	str	r2, [r3, #12]
      break;
 8004132:	e01e      	b.n	8004172 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2201      	movs	r2, #1
 800413a:	2100      	movs	r1, #0
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fd85 	bl	8004c4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2201      	movs	r2, #1
 8004148:	2104      	movs	r1, #4
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fd7e 	bl	8004c4c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0202 	orr.w	r2, r2, #2
 800415e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0204 	orr.w	r2, r2, #4
 800416e:	60da      	str	r2, [r3, #12]
      break;
 8004170:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0201 	orr.w	r2, r2, #1
 8004180:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d122      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d11b      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0202 	mvn.w	r2, #2
 80041b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fa77 	bl	80046c2 <HAL_TIM_IC_CaptureCallback>
 80041d4:	e005      	b.n	80041e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fa69 	bl	80046ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fa7a 	bl	80046d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d122      	bne.n	800423c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b04      	cmp	r3, #4
 8004202:	d11b      	bne.n	800423c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0204 	mvn.w	r2, #4
 800420c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2202      	movs	r2, #2
 8004212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fa4d 	bl	80046c2 <HAL_TIM_IC_CaptureCallback>
 8004228:	e005      	b.n	8004236 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fa3f 	bl	80046ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fa50 	bl	80046d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b08      	cmp	r3, #8
 8004248:	d122      	bne.n	8004290 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b08      	cmp	r3, #8
 8004256:	d11b      	bne.n	8004290 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0208 	mvn.w	r2, #8
 8004260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2204      	movs	r2, #4
 8004266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 fa23 	bl	80046c2 <HAL_TIM_IC_CaptureCallback>
 800427c:	e005      	b.n	800428a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fa15 	bl	80046ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fa26 	bl	80046d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	2b10      	cmp	r3, #16
 800429c:	d122      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0310 	and.w	r3, r3, #16
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d11b      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0210 	mvn.w	r2, #16
 80042b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2208      	movs	r2, #8
 80042ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f9f9 	bl	80046c2 <HAL_TIM_IC_CaptureCallback>
 80042d0:	e005      	b.n	80042de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f9eb 	bl	80046ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f9fc 	bl	80046d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d10e      	bne.n	8004310 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d107      	bne.n	8004310 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0201 	mvn.w	r2, #1
 8004308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fd f9ee 	bl	80016ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431a:	2b80      	cmp	r3, #128	; 0x80
 800431c:	d10e      	bne.n	800433c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004328:	2b80      	cmp	r3, #128	; 0x80
 800432a:	d107      	bne.n	800433c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fd26 	bl	8004d88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004346:	2b40      	cmp	r3, #64	; 0x40
 8004348:	d10e      	bne.n	8004368 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004354:	2b40      	cmp	r3, #64	; 0x40
 8004356:	d107      	bne.n	8004368 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f9c1 	bl	80046ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b20      	cmp	r3, #32
 8004374:	d10e      	bne.n	8004394 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0320 	and.w	r3, r3, #32
 8004380:	2b20      	cmp	r3, #32
 8004382:	d107      	bne.n	8004394 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0220 	mvn.w	r2, #32
 800438c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fcf0 	bl	8004d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004394:	bf00      	nop
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e0ae      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b0c      	cmp	r3, #12
 80043c6:	f200 809f 	bhi.w	8004508 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043ca:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d0:	08004405 	.word	0x08004405
 80043d4:	08004509 	.word	0x08004509
 80043d8:	08004509 	.word	0x08004509
 80043dc:	08004509 	.word	0x08004509
 80043e0:	08004445 	.word	0x08004445
 80043e4:	08004509 	.word	0x08004509
 80043e8:	08004509 	.word	0x08004509
 80043ec:	08004509 	.word	0x08004509
 80043f0:	08004487 	.word	0x08004487
 80043f4:	08004509 	.word	0x08004509
 80043f8:	08004509 	.word	0x08004509
 80043fc:	08004509 	.word	0x08004509
 8004400:	080044c7 	.word	0x080044c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	4618      	mov	r0, r3
 800440c:	f000 f9f8 	bl	8004800 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0208 	orr.w	r2, r2, #8
 800441e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0204 	bic.w	r2, r2, #4
 800442e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6999      	ldr	r1, [r3, #24]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	619a      	str	r2, [r3, #24]
      break;
 8004442:	e064      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fa3e 	bl	80048cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800445e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800446e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6999      	ldr	r1, [r3, #24]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	021a      	lsls	r2, r3, #8
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	619a      	str	r2, [r3, #24]
      break;
 8004484:	e043      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fa89 	bl	80049a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69da      	ldr	r2, [r3, #28]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 0208 	orr.w	r2, r2, #8
 80044a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0204 	bic.w	r2, r2, #4
 80044b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69d9      	ldr	r1, [r3, #28]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	61da      	str	r2, [r3, #28]
      break;
 80044c4:	e023      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68b9      	ldr	r1, [r7, #8]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fad3 	bl	8004a78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69da      	ldr	r2, [r3, #28]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69da      	ldr	r2, [r3, #28]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69d9      	ldr	r1, [r3, #28]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	021a      	lsls	r2, r3, #8
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	61da      	str	r2, [r3, #28]
      break;
 8004506:	e002      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	75fb      	strb	r3, [r7, #23]
      break;
 800450c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004516:	7dfb      	ldrb	r3, [r7, #23]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_TIM_ConfigClockSource+0x1c>
 8004538:	2302      	movs	r3, #2
 800453a:	e0b4      	b.n	80046a6 <HAL_TIM_ConfigClockSource+0x186>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800455a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004562:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004574:	d03e      	beq.n	80045f4 <HAL_TIM_ConfigClockSource+0xd4>
 8004576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800457a:	f200 8087 	bhi.w	800468c <HAL_TIM_ConfigClockSource+0x16c>
 800457e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004582:	f000 8086 	beq.w	8004692 <HAL_TIM_ConfigClockSource+0x172>
 8004586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458a:	d87f      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 800458c:	2b70      	cmp	r3, #112	; 0x70
 800458e:	d01a      	beq.n	80045c6 <HAL_TIM_ConfigClockSource+0xa6>
 8004590:	2b70      	cmp	r3, #112	; 0x70
 8004592:	d87b      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 8004594:	2b60      	cmp	r3, #96	; 0x60
 8004596:	d050      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x11a>
 8004598:	2b60      	cmp	r3, #96	; 0x60
 800459a:	d877      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 800459c:	2b50      	cmp	r3, #80	; 0x50
 800459e:	d03c      	beq.n	800461a <HAL_TIM_ConfigClockSource+0xfa>
 80045a0:	2b50      	cmp	r3, #80	; 0x50
 80045a2:	d873      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 80045a4:	2b40      	cmp	r3, #64	; 0x40
 80045a6:	d058      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x13a>
 80045a8:	2b40      	cmp	r3, #64	; 0x40
 80045aa:	d86f      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 80045ac:	2b30      	cmp	r3, #48	; 0x30
 80045ae:	d064      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x15a>
 80045b0:	2b30      	cmp	r3, #48	; 0x30
 80045b2:	d86b      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d060      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x15a>
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d867      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d05c      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x15a>
 80045c0:	2b10      	cmp	r3, #16
 80045c2:	d05a      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x15a>
 80045c4:	e062      	b.n	800468c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6899      	ldr	r1, [r3, #8]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f000 fb19 	bl	8004c0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	609a      	str	r2, [r3, #8]
      break;
 80045f2:	e04f      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	6899      	ldr	r1, [r3, #8]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f000 fb02 	bl	8004c0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004616:	609a      	str	r2, [r3, #8]
      break;
 8004618:	e03c      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6859      	ldr	r1, [r3, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	461a      	mov	r2, r3
 8004628:	f000 fa76 	bl	8004b18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2150      	movs	r1, #80	; 0x50
 8004632:	4618      	mov	r0, r3
 8004634:	f000 facf 	bl	8004bd6 <TIM_ITRx_SetConfig>
      break;
 8004638:	e02c      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6859      	ldr	r1, [r3, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	461a      	mov	r2, r3
 8004648:	f000 fa95 	bl	8004b76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2160      	movs	r1, #96	; 0x60
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fabf 	bl	8004bd6 <TIM_ITRx_SetConfig>
      break;
 8004658:	e01c      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6859      	ldr	r1, [r3, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	461a      	mov	r2, r3
 8004668:	f000 fa56 	bl	8004b18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2140      	movs	r1, #64	; 0x40
 8004672:	4618      	mov	r0, r3
 8004674:	f000 faaf 	bl	8004bd6 <TIM_ITRx_SetConfig>
      break;
 8004678:	e00c      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4619      	mov	r1, r3
 8004684:	4610      	mov	r0, r2
 8004686:	f000 faa6 	bl	8004bd6 <TIM_ITRx_SetConfig>
      break;
 800468a:	e003      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
      break;
 8004690:	e000      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004692:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
	...

08004700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a34      	ldr	r2, [pc, #208]	; (80047e4 <TIM_Base_SetConfig+0xe4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00f      	beq.n	8004738 <TIM_Base_SetConfig+0x38>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471e:	d00b      	beq.n	8004738 <TIM_Base_SetConfig+0x38>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a31      	ldr	r2, [pc, #196]	; (80047e8 <TIM_Base_SetConfig+0xe8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d007      	beq.n	8004738 <TIM_Base_SetConfig+0x38>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a30      	ldr	r2, [pc, #192]	; (80047ec <TIM_Base_SetConfig+0xec>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d003      	beq.n	8004738 <TIM_Base_SetConfig+0x38>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a2f      	ldr	r2, [pc, #188]	; (80047f0 <TIM_Base_SetConfig+0xf0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d108      	bne.n	800474a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a25      	ldr	r2, [pc, #148]	; (80047e4 <TIM_Base_SetConfig+0xe4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d01b      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004758:	d017      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a22      	ldr	r2, [pc, #136]	; (80047e8 <TIM_Base_SetConfig+0xe8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d013      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a21      	ldr	r2, [pc, #132]	; (80047ec <TIM_Base_SetConfig+0xec>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00f      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a20      	ldr	r2, [pc, #128]	; (80047f0 <TIM_Base_SetConfig+0xf0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00b      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a1f      	ldr	r2, [pc, #124]	; (80047f4 <TIM_Base_SetConfig+0xf4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d007      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a1e      	ldr	r2, [pc, #120]	; (80047f8 <TIM_Base_SetConfig+0xf8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d003      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a1d      	ldr	r2, [pc, #116]	; (80047fc <TIM_Base_SetConfig+0xfc>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d108      	bne.n	800479c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a08      	ldr	r2, [pc, #32]	; (80047e4 <TIM_Base_SetConfig+0xe4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d103      	bne.n	80047d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	615a      	str	r2, [r3, #20]
}
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40010000 	.word	0x40010000
 80047e8:	40000400 	.word	0x40000400
 80047ec:	40000800 	.word	0x40000800
 80047f0:	40000c00 	.word	0x40000c00
 80047f4:	40014000 	.word	0x40014000
 80047f8:	40014400 	.word	0x40014400
 80047fc:	40014800 	.word	0x40014800

08004800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f023 0201 	bic.w	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0303 	bic.w	r3, r3, #3
 8004836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f023 0302 	bic.w	r3, r3, #2
 8004848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <TIM_OC1_SetConfig+0xc8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d10c      	bne.n	8004876 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f023 0308 	bic.w	r3, r3, #8
 8004862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f023 0304 	bic.w	r3, r3, #4
 8004874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a13      	ldr	r2, [pc, #76]	; (80048c8 <TIM_OC1_SetConfig+0xc8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d111      	bne.n	80048a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800488c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	621a      	str	r2, [r3, #32]
}
 80048bc:	bf00      	nop
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	40010000 	.word	0x40010000

080048cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f023 0210 	bic.w	r2, r3, #16
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	021b      	lsls	r3, r3, #8
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 0320 	bic.w	r3, r3, #32
 8004916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	4313      	orrs	r3, r2
 8004922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a1e      	ldr	r2, [pc, #120]	; (80049a0 <TIM_OC2_SetConfig+0xd4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d10d      	bne.n	8004948 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004946:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <TIM_OC2_SetConfig+0xd4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d113      	bne.n	8004978 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004956:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800495e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	621a      	str	r2, [r3, #32]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40010000 	.word	0x40010000

080049a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a1d      	ldr	r2, [pc, #116]	; (8004a74 <TIM_OC3_SetConfig+0xd0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d10d      	bne.n	8004a1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a14      	ldr	r2, [pc, #80]	; (8004a74 <TIM_OC3_SetConfig+0xd0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d113      	bne.n	8004a4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	621a      	str	r2, [r3, #32]
}
 8004a68:	bf00      	nop
 8004a6a:	371c      	adds	r7, #28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	40010000 	.word	0x40010000

08004a78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	021b      	lsls	r3, r3, #8
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ac2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	031b      	lsls	r3, r3, #12
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a10      	ldr	r2, [pc, #64]	; (8004b14 <TIM_OC4_SetConfig+0x9c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d109      	bne.n	8004aec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ade:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	019b      	lsls	r3, r3, #6
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40010000 	.word	0x40010000

08004b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	f023 0201 	bic.w	r2, r3, #1
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f023 030a 	bic.w	r3, r3, #10
 8004b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	621a      	str	r2, [r3, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b087      	sub	sp, #28
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f023 0210 	bic.w	r2, r3, #16
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ba0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	031b      	lsls	r3, r3, #12
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	621a      	str	r2, [r3, #32]
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f043 0307 	orr.w	r3, r3, #7
 8004bf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	609a      	str	r2, [r3, #8]
}
 8004c00:	bf00      	nop
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	021a      	lsls	r2, r3, #8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	609a      	str	r2, [r3, #8]
}
 8004c40:	bf00      	nop
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	2201      	movs	r2, #1
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a1a      	ldr	r2, [r3, #32]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	401a      	ands	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a1a      	ldr	r2, [r3, #32]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 031f 	and.w	r3, r3, #31
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	fa01 f303 	lsl.w	r3, r1, r3
 8004c84:	431a      	orrs	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	621a      	str	r2, [r3, #32]
}
 8004c8a:	bf00      	nop
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e050      	b.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a1c      	ldr	r2, [pc, #112]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d018      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfc:	d013      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a18      	ldr	r2, [pc, #96]	; (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00e      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a16      	ldr	r2, [pc, #88]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d009      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a15      	ldr	r2, [pc, #84]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d004      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a13      	ldr	r2, [pc, #76]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d10c      	bne.n	8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40010000 	.word	0x40010000
 8004d64:	40000400 	.word	0x40000400
 8004d68:	40000800 	.word	0x40000800
 8004d6c:	40000c00 	.word	0x40000c00
 8004d70:	40014000 	.word	0x40014000

08004d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <__errno>:
 8004d9c:	4b01      	ldr	r3, [pc, #4]	; (8004da4 <__errno+0x8>)
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20000020 	.word	0x20000020

08004da8 <__libc_init_array>:
 8004da8:	b570      	push	{r4, r5, r6, lr}
 8004daa:	4d0d      	ldr	r5, [pc, #52]	; (8004de0 <__libc_init_array+0x38>)
 8004dac:	4c0d      	ldr	r4, [pc, #52]	; (8004de4 <__libc_init_array+0x3c>)
 8004dae:	1b64      	subs	r4, r4, r5
 8004db0:	10a4      	asrs	r4, r4, #2
 8004db2:	2600      	movs	r6, #0
 8004db4:	42a6      	cmp	r6, r4
 8004db6:	d109      	bne.n	8004dcc <__libc_init_array+0x24>
 8004db8:	4d0b      	ldr	r5, [pc, #44]	; (8004de8 <__libc_init_array+0x40>)
 8004dba:	4c0c      	ldr	r4, [pc, #48]	; (8004dec <__libc_init_array+0x44>)
 8004dbc:	f000 fc8e 	bl	80056dc <_init>
 8004dc0:	1b64      	subs	r4, r4, r5
 8004dc2:	10a4      	asrs	r4, r4, #2
 8004dc4:	2600      	movs	r6, #0
 8004dc6:	42a6      	cmp	r6, r4
 8004dc8:	d105      	bne.n	8004dd6 <__libc_init_array+0x2e>
 8004dca:	bd70      	pop	{r4, r5, r6, pc}
 8004dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd0:	4798      	blx	r3
 8004dd2:	3601      	adds	r6, #1
 8004dd4:	e7ee      	b.n	8004db4 <__libc_init_array+0xc>
 8004dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dda:	4798      	blx	r3
 8004ddc:	3601      	adds	r6, #1
 8004dde:	e7f2      	b.n	8004dc6 <__libc_init_array+0x1e>
 8004de0:	080057bc 	.word	0x080057bc
 8004de4:	080057bc 	.word	0x080057bc
 8004de8:	080057bc 	.word	0x080057bc
 8004dec:	080057c0 	.word	0x080057c0

08004df0 <memset>:
 8004df0:	4402      	add	r2, r0
 8004df2:	4603      	mov	r3, r0
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d100      	bne.n	8004dfa <memset+0xa>
 8004df8:	4770      	bx	lr
 8004dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfe:	e7f9      	b.n	8004df4 <memset+0x4>

08004e00 <siprintf>:
 8004e00:	b40e      	push	{r1, r2, r3}
 8004e02:	b500      	push	{lr}
 8004e04:	b09c      	sub	sp, #112	; 0x70
 8004e06:	ab1d      	add	r3, sp, #116	; 0x74
 8004e08:	9002      	str	r0, [sp, #8]
 8004e0a:	9006      	str	r0, [sp, #24]
 8004e0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e10:	4809      	ldr	r0, [pc, #36]	; (8004e38 <siprintf+0x38>)
 8004e12:	9107      	str	r1, [sp, #28]
 8004e14:	9104      	str	r1, [sp, #16]
 8004e16:	4909      	ldr	r1, [pc, #36]	; (8004e3c <siprintf+0x3c>)
 8004e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e1c:	9105      	str	r1, [sp, #20]
 8004e1e:	6800      	ldr	r0, [r0, #0]
 8004e20:	9301      	str	r3, [sp, #4]
 8004e22:	a902      	add	r1, sp, #8
 8004e24:	f000 f868 	bl	8004ef8 <_svfiprintf_r>
 8004e28:	9b02      	ldr	r3, [sp, #8]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	b01c      	add	sp, #112	; 0x70
 8004e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e34:	b003      	add	sp, #12
 8004e36:	4770      	bx	lr
 8004e38:	20000020 	.word	0x20000020
 8004e3c:	ffff0208 	.word	0xffff0208

08004e40 <__ssputs_r>:
 8004e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e44:	688e      	ldr	r6, [r1, #8]
 8004e46:	429e      	cmp	r6, r3
 8004e48:	4682      	mov	sl, r0
 8004e4a:	460c      	mov	r4, r1
 8004e4c:	4690      	mov	r8, r2
 8004e4e:	461f      	mov	r7, r3
 8004e50:	d838      	bhi.n	8004ec4 <__ssputs_r+0x84>
 8004e52:	898a      	ldrh	r2, [r1, #12]
 8004e54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e58:	d032      	beq.n	8004ec0 <__ssputs_r+0x80>
 8004e5a:	6825      	ldr	r5, [r4, #0]
 8004e5c:	6909      	ldr	r1, [r1, #16]
 8004e5e:	eba5 0901 	sub.w	r9, r5, r1
 8004e62:	6965      	ldr	r5, [r4, #20]
 8004e64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	444b      	add	r3, r9
 8004e70:	106d      	asrs	r5, r5, #1
 8004e72:	429d      	cmp	r5, r3
 8004e74:	bf38      	it	cc
 8004e76:	461d      	movcc	r5, r3
 8004e78:	0553      	lsls	r3, r2, #21
 8004e7a:	d531      	bpl.n	8004ee0 <__ssputs_r+0xa0>
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	f000 fb63 	bl	8005548 <_malloc_r>
 8004e82:	4606      	mov	r6, r0
 8004e84:	b950      	cbnz	r0, 8004e9c <__ssputs_r+0x5c>
 8004e86:	230c      	movs	r3, #12
 8004e88:	f8ca 3000 	str.w	r3, [sl]
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e92:	81a3      	strh	r3, [r4, #12]
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9c:	6921      	ldr	r1, [r4, #16]
 8004e9e:	464a      	mov	r2, r9
 8004ea0:	f000 fabe 	bl	8005420 <memcpy>
 8004ea4:	89a3      	ldrh	r3, [r4, #12]
 8004ea6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eae:	81a3      	strh	r3, [r4, #12]
 8004eb0:	6126      	str	r6, [r4, #16]
 8004eb2:	6165      	str	r5, [r4, #20]
 8004eb4:	444e      	add	r6, r9
 8004eb6:	eba5 0509 	sub.w	r5, r5, r9
 8004eba:	6026      	str	r6, [r4, #0]
 8004ebc:	60a5      	str	r5, [r4, #8]
 8004ebe:	463e      	mov	r6, r7
 8004ec0:	42be      	cmp	r6, r7
 8004ec2:	d900      	bls.n	8004ec6 <__ssputs_r+0x86>
 8004ec4:	463e      	mov	r6, r7
 8004ec6:	6820      	ldr	r0, [r4, #0]
 8004ec8:	4632      	mov	r2, r6
 8004eca:	4641      	mov	r1, r8
 8004ecc:	f000 fab6 	bl	800543c <memmove>
 8004ed0:	68a3      	ldr	r3, [r4, #8]
 8004ed2:	1b9b      	subs	r3, r3, r6
 8004ed4:	60a3      	str	r3, [r4, #8]
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	4433      	add	r3, r6
 8004eda:	6023      	str	r3, [r4, #0]
 8004edc:	2000      	movs	r0, #0
 8004ede:	e7db      	b.n	8004e98 <__ssputs_r+0x58>
 8004ee0:	462a      	mov	r2, r5
 8004ee2:	f000 fba5 	bl	8005630 <_realloc_r>
 8004ee6:	4606      	mov	r6, r0
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	d1e1      	bne.n	8004eb0 <__ssputs_r+0x70>
 8004eec:	6921      	ldr	r1, [r4, #16]
 8004eee:	4650      	mov	r0, sl
 8004ef0:	f000 fabe 	bl	8005470 <_free_r>
 8004ef4:	e7c7      	b.n	8004e86 <__ssputs_r+0x46>
	...

08004ef8 <_svfiprintf_r>:
 8004ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efc:	4698      	mov	r8, r3
 8004efe:	898b      	ldrh	r3, [r1, #12]
 8004f00:	061b      	lsls	r3, r3, #24
 8004f02:	b09d      	sub	sp, #116	; 0x74
 8004f04:	4607      	mov	r7, r0
 8004f06:	460d      	mov	r5, r1
 8004f08:	4614      	mov	r4, r2
 8004f0a:	d50e      	bpl.n	8004f2a <_svfiprintf_r+0x32>
 8004f0c:	690b      	ldr	r3, [r1, #16]
 8004f0e:	b963      	cbnz	r3, 8004f2a <_svfiprintf_r+0x32>
 8004f10:	2140      	movs	r1, #64	; 0x40
 8004f12:	f000 fb19 	bl	8005548 <_malloc_r>
 8004f16:	6028      	str	r0, [r5, #0]
 8004f18:	6128      	str	r0, [r5, #16]
 8004f1a:	b920      	cbnz	r0, 8004f26 <_svfiprintf_r+0x2e>
 8004f1c:	230c      	movs	r3, #12
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295
 8004f24:	e0d1      	b.n	80050ca <_svfiprintf_r+0x1d2>
 8004f26:	2340      	movs	r3, #64	; 0x40
 8004f28:	616b      	str	r3, [r5, #20]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f2e:	2320      	movs	r3, #32
 8004f30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f34:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f38:	2330      	movs	r3, #48	; 0x30
 8004f3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80050e4 <_svfiprintf_r+0x1ec>
 8004f3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f42:	f04f 0901 	mov.w	r9, #1
 8004f46:	4623      	mov	r3, r4
 8004f48:	469a      	mov	sl, r3
 8004f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f4e:	b10a      	cbz	r2, 8004f54 <_svfiprintf_r+0x5c>
 8004f50:	2a25      	cmp	r2, #37	; 0x25
 8004f52:	d1f9      	bne.n	8004f48 <_svfiprintf_r+0x50>
 8004f54:	ebba 0b04 	subs.w	fp, sl, r4
 8004f58:	d00b      	beq.n	8004f72 <_svfiprintf_r+0x7a>
 8004f5a:	465b      	mov	r3, fp
 8004f5c:	4622      	mov	r2, r4
 8004f5e:	4629      	mov	r1, r5
 8004f60:	4638      	mov	r0, r7
 8004f62:	f7ff ff6d 	bl	8004e40 <__ssputs_r>
 8004f66:	3001      	adds	r0, #1
 8004f68:	f000 80aa 	beq.w	80050c0 <_svfiprintf_r+0x1c8>
 8004f6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f6e:	445a      	add	r2, fp
 8004f70:	9209      	str	r2, [sp, #36]	; 0x24
 8004f72:	f89a 3000 	ldrb.w	r3, [sl]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 80a2 	beq.w	80050c0 <_svfiprintf_r+0x1c8>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f86:	f10a 0a01 	add.w	sl, sl, #1
 8004f8a:	9304      	str	r3, [sp, #16]
 8004f8c:	9307      	str	r3, [sp, #28]
 8004f8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f92:	931a      	str	r3, [sp, #104]	; 0x68
 8004f94:	4654      	mov	r4, sl
 8004f96:	2205      	movs	r2, #5
 8004f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f9c:	4851      	ldr	r0, [pc, #324]	; (80050e4 <_svfiprintf_r+0x1ec>)
 8004f9e:	f7fb f927 	bl	80001f0 <memchr>
 8004fa2:	9a04      	ldr	r2, [sp, #16]
 8004fa4:	b9d8      	cbnz	r0, 8004fde <_svfiprintf_r+0xe6>
 8004fa6:	06d0      	lsls	r0, r2, #27
 8004fa8:	bf44      	itt	mi
 8004faa:	2320      	movmi	r3, #32
 8004fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fb0:	0711      	lsls	r1, r2, #28
 8004fb2:	bf44      	itt	mi
 8004fb4:	232b      	movmi	r3, #43	; 0x2b
 8004fb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fba:	f89a 3000 	ldrb.w	r3, [sl]
 8004fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8004fc0:	d015      	beq.n	8004fee <_svfiprintf_r+0xf6>
 8004fc2:	9a07      	ldr	r2, [sp, #28]
 8004fc4:	4654      	mov	r4, sl
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	f04f 0c0a 	mov.w	ip, #10
 8004fcc:	4621      	mov	r1, r4
 8004fce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fd2:	3b30      	subs	r3, #48	; 0x30
 8004fd4:	2b09      	cmp	r3, #9
 8004fd6:	d94e      	bls.n	8005076 <_svfiprintf_r+0x17e>
 8004fd8:	b1b0      	cbz	r0, 8005008 <_svfiprintf_r+0x110>
 8004fda:	9207      	str	r2, [sp, #28]
 8004fdc:	e014      	b.n	8005008 <_svfiprintf_r+0x110>
 8004fde:	eba0 0308 	sub.w	r3, r0, r8
 8004fe2:	fa09 f303 	lsl.w	r3, r9, r3
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	9304      	str	r3, [sp, #16]
 8004fea:	46a2      	mov	sl, r4
 8004fec:	e7d2      	b.n	8004f94 <_svfiprintf_r+0x9c>
 8004fee:	9b03      	ldr	r3, [sp, #12]
 8004ff0:	1d19      	adds	r1, r3, #4
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	9103      	str	r1, [sp, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	bfbb      	ittet	lt
 8004ffa:	425b      	neglt	r3, r3
 8004ffc:	f042 0202 	orrlt.w	r2, r2, #2
 8005000:	9307      	strge	r3, [sp, #28]
 8005002:	9307      	strlt	r3, [sp, #28]
 8005004:	bfb8      	it	lt
 8005006:	9204      	strlt	r2, [sp, #16]
 8005008:	7823      	ldrb	r3, [r4, #0]
 800500a:	2b2e      	cmp	r3, #46	; 0x2e
 800500c:	d10c      	bne.n	8005028 <_svfiprintf_r+0x130>
 800500e:	7863      	ldrb	r3, [r4, #1]
 8005010:	2b2a      	cmp	r3, #42	; 0x2a
 8005012:	d135      	bne.n	8005080 <_svfiprintf_r+0x188>
 8005014:	9b03      	ldr	r3, [sp, #12]
 8005016:	1d1a      	adds	r2, r3, #4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	9203      	str	r2, [sp, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	bfb8      	it	lt
 8005020:	f04f 33ff 	movlt.w	r3, #4294967295
 8005024:	3402      	adds	r4, #2
 8005026:	9305      	str	r3, [sp, #20]
 8005028:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80050f4 <_svfiprintf_r+0x1fc>
 800502c:	7821      	ldrb	r1, [r4, #0]
 800502e:	2203      	movs	r2, #3
 8005030:	4650      	mov	r0, sl
 8005032:	f7fb f8dd 	bl	80001f0 <memchr>
 8005036:	b140      	cbz	r0, 800504a <_svfiprintf_r+0x152>
 8005038:	2340      	movs	r3, #64	; 0x40
 800503a:	eba0 000a 	sub.w	r0, r0, sl
 800503e:	fa03 f000 	lsl.w	r0, r3, r0
 8005042:	9b04      	ldr	r3, [sp, #16]
 8005044:	4303      	orrs	r3, r0
 8005046:	3401      	adds	r4, #1
 8005048:	9304      	str	r3, [sp, #16]
 800504a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800504e:	4826      	ldr	r0, [pc, #152]	; (80050e8 <_svfiprintf_r+0x1f0>)
 8005050:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005054:	2206      	movs	r2, #6
 8005056:	f7fb f8cb 	bl	80001f0 <memchr>
 800505a:	2800      	cmp	r0, #0
 800505c:	d038      	beq.n	80050d0 <_svfiprintf_r+0x1d8>
 800505e:	4b23      	ldr	r3, [pc, #140]	; (80050ec <_svfiprintf_r+0x1f4>)
 8005060:	bb1b      	cbnz	r3, 80050aa <_svfiprintf_r+0x1b2>
 8005062:	9b03      	ldr	r3, [sp, #12]
 8005064:	3307      	adds	r3, #7
 8005066:	f023 0307 	bic.w	r3, r3, #7
 800506a:	3308      	adds	r3, #8
 800506c:	9303      	str	r3, [sp, #12]
 800506e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005070:	4433      	add	r3, r6
 8005072:	9309      	str	r3, [sp, #36]	; 0x24
 8005074:	e767      	b.n	8004f46 <_svfiprintf_r+0x4e>
 8005076:	fb0c 3202 	mla	r2, ip, r2, r3
 800507a:	460c      	mov	r4, r1
 800507c:	2001      	movs	r0, #1
 800507e:	e7a5      	b.n	8004fcc <_svfiprintf_r+0xd4>
 8005080:	2300      	movs	r3, #0
 8005082:	3401      	adds	r4, #1
 8005084:	9305      	str	r3, [sp, #20]
 8005086:	4619      	mov	r1, r3
 8005088:	f04f 0c0a 	mov.w	ip, #10
 800508c:	4620      	mov	r0, r4
 800508e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005092:	3a30      	subs	r2, #48	; 0x30
 8005094:	2a09      	cmp	r2, #9
 8005096:	d903      	bls.n	80050a0 <_svfiprintf_r+0x1a8>
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0c5      	beq.n	8005028 <_svfiprintf_r+0x130>
 800509c:	9105      	str	r1, [sp, #20]
 800509e:	e7c3      	b.n	8005028 <_svfiprintf_r+0x130>
 80050a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80050a4:	4604      	mov	r4, r0
 80050a6:	2301      	movs	r3, #1
 80050a8:	e7f0      	b.n	800508c <_svfiprintf_r+0x194>
 80050aa:	ab03      	add	r3, sp, #12
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	462a      	mov	r2, r5
 80050b0:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <_svfiprintf_r+0x1f8>)
 80050b2:	a904      	add	r1, sp, #16
 80050b4:	4638      	mov	r0, r7
 80050b6:	f3af 8000 	nop.w
 80050ba:	1c42      	adds	r2, r0, #1
 80050bc:	4606      	mov	r6, r0
 80050be:	d1d6      	bne.n	800506e <_svfiprintf_r+0x176>
 80050c0:	89ab      	ldrh	r3, [r5, #12]
 80050c2:	065b      	lsls	r3, r3, #25
 80050c4:	f53f af2c 	bmi.w	8004f20 <_svfiprintf_r+0x28>
 80050c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050ca:	b01d      	add	sp, #116	; 0x74
 80050cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d0:	ab03      	add	r3, sp, #12
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	462a      	mov	r2, r5
 80050d6:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <_svfiprintf_r+0x1f8>)
 80050d8:	a904      	add	r1, sp, #16
 80050da:	4638      	mov	r0, r7
 80050dc:	f000 f87a 	bl	80051d4 <_printf_i>
 80050e0:	e7eb      	b.n	80050ba <_svfiprintf_r+0x1c2>
 80050e2:	bf00      	nop
 80050e4:	08005780 	.word	0x08005780
 80050e8:	0800578a 	.word	0x0800578a
 80050ec:	00000000 	.word	0x00000000
 80050f0:	08004e41 	.word	0x08004e41
 80050f4:	08005786 	.word	0x08005786

080050f8 <_printf_common>:
 80050f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050fc:	4616      	mov	r6, r2
 80050fe:	4699      	mov	r9, r3
 8005100:	688a      	ldr	r2, [r1, #8]
 8005102:	690b      	ldr	r3, [r1, #16]
 8005104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005108:	4293      	cmp	r3, r2
 800510a:	bfb8      	it	lt
 800510c:	4613      	movlt	r3, r2
 800510e:	6033      	str	r3, [r6, #0]
 8005110:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005114:	4607      	mov	r7, r0
 8005116:	460c      	mov	r4, r1
 8005118:	b10a      	cbz	r2, 800511e <_printf_common+0x26>
 800511a:	3301      	adds	r3, #1
 800511c:	6033      	str	r3, [r6, #0]
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	0699      	lsls	r1, r3, #26
 8005122:	bf42      	ittt	mi
 8005124:	6833      	ldrmi	r3, [r6, #0]
 8005126:	3302      	addmi	r3, #2
 8005128:	6033      	strmi	r3, [r6, #0]
 800512a:	6825      	ldr	r5, [r4, #0]
 800512c:	f015 0506 	ands.w	r5, r5, #6
 8005130:	d106      	bne.n	8005140 <_printf_common+0x48>
 8005132:	f104 0a19 	add.w	sl, r4, #25
 8005136:	68e3      	ldr	r3, [r4, #12]
 8005138:	6832      	ldr	r2, [r6, #0]
 800513a:	1a9b      	subs	r3, r3, r2
 800513c:	42ab      	cmp	r3, r5
 800513e:	dc26      	bgt.n	800518e <_printf_common+0x96>
 8005140:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005144:	1e13      	subs	r3, r2, #0
 8005146:	6822      	ldr	r2, [r4, #0]
 8005148:	bf18      	it	ne
 800514a:	2301      	movne	r3, #1
 800514c:	0692      	lsls	r2, r2, #26
 800514e:	d42b      	bmi.n	80051a8 <_printf_common+0xb0>
 8005150:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005154:	4649      	mov	r1, r9
 8005156:	4638      	mov	r0, r7
 8005158:	47c0      	blx	r8
 800515a:	3001      	adds	r0, #1
 800515c:	d01e      	beq.n	800519c <_printf_common+0xa4>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	68e5      	ldr	r5, [r4, #12]
 8005162:	6832      	ldr	r2, [r6, #0]
 8005164:	f003 0306 	and.w	r3, r3, #6
 8005168:	2b04      	cmp	r3, #4
 800516a:	bf08      	it	eq
 800516c:	1aad      	subeq	r5, r5, r2
 800516e:	68a3      	ldr	r3, [r4, #8]
 8005170:	6922      	ldr	r2, [r4, #16]
 8005172:	bf0c      	ite	eq
 8005174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005178:	2500      	movne	r5, #0
 800517a:	4293      	cmp	r3, r2
 800517c:	bfc4      	itt	gt
 800517e:	1a9b      	subgt	r3, r3, r2
 8005180:	18ed      	addgt	r5, r5, r3
 8005182:	2600      	movs	r6, #0
 8005184:	341a      	adds	r4, #26
 8005186:	42b5      	cmp	r5, r6
 8005188:	d11a      	bne.n	80051c0 <_printf_common+0xc8>
 800518a:	2000      	movs	r0, #0
 800518c:	e008      	b.n	80051a0 <_printf_common+0xa8>
 800518e:	2301      	movs	r3, #1
 8005190:	4652      	mov	r2, sl
 8005192:	4649      	mov	r1, r9
 8005194:	4638      	mov	r0, r7
 8005196:	47c0      	blx	r8
 8005198:	3001      	adds	r0, #1
 800519a:	d103      	bne.n	80051a4 <_printf_common+0xac>
 800519c:	f04f 30ff 	mov.w	r0, #4294967295
 80051a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a4:	3501      	adds	r5, #1
 80051a6:	e7c6      	b.n	8005136 <_printf_common+0x3e>
 80051a8:	18e1      	adds	r1, r4, r3
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	2030      	movs	r0, #48	; 0x30
 80051ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051b2:	4422      	add	r2, r4
 80051b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051bc:	3302      	adds	r3, #2
 80051be:	e7c7      	b.n	8005150 <_printf_common+0x58>
 80051c0:	2301      	movs	r3, #1
 80051c2:	4622      	mov	r2, r4
 80051c4:	4649      	mov	r1, r9
 80051c6:	4638      	mov	r0, r7
 80051c8:	47c0      	blx	r8
 80051ca:	3001      	adds	r0, #1
 80051cc:	d0e6      	beq.n	800519c <_printf_common+0xa4>
 80051ce:	3601      	adds	r6, #1
 80051d0:	e7d9      	b.n	8005186 <_printf_common+0x8e>
	...

080051d4 <_printf_i>:
 80051d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051d8:	7e0f      	ldrb	r7, [r1, #24]
 80051da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051dc:	2f78      	cmp	r7, #120	; 0x78
 80051de:	4691      	mov	r9, r2
 80051e0:	4680      	mov	r8, r0
 80051e2:	460c      	mov	r4, r1
 80051e4:	469a      	mov	sl, r3
 80051e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051ea:	d807      	bhi.n	80051fc <_printf_i+0x28>
 80051ec:	2f62      	cmp	r7, #98	; 0x62
 80051ee:	d80a      	bhi.n	8005206 <_printf_i+0x32>
 80051f0:	2f00      	cmp	r7, #0
 80051f2:	f000 80d8 	beq.w	80053a6 <_printf_i+0x1d2>
 80051f6:	2f58      	cmp	r7, #88	; 0x58
 80051f8:	f000 80a3 	beq.w	8005342 <_printf_i+0x16e>
 80051fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005200:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005204:	e03a      	b.n	800527c <_printf_i+0xa8>
 8005206:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800520a:	2b15      	cmp	r3, #21
 800520c:	d8f6      	bhi.n	80051fc <_printf_i+0x28>
 800520e:	a101      	add	r1, pc, #4	; (adr r1, 8005214 <_printf_i+0x40>)
 8005210:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005214:	0800526d 	.word	0x0800526d
 8005218:	08005281 	.word	0x08005281
 800521c:	080051fd 	.word	0x080051fd
 8005220:	080051fd 	.word	0x080051fd
 8005224:	080051fd 	.word	0x080051fd
 8005228:	080051fd 	.word	0x080051fd
 800522c:	08005281 	.word	0x08005281
 8005230:	080051fd 	.word	0x080051fd
 8005234:	080051fd 	.word	0x080051fd
 8005238:	080051fd 	.word	0x080051fd
 800523c:	080051fd 	.word	0x080051fd
 8005240:	0800538d 	.word	0x0800538d
 8005244:	080052b1 	.word	0x080052b1
 8005248:	0800536f 	.word	0x0800536f
 800524c:	080051fd 	.word	0x080051fd
 8005250:	080051fd 	.word	0x080051fd
 8005254:	080053af 	.word	0x080053af
 8005258:	080051fd 	.word	0x080051fd
 800525c:	080052b1 	.word	0x080052b1
 8005260:	080051fd 	.word	0x080051fd
 8005264:	080051fd 	.word	0x080051fd
 8005268:	08005377 	.word	0x08005377
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	1d1a      	adds	r2, r3, #4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	602a      	str	r2, [r5, #0]
 8005274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800527c:	2301      	movs	r3, #1
 800527e:	e0a3      	b.n	80053c8 <_printf_i+0x1f4>
 8005280:	6820      	ldr	r0, [r4, #0]
 8005282:	6829      	ldr	r1, [r5, #0]
 8005284:	0606      	lsls	r6, r0, #24
 8005286:	f101 0304 	add.w	r3, r1, #4
 800528a:	d50a      	bpl.n	80052a2 <_printf_i+0xce>
 800528c:	680e      	ldr	r6, [r1, #0]
 800528e:	602b      	str	r3, [r5, #0]
 8005290:	2e00      	cmp	r6, #0
 8005292:	da03      	bge.n	800529c <_printf_i+0xc8>
 8005294:	232d      	movs	r3, #45	; 0x2d
 8005296:	4276      	negs	r6, r6
 8005298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800529c:	485e      	ldr	r0, [pc, #376]	; (8005418 <_printf_i+0x244>)
 800529e:	230a      	movs	r3, #10
 80052a0:	e019      	b.n	80052d6 <_printf_i+0x102>
 80052a2:	680e      	ldr	r6, [r1, #0]
 80052a4:	602b      	str	r3, [r5, #0]
 80052a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052aa:	bf18      	it	ne
 80052ac:	b236      	sxthne	r6, r6
 80052ae:	e7ef      	b.n	8005290 <_printf_i+0xbc>
 80052b0:	682b      	ldr	r3, [r5, #0]
 80052b2:	6820      	ldr	r0, [r4, #0]
 80052b4:	1d19      	adds	r1, r3, #4
 80052b6:	6029      	str	r1, [r5, #0]
 80052b8:	0601      	lsls	r1, r0, #24
 80052ba:	d501      	bpl.n	80052c0 <_printf_i+0xec>
 80052bc:	681e      	ldr	r6, [r3, #0]
 80052be:	e002      	b.n	80052c6 <_printf_i+0xf2>
 80052c0:	0646      	lsls	r6, r0, #25
 80052c2:	d5fb      	bpl.n	80052bc <_printf_i+0xe8>
 80052c4:	881e      	ldrh	r6, [r3, #0]
 80052c6:	4854      	ldr	r0, [pc, #336]	; (8005418 <_printf_i+0x244>)
 80052c8:	2f6f      	cmp	r7, #111	; 0x6f
 80052ca:	bf0c      	ite	eq
 80052cc:	2308      	moveq	r3, #8
 80052ce:	230a      	movne	r3, #10
 80052d0:	2100      	movs	r1, #0
 80052d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052d6:	6865      	ldr	r5, [r4, #4]
 80052d8:	60a5      	str	r5, [r4, #8]
 80052da:	2d00      	cmp	r5, #0
 80052dc:	bfa2      	ittt	ge
 80052de:	6821      	ldrge	r1, [r4, #0]
 80052e0:	f021 0104 	bicge.w	r1, r1, #4
 80052e4:	6021      	strge	r1, [r4, #0]
 80052e6:	b90e      	cbnz	r6, 80052ec <_printf_i+0x118>
 80052e8:	2d00      	cmp	r5, #0
 80052ea:	d04d      	beq.n	8005388 <_printf_i+0x1b4>
 80052ec:	4615      	mov	r5, r2
 80052ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80052f2:	fb03 6711 	mls	r7, r3, r1, r6
 80052f6:	5dc7      	ldrb	r7, [r0, r7]
 80052f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052fc:	4637      	mov	r7, r6
 80052fe:	42bb      	cmp	r3, r7
 8005300:	460e      	mov	r6, r1
 8005302:	d9f4      	bls.n	80052ee <_printf_i+0x11a>
 8005304:	2b08      	cmp	r3, #8
 8005306:	d10b      	bne.n	8005320 <_printf_i+0x14c>
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	07de      	lsls	r6, r3, #31
 800530c:	d508      	bpl.n	8005320 <_printf_i+0x14c>
 800530e:	6923      	ldr	r3, [r4, #16]
 8005310:	6861      	ldr	r1, [r4, #4]
 8005312:	4299      	cmp	r1, r3
 8005314:	bfde      	ittt	le
 8005316:	2330      	movle	r3, #48	; 0x30
 8005318:	f805 3c01 	strble.w	r3, [r5, #-1]
 800531c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005320:	1b52      	subs	r2, r2, r5
 8005322:	6122      	str	r2, [r4, #16]
 8005324:	f8cd a000 	str.w	sl, [sp]
 8005328:	464b      	mov	r3, r9
 800532a:	aa03      	add	r2, sp, #12
 800532c:	4621      	mov	r1, r4
 800532e:	4640      	mov	r0, r8
 8005330:	f7ff fee2 	bl	80050f8 <_printf_common>
 8005334:	3001      	adds	r0, #1
 8005336:	d14c      	bne.n	80053d2 <_printf_i+0x1fe>
 8005338:	f04f 30ff 	mov.w	r0, #4294967295
 800533c:	b004      	add	sp, #16
 800533e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005342:	4835      	ldr	r0, [pc, #212]	; (8005418 <_printf_i+0x244>)
 8005344:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005348:	6829      	ldr	r1, [r5, #0]
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005350:	6029      	str	r1, [r5, #0]
 8005352:	061d      	lsls	r5, r3, #24
 8005354:	d514      	bpl.n	8005380 <_printf_i+0x1ac>
 8005356:	07df      	lsls	r7, r3, #31
 8005358:	bf44      	itt	mi
 800535a:	f043 0320 	orrmi.w	r3, r3, #32
 800535e:	6023      	strmi	r3, [r4, #0]
 8005360:	b91e      	cbnz	r6, 800536a <_printf_i+0x196>
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	f023 0320 	bic.w	r3, r3, #32
 8005368:	6023      	str	r3, [r4, #0]
 800536a:	2310      	movs	r3, #16
 800536c:	e7b0      	b.n	80052d0 <_printf_i+0xfc>
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	f043 0320 	orr.w	r3, r3, #32
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	2378      	movs	r3, #120	; 0x78
 8005378:	4828      	ldr	r0, [pc, #160]	; (800541c <_printf_i+0x248>)
 800537a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800537e:	e7e3      	b.n	8005348 <_printf_i+0x174>
 8005380:	0659      	lsls	r1, r3, #25
 8005382:	bf48      	it	mi
 8005384:	b2b6      	uxthmi	r6, r6
 8005386:	e7e6      	b.n	8005356 <_printf_i+0x182>
 8005388:	4615      	mov	r5, r2
 800538a:	e7bb      	b.n	8005304 <_printf_i+0x130>
 800538c:	682b      	ldr	r3, [r5, #0]
 800538e:	6826      	ldr	r6, [r4, #0]
 8005390:	6961      	ldr	r1, [r4, #20]
 8005392:	1d18      	adds	r0, r3, #4
 8005394:	6028      	str	r0, [r5, #0]
 8005396:	0635      	lsls	r5, r6, #24
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	d501      	bpl.n	80053a0 <_printf_i+0x1cc>
 800539c:	6019      	str	r1, [r3, #0]
 800539e:	e002      	b.n	80053a6 <_printf_i+0x1d2>
 80053a0:	0670      	lsls	r0, r6, #25
 80053a2:	d5fb      	bpl.n	800539c <_printf_i+0x1c8>
 80053a4:	8019      	strh	r1, [r3, #0]
 80053a6:	2300      	movs	r3, #0
 80053a8:	6123      	str	r3, [r4, #16]
 80053aa:	4615      	mov	r5, r2
 80053ac:	e7ba      	b.n	8005324 <_printf_i+0x150>
 80053ae:	682b      	ldr	r3, [r5, #0]
 80053b0:	1d1a      	adds	r2, r3, #4
 80053b2:	602a      	str	r2, [r5, #0]
 80053b4:	681d      	ldr	r5, [r3, #0]
 80053b6:	6862      	ldr	r2, [r4, #4]
 80053b8:	2100      	movs	r1, #0
 80053ba:	4628      	mov	r0, r5
 80053bc:	f7fa ff18 	bl	80001f0 <memchr>
 80053c0:	b108      	cbz	r0, 80053c6 <_printf_i+0x1f2>
 80053c2:	1b40      	subs	r0, r0, r5
 80053c4:	6060      	str	r0, [r4, #4]
 80053c6:	6863      	ldr	r3, [r4, #4]
 80053c8:	6123      	str	r3, [r4, #16]
 80053ca:	2300      	movs	r3, #0
 80053cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053d0:	e7a8      	b.n	8005324 <_printf_i+0x150>
 80053d2:	6923      	ldr	r3, [r4, #16]
 80053d4:	462a      	mov	r2, r5
 80053d6:	4649      	mov	r1, r9
 80053d8:	4640      	mov	r0, r8
 80053da:	47d0      	blx	sl
 80053dc:	3001      	adds	r0, #1
 80053de:	d0ab      	beq.n	8005338 <_printf_i+0x164>
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	079b      	lsls	r3, r3, #30
 80053e4:	d413      	bmi.n	800540e <_printf_i+0x23a>
 80053e6:	68e0      	ldr	r0, [r4, #12]
 80053e8:	9b03      	ldr	r3, [sp, #12]
 80053ea:	4298      	cmp	r0, r3
 80053ec:	bfb8      	it	lt
 80053ee:	4618      	movlt	r0, r3
 80053f0:	e7a4      	b.n	800533c <_printf_i+0x168>
 80053f2:	2301      	movs	r3, #1
 80053f4:	4632      	mov	r2, r6
 80053f6:	4649      	mov	r1, r9
 80053f8:	4640      	mov	r0, r8
 80053fa:	47d0      	blx	sl
 80053fc:	3001      	adds	r0, #1
 80053fe:	d09b      	beq.n	8005338 <_printf_i+0x164>
 8005400:	3501      	adds	r5, #1
 8005402:	68e3      	ldr	r3, [r4, #12]
 8005404:	9903      	ldr	r1, [sp, #12]
 8005406:	1a5b      	subs	r3, r3, r1
 8005408:	42ab      	cmp	r3, r5
 800540a:	dcf2      	bgt.n	80053f2 <_printf_i+0x21e>
 800540c:	e7eb      	b.n	80053e6 <_printf_i+0x212>
 800540e:	2500      	movs	r5, #0
 8005410:	f104 0619 	add.w	r6, r4, #25
 8005414:	e7f5      	b.n	8005402 <_printf_i+0x22e>
 8005416:	bf00      	nop
 8005418:	08005791 	.word	0x08005791
 800541c:	080057a2 	.word	0x080057a2

08005420 <memcpy>:
 8005420:	440a      	add	r2, r1
 8005422:	4291      	cmp	r1, r2
 8005424:	f100 33ff 	add.w	r3, r0, #4294967295
 8005428:	d100      	bne.n	800542c <memcpy+0xc>
 800542a:	4770      	bx	lr
 800542c:	b510      	push	{r4, lr}
 800542e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005432:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005436:	4291      	cmp	r1, r2
 8005438:	d1f9      	bne.n	800542e <memcpy+0xe>
 800543a:	bd10      	pop	{r4, pc}

0800543c <memmove>:
 800543c:	4288      	cmp	r0, r1
 800543e:	b510      	push	{r4, lr}
 8005440:	eb01 0402 	add.w	r4, r1, r2
 8005444:	d902      	bls.n	800544c <memmove+0x10>
 8005446:	4284      	cmp	r4, r0
 8005448:	4623      	mov	r3, r4
 800544a:	d807      	bhi.n	800545c <memmove+0x20>
 800544c:	1e43      	subs	r3, r0, #1
 800544e:	42a1      	cmp	r1, r4
 8005450:	d008      	beq.n	8005464 <memmove+0x28>
 8005452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005456:	f803 2f01 	strb.w	r2, [r3, #1]!
 800545a:	e7f8      	b.n	800544e <memmove+0x12>
 800545c:	4402      	add	r2, r0
 800545e:	4601      	mov	r1, r0
 8005460:	428a      	cmp	r2, r1
 8005462:	d100      	bne.n	8005466 <memmove+0x2a>
 8005464:	bd10      	pop	{r4, pc}
 8005466:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800546a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800546e:	e7f7      	b.n	8005460 <memmove+0x24>

08005470 <_free_r>:
 8005470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005472:	2900      	cmp	r1, #0
 8005474:	d044      	beq.n	8005500 <_free_r+0x90>
 8005476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800547a:	9001      	str	r0, [sp, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	f1a1 0404 	sub.w	r4, r1, #4
 8005482:	bfb8      	it	lt
 8005484:	18e4      	addlt	r4, r4, r3
 8005486:	f000 f913 	bl	80056b0 <__malloc_lock>
 800548a:	4a1e      	ldr	r2, [pc, #120]	; (8005504 <_free_r+0x94>)
 800548c:	9801      	ldr	r0, [sp, #4]
 800548e:	6813      	ldr	r3, [r2, #0]
 8005490:	b933      	cbnz	r3, 80054a0 <_free_r+0x30>
 8005492:	6063      	str	r3, [r4, #4]
 8005494:	6014      	str	r4, [r2, #0]
 8005496:	b003      	add	sp, #12
 8005498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800549c:	f000 b90e 	b.w	80056bc <__malloc_unlock>
 80054a0:	42a3      	cmp	r3, r4
 80054a2:	d908      	bls.n	80054b6 <_free_r+0x46>
 80054a4:	6825      	ldr	r5, [r4, #0]
 80054a6:	1961      	adds	r1, r4, r5
 80054a8:	428b      	cmp	r3, r1
 80054aa:	bf01      	itttt	eq
 80054ac:	6819      	ldreq	r1, [r3, #0]
 80054ae:	685b      	ldreq	r3, [r3, #4]
 80054b0:	1949      	addeq	r1, r1, r5
 80054b2:	6021      	streq	r1, [r4, #0]
 80054b4:	e7ed      	b.n	8005492 <_free_r+0x22>
 80054b6:	461a      	mov	r2, r3
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	b10b      	cbz	r3, 80054c0 <_free_r+0x50>
 80054bc:	42a3      	cmp	r3, r4
 80054be:	d9fa      	bls.n	80054b6 <_free_r+0x46>
 80054c0:	6811      	ldr	r1, [r2, #0]
 80054c2:	1855      	adds	r5, r2, r1
 80054c4:	42a5      	cmp	r5, r4
 80054c6:	d10b      	bne.n	80054e0 <_free_r+0x70>
 80054c8:	6824      	ldr	r4, [r4, #0]
 80054ca:	4421      	add	r1, r4
 80054cc:	1854      	adds	r4, r2, r1
 80054ce:	42a3      	cmp	r3, r4
 80054d0:	6011      	str	r1, [r2, #0]
 80054d2:	d1e0      	bne.n	8005496 <_free_r+0x26>
 80054d4:	681c      	ldr	r4, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	6053      	str	r3, [r2, #4]
 80054da:	4421      	add	r1, r4
 80054dc:	6011      	str	r1, [r2, #0]
 80054de:	e7da      	b.n	8005496 <_free_r+0x26>
 80054e0:	d902      	bls.n	80054e8 <_free_r+0x78>
 80054e2:	230c      	movs	r3, #12
 80054e4:	6003      	str	r3, [r0, #0]
 80054e6:	e7d6      	b.n	8005496 <_free_r+0x26>
 80054e8:	6825      	ldr	r5, [r4, #0]
 80054ea:	1961      	adds	r1, r4, r5
 80054ec:	428b      	cmp	r3, r1
 80054ee:	bf04      	itt	eq
 80054f0:	6819      	ldreq	r1, [r3, #0]
 80054f2:	685b      	ldreq	r3, [r3, #4]
 80054f4:	6063      	str	r3, [r4, #4]
 80054f6:	bf04      	itt	eq
 80054f8:	1949      	addeq	r1, r1, r5
 80054fa:	6021      	streq	r1, [r4, #0]
 80054fc:	6054      	str	r4, [r2, #4]
 80054fe:	e7ca      	b.n	8005496 <_free_r+0x26>
 8005500:	b003      	add	sp, #12
 8005502:	bd30      	pop	{r4, r5, pc}
 8005504:	20000250 	.word	0x20000250

08005508 <sbrk_aligned>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	4e0e      	ldr	r6, [pc, #56]	; (8005544 <sbrk_aligned+0x3c>)
 800550c:	460c      	mov	r4, r1
 800550e:	6831      	ldr	r1, [r6, #0]
 8005510:	4605      	mov	r5, r0
 8005512:	b911      	cbnz	r1, 800551a <sbrk_aligned+0x12>
 8005514:	f000 f8bc 	bl	8005690 <_sbrk_r>
 8005518:	6030      	str	r0, [r6, #0]
 800551a:	4621      	mov	r1, r4
 800551c:	4628      	mov	r0, r5
 800551e:	f000 f8b7 	bl	8005690 <_sbrk_r>
 8005522:	1c43      	adds	r3, r0, #1
 8005524:	d00a      	beq.n	800553c <sbrk_aligned+0x34>
 8005526:	1cc4      	adds	r4, r0, #3
 8005528:	f024 0403 	bic.w	r4, r4, #3
 800552c:	42a0      	cmp	r0, r4
 800552e:	d007      	beq.n	8005540 <sbrk_aligned+0x38>
 8005530:	1a21      	subs	r1, r4, r0
 8005532:	4628      	mov	r0, r5
 8005534:	f000 f8ac 	bl	8005690 <_sbrk_r>
 8005538:	3001      	adds	r0, #1
 800553a:	d101      	bne.n	8005540 <sbrk_aligned+0x38>
 800553c:	f04f 34ff 	mov.w	r4, #4294967295
 8005540:	4620      	mov	r0, r4
 8005542:	bd70      	pop	{r4, r5, r6, pc}
 8005544:	20000254 	.word	0x20000254

08005548 <_malloc_r>:
 8005548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800554c:	1ccd      	adds	r5, r1, #3
 800554e:	f025 0503 	bic.w	r5, r5, #3
 8005552:	3508      	adds	r5, #8
 8005554:	2d0c      	cmp	r5, #12
 8005556:	bf38      	it	cc
 8005558:	250c      	movcc	r5, #12
 800555a:	2d00      	cmp	r5, #0
 800555c:	4607      	mov	r7, r0
 800555e:	db01      	blt.n	8005564 <_malloc_r+0x1c>
 8005560:	42a9      	cmp	r1, r5
 8005562:	d905      	bls.n	8005570 <_malloc_r+0x28>
 8005564:	230c      	movs	r3, #12
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	2600      	movs	r6, #0
 800556a:	4630      	mov	r0, r6
 800556c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005570:	4e2e      	ldr	r6, [pc, #184]	; (800562c <_malloc_r+0xe4>)
 8005572:	f000 f89d 	bl	80056b0 <__malloc_lock>
 8005576:	6833      	ldr	r3, [r6, #0]
 8005578:	461c      	mov	r4, r3
 800557a:	bb34      	cbnz	r4, 80055ca <_malloc_r+0x82>
 800557c:	4629      	mov	r1, r5
 800557e:	4638      	mov	r0, r7
 8005580:	f7ff ffc2 	bl	8005508 <sbrk_aligned>
 8005584:	1c43      	adds	r3, r0, #1
 8005586:	4604      	mov	r4, r0
 8005588:	d14d      	bne.n	8005626 <_malloc_r+0xde>
 800558a:	6834      	ldr	r4, [r6, #0]
 800558c:	4626      	mov	r6, r4
 800558e:	2e00      	cmp	r6, #0
 8005590:	d140      	bne.n	8005614 <_malloc_r+0xcc>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	4631      	mov	r1, r6
 8005596:	4638      	mov	r0, r7
 8005598:	eb04 0803 	add.w	r8, r4, r3
 800559c:	f000 f878 	bl	8005690 <_sbrk_r>
 80055a0:	4580      	cmp	r8, r0
 80055a2:	d13a      	bne.n	800561a <_malloc_r+0xd2>
 80055a4:	6821      	ldr	r1, [r4, #0]
 80055a6:	3503      	adds	r5, #3
 80055a8:	1a6d      	subs	r5, r5, r1
 80055aa:	f025 0503 	bic.w	r5, r5, #3
 80055ae:	3508      	adds	r5, #8
 80055b0:	2d0c      	cmp	r5, #12
 80055b2:	bf38      	it	cc
 80055b4:	250c      	movcc	r5, #12
 80055b6:	4629      	mov	r1, r5
 80055b8:	4638      	mov	r0, r7
 80055ba:	f7ff ffa5 	bl	8005508 <sbrk_aligned>
 80055be:	3001      	adds	r0, #1
 80055c0:	d02b      	beq.n	800561a <_malloc_r+0xd2>
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	442b      	add	r3, r5
 80055c6:	6023      	str	r3, [r4, #0]
 80055c8:	e00e      	b.n	80055e8 <_malloc_r+0xa0>
 80055ca:	6822      	ldr	r2, [r4, #0]
 80055cc:	1b52      	subs	r2, r2, r5
 80055ce:	d41e      	bmi.n	800560e <_malloc_r+0xc6>
 80055d0:	2a0b      	cmp	r2, #11
 80055d2:	d916      	bls.n	8005602 <_malloc_r+0xba>
 80055d4:	1961      	adds	r1, r4, r5
 80055d6:	42a3      	cmp	r3, r4
 80055d8:	6025      	str	r5, [r4, #0]
 80055da:	bf18      	it	ne
 80055dc:	6059      	strne	r1, [r3, #4]
 80055de:	6863      	ldr	r3, [r4, #4]
 80055e0:	bf08      	it	eq
 80055e2:	6031      	streq	r1, [r6, #0]
 80055e4:	5162      	str	r2, [r4, r5]
 80055e6:	604b      	str	r3, [r1, #4]
 80055e8:	4638      	mov	r0, r7
 80055ea:	f104 060b 	add.w	r6, r4, #11
 80055ee:	f000 f865 	bl	80056bc <__malloc_unlock>
 80055f2:	f026 0607 	bic.w	r6, r6, #7
 80055f6:	1d23      	adds	r3, r4, #4
 80055f8:	1af2      	subs	r2, r6, r3
 80055fa:	d0b6      	beq.n	800556a <_malloc_r+0x22>
 80055fc:	1b9b      	subs	r3, r3, r6
 80055fe:	50a3      	str	r3, [r4, r2]
 8005600:	e7b3      	b.n	800556a <_malloc_r+0x22>
 8005602:	6862      	ldr	r2, [r4, #4]
 8005604:	42a3      	cmp	r3, r4
 8005606:	bf0c      	ite	eq
 8005608:	6032      	streq	r2, [r6, #0]
 800560a:	605a      	strne	r2, [r3, #4]
 800560c:	e7ec      	b.n	80055e8 <_malloc_r+0xa0>
 800560e:	4623      	mov	r3, r4
 8005610:	6864      	ldr	r4, [r4, #4]
 8005612:	e7b2      	b.n	800557a <_malloc_r+0x32>
 8005614:	4634      	mov	r4, r6
 8005616:	6876      	ldr	r6, [r6, #4]
 8005618:	e7b9      	b.n	800558e <_malloc_r+0x46>
 800561a:	230c      	movs	r3, #12
 800561c:	603b      	str	r3, [r7, #0]
 800561e:	4638      	mov	r0, r7
 8005620:	f000 f84c 	bl	80056bc <__malloc_unlock>
 8005624:	e7a1      	b.n	800556a <_malloc_r+0x22>
 8005626:	6025      	str	r5, [r4, #0]
 8005628:	e7de      	b.n	80055e8 <_malloc_r+0xa0>
 800562a:	bf00      	nop
 800562c:	20000250 	.word	0x20000250

08005630 <_realloc_r>:
 8005630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005634:	4680      	mov	r8, r0
 8005636:	4614      	mov	r4, r2
 8005638:	460e      	mov	r6, r1
 800563a:	b921      	cbnz	r1, 8005646 <_realloc_r+0x16>
 800563c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005640:	4611      	mov	r1, r2
 8005642:	f7ff bf81 	b.w	8005548 <_malloc_r>
 8005646:	b92a      	cbnz	r2, 8005654 <_realloc_r+0x24>
 8005648:	f7ff ff12 	bl	8005470 <_free_r>
 800564c:	4625      	mov	r5, r4
 800564e:	4628      	mov	r0, r5
 8005650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005654:	f000 f838 	bl	80056c8 <_malloc_usable_size_r>
 8005658:	4284      	cmp	r4, r0
 800565a:	4607      	mov	r7, r0
 800565c:	d802      	bhi.n	8005664 <_realloc_r+0x34>
 800565e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005662:	d812      	bhi.n	800568a <_realloc_r+0x5a>
 8005664:	4621      	mov	r1, r4
 8005666:	4640      	mov	r0, r8
 8005668:	f7ff ff6e 	bl	8005548 <_malloc_r>
 800566c:	4605      	mov	r5, r0
 800566e:	2800      	cmp	r0, #0
 8005670:	d0ed      	beq.n	800564e <_realloc_r+0x1e>
 8005672:	42bc      	cmp	r4, r7
 8005674:	4622      	mov	r2, r4
 8005676:	4631      	mov	r1, r6
 8005678:	bf28      	it	cs
 800567a:	463a      	movcs	r2, r7
 800567c:	f7ff fed0 	bl	8005420 <memcpy>
 8005680:	4631      	mov	r1, r6
 8005682:	4640      	mov	r0, r8
 8005684:	f7ff fef4 	bl	8005470 <_free_r>
 8005688:	e7e1      	b.n	800564e <_realloc_r+0x1e>
 800568a:	4635      	mov	r5, r6
 800568c:	e7df      	b.n	800564e <_realloc_r+0x1e>
	...

08005690 <_sbrk_r>:
 8005690:	b538      	push	{r3, r4, r5, lr}
 8005692:	4d06      	ldr	r5, [pc, #24]	; (80056ac <_sbrk_r+0x1c>)
 8005694:	2300      	movs	r3, #0
 8005696:	4604      	mov	r4, r0
 8005698:	4608      	mov	r0, r1
 800569a:	602b      	str	r3, [r5, #0]
 800569c:	f7fc fda2 	bl	80021e4 <_sbrk>
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	d102      	bne.n	80056aa <_sbrk_r+0x1a>
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	b103      	cbz	r3, 80056aa <_sbrk_r+0x1a>
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
 80056ac:	20000258 	.word	0x20000258

080056b0 <__malloc_lock>:
 80056b0:	4801      	ldr	r0, [pc, #4]	; (80056b8 <__malloc_lock+0x8>)
 80056b2:	f000 b811 	b.w	80056d8 <__retarget_lock_acquire_recursive>
 80056b6:	bf00      	nop
 80056b8:	2000025c 	.word	0x2000025c

080056bc <__malloc_unlock>:
 80056bc:	4801      	ldr	r0, [pc, #4]	; (80056c4 <__malloc_unlock+0x8>)
 80056be:	f000 b80c 	b.w	80056da <__retarget_lock_release_recursive>
 80056c2:	bf00      	nop
 80056c4:	2000025c 	.word	0x2000025c

080056c8 <_malloc_usable_size_r>:
 80056c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056cc:	1f18      	subs	r0, r3, #4
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	bfbc      	itt	lt
 80056d2:	580b      	ldrlt	r3, [r1, r0]
 80056d4:	18c0      	addlt	r0, r0, r3
 80056d6:	4770      	bx	lr

080056d8 <__retarget_lock_acquire_recursive>:
 80056d8:	4770      	bx	lr

080056da <__retarget_lock_release_recursive>:
 80056da:	4770      	bx	lr

080056dc <_init>:
 80056dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056de:	bf00      	nop
 80056e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e2:	bc08      	pop	{r3}
 80056e4:	469e      	mov	lr, r3
 80056e6:	4770      	bx	lr

080056e8 <_fini>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	bf00      	nop
 80056ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ee:	bc08      	pop	{r3}
 80056f0:	469e      	mov	lr, r3
 80056f2:	4770      	bx	lr
